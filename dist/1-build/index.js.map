{"version":3,"file":"index.js","sources":["../../app/groundTexture.svg","../../app/math.ts","../../app/camera.ts","../../app/geometry/geometry.ts","../../app/csm.ts","../../app/game/scene.ts","../../app/gl.ts","../../app/music/song.ts","../../app/music/music-player.ts","../../app/music/audio-context.ts","../../app/page.ts","../../app/game/world-state.ts","../../app/game/triangle-buffers.ts","../../app/geometry/csg.ts","../../app/game/player-position.ts","../../app/game/objects.ts","../../app/game/level.ts","../../app/game/render-models.ts","../../app/main-loop.ts","../../app/utils/keycodes.ts","../../app/shaders/main-vertex.vert","../../app/shaders/main-fragment.frag","../../app/shaders/sky-fragment.frag","../../app/shaders/csm-vertex.vert","../../app/shaders/void-fragment.frag","../../app/shaders/sky-vertex.vert","../../app/shaders/collider-fragment.frag","../../app/index.ts"],"sourcesContent":["export default \"__VITE_ASSET__b9f78ae4__\"","/** Amount to be multiplied to an angle in degrees to obtain an angle in radians, approximately 0.017453292519943295 */\nexport const DEG_TO_RAD = Math.PI / 180;\n\n/** The identity matrix */\nexport const identity: DOMMatrixReadOnly = /* @__PURE__ */ new DOMMatrix();\n\nexport const min = /* @__PURE__ */ (a: number, b: number) => (a < b ? a : b);\n\nexport const max = /* @__PURE__ */ (a: number, b: number) => (a > b ? a : b);\n\nexport const abs = /* @__PURE__ */ (n: number) => (n < 0 ? -n : n);\n\nexport const clamp01 = /* @__PURE__ */ (t: number) => (t < 0 ? 0 : t > 1 ? 1 : t);\n\n/** Linear interpolation */\nexport const lerp = /* @__PURE__ */ (from: number, to: number, t: number) => from + (to - from) * clamp01(t);\n\nexport const lerpneg = /* @__PURE__ */ (v: number, t: number) => {\n  v = clamp01(v);\n  return lerp(v, 1 - v, t);\n};\n\n/**\n * Trigonometry - Wrap an angle so it is always between -PI and PI\n * @param radians The angle in radians to wrap between -PI and PI\n * @returns The angle in radians wrapped so it is always between -PI and PI\n */\nexport const angle_wrap_radians = /* @__PURE__ */ (radians: number): number =>\n  Math.atan2(Math.sin(radians), Math.cos(radians));\n\nexport const angle_wrap_degrees = /* @__PURE__ */ (degrees: number): number =>\n  angle_wrap_radians(degrees * DEG_TO_RAD) / DEG_TO_RAD;\n\nexport const angle_lerp = /* @__PURE__ */ (a0: number, a1: number, t: number) => {\n  const da = (a1 - a0) % (Math.PI * 2);\n  return a0 + (((2 * da) % (Math.PI * 2)) - da) * clamp01(t);\n};\n\nexport const angle_lerp_degrees = /* @__PURE__ */ (a0: number, a1: number, t: number) =>\n  angle_lerp(a0 * DEG_TO_RAD, a1 * DEG_TO_RAD, t) / DEG_TO_RAD;\n\nexport const interpolate_with_hysteresis = /* @__PURE__ */ (\n  previous: number,\n  desired: number,\n  hysteresis: number,\n  t: number,\n) =>\n  lerp(\n    previous + (desired - previous < 0 ? -1 : 1) * max(0, abs(desired - previous) ** 0.9 - hysteresis) * t * 2,\n    desired,\n    t / 7,\n  );\n\nexport const integers_map = <T>(n: number, fn: (i: number) => T) => Array.from(Array(n), (_, i) => fn(i));\n\nexport const mat_perspectiveXY = /* @__PURE__ */ (mx: number, my: number, near: number, far: number) => [\n  mx,\n  0,\n  0,\n  0,\n  0,\n  my,\n  0,\n  0,\n  0,\n  0,\n  (far + near) / (near - far),\n  -1,\n  0,\n  0,\n  (2 * far * near) / (near - far),\n  0,\n];\n\nexport interface Vec2 {\n  x: number;\n  y: number;\n}\n\nexport interface Vec3 {\n  x: number;\n  y: number;\n  z: number;\n}\n\nexport interface Vec4 {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n}\n\nexport interface Vec3Optional {\n  x?: number | undefined;\n  y?: number | undefined;\n  z?: number | undefined;\n}\n\nexport interface Plane {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n}\n\nexport type Vec2In = Readonly<Vec2>;\n\nexport type Vec3In = Readonly<Vec3>;\n\nexport type Vec4In = Readonly<Vec4>;\n\nexport const sqr = (n: number) => n * n;\n\nexport const vec3_dot = /* @__PURE__ */ ({ x, y, z }: Vec3In, v: Vec3In): number => x * v.x + y * v.y + z * v.z;\n\nexport const vec3_distance = /* @__PURE__ */ ({ x, y, z }: Vec3In, b: Vec3In): number =>\n  Math.hypot(x - b.x, y - b.y, z - b.z) || 0;\n\n/**\n * Computes a polygon plane using the Newell's method.\n * We are not using plane from 3 points algorithm,\n * because this can handle coplanar points and has precision problems.\n */\nexport const plane_fromPolygon = /* @__PURE__ */ (polygon: readonly Vec3In[]): Plane => {\n  // Newell's method\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = polygon.at(-1)!;\n  let b: Vec3In | number;\n  for (b of polygon) {\n    x += (a.y - b.y) * (a.z + b.z);\n    y += (a.z - b.z) * (a.x + b.x);\n    z += (a.x - b.x) * (a.y + b.y);\n    a = b;\n  }\n  b = Math.hypot(x, y, z);\n  x /= b;\n  y /= b;\n  z /= b;\n  return { x, y, z, w: x * a.x + y * a.y + z * a.z };\n};\n\nexport const float32Array16Temp = new Float32Array(16);\n\nexport const matrixToArray = (\n  $matrix: DOMMatrixReadOnly,\n  output: Float32Array | number[] = float32Array16Temp,\n  index: number = 0,\n) => {\n  index *= 16;\n  output[index++] = $matrix.m11;\n  output[index++] = $matrix.m12;\n  output[index++] = $matrix.m13;\n  output[index++] = $matrix.m14;\n  output[index++] = $matrix.m21;\n  output[index++] = $matrix.m22;\n  output[index++] = $matrix.m23;\n  output[index++] = $matrix.m24;\n  output[index++] = $matrix.m31;\n  output[index++] = $matrix.m32;\n  output[index++] = $matrix.m33;\n  output[index++] = $matrix.m34;\n  output[index++] = $matrix.m41;\n  output[index++] = $matrix.m42;\n  output[index++] = $matrix.m43;\n  output[index] = $matrix.m44;\n  return output;\n};\n","import { DEG_TO_RAD, mat_perspectiveXY } from \"./math\";\n\nimport { constDef_zNear, constDef_zFar } from \"./shaders/main-fragment.frag\";\n\nexport const zNear = constDef_zNear;\n\nexport const zFar = constDef_zFar;\n\nexport const fieldOfViewDegrees = 60;\n\nexport const fieldOfViewRadians = /* @__PURE__ */ fieldOfViewDegrees * DEG_TO_RAD; // in radians\n\nconst fieldOfViewAmount = 1 / Math.tan(fieldOfViewRadians / 2);\n\nif (DEBUG) {\n  console.log(\"fieldOfViewAmount:\", fieldOfViewAmount);\n}\n\nexport const camera_position = {\n  x: -11,\n  y: 17,\n  z: -90,\n};\n\nexport const camera_rotation = {\n  x: 0,\n  y: 0,\n  z: 0,\n};\n\nexport const mat_perspective = (near: number, far: number) =>\n  mat_perspectiveXY((hC.clientHeight / hC.clientWidth) * fieldOfViewAmount, fieldOfViewAmount, near, far);\n","import { abs, integers_map, identity, type Vec3, type Vec3Optional } from \"../math\";\n\nexport const material = NO_INLINE(\n  (r: number, g: number, b: number, a: number = 0): number =>\n    ((a * 255) << 24) | ((b * 255) << 16) | ((g * 255) << 8) | (r * 255),\n);\n\nexport interface Polygon<TVec3 = Vec3> extends Array<TVec3> {\n  /** Polygon material */\n  $color?: number | undefined;\n\n  /** Smooth normals? */\n  $smooth?: 0 | 1 | undefined;\n}\n\nexport const polygon_color = (polygon: Polygon, color: number | undefined, smooth?: 0 | 1 | undefined): Polygon => {\n  polygon.$smooth = smooth;\n  polygon.$color = color;\n  return polygon;\n};\n\nexport const vec3_transform = /* @__PURE__ */ ({ x, y, z }: Readonly<Vec3Optional>, m: DOMMatrixReadOnly): Vec3 => {\n  ({ x, y, z } = m.transformPoint({ x, y, z }));\n  return { x, y, z };\n};\n\nexport const polygon_transform = /* @__PURE__ */ (\n  polygon: Polygon<Readonly<Vec3Optional>>,\n  m: DOMMatrixReadOnly,\n  color: number | undefined = polygon.$color,\n): Polygon =>\n  polygon_color(\n    polygon.map((p) => vec3_transform(p, m)),\n    color,\n    polygon.$smooth,\n  );\n\nexport const polygons_transform = /* @__PURE__ */ (\n  polygons: Polygon<Readonly<Vec3Optional>>[],\n  m: DOMMatrixReadOnly,\n  color?: number | undefined,\n) => polygons.map((polygon) => polygon_transform(polygon, m, color));\n\n/**\n * Creates a regular polygon\n * The polygon will face up (normal 0, -1, 0).\n */\nexport const polygon_regular = /* @__PURE__ */ (segments: number, elongate: number = 0): Polygon =>\n  integers_map(segments, (i) => {\n    const z = Math.cos(Math.PI * 2 * (i / segments));\n    return {\n      x: Math.sin(Math.PI * 2 * (i / segments)),\n      y: 0,\n      z: abs(z) < 0.01 ? z : z < 0 ? z - elongate : z + elongate,\n    };\n  });\n\n/**\n * Connects a top and a bottom polygon with side polygons.\n * Top and bottom polygons must have the same length.\n * Top polygon is supposed to be flipped.\n */\nexport const cylinder_sides = /* @__PURE__ */ (btm: Polygon, top: Polygon, smooth?: 0 | 1 | undefined): Polygon[] =>\n  btm.map((btmi, i, { length }) =>\n    polygon_color(\n      [btmi, top[length - i - 1]!, top[length - ((i + 1) % length) - 1]!, btm[(i + 1) % length]!],\n      btm.$color,\n      smooth,\n    ),\n  );\n\n/** Simplest composition of polygon functions. */\nexport const cylinder = /* @__PURE__ */ (\n  segments: number | Vec3Optional[],\n  smooth?: 0 | 1,\n  topSize: number = 0,\n  elongate?: number,\n): Polygon[] => {\n  const points = (segments as Vec3Optional[]).length\n    ? (segments as Vec3Optional[])\n    : polygon_regular(segments as number, elongate);\n  const top = polygon_transform(points, identity.translate(0, 1).scale3d(topSize > 0 ? topSize : 1));\n  const bottom = polygon_transform(points, identity.translate(0, -1).scale3d(topSize < 0 ? -topSize : 1)).reverse();\n  return [...cylinder_sides(bottom as Polygon, top, smooth), top, bottom];\n};\n\nexport const sphere = /* @__PURE__ */ (\n  slices: number,\n  stacks = slices,\n  vertexFunc: (slice: number, stack: number, polygon: Polygon) => Vec3 = (x: number, y: number) => {\n    y *= Math.PI / stacks;\n    x *= (Math.PI * 2) / slices;\n    return { x: Math.cos(x) * Math.sin(y), y: Math.cos(y), z: Math.sin(x) * Math.sin(y) };\n  },\n): Polygon[] => {\n  const polygons: Polygon[] = [];\n  for (let i = 0; i < slices; i++) {\n    for (let j = 0; j < stacks; j++) {\n      const polygon = polygon_color([], 0, 1);\n      polygons.push(polygon);\n      const vertex = (x: number, y: number) => polygon.push(vertexFunc(x, y, polygon));\n      vertex(i, j);\n      if (j) {\n        vertex((i + 1) % slices, j);\n      }\n      if (j < stacks - 1) {\n        vertex((i + 1) % slices, j + (1 % stacks));\n      }\n      vertex(i, j + (1 % stacks));\n    }\n  }\n  return polygons;\n};\n","import { integers_map, max, min, identity } from \"./math\";\nimport { polygon_transform } from \"./geometry/geometry\";\nimport { mat_perspective } from \"./camera\";\n\nconst LIGHT_ROT_X = 298;\nconst LIGHT_ROT_Y = 139;\n\nif (DEBUG) {\n  const lightMatrix = /* @__PURE__ */ identity.rotate(LIGHT_ROT_X, LIGHT_ROT_Y);\n  console.log(\"light direction: \", lightMatrix.m13, lightMatrix.m23, lightMatrix.m33);\n}\n\nexport const csm_buildMatrix = /* @__PURE__ */ (\n  camera_view: DOMMatrixReadOnly,\n  nearPlane: number,\n  farPlane: number,\n  zMultiplier: number,\n) => {\n  const roundingRadius = (farPlane - nearPlane) * 1.1;\n\n  const projViewInverse = new DOMMatrix(mat_perspective(nearPlane, farPlane)).multiplySelf(camera_view).invertSelf();\n\n  let tx = 0;\n  let ty = 0;\n  let tz = 0;\n\n  const frustumCorners = integers_map(8, (i) => {\n    const v = projViewInverse.transformPoint({\n      x: 4 & i ? 1 : -1,\n      y: 2 & i ? 1 : -1,\n      z: 1 & i ? 1 : -1,\n    });\n    // Round to reduce shimmering\n    tx -= v.x = ((roundingRadius * v.x) | 0) / (roundingRadius * v.w);\n    ty -= v.y = ((roundingRadius * v.y) | 0) / (roundingRadius * v.w);\n    tz -= v.z = ((roundingRadius * v.z) | 0) / (roundingRadius * v.w);\n    return v;\n  });\n\n  const lightViewTranslated = identity.rotate(LIGHT_ROT_X, LIGHT_ROT_Y).translateSelf(tx / 8, ty / 8, tz / 8);\n\n  let left = Infinity;\n  let right = -Infinity;\n  let bottom = Infinity;\n  let top = -Infinity;\n  let near = Infinity;\n  let far = -Infinity;\n\n  // Compute the frustum bouding box\n  polygon_transform(frustumCorners, lightViewTranslated).map(({ x, y, z }) => {\n    left = min(left, x);\n    right = max(right, x);\n    bottom = min(bottom, y);\n    top = max(top, y);\n    near = min(near, z);\n    far = max(far, z);\n  });\n\n  near *= near < 0 ? zMultiplier : 1 / zMultiplier;\n  far *= far > 0 ? zMultiplier : 1 / zMultiplier;\n\n  // Build the ortographic matrix, multiply it with the light space view matrix.\n  return identity\n    .scale(2 / (right - left), 2 / (top - bottom), 2 / (near - far))\n    .translateSelf((right + left) / -2, (top + bottom) / -2, (near + far) / 2)\n    .multiplySelf(lightViewTranslated);\n};\n","import { identity, type Vec3Optional } from \"../math\";\nimport { polygons_transform, type Polygon } from \"../geometry/geometry\";\n\nexport const MODEL_KIND_GAME = 1;\n\nexport const MODEL_KIND_GAME_NO_ATTACH_PLAYER = 2;\n\nexport const MODEL_KIND_MESH = 0;\n\nexport type MODEL_KIND = typeof MODEL_KIND_MESH | typeof MODEL_KIND_GAME | typeof MODEL_KIND_GAME_NO_ATTACH_PLAYER;\n\nexport interface Model {\n  $matrix: DOMMatrixReadOnly;\n  $modelId: number;\n  $kind: MODEL_KIND;\n  $polygons: Polygon[] | null;\n  _update?: (model: Model) => DOMMatrixReadOnly;\n  $vertexBegin?: number;\n  $vertexEnd?: number;\n}\n\nexport let currentEditModel: Model;\n\nexport const allModels: Model[] = [];\n\nexport const meshAdd = (\n  polygons: Polygon<Readonly<Vec3Optional>>[],\n  transform: DOMMatrixReadOnly = identity,\n  color?: number | undefined,\n) => currentEditModel.$polygons!.push(...polygons_transform(polygons, transform, color));\n\nexport const newModel = (fn: (model: Model) => void, $kind: MODEL_KIND = MODEL_KIND_GAME) => {\n  const previousModel = currentEditModel;\n  const model: Model = {\n    $matrix: identity,\n    $modelId: allModels.length,\n    $kind,\n    $polygons: [],\n  };\n  allModels.push((currentEditModel = model));\n  fn(model);\n  currentEditModel = previousModel;\n  return model;\n};\n","export const gl = hC.getContext(\"webgl2\", { powerPreference: \"high-performance\" })!;\n\nfor (const s in gl) {\n  (gl as any)[s[0] + [...s].reduce((p, c, i) => (p * i + c.charCodeAt(0)) % 434, 0).toString(36)] = (gl as any)[s];\n}\n\nexport const loadShader = (source: string, type: number = gl.VERTEX_SHADER): WebGLShader => {\n  const shader = gl.createShader(type)!;\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (DEBUG && !gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    throw new Error(\"An error occurred compiling the shaders: \" + gl.getShaderInfoLog(shader));\n  }\n\n  return shader;\n};\n\nexport interface WebglProgramAbstraction {\n  (name: string): WebGLUniformLocation;\n  (): void;\n}\n\nexport const initShaderProgram = (vertexShader: WebGLShader, sfsSource: string): WebglProgramAbstraction => {\n  const uniforms: Record<string, WebGLUniformLocation> = {};\n  const program = gl.createProgram()!;\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, loadShader(sfsSource, gl.FRAGMENT_SHADER));\n  gl.linkProgram(program);\n\n  if (DEBUG && !gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    throw new Error(\"Unable to initialize the shader program: \" + gl.getProgramInfoLog(program));\n  }\n\n  return (name?: string): any =>\n    name ? uniforms[name] || (uniforms[name] = gl.getUniformLocation(program, name)!) : gl.useProgram(program);\n};\n","// This music has been exported by SoundBox and modified manually to minify better.\n\n// Beethoven's Piano Sonata No. 14, 3rd movement, readapted by Ryan Malm for this game\n\nexport const song_patterns = '000001234556112341234556011111111112011111111112000001111112'\n\nexport const song_instruments = [\n  [ // instrument 0\n    69, // OSC1_VOL\n    128, // OSC1_SEMI\n    0, // OSC1_XENV\n    143, // OSC2_VOL\n    128, // OSC2_SEMI\n    0, // OSC2_XENV\n    0, // NOISE_VOL\n    196, // ENV_ATTACK ** 2 * 4\n    100, // ENV_SUSTAIN ** 2 * 4\n    36, // ENV_RELEASE\n    0, // ENV_EXP_DECAY\n    0, // LFO_FREQ\n    149, // FX_FREQ\n    110, // FX_RESONANCE\n    31, // FX_DRIVE\n    47, // FX_PAN_AMT\n    3, // FX_PAN_FREQ\n    56, // FX_DELAY_AMT\n    2, // FX_DELAY_TIME\n    0, // LFO_AMT\n    [ // Columns 0\n      \"(.15:15:=5:=A:=AF=AFIFIMRMRUY(Y(((((((((((((((((((((((((((((M(M(((((((((((((((((((((((((((((R(R(((((((((((((((((((((((((((((U(U\",\n      \"(059<59<A9<AE<AEHAEHMEHMQMQTY(Y\",\n      \"(5:>A:>AF>AFJAFJMFJMRJMRVMRVY(Y\",\n      \"(:?BFFKNRRWZ^(^((:=@FFILRRUX^(^\",\n      \"Q(M(M(O(Q(R(T(Q(T(R(W(U(T(R(Q(N(W((Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(X]\",\n      \"QN(M(N(M(N(M(N(M((((((((((((((((W(Y(Y(Y(Y(Y(Y(Y(Y(((((((((((((((]\",\n    ]\n  ],\n  [ // Instrument 1\n    100, // OSC1_VOL\n    128, // OSC1_SEMI\n    0, // OSC1_XENV\n    201, // OSC2_VOL\n    128, // OSC2_SEMI\n    0, // OSC2_XENV\n    0, // NOISE_VOL\n    100, // ENV_ATTACK ** 2 * 4\n    144, // ENV_SUSTAIN ** 2 * 4\n    35, // ENV_RELEASE\n    0, // ENV_EXP_DECAY\n    6, // LFO_FREQ\n    135, // FX_FREQ\n    0, // FX_RESONANCE\n    32, // FX_DRIVE\n    147, // FX_PAN_AMT\n    6, // FX_PAN_FREQ\n    0, // FX_DELAY_AMT\n    6, // FX_DELAY_TIME\n    195, // LFO_AMT\n    [ // Columns 1\n      \".(5(.(5(.(5(.(5(.(5(.(5(.(5(.(5\",\n      \"-(5(-(5(-(5(-(5(-(5(-(5(-(5(-(5\",\n      \",(5(,(5(,(5(,(5(,(5(,(5(,(5(,(5\",\n      \"*(6(*(6(*(6(*(6(*(6(*(6(*(6(*(6\",\n      \"5(E(E(F(H(I(K(H(K(I(N(M(K(I(H(F(A(((((((((((((((((((((((((((((((5(((5(((5(((5(((5(((5(((5(((5\",\n      \"5(6(5(6(5(6(5(6(5((()(((((((((((A(B(A(B(A(B(A(B(A(((5\",\n    ]\n  ],\n  [ // Instrument 2\n    255, // OSC1_VOL\n    116, // OSC1_SEMI\n    85, // OSC1_XENV\n    255, // OSC2_VOL\n    116, // OSC2_SEMI\n    37, // OSC2_XENV\n    14, // NOISE_VOL\n    64, // ENV_ATTACK ** 2 * 4\n    144, // ENV_SUSTAIN ** 2 * 4\n    73, // ENV_RELEASE\n    99, // ENV_EXP_DECAY\n    0, // LFO_FREQ\n    136, // FX_FREQ\n    15, // FX_RESONANCE\n    32, // FX_DRIVE\n    0, // FX_PAN_AMT\n    0, // FX_PAN_FREQ\n    66, // FX_DELAY_AMT\n    6, // FX_DELAY_TIME\n    0, // LFO_AMT\n    [ // Columns 2\n      \"9(((9(((9(((9(((9(((9(((9(((9\",\n      \"9(((Q(((Q(((Q\",\n    ]\n  ],\n  [ // Instrument 3\n    0, // OSC1_VOL\n    140, // OSC1_SEMI\n    0, // OSC1_XENV\n    0, // OSC2_VOL\n    140, // OSC2_SEMI\n    0, // OSC2_XENV\n    81, // NOISE_VOL\n    64, // ENV_ATTACK ** 2 * 4\n    400, // ENV_SUSTAIN ** 2 * 4\n    47, // ENV_RELEASE\n    55, // ENV_EXP_DECAY\n    5, // LFO_FREQ\n    239, // FX_FREQ\n    135, // FX_RESONANCE\n    13, // FX_DRIVE\n    176, // FX_PAN_AMT\n    5, // FX_PAN_FREQ\n    16, // FX_DELAY_AMT\n    4, // FX_DELAY_TIME\n    187, // LFO_AMT\n    [ // Columns 3\n      \"9(9(9(9(9(9(9(999(9(9(9(999(9(9\",\n      \"9(9(9(9(9(999(9(((((Q\",\n    ]\n  ],\n  [ // Instrument 4\n    221, // OSC1_VOL\n    128, // OSC1_SEMI\n    64, // OSC1_XENV\n    210, // OSC2_VOL\n    128, // OSC2_SEMI\n    64, // OSC2_XENV\n    255, // NOISE_VOL\n    64, // ENV_ATTACK ** 2 * 4\n    144, // ENV_SUSTAIN ** 2 * 4\n    73, // ENV_RELEASE\n    79, // ENV_EXP_DECAY\n    7, // LFO_FREQ\n    195, // FX_FREQ\n    15, // FX_RESONANCE\n    21, // FX_DRIVE\n    20, // FX_PAN_AMT\n    0, // FX_PAN_FREQ\n    9, // FX_DELAY_AMT\n    3, // FX_DELAY_TIME\n    64, // LFO_AMT\n    [ // Columns 4\n      \"((((Q(((((((Q(((((((Q(((((((Q\",\n      \"Q((Q((Q((Q((Q((Q((((Q\",\n    ]\n  ],\n] as const\n\nexport const song_rowLen0 = 5513\n\nexport const song_rowLen1 = 4562\n\nexport const song_rowLen2 = 3891\n\n// Rows per pattern\nexport const song_patternLen = 32\n\n// End pattern\nexport const song_endPattern = 11\n\n// Number of channels\nexport const song_numChannels = 5\n\nexport const getSegmentNumWords = (song_rowLen: number) => song_rowLen * song_patternLen * (song_endPattern + 1) * 2;\n\nexport const song_numWords =\n  getSegmentNumWords(song_rowLen0) + getSegmentNumWords(song_rowLen1) + getSegmentNumWords(song_rowLen2);\n","/* -*- mode: javascript; tab-width: 4; indent-tabs-mode: nil; -*-\n *\n * Copyright (c) 2011-2013 Marcus Geelnard\n *\n * This software is provided 'as-is', without any express or implied\n * warranty. In no event will the authors be held liable for any damages\n * arising from the use of this software.\n *\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n *\n * 1. The origin of this software must not be misrepresented; you must not\n *    claim that you wrote the original software. If you use this software\n *    in a product, an acknowledgment in the product documentation would be\n *    appreciated but is not required.\n *\n * 2. Altered source versions must be plainly marked as such, and must not be\n *    misrepresented as being the original software.\n *\n * 3. This notice may not be removed or altered from any source\n *    distribution.\n *\n */\n\n// WARNING: Source code of the original player was heavily manually modified to reduce bundle size.\n// This player plays only the game song and is modified.\n// This makes this version not compatible with default soundbox songs.\n\nimport {\n  song_endPattern,\n  song_patternLen,\n  song_patterns,\n  song_instruments,\n  song_numWords,\n  getSegmentNumWords,\n  song_rowLen0,\n  song_rowLen1,\n  song_rowLen2,\n} from \"./song\";\n\nconst getnotefreq = (n: number) => 0.003959503758 * 2 ** ((n - 256) / 12);\n\n/** oscillator 0 */\nconst osc_sin = (value: number) => Math.sin(value * Math.PI * 2);\n\n/** oscillator 1 */\nconst osc_square = (value: number) => (value % 1 < 0.5 ? 1 : -1);\n\n/** oscillator 2 */\nconst osc_saw = (value: number) => 2 * (value % 1) - 1;\n\n/** oscillator 3 */\nconst osc_tri = (value: number) => {\n  const v2 = (value % 1) * 4;\n  return v2 < 2 ? v2 - 1 : 3 - v2;\n};\n\n// Work buffer\nexport const soundbox_mixbuffer = new Int32Array(song_numWords);\n\n/**\n * Generate audio data for a single track/channel.\n * Have to be repeated from 0 to song_numChannels-1\n * @returns\n */\nexport const soundbox_generate = (channelIndex: number) => {\n  let mixIndex = 0;\n  let [\n    OSC1_VOL,\n    OSC1_SEMI,\n    OSC1_XENV,\n    OSC2_VOL,\n    OSC2_SEMI,\n    OSC2_XENV,\n    NOISE_VOL,\n    ENV_ATTACK,\n    ENV_SUSTAIN,\n    ENV_RELEASE,\n    ENV_EXP_DECAY,\n    LFO_FREQ,\n    FX_FREQ,\n    FX_RESONANCE,\n    FX_DRIVE,\n    FX_PAN_AMT,\n    FX_PAN_FREQ,\n    FX_DELAY_AMT,\n    FX_DELAY_TIME,\n    LFO_AMT,\n    COLUMNS,\n  ] = song_instruments[channelIndex]!;\n\n  ENV_RELEASE = (ENV_RELEASE * ENV_RELEASE * 4) as any;\n\n  for (const song_rowLen of [song_rowLen0, song_rowLen1, song_rowLen2]) {\n    // Local variables\n    let n;\n    let t;\n    let f;\n\n    const chnBuf = new Int32Array(getSegmentNumWords(song_rowLen));\n\n    // Clear effect state\n    let low = 0;\n    let band = 0;\n    let high;\n    let filterActive: boolean | undefined;\n\n    // Clear note cache.\n    const noteCache = [];\n\n    // Put performance critical instrument properties in local variables\n    const lfoFreq = 2 ** (LFO_FREQ - 9) / song_rowLen;\n    const panFreq = (Math.PI * 2 ** (FX_PAN_FREQ - 8)) / song_rowLen;\n    const dly = (FX_DELAY_TIME * song_rowLen) & ~1; // Must be an even number\n\n    const createNote = (note: number) => {\n      const OSC1_WAVEFORM = channelIndex < 2 ? osc_saw : osc_sin; // mOscillators[0|2]\n      const OSC2_WAVEFORM = channelIndex < 2 ? (channelIndex < 1 ? osc_square : osc_tri) : osc_sin;\n\n      const noteBuf = new Int32Array(ENV_ATTACK + ENV_SUSTAIN + ENV_RELEASE);\n\n      // Re-trig oscillators\n      let c1 = 0;\n      let c2 = 0;\n\n      // Local variables.\n      let o1t: number;\n      let o2t: number;\n\n      // Generate one note (attack + sustain + release)\n      for (let j1 = 0, j2 = 0; j1 < ENV_ATTACK + ENV_SUSTAIN + ENV_RELEASE; ++j1, ++j2) {\n        let e = 1;\n        // Envelope\n        if (j1 < ENV_ATTACK) {\n          e = j1 / ENV_ATTACK;\n        } else if (j1 >= ENV_ATTACK + ENV_SUSTAIN) {\n          e = (j1 - ENV_ATTACK - ENV_SUSTAIN) / ENV_RELEASE;\n          e = (1 - e) * 3 ** ((-ENV_EXP_DECAY / 16) * e);\n        }\n\n        if (j2 >= 0) {\n          // Switch arpeggio note.\n          j2 -= song_rowLen * 4;\n\n          // Calculate note frequencies for the oscillators\n          o1t = getnotefreq(note + OSC1_SEMI);\n          o2t = getnotefreq(note + OSC2_SEMI) * (1 + (channelIndex ? 0 : 0.0008 * 9));\n        }\n\n        // Add to (mono) channel buffer\n        noteBuf[j1] =\n          (80 * // Oscillator 1\n            (OSC1_WAVEFORM((c1 += o1t! * e ** (OSC1_XENV / 32))) * OSC1_VOL +\n              // Oscillator 2\n              OSC2_WAVEFORM((c2 += o2t! * e ** (OSC2_XENV / 32))) * OSC2_VOL +\n              // Noise oscillator\n              (NOISE_VOL ? (Math.random() * 2 - 1) * NOISE_VOL : 0)) *\n            e) |\n          0;\n      }\n      return noteBuf;\n    };\n\n    // Patterns\n    for (let p = 0; p <= song_endPattern; ++p) {\n      // Pattern rows\n      for (let row = 0, cp = +song_patterns[channelIndex * 12 + p]!; row < song_patternLen; ++row) {\n        // Calculate start sample number for this row in the pattern\n        const rowStartSample = (p * song_patternLen + row) * song_rowLen;\n\n        // Generate notes for this pattern row\n        for (let col = 0; col < 4; ++col) {\n          n = 0;\n          if (cp) {\n            n = COLUMNS[cp - 1]!.charCodeAt(row + col * song_patternLen) - 40;\n            n += n > 0 ? 106 : 0;\n          }\n          if (n) {\n            const noteBuf = noteCache[n] || (noteCache[n] = createNote(n));\n            for (let j = 0, i = rowStartSample * 2; j < noteBuf.length; ++j, i += 2) {\n              chnBuf[i] += noteBuf[j]!;\n            }\n          }\n        }\n\n        // Perform effects for this pattern row\n        for (let j = 0, rsample; j < song_rowLen; ++j) {\n          // Dry mono-sample\n          let k = (rowStartSample + j) * 2;\n          let lsample = 0;\n          rsample = chnBuf[k]!;\n\n          // We only do effects if we have some sound input\n          if (rsample || filterActive) {\n            // State variable filter\n            f = FX_FREQ * ((43.23529 * 3.141592) / 44100);\n            if (channelIndex === 1 || channelIndex === 4) {\n              f *= (osc_sin(lfoFreq * k) * LFO_AMT) / 512 + 0.5;\n            }\n            f = 1.5 * Math.sin(f);\n            low += f * band;\n            high = (1 - FX_RESONANCE / 255) * (rsample - band) - low;\n            band += f * high;\n            rsample = channelIndex === 4 ? band : channelIndex === 3 ? high : low;\n\n            // Distortion\n            if (!channelIndex) {\n              rsample *= 22 * 1e-5;\n              rsample = rsample < 1 ? (rsample > -1 ? osc_sin(rsample / 4) : -1) : 1;\n              rsample /= 22 * 1e-5;\n            }\n\n            // Drive\n            rsample *= FX_DRIVE / 32;\n\n            // Is the filter active (i.e. still audiable)?\n            filterActive = rsample * rsample > 1e-5;\n\n            // Panning\n            t = (Math.sin(panFreq * k) * FX_PAN_AMT) / 512 + 0.5;\n            lsample = rsample * (1 - t);\n            rsample *= t;\n          }\n\n          // Delay is always done, since it does not need sound input\n          if (k >= dly) {\n            // Left channel = left + right[-p] * t\n            lsample += (chnBuf[k - dly + 1]! * FX_DELAY_AMT) / 255;\n\n            // Right channel = right + left[-p] * t\n            rsample += (chnBuf[k - dly]! * FX_DELAY_AMT) / 255;\n          }\n\n          soundbox_mixbuffer[mixIndex + k] += chnBuf[k] = lsample;\n          ++k;\n          soundbox_mixbuffer[mixIndex + k] += chnBuf[k] = rsample;\n        }\n      }\n    }\n\n    mixIndex += chnBuf.length;\n  }\n};\n","import { soundbox_mixbuffer } from \"./music-player\";\nimport { song_numWords } from \"./song\";\n\nexport const audioContext = new AudioContext();\n\nexport const songAudioSource = audioContext.createBufferSource();\n\nexport const loadSong = () => {\n  // set the buffer in the AudioBufferSourceNode\n  // Create a new AudioBuffer\n  const buffer = audioContext.createBuffer(2, song_numWords / 2, 44100);\n\n  for (let i = 0; i < 2; i++) {\n    for (let j = i, data = buffer.getChannelData(i); j < song_numWords; j += 2) {\n      data[j >> 1] = soundbox_mixbuffer[j]! / 65536;\n    }\n  }\n\n  // Load the buffer into the audio source\n  songAudioSource.buffer = buffer;\n\n  // Loop forever\n  songAudioSource.loop = true;\n};\n","import type { KEY_CODE } from \"./utils/keycodes\";\nimport { camera_rotation } from \"./camera\";\nimport { absoluteTime, LOCAL_STORAGE_SAVED_GAME_KEY } from \"./game/world-state\";\nimport { audioContext, songAudioSource } from \"./music/audio-context\";\n\nexport const KEY_LEFT = 0;\n\nexport const KEY_FRONT = 1;\n\nexport const KEY_RIGHT = 2;\n\nexport const KEY_BACK = 3;\n\nexport const KEY_INTERACT = 5;\n\nexport const keyboard_downKeys: (boolean | 0 | 1 | undefined)[] = [];\n\nlet music_on = !DEBUG;\n\nexport let player_first_person: 0 | 1 | undefined;\n\nexport let touch_movementX = 0;\n\nexport let touch_movementY = 0;\n\nexport let mainMenuVisible: boolean | undefined;\n\nconst updateMusicOnState = () => {\n  if (mainMenuVisible || !music_on) {\n    songAudioSource.disconnect();\n  } else {\n    // connect the AudioBufferSourceNode to the  destination so we can hear the sound\n    songAudioSource.connect(audioContext.destination);\n  }\n  b4.innerHTML = \"Music: \" + music_on;\n};\n\nexport const setMainMenuVisible = (value: boolean = false) => {\n  if (mainMenuVisible !== value) {\n    mainMenuVisible = value;\n    player_first_person = 0;\n    try {\n      if (value) {\n        document.exitPointerLock();\n      } else {\n        songAudioSource.start();\n      }\n    } catch {}\n\n    document.body.className = value ? \"l m\" : \"l\";\n    updateMusicOnState();\n  }\n};\n\nexport const initPage = () => {\n  let touchStartTime: number | undefined;\n\n  let touchPosX: number | undefined;\n  let touchPosY: number | undefined;\n  let touchPosIdentifier: number | undefined;\n  let touchPosMoved: number | undefined;\n\n  let touchRotX: number | undefined;\n  let touchRotY: number | undefined;\n  let touchRotIdentifier: number | undefined;\n  let touchRotMoved: number | undefined;\n  let touchStartCameraRotX: number | undefined;\n  let touchStartCameraRotY: number | undefined;\n\n  let pageClicked: undefined | 1;\n\n  const handleResize = () => {\n    hC.width = innerWidth;\n    hC.height = innerHeight;\n    keyboard_downKeys.length = touch_movementX = touch_movementY = 0;\n    touchPosIdentifier = touchRotIdentifier = undefined;\n    if (document.hidden) {\n      setMainMenuVisible(true);\n    }\n  };\n\n  document.onvisibilitychange = onresize = onblur = handleResize;\n\n  // \"Play\" button\n  b1.onclick = () => setMainMenuVisible();\n\n  // \"Play first person\" button\n  b2.onclick = () => {\n    setMainMenuVisible();\n    player_first_person = 1;\n  };\n\n  // \"Restart\" button\n  b3.onclick = () => {\n    // eslint-disable-next-line no-alert\n    if (confirm(\"Restart game?\")) {\n      localStorage[LOCAL_STORAGE_SAVED_GAME_KEY] = \"\";\n      location.reload();\n    }\n  };\n\n  // \"Music\" button\n  b4.onclick = () => {\n    music_on = !music_on;\n    updateMusicOnState();\n  };\n\n  // Menu hamburger button\n  b5.onclick = () => setMainMenuVisible(true);\n\n  onclick = (e) => {\n    pageClicked = 1;\n    if (!mainMenuVisible) {\n      if (e.target === hC) {\n        keyboard_downKeys[KEY_INTERACT] = true;\n      }\n      if (player_first_person) {\n        hC.requestPointerLock();\n      }\n    }\n  };\n\n  onkeyup = onkeydown = ({ code, target, type, repeat }) => {\n    if (!repeat) {\n      const pressed = !!type[5] && target === document.body;\n\n      if (pressed && (code === \"Escape\" || (code === \"Enter\" && mainMenuVisible))) {\n        if (!mainMenuVisible || pageClicked) {\n          setMainMenuVisible(!mainMenuVisible);\n        }\n      } else {\n        const mapped = (\n          {\n            [\"KeyA\"]: KEY_LEFT,\n            [\"ArrowLeft\"]: KEY_LEFT,\n\n            [\"KeyW\"]: KEY_FRONT,\n            [\"ArrowUp\"]: KEY_FRONT,\n\n            [\"KeyD\"]: KEY_RIGHT,\n            [\"ArrowRight\"]: KEY_RIGHT,\n\n            [\"KeyS\"]: KEY_BACK,\n            [\"ArrowDown\"]: KEY_BACK,\n\n            [\"KeyE\"]: KEY_INTERACT,\n            [\"Space\"]: KEY_INTERACT,\n            [\"Enter\"]: KEY_INTERACT,\n          } as Partial<Record<KEY_CODE, number>>\n        )[code as KEY_CODE]!;\n        if (mapped === KEY_INTERACT) {\n          if (pressed) {\n            keyboard_downKeys[mapped] = 1;\n          }\n        } else {\n          keyboard_downKeys[mapped] = pressed;\n        }\n      }\n    }\n  };\n\n  onmousemove = ({ movementX, movementY }) => {\n    if (player_first_person && (movementX || movementY)) {\n      camera_rotation.y += movementX * 0.1;\n      camera_rotation.x += movementY * 0.1;\n    }\n  };\n\n  if (!DEBUG) {\n    oncontextmenu = () => false;\n  }\n\n  hC.ontouchstart = (e) => {\n    if (!mainMenuVisible) {\n      for (const { pageX, pageY, identifier } of e.changedTouches) {\n        if (player_first_person && pageX > hC.clientWidth / 2) {\n          if (touchRotIdentifier === undefined) {\n            touchRotIdentifier = identifier;\n            touchRotX = pageX;\n            touchRotY = pageY;\n            touchRotMoved = 0;\n            touchStartCameraRotX = camera_rotation.y;\n            touchStartCameraRotY = camera_rotation.x;\n          }\n        } else if (touchPosIdentifier === undefined) {\n          touchPosIdentifier = identifier;\n          touchPosX = pageX;\n          touchPosY = pageY;\n          touchPosMoved = 0;\n        }\n      }\n      touchStartTime = absoluteTime;\n    }\n  };\n\n  const TOUCH_SIZE = 20;\n  const TOUCH_MOVE_THRESHOLD = 0.4;\n\n  hC.ontouchmove = ({ changedTouches }) => {\n    if (!mainMenuVisible) {\n      for (const { pageX, pageY, identifier } of changedTouches) {\n        if (touchRotIdentifier === identifier) {\n          camera_rotation.y = touchStartCameraRotX! + (pageX - touchRotX!) / 3;\n          camera_rotation.x = touchStartCameraRotY! + (pageY - touchRotY!) / 3;\n          touchRotMoved = 1;\n        }\n        if (touchPosIdentifier === identifier) {\n          let delta = (touchPosX! - pageX) / TOUCH_SIZE;\n          let sign = delta < 0 ? -1 : 1;\n          let absDelta = sign * delta;\n\n          if (absDelta > TOUCH_MOVE_THRESHOLD) {\n            touchPosMoved = 1;\n            touch_movementX = sign * absDelta ** 1.5;\n            if (absDelta > 1.5) {\n              touchPosX = pageX + TOUCH_SIZE * sign;\n            }\n          }\n\n          delta = (touchPosY! - pageY) / TOUCH_SIZE;\n          sign = delta < 0 ? -1 : 1;\n          absDelta = sign * delta;\n          if (absDelta > TOUCH_MOVE_THRESHOLD) {\n            touchPosMoved = 1;\n            touch_movementY = sign * absDelta ** 1.5;\n            if (absDelta > 1.5) {\n              touchPosY = pageY + TOUCH_SIZE * sign;\n            }\n          }\n        }\n      }\n    }\n  };\n\n  hC.ontouchend = (e) => {\n    e.preventDefault();\n\n    let click: 1 | undefined;\n    for (const touch of e.changedTouches) {\n      if (touch.identifier === touchRotIdentifier) {\n        touchRotIdentifier = undefined;\n        if (!touchRotMoved) {\n          click = 1;\n        }\n        touchRotMoved = 0;\n      } else if (touch.identifier === touchPosIdentifier) {\n        touchPosIdentifier = undefined;\n        touch_movementY = touch_movementX = 0;\n        if (!touchPosMoved) {\n          click = 1;\n        }\n        touchPosMoved = 0;\n      } else {\n        click = 1;\n      }\n    }\n\n    if (click && e.target === hC && touchStartTime) {\n      const diff = absoluteTime - touchStartTime;\n      if (diff > 0.06 && diff < 0.7) {\n        keyboard_downKeys[KEY_INTERACT] = true;\n      }\n    }\n  };\n\n  handleResize();\n  setMainMenuVisible(!DEBUG);\n};\n","import type { Model } from \"./scene\";\nimport { allModels } from \"./scene\";\nimport { lerp, min, angle_wrap_degrees, lerpneg, abs, clamp01 } from \"../math\";\nimport { keyboard_downKeys, KEY_INTERACT, mainMenuVisible } from \"../page\";\n\nexport let absoluteTime = 0;\n\nexport let gameTime = 0;\n\nexport let souls_collected_count = 0;\n\n/** Minimum 15.3 frames per second */\nexport const GAME_TIME_MAX_DELTA_TIME = 0.066;\n\nexport let gameTimeDelta: number = GAME_TIME_MAX_DELTA_TIME;\n\nlet _globalTime: number | undefined;\n\nlet _messageEndTime = 0;\n\nexport const lerpDamp = /* @__PURE__ */ (from: number, to: number, speed: number) =>\n  lerp(from, to, 1 - Math.exp(-speed * gameTimeDelta));\n\nexport const gameTimeUpdate = (time: number) => {\n  const dt = (time - (_globalTime || time)) / 1000;\n  if (mainMenuVisible) {\n    keyboard_downKeys[KEY_INTERACT] = 0;\n    gameTimeDelta = 0;\n  } else {\n    gameTimeDelta = min(GAME_TIME_MAX_DELTA_TIME, dt);\n  }\n  gameTime += gameTimeDelta;\n  absoluteTime += dt;\n  _globalTime = time;\n};\n\n// export const gameTimeUpdate = (time: number) => {\n//   if (mainMenuVisible) {\n//     keyboard_downKeys[KEY_INTERACT] = 0;\n//   }\n//   const delta = (time - (_globalTime || time)) / 1000;\n//   if (delta >= 0.06) {\n//     gameTimeDelta = mainMenuVisible ? 0 : Math.min(GAME_TIME_MAX_DELTA_TIME, (time - (_globalTime || time)) / 1000);\n//     gameTime += gameTimeDelta;\n//     _globalTime = time;\n//   } else {\n//     gameTimeDelta = 0;\n//   }\n//   absoluteTime += delta;\n//   if (!_globalTime) {\n//     _globalTime = time;\n//   }\n// };\n\nexport const LOCAL_STORAGE_SAVED_GAME_KEY = \"DanteSP22\";\n\nexport interface Lever {\n  $value: 0 | 1;\n  $lerpValue: number;\n  $lerpValue2: number;\n  $parent: Model;\n  _update: () => void;\n  $matrix?: DOMMatrixReadOnly;\n  $locMatrix?: DOMMatrixReadOnly;\n}\n\nexport interface Soul {\n  $value: 0 | 1;\n  _update: () => void;\n  $matrix?: DOMMatrixReadOnly;\n}\n\nconst getItemValue = <T>({ $value }: { readonly $value: T }) => $value;\n\nexport const levers: Lever[] = [];\n\nexport const souls: Soul[] = [];\n\nexport let player_last_pulled_lever = 0;\n\nexport let rotatingPlatform1Rotation = 0;\n\nexport let rotatingPlatform2Rotation = 0;\n\nexport let rotatingHexCorridorRotation = 0;\n\nexport let game_completed: 0 | 1 = 0;\n\nexport let firstBoatLerp = 0;\n\nexport let secondBoatLerp = 0;\n\nexport const showMessage = (message: string, duration: number) => {\n  if (!game_completed) {\n    h4.innerHTML = message;\n    _messageEndTime = gameTime + duration;\n  }\n};\n\nconst clearMessage = () => {\n  h4.innerHTML = \"\";\n  _messageEndTime = 0;\n};\n\nexport const worldStateUpdate = () => {\n  const shouldRotatePlatforms = lerpneg(levers[12]!.$lerpValue, levers[13]!.$lerpValue);\n\n  if (gameTime > _messageEndTime) {\n    clearMessage();\n  }\n\n  rotatingHexCorridorRotation = lerp(\n    lerpDamp(rotatingHexCorridorRotation, 0, 1),\n    angle_wrap_degrees(rotatingHexCorridorRotation + gameTimeDelta * 60),\n    levers[5]!.$lerpValue - levers[6]!.$lerpValue2,\n  );\n\n  rotatingPlatform1Rotation = lerp(\n    lerpDamp(rotatingPlatform1Rotation, 0, 5),\n    angle_wrap_degrees(rotatingPlatform1Rotation + gameTimeDelta * 56),\n    shouldRotatePlatforms,\n  );\n\n  rotatingPlatform2Rotation = lerp(\n    lerpDamp(rotatingPlatform2Rotation, 0, 4),\n    angle_wrap_degrees(rotatingPlatform2Rotation + gameTimeDelta * 48),\n    shouldRotatePlatforms,\n  );\n\n  secondBoatLerp = lerpDamp(secondBoatLerp, levers[9]!.$lerpValue2, 0.2 + 0.3 * abs(levers[9]!.$lerpValue2 * 2 - 1));\n\n  firstBoatLerp = lerpDamp(\n    firstBoatLerp,\n    game_completed ? lerp(firstBoatLerp, -9, gameTimeDelta * 1.5) : clamp01(gameTime / 3),\n    1,\n  );\n\n  if (levers[0]!.$value && levers[0]!.$lerpValue > 0.7) {\n    if (souls_collected_count < 13) {\n      showMessage(\"Not leaving now, there are souls to catch!\", 3);\n      levers[0]!.$value = 0;\n    } else if (!game_completed) {\n      showMessage(\"Well done. They will be punished.<br>Thanks for playing\", Infinity);\n      game_completed = 1;\n    }\n  }\n\n  for (const model of allModels) {\n    if (model._update) {\n      model.$matrix = model._update(model);\n    }\n  }\n\n  for (const lever of levers) {\n    lever._update();\n  }\n\n  for (const soul of souls) {\n    soul._update();\n  }\n};\n\nconst updateCollectedSoulsCounter = () => {\n  souls_collected_count = souls.reduce((acc, cur) => acc + cur.$value, 0);\n  h3.innerHTML =\n    \" \" +\n    [\"0\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"XIII\"][souls_collected_count]!;\n};\n\nexport const saveGame = () => {\n  updateCollectedSoulsCounter();\n  localStorage[LOCAL_STORAGE_SAVED_GAME_KEY] = JSON.stringify([\n    levers.map(getItemValue),\n    souls.map(getItemValue),\n    player_last_pulled_lever,\n    gameTime,\n    secondBoatLerp,\n  ]);\n};\n\nexport const loadGame = () => {\n  try {\n    const [savedLevers, savedSouls, savedLastPulledLever, savedGameTime, savedSecondBoatLerp] = JSON.parse(\n      localStorage[LOCAL_STORAGE_SAVED_GAME_KEY]!,\n    );\n    levers.map(\n      (lever, index) =>\n        (lever.$lerpValue = lever.$lerpValue2 = lever.$value = index ? ((savedLevers[index] | 0) as 0 | 1) : 0),\n    );\n    souls.map((soul, index) => (soul.$value = (savedSouls[index] | 0) as 0 | 1));\n    player_last_pulled_lever = savedLastPulledLever;\n    gameTime = savedGameTime;\n    secondBoatLerp = savedSecondBoatLerp;\n  } catch (e) {\n    if (DEBUG) {\n      console.log(e);\n    }\n  }\n  firstBoatLerp = clamp01(player_last_pulled_lever);\n  clearMessage();\n  updateCollectedSoulsCounter();\n};\n\nexport const onPlayerPullLever = (leverIndex: number) => {\n  if (DEBUG) {\n    console.log(\"switch lever \" + leverIndex + \" = \" + levers[leverIndex]?.$value);\n  }\n\n  if (leverIndex) {\n    showMessage(\"* click *\", 1);\n  }\n  player_last_pulled_lever = leverIndex;\n  saveGame();\n};\n\nexport const onSoulCollected = () => {\n  showMessage(\n    [\n      ,\n      \"Mark Zuckemberg<br>made the world worse\",\n      ,\n      \"Andrzej Mazur<br>for the js13k competition\",\n      \"Donald Trump<br>lies\",\n      \"Kim Jong-un<br>Dictator, liked pineapple on pizza\",\n      \"Maxime Euziere<br>forced me to finish this game\",\n      \"She traded NFTs apes\",\n      ,\n      \"Vladimir Putin<br>evil war\",\n      \"He was not a good person\",\n      ,\n      \"Salvatore Previti<br>made this evil game<br><br>Done. Go back to the boat\",\n    ][souls_collected_count] || 'Catched a \"crypto bro\".<br>\"Web3\" is all scam, lies and grift',\n    souls_collected_count && souls_collected_count < 12 ? 5 : 7,\n  );\n\n  saveGame();\n};\n","import type { Polygon } from \"../geometry/geometry\";\nimport { plane_fromPolygon } from \"../math\";\nimport { allModels } from \"./scene\";\nimport { gl } from \"../gl\";\n\nexport const initTriangleBuffers = () => {\n  if (DEBUG) {\n    console.time(\"initTriangleBuffers\");\n  }\n\n  const _triangleIndices: number[] = [];\n  const _vertexPositions: number[] = [];\n  const _vertexColors: number[] = [];\n  const _vertexNormals: number[] = [];\n\n  const _vertexMap = new Map<string, number>();\n  const _vertexInts = new Int32Array(8);\n  const _vertexIntsSmooth = new Int32Array(_vertexInts.buffer, 0, 5);\n  const _vertexFloats = new Float32Array(_vertexInts.buffer);\n\n  let polygon: Polygon | undefined;\n  let meshFirstIndex: number = 0;\n\n  const getVertex = (i: number): number => {\n    let { x, y, z } = polygon![i]!;\n    _vertexFloats[0] = x;\n    _vertexFloats[1] = y;\n    _vertexFloats[2] = z;\n    const key = \"\" + (polygon!.$smooth ? _vertexIntsSmooth : _vertexInts);\n    let index = _vertexMap.get(key);\n    if (index !== undefined) {\n      x = index * 3;\n      _vertexNormals[x] = (_vertexNormals[x++]! + _vertexInts[5]!) / 2;\n      _vertexNormals[x] = (_vertexNormals[x++]! + _vertexInts[6]!) / 2;\n      _vertexNormals[x] = (_vertexNormals[x]! + _vertexInts[7]!) / 2;\n    } else {\n      _vertexMap.set(key, (index = _vertexMap.size));\n      _vertexPositions.push(x, y, z, _vertexFloats[3]!);\n      _vertexColors.push(_vertexInts[4]!);\n      _vertexNormals.push(_vertexInts[5]!, _vertexInts[6]!, _vertexInts[7]!);\n    }\n    return index;\n  };\n\n  for (const model of allModels) {\n    _vertexFloats[3] = model.$kind ? model.$modelId : 0;\n    for (polygon of model.$polygons!) {\n      const { x, y, z } = plane_fromPolygon(polygon);\n      _vertexInts[4] = polygon.$color! | 0;\n      _vertexInts[5] = x * 32767;\n      _vertexInts[6] = y * 32767;\n      _vertexInts[7] = z * 32767;\n      for (let i = 2, a = getVertex(0), b = getVertex(1); i < polygon.length; ++i) {\n        _triangleIndices.push(a, b, (b = getVertex(i)));\n      }\n    }\n\n    // free memory\n    model.$polygons = null;\n\n    // write the indices offset and count\n    model.$vertexBegin = meshFirstIndex;\n    model.$vertexEnd = meshFirstIndex = _triangleIndices.length;\n  }\n\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(_triangleIndices), gl.STATIC_DRAW);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(_vertexPositions), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ARRAY_BUFFER, new Int16Array(_vertexNormals), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(1, 3, gl.SHORT, true, 0, 0);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ARRAY_BUFFER, new Uint32Array(_vertexColors), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(2, 4, gl.UNSIGNED_BYTE, true, 0, 0);\n\n  gl.enableVertexAttribArray(0);\n  gl.enableVertexAttribArray(1);\n  gl.enableVertexAttribArray(2);\n\n  if (DEBUG) {\n    console.timeEnd(\"initTriangleBuffers\");\n    console.table({\n      \"game models\": allModels.filter((m) => !!m.$kind).length,\n      \"all models\": allModels.length,\n      \"vertices\": _vertexMap.size,\n      \"triangles\": _triangleIndices.length / 3,\n      \"indices\": _triangleIndices.length,\n    });\n  }\n};\n","import { plane_fromPolygon, type Vec3, type Vec3In, type Plane, vec3_dot } from \"../math\";\nimport { polygon_color, type Polygon } from \"./geometry\";\n\nexport const PLANE_EPSILON = 0.00008;\n\nexport interface CSGPolygon {\n  $polygon: Polygon;\n\n  $flipped: 0 | boolean;\n\n  /**\n   * When a polygon is splitted, this will contain the polygon from which this polygon was splitted.\n   * This is then used by csg_polygons to merge back splitted polygons if they are both present,\n   * to reduce the number of vertices and triangles.\n   */\n  $parent: CSGPolygon | 0;\n}\n\nexport interface CSGNode extends Plane {\n  /** Coplanar polygons */\n  $polygons: CSGPolygon[];\n  /** Front child */\n  $front: CSGNode | 0;\n  /** Back child */\n  $back: CSGNode | 0;\n}\n\nexport type CSGInput = CSGNode | readonly Polygon[];\n\ninterface SplitPolygonResult {\n  $front: CSGPolygon | undefined | false;\n  $back: CSGPolygon | undefined | false;\n}\n\nconst CSGPolygon_splitSpanning = /* @__PURE__ */ (plane: Plane, polygon: CSGPolygon): SplitPolygonResult => {\n  const fpoints: Vec3[] = [];\n  const bpoints: Vec3[] = [];\n  const { $polygon, $flipped } = polygon;\n  let jd: number;\n  let iv: Vec3In = $polygon.at(-1)!;\n  let id: number = vec3_dot(plane, iv) - plane.w;\n  for (const jv of $polygon) {\n    jd = vec3_dot(plane, jv) - plane.w;\n    if (id < PLANE_EPSILON) {\n      bpoints.push(iv);\n    }\n    if (id > -PLANE_EPSILON) {\n      fpoints.push(iv);\n    }\n    if ((id > PLANE_EPSILON && jd < -PLANE_EPSILON) || (id < -PLANE_EPSILON && jd > PLANE_EPSILON)) {\n      id /= jd - id;\n      iv = {\n        x: iv.x + (iv.x - jv.x) * id,\n        y: iv.y + (iv.y - jv.y) * id,\n        z: iv.z + (iv.z - jv.z) * id,\n      };\n      fpoints.push(iv);\n      bpoints.push(iv);\n    }\n    iv = jv;\n    id = jd;\n  }\n  return {\n    $front: fpoints.length > 2 && {\n      $polygon: polygon_color(fpoints, $polygon.$color, $polygon.$smooth),\n      $flipped,\n      $parent: polygon,\n    },\n    $back: bpoints.length > 2 && {\n      $polygon: polygon_color(bpoints, $polygon.$color, $polygon.$smooth),\n      $flipped,\n      $parent: polygon,\n    },\n  };\n};\n\nconst CSGPolygon_split = /* @__PURE__ */ (plane: Plane, polygon: CSGPolygon): SplitPolygonResult => {\n  const { $polygon } = polygon;\n  let $front: CSGPolygon | undefined;\n  let $back: CSGPolygon | undefined;\n  let d: number;\n  for (let i = 0; i < $polygon.length; ++i) {\n    d = vec3_dot(plane, $polygon[i]!) - plane.w;\n    if (d < -PLANE_EPSILON) {\n      $back = polygon;\n    } else if (d > PLANE_EPSILON) {\n      $front = polygon;\n    }\n    if ($back && $front) {\n      return CSGPolygon_splitSpanning(plane, polygon);\n    }\n  }\n  return { $front, $back };\n};\n\nconst csg_tree_addPolygon = /* @__PURE__ */ (\n  node: CSGNode | 0 | undefined,\n  polygon: CSGPolygon,\n  plane: Plane = plane_fromPolygon(polygon.$polygon),\n): CSGNode => {\n  if (node) {\n    const { $front, $back } = CSGPolygon_split(node, polygon);\n    if (!$front && !$back) {\n      node.$polygons.push(polygon); // Coplanar\n    }\n    if ($front) {\n      node.$front = csg_tree_addPolygon(node.$front, $front, plane);\n    }\n    if ($back) {\n      node.$back = csg_tree_addPolygon(node.$back, $back, plane);\n    }\n  } else {\n    const { x, y, z, w } = plane;\n    node = { x, y, z, w, $polygons: [polygon], $front: 0, $back: 0 };\n  }\n  return node;\n};\n\nconst csg_tree_clipNode = /* @__PURE__ */ (\n  anode: CSGNode,\n  bnode: CSGNode,\n  polygonPlaneFlipped: -1 | 1,\n): CSGPolygon[] => {\n  const result: CSGPolygon[] = [];\n  const recursion = (node: CSGNode, polygon: CSGPolygon) => {\n    let { $front, $back } = CSGPolygon_split(node, polygon);\n    if (!$front && !$back) {\n      if (polygonPlaneFlipped * vec3_dot(node, bnode) > 0) {\n        $front = polygon; // Coplanar front\n      } else {\n        $back = polygon; // Coplanar back\n      }\n    }\n    if ($front) {\n      if (node.$front) {\n        recursion(node.$front, $front);\n      } else {\n        result.push($front);\n      }\n    }\n    if ($back && node.$back) {\n      recursion(node.$back, $back);\n    }\n  };\n\n  for (const polygon of bnode.$polygons) {\n    recursion(anode, polygon);\n  }\n  return result;\n};\n\n/** Loop through all nodes in a tree */\nconst csg_tree_each = (node: CSGNode | 0 | undefined, fn: (node: CSGNode) => void): unknown =>\n  node && (fn(node), csg_tree_each(node.$front, fn), csg_tree_each(node.$back, fn));\n\n/**\n * If the given argument is a list of polygons, a new BSP tree built from the list of polygons is returned.\n * If the given argument is already a BSP tree, return it as is.\n * Note that array cannot be empty.\n */\nexport const csg_tree = /* @__PURE__ */ (n: CSGInput): CSGNode =>\n  (n as Polygon[]).length\n    ? // Build a BSP tree from a list of polygons\n      ((n as Polygon[]).reduce<CSGNode | 0>(\n        (prev, $polygon) => csg_tree_addPolygon(prev, { $polygon, $flipped: 0, $parent: 0 }),\n        0,\n      ) as CSGNode)\n    : // An object? We assume is a BSP tree.\n      (n as CSGNode);\n\n/** Convert solid space to empty space and empty space to solid space. */\nexport const csg_tree_flip = <T extends CSGNode | 0 | undefined>(root: T): T => {\n  csg_tree_each(root, (node) => {\n    const { $front, $back } = node;\n    node.$back = $front;\n    node.$front = $back;\n    node.x *= -1;\n    node.y *= -1;\n    node.z *= -1;\n    node.w *= -1;\n    for (const polygon of node.$polygons) {\n      polygon.$flipped = !polygon.$flipped;\n    }\n  });\n  return root;\n};\n\n/**\n * Union a[0] = a[0] U a[1] U a[2] U ...\n */\nexport const csg_union = /* @__PURE__ */ (...inputs: CSGInput[]): CSGNode =>\n  inputs.reduce((a: CSGInput, b: CSGInput | undefined): CSGNode => {\n    const polygonsToAdd: [Plane, CSGPolygon[]][] = [];\n    a = csg_tree(a);\n    if (b) {\n      b = csg_tree(b);\n\n      // clip to a, b\n      csg_tree_each(a, (node) => (node.$polygons = csg_tree_clipNode(b as CSGNode, node, 1)));\n\n      // get the list of polygons to be added from b clipped to a\n      csg_tree_each(b, (node) => polygonsToAdd.push([node, csg_tree_clipNode(a as CSGNode, node, -1)]));\n\n      // add the polygons to a\n      for (const [plane, polygons] of polygonsToAdd) {\n        for (const pp of polygons) {\n          csg_tree_addPolygon(a, pp, plane);\n        }\n      }\n    }\n    return a;\n  }) as CSGNode;\n\n/**\n * Subtraction a = a - (b[0] U b[1] U ...)\n * Note that a will be modified if is a tree.\n */\nexport const csg_subtract = /* @__PURE__ */ (a: CSGInput, ...b: CSGInput[]): CSGNode =>\n  csg_tree_flip(csg_union(csg_tree_flip(csg_tree(a)), ...b));\n\n/**\n * Extracts all the polygons from a BSP tree.\n * Some polygons will be merged, to reduce the number of triangles.\n */\nexport const csg_polygons = /* @__PURE__ */ (tree: CSGNode): Polygon[] => {\n  const byParent = new Map<CSGPolygon, CSGPolygon>();\n  const allPolygons = new Map<CSGPolygon, 0 | boolean>();\n\n  /** Adds a polygon, and replaces two splitted polygons that have the same parent with the parent */\n  const add = (polygon: CSGPolygon): CSGPolygon => {\n    if (polygon.$parent) {\n      const found = byParent.get(polygon.$parent);\n      if (found) {\n        allPolygons.delete(found);\n        polygon = add(polygon.$parent);\n      } else {\n        byParent.set(polygon.$parent, polygon);\n      }\n    }\n    return polygon;\n  };\n\n  csg_tree_each(tree, (node) => {\n    for (const polygon of node.$polygons) {\n      allPolygons.set(add(polygon), polygon.$flipped);\n    }\n  });\n\n  return Array.from(allPolygons, ([{ $polygon }, flipped]) => {\n    const polygon = $polygon.map(({ x, y, z }) => ({ x, y, z }));\n    return polygon_color(flipped ? polygon.reverse() : polygon, $polygon.$color, $polygon.$smooth);\n  });\n};\n\nexport const csg_polygons_subtract = (...input: CSGInput[]) => csg_polygons((csg_subtract as any)(...input));\n","import type { Vec3 } from \"../math\";\n\nexport const player_position_final: Vec3 = {\n  x: 0,\n  y: 0,\n  z: 0,\n};\n","import { abs, angle_lerp_degrees, DEG_TO_RAD, max, min, vec3_distance } from \"../math\";\nimport { cylinder, material } from \"../geometry/geometry\";\nimport { allModels, currentEditModel, meshAdd } from \"./scene\";\nimport {\n  levers,\n  souls,\n  onPlayerPullLever,\n  onSoulCollected,\n  lerpDamp,\n  gameTimeDelta,\n  gameTime,\n  type Lever,\n  type Soul,\n} from \"./world-state\";\nimport { player_position_final } from \"./player-position\";\nimport { keyboard_downKeys, KEY_INTERACT } from \"../page\";\n\nconst LEVER_SENSITIVITY_RADIUS = 2.9;\nconst SOUL_SENSITIVITY_RADIUS = 1.5;\n\nexport const GQuad = /* @__PURE__ */ [\n  { x: -1, z: 1 },\n  { x: 1, z: 1 },\n  { x: 1, z: -1 },\n  { x: -1, z: -1 },\n];\n\nexport const MODEL_ID_FIRST_BOAT = 2;\n\nexport type Circle = [number, number, number];\n\nexport const newLever = (transform: DOMMatrixReadOnly): void => {\n  const $parent = currentEditModel;\n  const index = levers.length;\n  const lever: Lever = {\n    $value: 0,\n    $lerpValue: 0,\n    $lerpValue2: 0,\n    $parent,\n    _update: () => {\n      const { $value, $lerpValue, $lerpValue2 } = lever;\n      const locMatrix = $parent.$matrix.multiply(transform);\n      lever.$locMatrix = locMatrix;\n\n      if (\n        vec3_distance(locMatrix.transformPoint(), player_position_final) < LEVER_SENSITIVITY_RADIUS &&\n        keyboard_downKeys[KEY_INTERACT]\n      ) {\n        if ($lerpValue < 0.3 || $lerpValue > 0.7) {\n          lever.$value = $value ? 0 : 1;\n          onPlayerPullLever(index);\n        }\n      }\n\n      lever.$lerpValue = lerpDamp($lerpValue, $value, 4);\n      lever.$lerpValue2 = lerpDamp($lerpValue2, $value, 1);\n      lever.$matrix = locMatrix.rotate(lever.$lerpValue * 60 - 30, 0).translateSelf(0, 1);\n    },\n  };\n  levers.push(lever);\n\n  meshAdd(cylinder(5), transform.translate(-0.2).rotate(90, 90).scale(0.4, 0.1, 0.5), material(0.4, 0.5, 0.5));\n  meshAdd(cylinder(5), transform.translate(0.2).rotate(90, 90).scale(0.4, 0.1, 0.5), material(0.4, 0.5, 0.5));\n  meshAdd(cylinder(GQuad), transform.translate(0, -0.4).scale(0.5, 0.1, 0.5), material(0.5, 0.5, 0.4));\n};\n\nexport const newSoul = (transform: DOMMatrixReadOnly, ...walkingPath: number[][]) => {\n  const parentModel = currentEditModel;\n  const index = souls.length;\n  const circles = (walkingPath as Circle[]).map(([x, z, w]) => ({ x, z, w }));\n  let circle = circles[0]!;\n  let { x: targetX, z: targetZ } = circle;\n  let soulX = targetX;\n  let soulZ = targetZ;\n  let dirX = -1;\n  let dirZ = 0;\n  let randAngle = 0;\n  let lookAngle = 0;\n  let prevX = 0;\n  let prevZ = 0;\n  let velocity = 3;\n  let wasInside: boolean | undefined | 1 = 1;\n\n  const soul: Soul = {\n    $value: 0,\n    _update: () => {\n      if (!soul.$value) {\n        let isInside: boolean | undefined;\n        let contextualVelocity = 1;\n        let mindist = Infinity;\n\n        for (const c of circles) {\n          const { x, z, w } = c;\n          const distance = Math.hypot(targetX - x, targetZ - z);\n          const circleSDF = distance - w;\n          isInside ||= distance < w;\n          if (circleSDF > 0 && circleSDF < mindist) {\n            mindist = circleSDF;\n            circle = c;\n          }\n          contextualVelocity = min(contextualVelocity, distance / w);\n        }\n\n        if (!isInside) {\n          const { x, z, w } = circle;\n          const ax = targetX - x;\n          const az = targetZ - z;\n          let magnitude = Math.hypot(ax, az);\n          let angle = Math.atan2(-az, ax);\n          if (wasInside) {\n            randAngle = ((Math.random() - 0.5) * Math.PI) / 2;\n            velocity = max(1, velocity / (1 + Math.random()));\n          }\n          angle += randAngle;\n          dirX = -Math.cos(angle);\n          dirZ = Math.sin(angle);\n          if (magnitude > 0.1) {\n            // limit the vector length to the circle radius, as a security measure\n            magnitude = min(magnitude, w) / (magnitude || 1);\n            targetX = ax * magnitude + x;\n            targetZ = az * magnitude + z;\n          }\n        }\n\n        wasInside = isInside;\n\n        velocity = lerpDamp(velocity, 3 + (1 - contextualVelocity) * 6, 3 + contextualVelocity);\n        soulX = lerpDamp(soulX, (targetX = lerpDamp(targetX, targetX + dirX, velocity)), velocity);\n        soulZ = lerpDamp(soulZ, (targetZ = lerpDamp(targetZ, targetZ + dirZ, velocity)), velocity);\n\n        lookAngle = angle_lerp_degrees(\n          lookAngle,\n          Math.atan2(soulX - prevX, soulZ - prevZ) / DEG_TO_RAD - 180,\n          3 * gameTimeDelta,\n        );\n\n        prevX = soulX;\n        prevZ = soulZ;\n\n        const soulPos = (soul.$matrix = parentModel.$matrix.multiply(\n          transform.translate(soulX, 0, soulZ).rotateSelf(0, lookAngle, Math.sin(gameTime * 1.7) * 7),\n        )).transformPoint();\n\n        if (vec3_distance(soulPos, player_position_final) < SOUL_SENSITIVITY_RADIUS) {\n          soul.$value = 1;\n          onSoulCollected();\n        }\n      }\n\n      if (soul.$value) {\n        soul.$matrix = allModels[MODEL_ID_FIRST_BOAT]!.$matrix.translate(\n          (index % 4) * 1.2 - 1.7 + Math.sin(gameTime + index) / 7,\n          -2,\n          -5.5 + ((index / 4) | 0) * 1.7 + abs((index % 4) - 2) + Math.cos(gameTime / 1.5 + index) / 6,\n        );\n      }\n    },\n  };\n\n  if (DEBUG_FLAG0) {\n    for (const c of circles) {\n      meshAdd(cylinder(12), transform.translate(c.x, -1.7, c.z).scale(c.w, 0.01, c.w), material(0.3, 0.3, 0.38));\n    }\n  }\n\n  souls.push(soul);\n};\n","import { abs, clamp01, integers_map, lerpneg, max, min, identity } from \"../math\";\nimport {\n  material,\n  cylinder,\n  polygons_transform,\n  polygon_regular,\n  sphere,\n  cylinder_sides,\n  polygon_transform,\n  type Polygon,\n} from \"../geometry/geometry\";\nimport { csg_subtract, csg_polygons, csg_union } from \"../geometry/csg\";\nimport { meshAdd, newModel, MODEL_KIND_MESH, MODEL_KIND_GAME_NO_ATTACH_PLAYER, type Model } from \"./scene\";\nimport {\n  secondBoatLerp,\n  gameTime,\n  levers,\n  rotatingHexCorridorRotation,\n  rotatingPlatform1Rotation,\n  rotatingPlatform2Rotation,\n  firstBoatLerp,\n} from \"./world-state\";\nimport { GQuad, newLever, newSoul } from \"./objects\";\n\nexport let leverModel: Model;\n\nexport let soulModel: Model;\n\nexport let soulCollisionModel: Model;\n\nexport let playerModels: [Model, Model, Model];\n\nexport const buildWorld = () => {\n  const HORN_STACKS = 10;\n\n  const hornPolygons = ((): Polygon[] => {\n    const matrices = integers_map(HORN_STACKS + 1, (i: number) =>\n      identity\n        .translate(Math.sin((i / HORN_STACKS) * Math.PI), i / HORN_STACKS)\n        .rotate(10 * (i / HORN_STACKS))\n        .scale(1.0001 - i / HORN_STACKS, 0, 1 - i / HORN_STACKS),\n    );\n\n    const p = polygon_regular(18);\n    return integers_map(HORN_STACKS, (i) =>\n      cylinder_sides(polygon_transform(p, matrices[i]!).reverse(), polygon_transform(p, matrices[i + 1]!), 1),\n    ).flat();\n  })();\n\n  const boatPolygons = csg_polygons(\n    csg_subtract(\n      polygons_transform(\n        cylinder(20, 1, 1.15, 1),\n        identity.translate(0, -3).scale(3.5, 1, 3.5),\n        material(0.7, 0.4, 0.25, 0.7),\n      ),\n      polygons_transform(\n        cylinder(20, 1, 1.3, 1),\n        identity.translate(0, -2.5).scale(2.6, 1, 3),\n        material(0.7, 0.4, 0.25, 0.2),\n      ),\n      polygons_transform(cylinder(GQuad), identity.translate(4, -1.2).scale3d(2), material(0.7, 0.4, 0.25, 0.3)),\n    ),\n  );\n\n  const bigArcPolygons = csg_polygons(\n    csg_subtract(\n      polygons_transform(cylinder(GQuad), identity.translate(0, -8).scale(6, 15, 2.2)),\n      polygons_transform(cylinder(GQuad), identity.translate(0, -14.1).scale(4, 13, 4)),\n      polygons_transform(cylinder(20, 1), identity.translate(0, -1).rotate(90, 0, 90).scale3d(4)),\n    ),\n  );\n\n  let tmpMatrix: DOMMatrixReadOnly;\n\n  const getBoatAnimationMatrix = (x: number, y: number, z: number) =>\n    identity\n      .translate(x + Math.sin(gameTime + 2) / 5, y + Math.sin(gameTime * 0.8) / 3, z)\n      .rotateSelf(Math.sin(gameTime) * 2, Math.sin(gameTime * 0.7), Math.sin(gameTime * 0.9));\n\n  // Initialize the full screen triangle for the sky. Must be the first model.\n\n  newModel(() => {\n    meshAdd([GQuad.slice(1)], identity.translate(-2).scale3d(3).rotate(90, 0));\n  }, MODEL_KIND_MESH);\n\n  newModel(() => {\n    // ========= FIRST BOAT (modelId:2) ========= //\n\n    newModel((model) => {\n      model._update = () => getBoatAnimationMatrix(-12, 4.2, -66 + firstBoatLerp * 40);\n      meshAdd(boatPolygons);\n      newLever(identity.translate(0, -3, 4));\n    });\n\n    // ========= entranceBarsMesh ========= //\n\n    const entranceBarsPolygons = integers_map(7, (i) =>\n      polygons_transform(\n        cylinder(6, 1),\n        identity.translate(4 * (i / 6 - 0.5), 3).scale(0.2, 3, 0.2),\n        material(0.3, 0.3, 0.38),\n      ),\n    ).flat();\n\n    // ========= WORLD! ========= //\n\n    // SOUL 0 - soul after first boat\n    newSoul(identity.translate(-0.5, 2.8, -20), [0, 0, 2.5], [0, -3, 2.5]);\n\n    // SOUL 1 - soul after first gate\n    newSoul(\n      identity.translate(0, 2.8),\n      [5, 10, 3],\n      [-5, 10, 3],\n      ...polygon_regular(18).map(({ x, z }) => [x * 7, z * 10, 4.5 - abs(x) * 2]),\n    );\n\n    // first boat attachment\n\n    meshAdd(\n      cylinder(GQuad),\n      identity.translate(-5, -0.2, -26).scale(3.2, 1, 2.5).skewX(3),\n      material(0.8, 0.8, 0.8, 0.2),\n    );\n\n    // gate columns\n\n    GQuad.map(({ x, z }) =>\n      meshAdd(cylinder(6), identity.translate(x * 3, 3, z * 15).scale(0.7, 4, 0.7), material(0.6, 0.3, 0.3, 0.4)),\n    );\n\n    // in and out\n    [-23, 22].map((z) =>\n      meshAdd(cylinder(GQuad), identity.translate(0, 0, z).scale(3, 1, 8), material(0.9, 0.9, 0.9, 0.2)),\n    );\n\n    [-15, 15].map((z, i) => {\n      //  gate top\n      meshAdd(cylinder(GQuad), identity.translate(0, 6.3, z).scale(4, 0.3, 1), material(0.3, 0.3, 0.3, 0.4));\n      //  gate bottom\n      meshAdd(cylinder(GQuad), identity.translate(0, 1, z).scale(3, 0.2, 0.35), material(0.5, 0.5, 0.5, 0.3));\n      // in and out gate bars\n      newModel((model) => {\n        model._update = () => identity.translate(0, -levers[i + 1]!.$lerpValue * 4.7, z);\n        meshAdd(entranceBarsPolygons);\n      });\n    });\n\n    // horns\n\n    integers_map(5, (i) =>\n      integers_map(2, (j) =>\n        meshAdd(\n          hornPolygons,\n          identity\n            .translate((j - 0.5) * 18.5, 0, i * 4.8 - 9.5)\n            .rotate(0, 180 - j * 180)\n            .scale(1.2, 10, 1.2),\n          material(1, 1, 0.8, 0.2),\n        ),\n      ),\n    );\n\n    meshAdd(cylinder(GQuad), identity.translate(3, 1.5, -20).scale(0.5, 2, 5), material(0.7, 0.7, 0.7, 0.2));\n\n    // first lever pad\n    meshAdd(\n      cylinder(GQuad),\n      identity.translate(-3.4, -0.2, -19).scale(2, 1, 1.5).rotate(0, -90),\n      material(0.75, 0.75, 0.75, 0.2),\n    );\n    meshAdd(cylinder(5), identity.translate(-5.4, 0, -19).scale(2, 1, 2).rotate(0, -90), material(0.6, 0.3, 0.3, 0.4));\n\n    newLever(identity.translate(-5.4, 1.5, -19).rotate(0, -90));\n\n    // descent\n\n    meshAdd(\n      cylinder(GQuad),\n      identity.rotate(0, 60).translate(14.8, -1.46, -1).rotate(0, 0, -30).scale(4, 0.6, 4.5),\n      material(0.8, 0.2, 0.2, 0.5),\n    );\n\n    // base\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          csg_union(\n            // lower base\n            polygons_transform(\n              cylinder(6, 0, 0, 0.3),\n              identity.translate(8, -3, -4).scale(13, 1, 13),\n              material(0.7, 0.7, 0.7, 0.2),\n            ),\n\n            // hole extension\n            polygons_transform(cylinder(6), identity.translate(0, -8).scale(9, 8, 8), material(0.4, 0.2, 0.5, 0.5)),\n\n            // middle base\n            polygons_transform(\n              cylinder(6, 0, 0, 0.3),\n              identity.translate(0, -0.92).scale(13, 2, 13),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n          ),\n          // hole\n          polygons_transform(cylinder(5), identity.scale(5, 30, 5), material(0.4, 0.2, 0.6, 0.5)),\n\n          // smooth hole\n          polygons_transform(\n            cylinder(5, 0, 1.5),\n            identity.translate(0, 1).scale(4.5, 0.3, 4.5),\n            material(0.7, 0.5, 0.9, 0.2),\n          ),\n\n          // descent cut\n          polygons_transform(\n            cylinder(GQuad),\n            identity.rotate(0, 60).translate(14, 0.7, -1).rotate(0, 0, -35).scale(2, 2, 2),\n            material(0.5, 0.5, 0.5, 0.5),\n          ),\n\n          // lower lever pad\n          polygons_transform(\n            cylinder(6),\n            identity.translate(15, -1.5, 4).scale(3.5, 1, 3.5),\n            material(0.5, 0.5, 0.5, 0.5),\n          ),\n        ),\n      ),\n    );\n\n    // moving central platform\n\n    newModel((model) => {\n      model._update = () => {\n        return identity.translate(\n          0,\n          levers[3]!.$lerpValue > 0.01\n            ? (Math.cos(gameTime * 1.5) * 5 + 2) * levers[3]!.$lerpValue2 * (1 - levers[2]!.$lerpValue) +\n                (1 - levers[3]!.$lerpValue) * -15\n            : // invisible\n              -500,\n          0,\n        );\n      };\n\n      newLever(identity.translate(0, 1.2));\n\n      meshAdd(cylinder(5), identity.translate(0, -0.2).scale(5, 1, 5), material(0.6, 0.65, 0.7, 0.3));\n    });\n\n    newLever(identity.translate(15, -2, 4));\n\n    // ******** LEVEL 2 ********\n\n    const getOscillationAmount = () => min(levers[2]!.$lerpValue2, 1 - levers[4]!.$lerpValue2);\n\n    const blackPlatform = (freq: number, amplitude: number, pz: number) =>\n      newModel((model) => {\n        model._update = () =>\n          identity.translate(getOscillationAmount() * Math.sin(freq * 3 + gameTime * freq) * amplitude);\n        GQuad.map(({ x, z }) => {\n          // column body\n          meshAdd(\n            cylinder(11, 1),\n            identity.translate(x * 4, 4, pz + z * 4).scale(0.8, 3, 0.8),\n            material(0.5, 0.3, 0.7, 0.6),\n          );\n          // column top\n          meshAdd(\n            cylinder(GQuad),\n            identity.translate(x * 4, 7, pz + z * 4).scale(1, 0.3),\n            material(0.5, 0.5, 0.5, 0.3),\n          );\n        });\n\n        meshAdd(\n          csg_polygons(\n            csg_subtract(\n              polygons_transform(\n                cylinder(GQuad),\n                identity.translate(0, 0, pz).scale(5, 1, 5),\n                material(0.8, 0.8, 0.8, 0.3),\n              ),\n              ...[-1, 1].map((i) =>\n                polygons_transform(\n                  cylinder(GQuad),\n                  identity\n                    .translate(5 * i, 0.2, pz)\n                    .rotate(0, 0, i * -30)\n                    .scale(4, 1, 2),\n                  material(0.8, 0.8, 0.8, 0.3),\n                ),\n              ),\n            ),\n          ),\n        );\n        // bottom\n        meshAdd(cylinder(GQuad), identity.translate(0, -3, pz).scale(8, 2, 8), material(0.4, 0.4, 0.4, 0.3));\n      });\n\n    blackPlatform(0.7, 12, 35);\n    blackPlatform(1, 8.2, 55);\n\n    // central oscillating platform\n    newModel((model) => {\n      model._update = () => identity.translate(getOscillationAmount() * Math.sin(gameTime / 1.5 + 2) * 12);\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            csg_union(\n              polygons_transform(cylinder(GQuad), identity.scale(1.5, 1, 5), material(0.9, 0.9, 0.9, 0.2)),\n              polygons_transform(cylinder(6), identity.scale(4, 1, 5), material(0.9, 0.9, 0.9, 0.2)),\n              polygons_transform(\n                cylinder(GQuad),\n                identity.translate(0, -2).scale(2, 3.2, 1.9),\n                material(0.3, 0.8, 0.5, 0.5),\n              ),\n              polygons_transform(\n                cylinder(16, 1, 0, 4),\n                identity.scale(1, 1, 1.5).rotate(0, 90),\n                material(0.9, 0.9, 0.9, 0.2),\n              ),\n            ),\n            polygons_transform(cylinder(GQuad), identity.scale(1.3, 10, 1.3), material(0.2, 0.7, 0.4, 0.6)),\n          ),\n        ),\n        identity.translate(0, 0, 45),\n      );\n\n      // SOUL 2 - soul over the central oscillating platform in the second level\n      newSoul(identity.translate(0, 2.8, 45), [0, 0, 4.5]);\n    });\n\n    const level3Oscillation = () =>\n      clamp01(1 - getOscillationAmount() * 5) * lerpneg(levers[4]!.$lerpValue, levers[5]!.$lerpValue);\n\n    // ******** LEVEL 3 ********\n\n    // triangle platform\n\n    newModel((model) => {\n      model._update = () => identity.translate((1 - getOscillationAmount()) * 9.8);\n\n      meshAdd(cylinder(3), identity.translate(-23, -1.7, 55.8).scale(5, 0.7, 8.3), material(0.3, 0.6, 0.6, 0.2));\n      meshAdd(cylinder(8), identity.translate(-23, -2.2, 66.5).scale(1.5, 1.2, 1.5), material(0.8, 0.8, 0.8, 0.2));\n      meshAdd(cylinder(GQuad), identity.translate(-23, -3, 55).scale(5.2, 1.7, 3), material(0.5, 0.5, 0.5, 0.3));\n      meshAdd(cylinder(GQuad), identity.translate(-23, -2.2, 62).scale(3, 1, 4), material(0.5, 0.5, 0.5, 0.3));\n\n      newLever(identity.translate(-23, -0.5, 66.5));\n    });\n\n    meshAdd(\n      cylinder(GQuad),\n      identity.translate(-21.1 + 2.45, -3, 55).scale(2.45, 1.4, 2.7),\n      material(0.9, 0.9, 0.9, 0.2),\n    );\n\n    // vertically oscillating mini platforms\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, level3Oscillation() * Math.sin(gameTime * (1.5 * 0.9)) * 4);\n\n      meshAdd(\n        cylinder(GQuad),\n        identity.translate(-21.1 - 1.45, -3, 55).scale(1.45, 1.4, 2.7),\n        material(0.7, 0.7, 0.7, 0.2),\n      );\n\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(cylinder(GQuad), identity.scale(3, 1.4, 2.7)),\n            polygons_transform(cylinder(GQuad), identity.scale(1.2, 8, 1.2)),\n          ),\n        ),\n        identity.translate(-33, -3, 55),\n        material(0.7, 0.7, 0.7, 0.2),\n      );\n    });\n\n    // horizontaly oscillating mini platforms\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, 0, level3Oscillation() * Math.sin(gameTime * 0.9) * 8);\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-27, -3, 55).scale(3, 1.4, 2.7),\n              material(0.9, 0.9, 0.9, 0.2),\n            ),\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-27, -3, 55).scale(1, 3),\n              material(0.9, 0.9, 0.9, 0.2),\n            ),\n          ),\n        ),\n      );\n\n      meshAdd(cylinder(GQuad), identity.translate(-39, -3, 55).scale(3, 1.4, 2.7), material(0.9, 0.9, 0.9, 0.2));\n    });\n\n    // hex corridor door\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, levers[4]!.$lerpValue2 * -6.5);\n      meshAdd(\n        cylinder(6),\n        identity.translate(-44.5, 0, 55).rotate(90, 90).rotate(0, 90).scale(5.9, 0.5, 5.9),\n        material(0.7, 0.7, 0.7, 0.4),\n      );\n    });\n\n    // hex corridor\n\n    const hexCorridorPolygons = [\n      ...polygons_transform(\n        csg_polygons(\n          csg_union(\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(0, -3).scale(11, 1.4, 3),\n              material(0.9, 0.9, 0.9, 0.2),\n            ),\n            csg_subtract(\n              polygons_transform(cylinder(6), identity.rotate(0, 0, 90).scale(6, 8, 6), material(0.3, 0.6, 0.6, 0.3)),\n              polygons_transform(\n                cylinder(4, 0, 0.01),\n                identity.translate(0, 6).scale(12, 2, 0.75).rotate(0, 45),\n                material(0.3, 0.6, 0.6, 0.3),\n              ),\n              polygons_transform(cylinder(6), identity.rotate(0, 0, 90).scale(5, 12, 5), material(0.3, 0.6, 0.6, 0.3)),\n              ...[5, 0, -5].map((x) =>\n                polygons_transform(\n                  cylinder(5),\n                  identity.translate(x, 2.5).rotate(90, 0, 36).scale(1.8, 10, 1.8),\n                  material(0.3, 0.6, 0.6, 0.3),\n                ),\n              ),\n            ),\n          ),\n        ),\n        identity,\n      ),\n    ];\n\n    meshAdd(hexCorridorPolygons, identity.translate(-53, 0, 55));\n\n    meshAdd(cylinder(6), identity.translate(-61.3, -2.4, 49).scale(3, 1, 5), material(0.4, 0.6, 0.6, 0.3));\n\n    meshAdd(cylinder(7), identity.translate(-57, -2.6, 46).scale(4, 1, 4), material(0.8, 0.8, 0.8, 0.3));\n\n    newLever(identity.translate(-55, -1.1, 46).rotate(0, 90));\n\n    // rotating hex corridor\n\n    newModel((model) => {\n      if (DEBUG) {\n        console.log(\"rotatingHexCorridor modelId:\" + model.$modelId);\n      }\n\n      model._update = () => {\n        return identity\n          .translate(-75, (1 - levers[5]!.$lerpValue2) * (1 - levers[6]!.$lerpValue) * 3, 55)\n          .rotate(180 * (1 - levers[5]!.$lerpValue2) + rotatingHexCorridorRotation, 0);\n      };\n      meshAdd(hexCorridorPolygons);\n    }, MODEL_KIND_GAME_NO_ATTACH_PLAYER);\n\n    // connection from rotating hex corridor to platforms\n\n    meshAdd(\n      cylinder(GQuad),\n      identity.translate(-88.3, -5.1, 55).rotate(0, 0, -30).scale(5, 1.25, 4.5),\n      material(0.7, 0.7, 0.7, 0.2),\n    );\n\n    meshAdd(\n      cylinder(3, 0, -0.5),\n      identity.translate(-88.4, -3.9, 55).rotate(0, -90, 17).scale(3, 1.45, 5.9),\n      material(0.8, 0.8, 0.8, 0.2),\n    );\n\n    // platform after the rotating hex corridor\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          csg_union(\n            // base\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-100, -2.5, 55).scale(8, 1, 8),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n            // right path to the boat\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-113, -2.6, 55).scale(6.2, 1.1, 3).skewX(3),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n            // straiht line\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-100, -2.6, 70).scale(3, 1.1, 7),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n            // 45 degrees detour\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-96, -2.6, 73).rotate(0, 45).scale(3, 1.1, 5),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n            // 45 degrees detour hexagon\n            polygons_transform(\n              cylinder(6),\n              identity.translate(-88.79, -2.6, 80.21).scale(6, 1.1, 6).rotate(0, 15),\n              material(0.6, 0.6, 0.6, 0.3),\n            ),\n\n            // ascension\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-100, -1.1, 82.39).rotate(-15, 0).scale(3, 1.1, 6),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n            // ascension continuation\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-100, 0.42, 92).scale(3, 1.1, 4.1),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n          ),\n\n          // decorative octagon\n          polygons_transform(\n            cylinder(8),\n            identity.translate(-100, -1, 55).scale(7, 0.9, 7),\n            material(0.3, 0.3, 0.3, 0.4),\n          ),\n          polygons_transform(\n            cylinder(8),\n            identity.translate(-100, -2, 55).scale(4, 0.3, 4),\n            material(0.4, 0.4, 0.4, 0.5),\n          ),\n          polygons_transform(\n            cylinder(8),\n            identity.translate(-100, -3, 55).scale(0.6, 1, 0.6),\n            material(0.4, 0.4, 0.4, 0.5),\n          ),\n        ),\n      ),\n      identity,\n    );\n\n    // SOUL 3 - soul in the central area, after the rotating hex corridor\n    newSoul(identity.translate(-100, 0.2, 55), [0, 0, 7.5], [-8, 0, 3.5], [-12, 0, 3.5], [-15, 0, 3.5]);\n\n    // SOUL 4 - soul after the central gate\n    newSoul(identity.translate(-89, 0.2, 80), [0, 0, 6]);\n\n    // first arc door\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          polygons_transform(\n            cylinder(GQuad),\n            identity.translate(-100, 1, 63).scale(7.5, 4),\n            material(0.5, 0.5, 0.5, 0.4),\n          ),\n          polygons_transform(\n            cylinder(GQuad),\n            identity.translate(-100, 0, 70).scale(2, 2, 10),\n            material(0.5, 0.5, 0.5, 0.4),\n          ),\n          polygons_transform(\n            cylinder(20, 1),\n            identity.translate(-100, 2, 70).scale(2, 2, 10).rotate(90, 0),\n            material(0.5, 0.5, 0.5, 0.4),\n          ),\n        ),\n      ),\n    );\n\n    // gate bars\n\n    newModel((model) => {\n      model._update = () => identity.translate(-99.7, -levers[6]!.$lerpValue * 5.3 - 2, 63.5);\n      meshAdd(entranceBarsPolygons);\n    });\n\n    // hex columns\n\n    GQuad.map(({ x, z }) => {\n      meshAdd(\n        cylinder(6),\n        identity.translate(-100 + x * 7, -3, z * 7 + 55).scale(1, 8.1),\n        material(0.6, 0.15, 0.15, 0.8),\n      );\n      [4, -0.4].map((i) =>\n        meshAdd(\n          cylinder(6),\n          identity.translate(-100 + x * 7, i, z * 7 + 55).scale(1.3, 0.5, 1.3),\n          material(0.4, 0.2, 0.2, 0.8),\n        ),\n      );\n    });\n\n    // crystals\n\n    integers_map(7, (i) => {\n      meshAdd(\n        cylinder(((i * 23 + 1) % 5) + 5, 0, 0.55),\n        identity\n          .translate(-101 + Math.sin(i) * 5 + i, -2.3 - i, 44.9 - i * 2.8)\n          .scaleSelf(5 + i / 2, 1 + i / 6, 5 + i / 3),\n        material(0.5 - i / 17, 0.5 - (i & 1) / 9, 0.6, 0.3),\n      );\n    });\n\n    // crystals continuation pad\n\n    meshAdd(cylinder(GQuad), identity.translate(-87, -9.5, 24).scale(7, 1, 3), material(0.4, 0.5, 0.6, 0.4));\n\n    // lever pad\n\n    meshAdd(cylinder(4), identity.translate(-86, -9.2, 27).scale(5, 1, 5), material(0.5, 0.6, 0.7, 0.3));\n\n    meshAdd(cylinder(12, 1), identity.translate(-86, -9, 31).scale(1.5, 1, 1.5), material(0.3, 0.3, 0.4, 0.1));\n\n    newLever(identity.translate(-86, -7.5, 31));\n\n    // elevators\n\n    const shouldOscillate = () => lerpneg(levers[7]!.$lerpValue2, levers[6]!.$lerpValue2);\n\n    newModel((model) => {\n      model._update = () => {\n        const osc = shouldOscillate();\n        return identity.translate(\n          0,\n          (1 - max(levers[6]!.$lerpValue, levers[7]!.$lerpValue)) * 3.5 + osc * Math.sin(gameTime) * 5,\n        );\n      };\n      [0, 12, 24].map((x) =>\n        meshAdd(\n          cylinder(GQuad),\n          identity.translate(x - 76.9, x / -13 - 10, 24).scale(2.8, 1.5, 3),\n          material(0.2, 0.5, 0.6, 0.2),\n        ),\n      );\n    });\n\n    newModel((model) => {\n      model._update = () => {\n        const osc = shouldOscillate();\n        return identity.translate(0, osc * Math.sin(gameTime + 3) * 6, Math.sin(gameTime * 0.6 + osc) * 6 * osc);\n      };\n      [6, 18].map((x) =>\n        meshAdd(\n          cylinder(GQuad),\n          identity.translate(x - 76.9, x / -13 - 10, 24).scale(2.8, 1.5, 3),\n          material(0.1, 0.4, 0.5, 0.2),\n        ),\n      );\n    });\n\n    // pad after elevators\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          csg_union(\n            polygons_transform(cylinder(GQuad), identity.scale(11, 1, 13), material(0.3, 0.4, 0.6, 0.3)),\n            // lever pad\n            polygons_transform(\n              cylinder(5),\n              identity.translate(0, 0, -7).scale(2, 1.2, 2),\n              material(0.2, 0.4, 0.7, 0.3),\n            ),\n            // blue pentagon\n            polygons_transform(cylinder(5), identity.scale(9, 1.2, 9), material(0, 0.2, 0.3, 0.5)),\n          ),\n          polygons_transform(cylinder(5), identity.scale(5.4, 5, 5.4), material(0, 0.2, 0.3, 0.5)),\n        ),\n      ),\n      identity.translate(-38.9, -11.3, 17),\n    );\n\n    newLever(identity.translate(-38.9, -9.6, 10));\n\n    // central sculpture/monument\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, levers[7]!.$lerpValue2 * -7.3);\n\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            csg_union(\n              polygons_transform(\n                cylinder(5),\n                identity.translate(0, 2).scale(5, 7, 5).skewY(8),\n                material(0.2, 0.4, 0.5, 0.5),\n              ),\n              polygons_transform(\n                cylinder(5),\n                identity.translate(0, 6).scale(1.1, 7, 1.1).skewY(-8),\n                material(0.25, 0.35, 0.5, 0.5),\n              ),\n              polygons_transform(\n                cylinder(5),\n                identity.translate(0, 9).scale(0.6, 7, 0.6).skewY(8),\n                material(0.35, 0.3, 0.5, 0.5),\n              ),\n            ),\n            polygons_transform(\n              cylinder(5),\n              identity.translate(0, 5).scale(1.5, 1.5, 8).rotate(90, 0, 35),\n              material(0.2, 0.4, 0.5, 0.5),\n            ),\n          ),\n        ),\n        identity.translate(-38.9, -11.3, 17),\n      );\n\n      // SOUL 5 - soul over the central sculpture/monument\n      newSoul(\n        identity.translate(-39.1, -0.3, 17).rotate(0, 0, 10),\n        ...polygon_regular(15).map(({ x, z }) => [x * 3, z * 3, 1.2]),\n      );\n    });\n\n    // columns\n\n    GQuad.map(({ x, z }) => {\n      tmpMatrix = identity.translate(x * 9 - 38.9, -7.3, z * 11 + 17);\n      meshAdd(cylinder(14, 1), tmpMatrix.scale(1, 4), material(0.25, 0.25, 0.25, 1));\n      [1.5, 8].map((y) =>\n        meshAdd(cylinder(17, 1), tmpMatrix.translate(0, y - 4).scale(1.5, 0.5, 1.5), material(0.6, 0.6, 0.6, 0.3)),\n      );\n    });\n\n    // Grid with holes\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          csg_union(\n            // holed base\n            polygons_transform(\n              cylinder(6),\n              identity.translate(0, 0, -36).scale(15, 1.2, 15),\n              material(0.7, 0.7, 0.7, 0.3),\n            ),\n            // after monument continuation\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(0, 0, -18).scale(4, 1.2, 6),\n              material(0.45, 0.4, 0.6, 0.3),\n            ),\n          ),\n          ...integers_map(6, (z) =>\n            integers_map(6, (x) =>\n              polygons_transform(\n                cylinder(6),\n                identity.translate(x * 4.6 - 12 + 2 * (z & 1), 0, z * 4.6 - 50 + Math.sin(x * 4) * 2).scale(2, 5, 2),\n                material(0.7, 0.7, 0.7, 0.3),\n              ),\n            ),\n          ).flat(),\n        ),\n      ),\n      identity.translate(-38.9, -11.3, 17),\n    );\n\n    // SOUL 6 - soul over the grid with hex holes\n    newSoul(identity.translate(-38.9, -8.4, -21), [-7, -2.5, 6], [6, -3, 6], [0, -5, 7]);\n\n    // Detour lever pad\n    meshAdd(cylinder(5), identity.translate(-84, -2, 85).scale(4, 0.8, 4).rotate(0, 10), material(0.8, 0.1, 0.25, 0.4));\n\n    // Detour lever\n    newLever(identity.translate(-84, -0.5, 85).rotate(0, 45));\n\n    // ******** SECOND BOAT ********\n\n    newModel((model) => {\n      model._update = () => getBoatAnimationMatrix(-123, 1.4, 55 + secondBoatLerp * -65);\n      newLever(identity.translate(0, -3, -4).rotate(0, 180));\n      meshAdd(boatPolygons);\n    });\n\n    // ******** LEVEL AFTER SECOND BOAT ********\n\n    // SOUL 7 - soul after the second boat\n    newSoul(identity.translate(8 - 123, 0.2, -12), [0, 0, 3.5]);\n\n    const pushingRod = csg_polygons(\n      csg_subtract(\n        polygons_transform(\n          cylinder(GQuad),\n          identity.translate(0, -0.5, 1).scale(1.15, 1.2, 6.5),\n          material(0.25, 0.25, 0.35, 0.3),\n        ),\n        polygons_transform(cylinder(3), identity.translate(0, 0, -5.5).scale(3, 2), material(0.6, 0.3, 0.4, 0.3)),\n        ...[-1.2, 1.2].map((i) =>\n          polygons_transform(\n            cylinder(GQuad),\n            identity.translate(i, -0.5, 1).scale(0.14, 0.3, 6.5),\n            material(0.7, 0.2, 0, 0.3),\n          ),\n        ),\n      ),\n    );\n\n    // pushing rods\n\n    const shouldPushRods = () => lerpneg(levers[10]!.$lerpValue, levers[11]!.$lerpValue);\n    const shouldBlockRods = () => (1 - levers[10]!.$lerpValue) * (1 - shouldPushRods());\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, -2, shouldPushRods() * abs(Math.sin(gameTime * 1.1)) * -8.5 + 10);\n      integers_map(2, (x) => meshAdd(pushingRod, identity.translate(-110 + x * 9 + (x & 1), 1.7, -12)));\n    });\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, -2, shouldPushRods() * abs(Math.sin(gameTime * 2.1)) * -8.5 + 10);\n      integers_map(2, (x) => meshAdd(pushingRod, identity.translate(-110 + (x + 2) * 9 + (x & 1), 1.7, -12)));\n    });\n\n    newModel((model) => {\n      model._update = () =>\n        identity.translate(0, -2, max(shouldBlockRods(), shouldPushRods() * abs(Math.sin(gameTime * 1.5))) * -8.5 + 10);\n      integers_map(3, (x) => meshAdd(pushingRod, identity.translate(-106 + x * 9, 1.7, -12)));\n    });\n\n    // pushing rods container\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          csg_union(\n            polygons_transform(cylinder(GQuad), identity.translate(26.5, -1.6, 10).scale(17, 2.08, 3)),\n            polygons_transform(cylinder(GQuad), identity.translate(26.5, -0.6, 10).scale(17, 2, 0.5)),\n          ),\n          ...integers_map(4, (x) =>\n            polygons_transform(cylinder(GQuad), identity.translate(13 + x * 9 + (x & 1), -0.8, 9).scale(1.35, 1.35, 9)),\n          ),\n          ...integers_map(3, (x) =>\n            polygons_transform(cylinder(GQuad), identity.translate(17 + x * 9, -0.8, 9).scale(1.35, 1.35, 9)),\n          ),\n        ),\n      ),\n      identity.translate(-123, 0, -12),\n      material(0.5, 0.5, 0.6, 0.2),\n    );\n\n    meshAdd(\n      cylinder(5),\n      identity.translate(-113.6, -1.6, -2).rotate(0, 90, 90).scale(1.5, 0.2, 1.5),\n      material(0.25, 0.25, 0.35, 1),\n    );\n\n    // boat attachment\n\n    meshAdd(\n      cylinder(GQuad),\n      identity.translate(-116, -2.6, -12).scale(3.2, 1.1, 4).skewX(3),\n      material(0.8, 0.8, 0.8, 0.2),\n    );\n\n    meshAdd(cylinder(6), identity.translate(-116, -2.6, -16.5).scale(3.2, 0.8, 3), material(0.6, 0.5, 0.7, 0.2));\n\n    newLever(identity.translate(-116, -1.4, -18).rotate(0, 180));\n\n    // arcs\n\n    integers_map(3, (i) => {\n      meshAdd(bigArcPolygons, identity.translate(i * 12 - 109, -9, -12), material(0.6, 0.6, 0.6, 0.3));\n      meshAdd(\n        bigArcPolygons,\n        identity.translate(-77, -9, i * -12 - 8 - 12).rotate(0, 90),\n        material(0.6, 0.6, 0.6, 0.3),\n      );\n    });\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          polygons_transform(\n            cylinder(12),\n            identity.translate(-77, -13.9, -12).scale(4, 18.2, 4),\n            material(0.7, 0.7, 0.7, 0.2),\n          ),\n          polygons_transform(\n            cylinder(GQuad),\n            identity.translate(-79, 0, -12).scale(3.5, 2.2, 1.3),\n            material(0.4, 0.5, 0.6, 0.2),\n          ),\n          polygons_transform(\n            cylinder(GQuad),\n            identity.translate(-77, 0, -14).scale(1.5, 2.2, 2),\n            material(0.4, 0.5, 0.6, 0.2),\n          ),\n          polygons_transform(\n            cylinder(12),\n            identity.translate(-77, 2.8, -12).scale(3, 5, 3),\n            material(0.4, 0.5, 0.6, 0.2),\n          ),\n        ),\n      ),\n    );\n\n    meshAdd(cylinder(GQuad), identity.translate(-115.5, -17, -12).scale(0.5, 15, 2.2), material(0.6, 0.6, 0.6, 0.3));\n\n    meshAdd(cylinder(GQuad), identity.translate(-77, -17, -50.5).scale(2.2, 15, 0.5), material(0.6, 0.6, 0.6, 0.3));\n\n    // internal pad\n\n    meshAdd(\n      cylinder(GQuad),\n      identity.translate(-84.9, -4.3, -40).rotate(0, 0, 12).scale(6, 1, 3),\n      material(0.6, 0.6, 0.6, 0.3),\n    );\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          polygons_transform(\n            cylinder(GQuad),\n            identity.translate(-93, -5.8, -40).scale(9, 1, 5),\n            material(0.8, 0.8, 0.8, 0.1),\n          ),\n          polygons_transform(\n            cylinder(9),\n            identity.translate(-98, -5.8, -40).scale(3, 8, 3),\n            material(0.7, 0.7, 0.7, 0.2),\n          ),\n        ),\n      ),\n    );\n\n    meshAdd(cylinder(9), identity.translate(-98, -5.8, -40).scale(2.5, 0.9, 2.5), material(0.5, 0.5, 0.5, 0.3));\n\n    newLever(identity.translate(-98, -4.4, -40).rotate(0, 90));\n\n    // SOUL 8 - soul in the internal pad after the pushing rods\n    newSoul(identity.translate(30 - 123, -3, -28 - 12).rotate(0, 0, 4), [0, -2, 3.5], [0, 2, 3.5]);\n\n    // ******** LEVEL AFTER CENTRAL GATE ********\n\n    // base\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          csg_union(\n            polygons_transform(\n              cylinder(6, 0, 0, 0.6),\n              identity.translate(-100, 0.7, 105.5).scale(8, 1, 11),\n              material(0.7, 0.7, 0.7, 0.2),\n            ),\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-101.5, 0.7, 93.5).scale(10.5, 1, 2),\n              material(0.7, 0.7, 0.7, 0.2),\n            ),\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-91.2, 0.7, 107).scale(3, 1, 3.3),\n              material(0.7, 0.7, 0.7, 0.2),\n            ),\n          ),\n          polygons_transform(\n            cylinder(5),\n            identity.translate(-100, 0.7, 113).scale(4, 3, 4),\n            material(0.7, 0.7, 0.7, 0.2),\n          ),\n        ),\n      ),\n    );\n\n    // oscillating hex pads\n\n    const hexPadShouldOscillate = () => lerpneg(levers[8]!.$lerpValue2, levers[12]!.$lerpValue2);\n\n    integers_map(4, (i) =>\n      newModel((model) => {\n        model._update = () => {\n          const osc = hexPadShouldOscillate();\n          return identity.translate(\n            (i > 2 ? (1 - osc) * 2 + osc : 0) - 100,\n            osc * Math.sin(gameTime * 1.3 + i * 1.7) * (3 + i / 3) + 0.7,\n            (i & 1 ? -1 : 1) * (1 - levers[8]!.$lerpValue2) * (1 - levers[12]!.$lerpValue2) * -7 +\n              max(0.05, osc) * Math.cos(gameTime * 1.3 + i * 7) * (4 - 2 * (1 - i / 3)) +\n              115,\n          );\n        };\n        meshAdd(\n          cylinder(6),\n          identity.translate(-14.6 - i * 4.8 - (i > 2 ? 2 : 0), -i / 2.3, -21.5).scale(2.6, 1, 2.5),\n          material(0.5 - i / 8, i / 12 + 0.5, 0.7, 0.3),\n        );\n      }),\n    );\n\n    // after the hex pads\n\n    // donut pad\n    newModel((model) => {\n      model._update = () => {\n        const osc = hexPadShouldOscillate();\n        return identity\n          .translate(\n            (1 - osc) * 2.5 - 139.7,\n            (1 - levers[8]!.$lerpValue) * -3 + osc * Math.sin(gameTime * 0.8) * -1 - 1.8,\n            93.5,\n          )\n          .rotateSelf(Math.cos(gameTime * 1.3) * (osc * 3 + 3), 0);\n      };\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(cylinder(10), identity.scale(6, 2, 6), material(0.1, 0.6, 0.5, 0.3)),\n            polygons_transform(cylinder(10), identity.scale(3.3, 6, 3.3), material(0.1, 0.6, 0.5, 0.5)),\n          ),\n        ),\n      );\n\n      // second pad\n      tmpMatrix = identity.translate(-7.5).rotate(0, 90);\n      meshAdd(cylinder(15, 1), tmpMatrix.scale(3, 2.3, 3), material(0.4, 0.4, 0.4, 0.3));\n      meshAdd(cylinder(10), tmpMatrix.scale(2, 2.5, 2), material(0.3, 0.8, 0.7, 0.3));\n      meshAdd(cylinder(5), tmpMatrix.scale(1, 3), material(0.5, 0.5, 0.5, 0.5));\n      newLever(tmpMatrix.translate(0, 3.4).rotate(0, 180));\n\n      // lateral horns\n      [-1, 1].map((i) =>\n        meshAdd(\n          hornPolygons,\n          identity\n            .rotate(-i * 90, 180, 90) //\n            .translate(0, 5)\n            .rotate(0, 0, 40) //\n            .scale(1.3, 10, 1.3), //\n          material(1, 1, 0.8, 0.2),\n        ),\n      );\n\n      // SOUL 9 - soul after the hex pads, in the hex donut with horns\n      newSoul(identity.translate(-5, 4), [0, -1.2, 1.7], [0, 1.2, 1.7]);\n    });\n\n    // far arc gate\n    [-1, 1].map((x) => {\n      meshAdd(\n        cylinder(12, 1),\n        identity.translate(-7.5 * x - 100, 3.7, 96).scale(0.8, 4, 0.8),\n        material(0.6, 0.24, 0.2, 0.5),\n      );\n\n      [7.2, 1.5].map((y) =>\n        meshAdd(\n          cylinder(15, 1),\n          identity.translate(-7.5 * x - 100, y + 0.7, 96).scale(1.1, 0.5, 1.1),\n          material(0.5, 0.24, 0.2, 0.4),\n        ),\n      );\n\n      meshAdd(\n        hornPolygons,\n        identity\n          .translate(x * -5 - 100, 1.7, 114.5)\n          .scale(1.2, 10, 1.2)\n          .rotate(0, 90 * x - 90),\n        material(1, 1, 0.8),\n      );\n\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(x * -4, 3.5, -0.5).scale(4, 4, 0.7),\n              material(0.5, 0.5, 0.5, 0.4),\n            ),\n            polygons_transform(cylinder(GQuad), identity.scale(3, 3, 10), material(0.6, 0.24, 0.2, 0.5)),\n            polygons_transform(\n              cylinder(28, 1),\n              identity.translate(0, 3, -5).scale(3, 4, 10).rotate(90, 0),\n              material(0.6, 0.24, 0.2, 0.5),\n            ),\n            polygons_transform(\n              cylinder(5),\n              identity\n                .translate(x * -5.3, 7)\n                .rotate(90, 0)\n                .scale(1.7, 5, 1.7),\n              material(0.6, 0.24, 0.2, 0.5),\n            ),\n            polygons_transform(\n              cylinder(5),\n              identity\n                .translate(x * -5.3, 3.8)\n                .rotate(90, 0, 35)\n                .scale(0.75, 5, 0.75),\n              material(0.6, 0.24, 0.2, 0.5),\n            ),\n          ),\n        ),\n        identity.translate(x - 100, 0.7, 97),\n      );\n    });\n\n    // far arc gate door\n\n    newModel((model) => {\n      model._update = () => identity.translate(-100, 0.6 - levers[12]!.$lerpValue * 6, 96.5).scale(0.88, 1.2);\n      meshAdd(entranceBarsPolygons);\n    });\n\n    // rotating platforms\n\n    const rotPlatformBase = [\n      ...polygons_transform(cylinder(25, 1), identity.scale(8, 1, 8), material(0.45, 0.45, 0.45, 0.2)),\n      ...polygons_transform(cylinder(5), identity.translate(0, 1).scale(1, 0.2), material(0.3, 0.3, 0.3, 0.2)),\n    ];\n\n    const rotPlatform = () => {\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(cylinder(25, 1), identity.translate(0, 2).scale(8, 1, 8), material(0.35, 0, 0, 0.3)),\n            polygons_transform(cylinder(GQuad), identity.scale(9, 5, 2), material(0.3, 0, 0, 0.3)),\n          ),\n        ),\n      );\n      meshAdd(rotPlatformBase);\n    };\n\n    newModel((model) => {\n      model._update = () => identity.translate(-80, 1, 106).rotate(0, 40 + rotatingPlatform1Rotation);\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(cylinder(25, 1), identity.scale(8, 1, 8), material(0.45, 0.45, 0.45, 0.2)),\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(0, 0, -5.5).scale(1.5, 3, 2.5),\n              material(0.45, 0.45, 0.45, 0.2),\n            ),\n          ),\n        ),\n      );\n      meshAdd(cylinder(8), identity.translate(0, 2).scale(3, 1.5, 3), material(0.7, 0.7, 0.7, 0.1));\n      meshAdd(cylinder(5), identity.translate(0, 2).scale(1, 2), material(0.3, 0.3, 0.3, 0.2));\n\n      // SOUL 10 - soul over the first rotating platform\n      newSoul(identity.translate(0, 3), ...polygon_regular(10).map(({ x, z }) => [x * 5.6, z * 5.6, 2.5]));\n    });\n\n    newModel((model) => {\n      model._update = () => identity.translate(-64, 1, 106).rotate(0, rotatingPlatform2Rotation);\n      rotPlatform();\n      [-1, 1].map((x) =>\n        meshAdd(\n          hornPolygons,\n          identity\n            .rotate(0, 90)\n            .translate(x * -5, 1, -0.5)\n            .scale(1.2, 10, 1.2)\n            .rotate(0, 90 * x + 90),\n          material(1, 1, 0.8),\n        ),\n      );\n    });\n\n    newModel((model) => {\n      model._update = () => identity.translate(-48, 1, 106).rotate(0, 180 - rotatingPlatform2Rotation);\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(cylinder(25, 1), identity.translate(0, 2).scale(8, 1, 8), material(0.35, 0, 0, 0.3)),\n            polygons_transform(cylinder(GQuad), identity.translate(7).scale(9, 5, 2), material(0.3, 0, 0, 0.3)),\n            polygons_transform(cylinder(GQuad), identity.translate(0, 0, 7).scale(2, 5, 9), material(0.3, 0, 0, 0.3)),\n          ),\n        ),\n      );\n      meshAdd(rotPlatformBase);\n    });\n\n    newModel((model) => {\n      model._update = () => identity.translate(-48, 1, 90).rotate(0, 270 + rotatingPlatform2Rotation);\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(cylinder(25, 1), identity.translate(0, 2).scale(8, 1, 8), material(0.35, 0, 0, 0.3)),\n            polygons_transform(cylinder(GQuad), identity.translate(7).scale(9, 5, 2), material(0.3, 0, 0, 0.3)),\n            polygons_transform(cylinder(GQuad), identity.translate(0, 0, -7).scale(2, 5, 9), material(0.3, 0, 0, 0.3)),\n          ),\n        ),\n      );\n      meshAdd(rotPlatformBase);\n    });\n\n    // rotating platforms connecting pads\n    meshAdd(cylinder(GQuad), identity.translate(-56, 1, 106).scale(0.7, 0.8, 2.5), material(0.7, 0.7, 0.7, 0.2));\n    meshAdd(cylinder(GQuad), identity.translate(-48, 1, 98).scale(2.5, 0.8, 0.7), material(0.7, 0.7, 0.7, 0.2));\n\n    // exit from the rotating platforms\n    meshAdd(cylinder(GQuad), identity.translate(-39, 0.4, 90).scale(2, 1, 2), material(0.7, 0.7, 0.7, 0.3));\n    meshAdd(cylinder(GQuad), identity.translate(-34.2, 0.4, 90).scale(3, 1, 3), material(0.7, 0.7, 0.7, 0.3));\n\n    newLever(identity.translate(-34, 2.7, 96).rotate(-12, 0));\n\n    // lever pad\n    meshAdd(cylinder(5), identity.translate(-34, 0.2, 96).scale(3, 2, 4).rotate(-20, 0), material(0.2, 0.5, 0.5, 0.6));\n\n    // ******** LEVEL AFTER THE ROTATING PLATFORMS ********\n\n    // jumping pads\n\n    [material(0.1, 0.55, 0.45, 0.2), material(0.2, 0.5, 0.5, 0.3), material(0.3, 0.45, 0.55, 0.4)].map((m, i) =>\n      newModel((model) => {\n        model._update = () => {\n          const v = lerpneg(levers[13]!.$lerpValue2, levers[14]!.$lerpValue2);\n          return identity.translate(\n            0,\n            (1 - levers[13]!.$lerpValue2) * (1 - levers[14]!.$lerpValue2) * (i ? 0 : 3) +\n              v * Math.sin(gameTime * 1.5 + i * 1.5) * 4,\n          );\n        };\n        meshAdd(cylinder(GQuad), identity.translate(-23.5, 0.5, 90 + 6.8 * i).scale(i === 1 ? 2 : 3.3, 1, 3.3), m);\n        if (i === 2) {\n          // in connection\n          meshAdd(cylinder(GQuad), identity.translate(-29.1, 0.4, 90).scale(2.1, 1, 3), material(0.7, 0.7, 0.7, 0.3));\n        }\n        if (i === 1) {\n          // out connections\n          meshAdd(\n            cylinder(GQuad),\n            identity.translate(-16.1, 0.5, 103.5).rotate(0, 0, -3.5).scale(3.9, 0.8, 2).skewX(-1),\n            material(0.6, 0.6, 0.7, 0.3),\n          );\n        }\n      }),\n    );\n\n    // middle base\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          polygons_transform(\n            cylinder(6, 0, 0, 0.3),\n            identity.translate(0, -0.92, 95).scale(14, 2, 14),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n          polygons_transform(cylinder(5), identity.translate(0, 0, 95).scale3d(6), material(0.3, 0.3, 0.3, 0.5)),\n        ),\n      ),\n    );\n\n    [8, -6.1].map((y, p) =>\n      integers_map(3, (i) =>\n        meshAdd(\n          bigArcPolygons,\n          identity.translate(i * 6 - 6, y - (i & 1), 111 - 0.2 * (i & 1) - p),\n          i & 1 ? material(0.5, 0.5, 0.5, 0.3) : material(0.35, 0.35, 0.35, 0.5),\n        ),\n      ),\n    );\n\n    // horns\n    [-1, 1].map((x) =>\n      meshAdd(\n        hornPolygons,\n        identity\n          .translate(x * -8, 1, 85)\n          .scale(1.2, 10, 1.2)\n          .rotate(0, 90 * x + 90),\n        material(1, 1, 0.8),\n      ),\n    );\n\n    newLever(identity.translate(0, 1.7, 82).rotate(0, 180));\n\n    // lever pad\n\n    meshAdd(\n      cylinder(5),\n      identity.translate(0, -15.7, 82).scale(2.5, 17, 2.5).rotate(0, 35),\n      material(0.5, 0.3, 0.3, 0.4),\n    );\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          csg_union(\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(0, 16, 110.5).scale(12, 1, 3),\n              material(0.5, 0.3, 0.3, 0.4),\n            ),\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(0, 16, 111).scale(3, 1, 3.8),\n              material(0.5, 0.3, 0.3, 0.4),\n            ),\n          ),\n\n          polygons_transform(\n            cylinder(5),\n            identity.translate(0, 16, 103.5).scale(5.5, 5, 5.5),\n            material(0.5, 0.3, 0.3, 0.4),\n          ),\n        ),\n      ),\n    );\n\n    newModel((model) => {\n      model._update = () => {\n        const k = Math.sin(gameTime);\n        return identity.translate(k * -2).rotate(0, 0, k * 25);\n      };\n      meshAdd(\n        cylinder(3),\n        identity.translate(0, -3, 118.8).scale(0.8, 0.8, 18).rotate(90, 0, 60),\n        material(0.5, 0.3, 0.3, 0.4),\n      );\n      [22, 30].map((z) => {\n        meshAdd(\n          cylinder(6),\n          identity\n            .translate(0, 16, z + 95)\n            .scale(3, 1, 2.3)\n            .rotate(0, 90),\n          material(0.7, 0.7, 0.7, 0.4),\n        );\n        meshAdd(cylinder(GQuad), identity.translate(0, 6.2, z + 95).scale(0.5, 11, 0.5), material(0.5, 0.3, 0.3, 0.4));\n      });\n    });\n\n    meshAdd(cylinder(6), identity.translate(0, 16, 121).scale(2.5, 1, 2.1).rotate(0, 90), material(0.5, 0.6, 0.7, 0.3));\n    meshAdd(cylinder(GQuad), identity.translate(0, 16, 129).scale(1.5, 1, 2), material(0.5, 0.6, 0.7, 0.3));\n    meshAdd(cylinder(7), identity.translate(0, 16.2, 133).scale(5, 1, 5), material(0.4, 0.5, 0.6, 0.4));\n\n    // floating elevator pad\n    newModel((model) => {\n      model._update = () => {\n        const v = lerpneg(\n          lerpneg((levers[14]!.$lerpValue + levers[14]!.$lerpValue2) / 2, levers[13]!.$lerpValue2),\n          (levers[15]!.$lerpValue + levers[15]!.$lerpValue2) / 2,\n        );\n        return identity.translate(0, v * 16, clamp01(v * 2 - 1) * 8.5 + 95);\n      };\n      meshAdd(cylinder(5), identity.scale(5, 1.1, 5), material(0.5, 0.3, 0.3, 0.4));\n      meshAdd(cylinder(5), identity.scale(5.5, 0.9, 5.5), material(0.25, 0.25, 0.25, 0.4));\n\n      newLever(identity.translate(0, 1.5, -1).rotate(0, 180));\n    });\n\n    // SOUL 11 - soul in the last platform\n    newSoul(identity.translate(0, 3, 95), ...polygon_regular(9).map(({ x, z }) => [x * 9, z * 9, 4]));\n\n    // SOUL 12 - soul after the pendulums\n    newSoul(identity.translate(0, 19, 134), [0, 0, 3.5]);\n  });\n\n  // ------ End of game models ------\n\n  playerModels = [\n    newModel(() => {\n      // Player legs\n\n      // Player body\n\n      // horns\n      [0, 180].map((r) =>\n        meshAdd(\n          hornPolygons,\n          identity.rotate(0, r).translate(0.2, 1.32).rotate(0, 0, -30).scale(0.2, 0.6, 0.2),\n          material(1, 1, 0.8),\n        ),\n      );\n\n      // head\n      meshAdd(sphere(20), identity.translate(0, 1).scale(0.5, 0.5, 0.5), material(1, 0.3, 0.4));\n\n      const eye = polygons_transform(\n        csg_polygons(\n          csg_subtract(\n            cylinder(15, 1),\n            polygons_transform(cylinder(GQuad), identity.translate(0, 0, 1).scale(2, 2, 0.5)),\n          ),\n        ),\n        identity.rotate(-90, 0).scale(0.1, 0.05, 0.1),\n        material(0.3, 0.3, 0.3),\n      );\n\n      [-1, 1].map((i) => meshAdd(eye, identity.translate(i * 0.2, 1.2, 0.4).rotate(0, i * 20, i * 20)));\n\n      // mouth\n      meshAdd(cylinder(GQuad), identity.translate(0, 0.9, 0.45).scale(0.15, 0.02, 0.06), material(0.3, 0.3, 0.3));\n\n      // body\n      meshAdd(sphere(20), identity.scale(0.7, 0.8, 0.55), material(1, 0.3, 0.4));\n    }),\n    ...[-1, 1].map((x) =>\n      newModel(() => {\n        meshAdd(cylinder(10, 1), identity.translate(x * 0.3, -0.8).scale(0.2, 0.7, 0.24), material(1, 0.3, 0.4));\n      }),\n    ),\n  ] as [Model, Model, Model];\n\n  leverModel = newModel(() => {\n    meshAdd(cylinder(6, 1), identity.scale(0.13, 1.4, 0.13), material(0.3, 0.3, 0.5, 0.1));\n    meshAdd(cylinder(8, 1), identity.translate(0, 1).scale(0.21, 0.3, 0.21), material(1, 0.5, 0.2));\n    meshAdd(cylinder(3), identity.translate(0, -1).rotate(90, 90).scale(0.3, 0.4, 0.3), material(0.2, 0.2, 0.2, 0.1));\n  }, MODEL_KIND_MESH);\n\n  soulCollisionModel = newModel(() => {\n    meshAdd(cylinder(6).slice(0, -1), identity.scale(0.77, 1, 0.77), material(1, 0.3, 0.5));\n  }, MODEL_KIND_MESH);\n\n  soulModel = newModel(() => {\n    const GHOST_SLICES = 30;\n    const GHOST_STACKS = 24;\n\n    // body\n    meshAdd(\n      sphere(GHOST_SLICES, GHOST_STACKS, (a: number, b: number, polygon: Polygon) => {\n        const bm = b / GHOST_STACKS;\n        const theta = a * (Math.PI * (2 / GHOST_SLICES));\n        const phixz = (bm ** 0.6 * Math.PI) / 2;\n        const osc = (bm * bm * Math.sin(a * Math.PI * (14 / GHOST_SLICES))) / 4;\n        if (b === GHOST_STACKS - 1) {\n          polygon.$smooth = 0;\n          return { x: 0, y: -0.5, z: 0 };\n        }\n        return {\n          x: Math.cos(theta) * Math.sin(phixz),\n          y: Math.cos(bm * Math.PI) - bm - osc,\n          z: Math.sin(theta) * Math.sin(phixz) + Math.sin(osc * Math.PI * 2) / 4,\n        };\n      }),\n      identity.scale3d(0.7),\n      material(1, 1, 1),\n    );\n\n    // eyes\n    [-1, 1].map((x) => meshAdd(sphere(12), identity.translate(x * 0.16, 0.4, -0.36).scale3d(0.09)));\n  }, MODEL_KIND_MESH);\n\n  if (DEBUG) {\n    console.log(levers.length + \" levers\");\n  }\n};\n","import { allModels } from \"./scene\";\nimport { identity, matrixToArray } from \"../math\";\nimport { mainMenuVisible } from \"../page\";\nimport { absoluteTime, levers, souls } from \"./world-state\";\nimport { leverModel, playerModels, soulCollisionModel, soulModel } from \"./level\";\nimport { gl } from \"../gl\";\n\nconst worldMatricesBuffer = new Float32Array(39 * 16);\n\nexport const renderModels = (\n  worldMatrixLoc: WebGLUniformLocation,\n  renderPlayer: 0 | 1 | boolean,\n  isCollider: 0 | 1,\n) => {\n  const soulModelToRender = isCollider ? soulCollisionModel : soulModel;\n  if (mainMenuVisible) {\n    const matrix = identity.rotate(0, Math.sin(absoluteTime) * 40 - 70);\n    for (const { $modelId } of playerModels) {\n      matrixToArray(matrix, worldMatricesBuffer, $modelId - 1);\n    }\n    gl.uniformMatrix4fv(worldMatrixLoc, false, worldMatricesBuffer);\n    gl.drawElements(\n      gl.TRIANGLES,\n      playerModels[2].$vertexEnd! - playerModels[0].$vertexBegin!,\n      gl.UNSIGNED_SHORT,\n      playerModels[0].$vertexBegin! * 2,\n    );\n    return;\n  }\n\n  // Render world\n\n  for (let i = 0; i < allModels.length; ++i) {\n    const { $kind, $modelId, $matrix } = allModels[i]!;\n    if ($kind) {\n      matrixToArray($matrix, worldMatricesBuffer, $modelId - 1);\n    }\n  }\n  gl.uniformMatrix4fv(worldMatrixLoc, false, worldMatricesBuffer);\n  gl.drawElements(\n    gl.TRIANGLES,\n    (renderPlayer ? playerModels[2]!.$vertexEnd! : playerModels[0].$vertexBegin!) - 3,\n    gl.UNSIGNED_SHORT,\n    3 * 2,\n  );\n\n  // Render souls\n\n  for (let i = 0; i < levers.length; ++i) {\n    const { $matrix, $lerpValue } = levers[i]!;\n    matrixToArray($matrix!, worldMatricesBuffer, i);\n    worldMatricesBuffer[i * 16 + 15] = 1 - $lerpValue;\n  }\n  gl.uniformMatrix4fv(worldMatrixLoc, false, worldMatricesBuffer);\n  gl.drawElementsInstanced(\n    gl.TRIANGLES,\n    leverModel.$vertexEnd! - leverModel.$vertexBegin!,\n    gl.UNSIGNED_SHORT,\n    leverModel.$vertexBegin! * 2,\n    levers.length,\n  );\n\n  // Render levers\n\n  for (let i = 0; i < 13; ++i) {\n    matrixToArray(souls[i]!.$matrix!, worldMatricesBuffer, i);\n  }\n  gl.uniformMatrix4fv(worldMatrixLoc, false, worldMatricesBuffer);\n  gl.drawElementsInstanced(\n    gl.TRIANGLES,\n    soulModelToRender.$vertexEnd! - soulModelToRender.$vertexBegin!,\n    gl.UNSIGNED_SHORT,\n    soulModelToRender.$vertexBegin! * 2,\n    13,\n  );\n};\n","// shaders\nimport csm_vsSource from \"./shaders/csm-vertex.vert\";\nimport main_vsSource, {\n  uniformName_projectionMatrix,\n  uniformName_viewMatrix,\n  uniformName_worldMatrices,\n} from \"./shaders/main-vertex.vert\";\nimport main_fsSource, {\n  uniformName_viewPos,\n  uniformName_csm_matrix0,\n  uniformName_csm_matrix1,\n  uniformName_csm_texture0,\n  uniformName_csm_texture1,\n  uniformName_groundTexture,\n  constDef_CSM_TEXTURE_SIZE as CSM_TEXTURE_SIZE,\n  constDef_CSM_PLANE_DISTANCE as CSM_PLANE_DISTANCE,\n} from \"./shaders/main-fragment.frag\";\nimport collider_fsSource from \"./shaders/collider-fragment.frag\";\nimport void_fsSource from \"./shaders/void-fragment.frag\";\nimport sky_vsSource from \"./shaders/sky-vertex.vert\";\nimport sky_fsSource, { uniformName_iResolution } from \"./shaders/sky-fragment.frag\";\n\nimport {\n  abs,\n  angle_wrap_degrees,\n  clamp01,\n  DEG_TO_RAD,\n  integers_map,\n  interpolate_with_hysteresis,\n  lerp,\n  max,\n  min,\n  identity,\n  mat_perspectiveXY,\n  angle_lerp_degrees,\n  matrixToArray,\n} from \"./math\";\nimport { mat_perspective, zFar, zNear, camera_position, camera_rotation } from \"./camera\";\nimport { csm_buildMatrix } from \"./csm\";\nimport { allModels, MODEL_KIND_GAME } from \"./game/scene\";\nimport { gl, initShaderProgram, loadShader } from \"./gl\";\nimport {\n  absoluteTime,\n  gameTime,\n  gameTimeDelta,\n  gameTimeUpdate,\n  lerpDamp,\n  levers,\n  loadGame,\n  player_last_pulled_lever,\n  worldStateUpdate,\n} from \"./game/world-state\";\nimport {\n  mainMenuVisible,\n  initPage,\n  player_first_person,\n  keyboard_downKeys,\n  KEY_BACK,\n  KEY_FRONT,\n  KEY_LEFT,\n  KEY_RIGHT,\n  touch_movementX,\n  touch_movementY,\n  KEY_INTERACT,\n} from \"./page\";\nimport { initTriangleBuffers } from \"./game/triangle-buffers\";\nimport { renderModels } from \"./game/render-models\";\nimport { player_position_final } from \"./game/player-position\";\nimport {\n  GAMEPAD_BUTTON_LEFT,\n  GAMEPAD_BUTTON_RIGHT,\n  GAMEPAD_BUTTON_UP,\n  GAMEPAD_BUTTON_DOWN,\n  GAMEPAD_BUTTON_A,\n  GAMEPAD_BUTTON_X,\n  GAMEPAD_BUTTON_B,\n  GAMEPAD_BUTTON_Y,\n} from \"./utils/keycodes\";\nimport { playerModels } from \"./game/level\";\n\nconst CAMERA_PLAYER_Y_DIST = 13;\nconst CAMERA_PLAYER_Z_DIST = -18;\n\nconst PLAYER_LEGS_VELOCITY = 7 * 1.3;\n\nconst COLLISION_TEXTURE_SIZE = 128;\n\n// let debug2dctx: CanvasRenderingContext2D | null | undefined;\n\nexport const startMainLoop = (groundTextureImage: HTMLImageElement) => {\n  NO_INLINE(initTriangleBuffers)();\n\n  let oldModelId: number | undefined;\n  let currentModelIdTMinus1 = 0;\n  let currentModelId = 0;\n\n  let player_has_ground: 0 | 1 | undefined;\n  let player_respawned: 0 | 1 = 1;\n  let player_look_angle_target = 0;\n  let player_look_angle = 0;\n  let player_legs_speed = 0;\n  let player_gravity: number;\n  let player_speed: number;\n  let player_collision_velocity_x: number;\n  let player_collision_velocity_z: number;\n  let player_model_y: number;\n  let player_collision_x: number;\n  let player_collision_z: number;\n  const player_position_global = { x: 0, y: 0, z: 0 };\n\n  // let _gamepadStartPressed = false;\n  let _gamepadInteractPressed = false;\n\n  let camera_player_dir_x: number;\n  let camera_player_dir_y: number;\n  let camera_player_dir_z: number;\n\n  const player_collision_modelIdCounter = new Int32Array(256);\n  const collision_buffer = new Uint8Array(COLLISION_TEXTURE_SIZE * COLLISION_TEXTURE_SIZE * 4);\n\n  const mainVertexShader = loadShader(main_vsSource);\n  const csmShader = initShaderProgram(loadShader(csm_vsSource), void_fsSource);\n  const skyShader = initShaderProgram(loadShader(sky_vsSource), sky_fsSource);\n  const collisionShader = initShaderProgram(mainVertexShader, collider_fsSource);\n  const mainShader = initShaderProgram(mainVertexShader, main_fsSource);\n\n  const csm_framebuffer = gl.createFramebuffer();\n  const collision_frameBuffer = gl.createFramebuffer()!;\n  const collision_renderBuffer = gl.createRenderbuffer();\n  const collision_texture = gl.createTexture()!;\n\n  const csm_render = integers_map(2, (csmSplit: number) => {\n    const texture = gl.createTexture()!;\n    const lightSpaceMatrix: Float32Array = new Float32Array(16);\n    const lightSpaceMatrixLoc = mainShader(csmSplit ? uniformName_csm_matrix1 : uniformName_csm_matrix0);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, csm_framebuffer);\n    // Disable rendering to the csm color buffer, we just need the depth buffer\n    gl.drawBuffers([gl.NONE]);\n    gl.readBuffer(gl.NONE);\n\n    mainShader();\n    gl.uniform1i(mainShader(csmSplit ? uniformName_csm_texture1 : uniformName_csm_texture0), csmSplit);\n\n    gl.activeTexture(gl.TEXTURE0 + csmSplit);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.DEPTH_COMPONENT24,\n      CSM_TEXTURE_SIZE,\n      CSM_TEXTURE_SIZE,\n      0,\n      gl.DEPTH_COMPONENT,\n      gl.UNSIGNED_INT,\n      null,\n    );\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, gl.LEQUAL); // Can be LESS or LEQUAL\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\n    return (matrix?: DOMMatrix) => {\n      if (matrix) {\n        matrixToArray(matrix, lightSpaceMatrix);\n        gl.uniformMatrix4fv(csmShader(uniformName_viewMatrix), false, lightSpaceMatrix);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, texture, 0);\n        gl.clear(gl.DEPTH_BUFFER_BIT);\n        renderModels(csmShader(uniformName_worldMatrices), !player_first_person, 0);\n      } else {\n        gl.uniformMatrix4fv(lightSpaceMatrixLoc, false, lightSpaceMatrix);\n      }\n    };\n  });\n\n  skyShader();\n  gl.uniform1i(skyShader(uniformName_groundTexture), 3); // TEXTURE3\n\n  collisionShader();\n  gl.uniformMatrix4fv(collisionShader(uniformName_projectionMatrix), false, mat_perspectiveXY(1.4, 0.59, 0.0001, 1));\n\n  mainShader();\n  gl.uniform1i(mainShader(uniformName_groundTexture), 3); // TEXTURE3\n\n  gl.enable(gl.DEPTH_TEST); // Enable depth testing\n  gl.enable(gl.CULL_FACE); // Don't render triangle backs\n\n  gl.clearDepth(1); // Clear everything. Default value is 1\n  gl.cullFace(gl.BACK); // Default value is already BACK\n  gl.depthFunc(gl.LEQUAL); // LEQUAL to make sky works\n  gl.clearColor(0, 0, 0, 1);\n\n  // Collision framebuffer\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n  gl.bindRenderbuffer(gl.RENDERBUFFER, collision_renderBuffer);\n\n  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE);\n  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, collision_renderBuffer);\n\n  gl.activeTexture(gl.TEXTURE3);\n  gl.bindTexture(gl.TEXTURE_2D, collision_texture);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, collision_texture, 0);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    gl.RGB,\n    COLLISION_TEXTURE_SIZE,\n    COLLISION_TEXTURE_SIZE,\n    0,\n    gl.RGB,\n    gl.UNSIGNED_BYTE,\n    null,\n  );\n\n  // Ground texture\n\n  gl.activeTexture(gl.TEXTURE3);\n  gl.bindTexture(gl.TEXTURE_2D, gl.createTexture());\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1024, 1024, 0, gl.RGBA, gl.UNSIGNED_BYTE, groundTextureImage);\n  gl.generateMipmap(gl.TEXTURE_2D);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\n  const player_respawn = () => {\n    // TODO: player_respawn player position calculation must be done per frame and after models are updated!\n    // if we don't do this we might risk to be stuck on moving objects\n    const { $parent, $locMatrix } = levers[player_last_pulled_lever]!;\n\n    const { x, y, z } = $locMatrix!.transformPoint({ x: 0, y: 8, z: -3 });\n\n    player_position_final.x = player_position_global.x = x;\n    player_position_final.y = player_position_global.y = player_model_y = y;\n    player_position_final.z = player_position_global.z = z;\n\n    player_speed = 0;\n    player_gravity = 0;\n    player_collision_velocity_x = 0;\n    player_collision_velocity_z = 0;\n    player_has_ground = 0;\n\n    player_respawned = 1;\n    currentModelIdTMinus1 = currentModelId = $parent?.$modelId || 1;\n  };\n\n  const doVerticalCollisions = () => {\n    let maxModelIdCount = 0;\n    let nextModelId = 0;\n    player_collision_modelIdCounter.fill(0);\n\n    let lines = 0;\n    let grav = 0;\n    let hasGround: 0 | 1 = 0;\n    for (let y = 0; y < 31; ++y) {\n      let up = 0;\n      const yindex = y * (COLLISION_TEXTURE_SIZE * 4);\n      for (let x = 0; x < COLLISION_TEXTURE_SIZE - 0; x++) {\n        let i = yindex + x * 4;\n        const a = (collision_buffer[i]! + collision_buffer[i + 1]!) / 255;\n        i = collision_buffer[i + 2]!;\n        if (x > 14 && x < COLLISION_TEXTURE_SIZE - 14) {\n          up += a;\n        }\n        if (i && a) {\n          const count = player_collision_modelIdCounter[i]! + 1;\n          player_collision_modelIdCounter[i] = count;\n          if (count >= maxModelIdCount) {\n            maxModelIdCount = count;\n            nextModelId = i;\n          }\n        }\n      }\n      if (up < 3 && y > 5) {\n        grav += y / 32;\n      }\n      if (up > 3) {\n        if (y > 7) {\n          lines += y / 15;\n        }\n        hasGround = 1;\n      }\n    }\n\n    if (nextModelId) {\n      hasGround = 1;\n    }\n\n    if (player_respawned) {\n      // keep the previous modelId until the player touch ground\n      if (nextModelId) {\n        player_respawned = 0;\n        currentModelId = nextModelId;\n      }\n    } else {\n      currentModelId = nextModelId || currentModelIdTMinus1;\n    }\n    currentModelIdTMinus1 = nextModelId;\n\n    player_has_ground = hasGround;\n    player_gravity = lerpDamp(player_gravity, hasGround ? 6.5 : 8, 4);\n\n    // push up and gravity\n    player_position_global.y +=\n      lines / 41 - (hasGround ? 1 : player_gravity) * (grav / 41) * player_gravity * gameTimeDelta;\n  };\n\n  const doHorizontalCollisions = () => {\n    for (let y = 32; y < COLLISION_TEXTURE_SIZE; y += 2) {\n      let front = 0;\n      let back = 0;\n      let left = 0;\n      let right = 0;\n      const yindex = y * (COLLISION_TEXTURE_SIZE * 4);\n      for (let x = y & 1; x < COLLISION_TEXTURE_SIZE; x += 2) {\n        const i1 = yindex + x * 4;\n        const i2 = yindex + (COLLISION_TEXTURE_SIZE - 1 - x) * 4;\n        const dist1 = collision_buffer[i1]! / 255;\n        const dist2 = collision_buffer[i2 + 1]! / 255;\n\n        const t = 1 - abs(2 * (x / (COLLISION_TEXTURE_SIZE - 1)) - 1);\n\n        if (x > 10 && x < COLLISION_TEXTURE_SIZE - 10) {\n          const dist1Opposite = collision_buffer[i2]! / 255;\n          front = max(front, max(dist1 * t, dist1 * dist1Opposite * 2));\n          const dist2Opposite = collision_buffer[i1 + 1]! / 255;\n          back = max(back, max(dist2 * t, dist2 * dist2Opposite));\n        }\n\n        if (x < COLLISION_TEXTURE_SIZE / 2 - 10 || x > COLLISION_TEXTURE_SIZE / 2 + 10) {\n          const xdist = ((1 - t) * max(dist1, dist2)) / 3;\n          if (xdist > 0.001) {\n            if (x < COLLISION_TEXTURE_SIZE / 2 && left < xdist) {\n              left = xdist;\n            } else if (x > COLLISION_TEXTURE_SIZE / 2 && right < xdist) {\n              right = xdist;\n            }\n          }\n        }\n      }\n\n      const dx = right - left;\n      const dz = back - front;\n\n      if (abs(dx) > abs(player_collision_x)) {\n        player_collision_x = dx;\n      }\n      if (abs(dz) > abs(player_collision_z)) {\n        player_collision_z = dz;\n      }\n    }\n  };\n\n  const updatePlayer = () => {\n    player_collision_x = 0;\n    player_collision_z = 0;\n\n    NO_INLINE(doVerticalCollisions)();\n    NO_INLINE(doHorizontalCollisions)();\n\n    let strafe = touch_movementX + (keyboard_downKeys[KEY_LEFT] ? 1 : 0) + (keyboard_downKeys[KEY_RIGHT] ? -1 : 0);\n    let forward = touch_movementY + (keyboard_downKeys[KEY_FRONT] ? 1 : 0) + (keyboard_downKeys[KEY_BACK] ? -1 : 0);\n\n    const gamepad = navigator.getGamepads()[0];\n    if (gamepad) {\n      const { buttons, axes } = gamepad;\n      const getGamepadButtonState = (index: number) => buttons[index]?.pressed || (buttons[index]?.value as any) > 0;\n\n      const interactButtonPressed =\n        getGamepadButtonState(GAMEPAD_BUTTON_A) ||\n        getGamepadButtonState(GAMEPAD_BUTTON_X) ||\n        getGamepadButtonState(GAMEPAD_BUTTON_Y) ||\n        getGamepadButtonState(GAMEPAD_BUTTON_B);\n      if (interactButtonPressed !== _gamepadInteractPressed) {\n        _gamepadInteractPressed = interactButtonPressed;\n        if (_gamepadInteractPressed) {\n          keyboard_downKeys[KEY_INTERACT] = 1;\n        }\n      }\n\n      strafe +=\n        (abs(-axes[0]!) > 0.2 ? -axes[0]! : 0) +\n        (getGamepadButtonState(GAMEPAD_BUTTON_LEFT) ? 1 : 0) +\n        (getGamepadButtonState(GAMEPAD_BUTTON_RIGHT) ? -1 : 0);\n      forward +=\n        (abs(-axes[1]!) > 0.2 ? -axes[1]! : 0) +\n        (getGamepadButtonState(GAMEPAD_BUTTON_UP) ? 1 : 0) +\n        (getGamepadButtonState(GAMEPAD_BUTTON_DOWN) ? -1 : 0);\n\n      // const startPressed = getGamepadButtonState(GAMEPAD_BUTTON_START);\n      // if (_gamepadStartPressed !== startPressed && startPressed && game_play_clicked_once) {\n      //   setMainMenuVisible(!mainMenuVisible);\n      // }\n      // _gamepadStartPressed = startPressed;\n\n      if (player_first_person) {\n        if (abs(axes[2]!) > 0.3) {\n          camera_rotation.y += axes[2]! * 80 * gameTimeDelta;\n        }\n        if (abs(axes[3]!) > 0.3) {\n          camera_rotation.x += axes[3]! * 80 * gameTimeDelta;\n        }\n      }\n    }\n\n    if (abs(forward) < 0.05) {\n      forward = 0;\n    }\n    if (abs(strafe) < 0.05) {\n      strafe = 0;\n    }\n\n    const angle = Math.atan2(forward, strafe);\n    const amount = clamp01(Math.hypot(forward, strafe));\n\n    strafe = amount * Math.cos(angle);\n    forward = amount * Math.sin(angle);\n\n    const playerSpeedCollision = clamp01(1 - max(abs(player_collision_x), abs(player_collision_z)) * 5);\n\n    if (!currentModelId) {\n      player_collision_x += player_collision_velocity_x * playerSpeedCollision * gameTimeDelta;\n      player_collision_z += player_collision_velocity_z * playerSpeedCollision * gameTimeDelta;\n    }\n    player_collision_velocity_x = lerpDamp(player_collision_velocity_x, 0, player_has_ground ? 8 : 4);\n    player_collision_velocity_z = lerpDamp(player_collision_velocity_z, 0, player_has_ground ? 8 : 4);\n\n    player_speed = lerpDamp(\n      player_speed,\n      player_has_ground ? (strafe || forward ? (player_has_ground ? 7 : 4) : 0) * playerSpeedCollision : 0,\n      player_has_ground ? (playerSpeedCollision > 0.1 ? 10 : strafe || forward ? 5 : 7) : 1,\n    );\n\n    const movementRadians = player_first_person ? camera_rotation.y * DEG_TO_RAD : Math.PI;\n    const s = Math.sin(movementRadians) * player_speed * gameTimeDelta;\n    const c = Math.cos(movementRadians) * player_speed * gameTimeDelta;\n    player_collision_x -= strafe * c - forward * s;\n    player_collision_z -= strafe * s + forward * c;\n\n    const referenceMatrix =\n      (allModels[currentModelId]!.$kind === MODEL_KIND_GAME && allModels[currentModelId]!.$matrix) || identity;\n    const inverseReferenceRotationMatrix = referenceMatrix.inverse();\n    inverseReferenceRotationMatrix.m41 = 0;\n    inverseReferenceRotationMatrix.m42 = 0;\n    inverseReferenceRotationMatrix.m43 = 0;\n    ({ x: player_collision_x, z: player_collision_z } = inverseReferenceRotationMatrix.transformPoint({\n      x: player_collision_x,\n      z: player_collision_z,\n      w: 0,\n    }));\n\n    player_position_global.x += player_collision_x;\n    player_position_global.z += player_collision_z;\n\n    if (currentModelId !== oldModelId) {\n      if (DEBUG) {\n        console.log(\"modelId: \" + oldModelId + \" -> \" + currentModelId);\n      }\n\n      oldModelId = currentModelId;\n\n      const { x, y, z } = referenceMatrix.inverse().transformPoint(player_position_final);\n      player_position_global.x = x;\n      player_position_global.y = y;\n      player_position_global.z = z;\n    }\n\n    const oldx = player_position_final.x;\n    const oldz = player_position_final.z;\n\n    const { x, y, z } = referenceMatrix.transformPoint(player_position_global);\n    player_position_final.x = x;\n    player_position_final.y = y;\n    player_position_final.z = z;\n\n    const ydiff = abs(player_model_y - y);\n    player_model_y = lerpDamp(player_model_y, y + 0.1, ydiff * 50 + 5);\n\n    if (currentModelId) {\n      player_collision_velocity_x = (player_position_final.x - oldx) / gameTimeDelta;\n      player_collision_velocity_z = (player_position_final.z - oldz) / gameTimeDelta;\n    }\n\n    if (strafe || forward) {\n      player_look_angle_target = 90 - angle / DEG_TO_RAD;\n    }\n    player_look_angle = angle_lerp_degrees(player_look_angle, player_look_angle_target, gameTimeDelta * 8);\n    player_legs_speed = lerp(player_legs_speed, amount, gameTimeDelta * 10);\n\n    if (!DEBUG_CAMERA) {\n      camera_player_dir_x = interpolate_with_hysteresis(\n        camera_player_dir_x,\n        player_position_final.x,\n        0.5,\n        gameTimeDelta,\n      );\n      camera_player_dir_y = interpolate_with_hysteresis(camera_player_dir_y, player_position_final.y, 2, gameTimeDelta);\n      camera_player_dir_z = interpolate_with_hysteresis(\n        camera_player_dir_z,\n        player_position_final.z,\n        0.5,\n        gameTimeDelta,\n      );\n\n      if (player_first_person) {\n        const interpolationSpeed = player_respawned * 200;\n        camera_position.x = lerpDamp(camera_position.x, player_position_final.x, 18 + interpolationSpeed);\n        camera_position.y = lerpDamp(camera_position.y, player_position_final.y + 1.5, 15 + interpolationSpeed);\n        camera_position.z = lerpDamp(camera_position.z, player_position_final.z, 18 + interpolationSpeed);\n        camera_rotation.x = max(min(camera_rotation.x, 87), -87);\n      } else {\n        camera_position.x = interpolate_with_hysteresis(camera_position.x, camera_player_dir_x, 1, gameTimeDelta * 2);\n        camera_position.y = interpolate_with_hysteresis(\n          camera_position.y,\n          camera_player_dir_y + CAMERA_PLAYER_Y_DIST + player_respawned * 15,\n          4,\n          gameTimeDelta * 2,\n        );\n        camera_position.z = interpolate_with_hysteresis(\n          camera_position.z,\n          camera_player_dir_z + CAMERA_PLAYER_Z_DIST,\n          1,\n          gameTimeDelta * 2,\n        );\n\n        const viewDirDiffz = camera_position.z - camera_player_dir_z;\n        if (abs(viewDirDiffz) > 1) {\n          const viewDirDiffx = camera_position.x - camera_player_dir_x;\n          const viewDirDiffy = camera_position.y - camera_player_dir_y;\n          camera_rotation.y = 270 + Math.atan2(viewDirDiffz, viewDirDiffx) / DEG_TO_RAD;\n          camera_rotation.x = 90 - Math.atan2(Math.hypot(viewDirDiffz, viewDirDiffx), viewDirDiffy) / DEG_TO_RAD;\n        }\n      }\n    }\n\n    camera_rotation.y = angle_wrap_degrees(camera_rotation.y);\n  };\n\n  const mainLoop = (globalTime: number) => {\n    if (gl.isContextLost()) {\n      location.reload();\n      return;\n    }\n    requestAnimationFrame(mainLoop);\n\n    gameTimeUpdate(globalTime);\n\n    if (gameTimeDelta > 0) {\n      // read collision shader output\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n      gl.finish();\n      gl.readPixels(0, 0, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE, gl.RGBA, gl.UNSIGNED_BYTE, collision_buffer);\n      gl.invalidateFramebuffer(gl.DRAW_FRAMEBUFFER, [gl.COLOR_ATTACHMENT0, gl.DEPTH_ATTACHMENT]);\n      gl.invalidateFramebuffer(gl.READ_FRAMEBUFFER, [gl.COLOR_ATTACHMENT0, gl.DEPTH_ATTACHMENT]);\n\n      NO_INLINE(updatePlayer)();\n\n      worldStateUpdate();\n\n      // Special handling for the second boat (lever 7) - the boat must be on the side of the map the player is\n      if (currentModelId === 1) {\n        levers[9]!.$value = player_position_final.x < -15 && player_position_final.z < 0 ? 1 : 0;\n      }\n\n      if (player_position_final.y < (player_position_final.x < -25 || player_position_final.z < 109 ? -25 : -9)) {\n        // Player fell in lava\n        player_respawn();\n      }\n\n      keyboard_downKeys[KEY_INTERACT] = 0;\n    }\n\n    const camera_view = mainMenuVisible\n      ? identity\n          .rotate(-20, -90)\n          .invertSelf()\n          .translateSelf(4.5, -2, -3.2 + clamp01(hC.clientWidth / 1000))\n      : identity\n          .rotate(-camera_rotation.x, -camera_rotation.y, -camera_rotation.z)\n          .invertSelf()\n          .translateSelf(-camera_position.x, -camera_position.y, -camera_position.z);\n\n    if (gameTimeDelta > 0) {\n      // *** COLLISION RENDERER ***\n\n      collisionShader();\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n      gl.viewport(0, 0, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE);\n\n      // first collision render\n\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      gl.colorMask(true, false, true, false);\n      gl.uniformMatrix4fv(\n        collisionShader(uniformName_viewMatrix),\n        false,\n        matrixToArray(\n          identity\n            .rotate(0, 180)\n            .invertSelf()\n            .translateSelf(-player_position_final.x, -player_position_final.y, 0.3 - player_position_final.z),\n        ),\n      );\n      renderModels(collisionShader(uniformName_worldMatrices), 0, 1);\n\n      // second collision render\n\n      gl.clear(gl.DEPTH_BUFFER_BIT);\n      gl.colorMask(false, true, true, false);\n      gl.uniformMatrix4fv(\n        collisionShader(uniformName_viewMatrix),\n        false,\n        matrixToArray(\n          identity.translate(-player_position_final.x, -player_position_final.y, -player_position_final.z - 0.3),\n        ),\n      );\n      renderModels(collisionShader(uniformName_worldMatrices), 0, 1);\n\n      // gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      gl.flush();\n    }\n\n    // *** CASCADED SHADOWMAPS ***\n\n    csmShader();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, csm_framebuffer);\n    gl.viewport(0, 0, CSM_TEXTURE_SIZE, CSM_TEXTURE_SIZE);\n\n    csm_render[0]!(csm_buildMatrix(camera_view, zNear, CSM_PLANE_DISTANCE, 10));\n    csm_render[1]!(csm_buildMatrix(camera_view, CSM_PLANE_DISTANCE, zFar, 11));\n\n    // *** MAIN RENDER ***\n\n    mainShader();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    gl.colorMask(true, true, true, true);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    csm_render[0]!();\n    csm_render[1]!();\n\n    gl.uniformMatrix4fv(mainShader(uniformName_projectionMatrix), false, mat_perspective(zNear, zFar));\n    gl.uniformMatrix4fv(mainShader(uniformName_viewMatrix), false, matrixToArray(camera_view));\n    gl.uniform3f(mainShader(uniformName_viewPos), camera_position.x, camera_position.y, camera_position.z);\n\n    renderModels(mainShader(uniformName_worldMatrices), !player_first_person, 0);\n\n    // *** SKY RENDER ***\n\n    skyShader();\n\n    gl.uniform3f(skyShader(uniformName_iResolution), gl.drawingBufferWidth, gl.drawingBufferHeight, absoluteTime);\n    if (mainMenuVisible) {\n      gl.uniform3f(skyShader(uniformName_viewPos), 0, 0, 0);\n    } else {\n      gl.uniform3f(skyShader(uniformName_viewPos), camera_position.x, camera_position.y, camera_position.z);\n    }\n    gl.uniformMatrix4fv(skyShader(uniformName_viewMatrix), false, matrixToArray(camera_view.inverse()));\n\n    gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 0);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n    gl.flush();\n  };\n\n  playerModels.map((model, i) => {\n    model._update = i\n      ? // Legs matrices\n        () =>\n          playerModels[0].$matrix\n            .translate(\n              0,\n              player_legs_speed *\n                clamp01(Math.sin(gameTime * PLAYER_LEGS_VELOCITY + Math.PI * (i - 1) - Math.PI / 2) * 0.45),\n            )\n            .rotateSelf(\n              player_legs_speed * Math.sin(gameTime * PLAYER_LEGS_VELOCITY + Math.PI * (i - 1)) * (0.25 / DEG_TO_RAD),\n              0,\n            )\n      : // Body matrix\n        () =>\n          identity\n            .translate(player_position_final.x, player_model_y, player_position_final.z)\n            .rotateSelf(0, player_look_angle);\n  });\n\n  loadGame();\n\n  worldStateUpdate();\n\n  player_respawn();\n\n  camera_position.x = camera_player_dir_x = player_position_final.x;\n  camera_position.y = (camera_player_dir_y = player_position_final.y) + CAMERA_PLAYER_Y_DIST;\n  camera_position.z = (camera_player_dir_z = player_position_final.z) + CAMERA_PLAYER_Z_DIST;\n\n  NO_INLINE(initPage)();\n\n  requestAnimationFrame(mainLoop);\n};\n","export const GAMEPAD_BUTTON_UP = 12;\n\nexport const GAMEPAD_BUTTON_DOWN = 13;\n\nexport const GAMEPAD_BUTTON_LEFT = 14;\n\nexport const GAMEPAD_BUTTON_RIGHT = 15;\n\nexport const GAMEPAD_BUTTON_START = 9;\n\nexport const GAMEPAD_BUTTON_A = 1;\n\nexport const GAMEPAD_BUTTON_B = 0;\n\nexport const GAMEPAD_BUTTON_X = 3;\n\nexport const GAMEPAD_BUTTON_Y = 2;\n\nexport const GAMEPAD_BUTTON_LB = 4;\n\nexport const GAMEPAD_BUTTON_RB = 5;\n\nexport const KEY_CODE_EMPTY = \"\";\n\nexport const KEY_CODE_AGAIN = \"Again\";\n\nexport const KEY_CODE_ALT_LEFT = \"AltLeft\";\n\nexport const KEY_CODE_ALT_RIGHT = \"AltRight\";\n\nexport const KEY_CODE_ARROW_DOWN = \"ArrowDown\";\n\nexport const KEY_CODE_ARROW_LEFT = \"ArrowLeft\";\n\nexport const KEY_CODE_ARROW_RIGHT = \"ArrowRight\";\n\nexport const KEY_CODE_ARROW_UP = \"ArrowUp\";\n\nexport const KEY_CODE_AUDIO_VOLUME_DOWN = \"AudioVolumeDown\";\n\nexport const KEY_CODE_AUDIO_VOLUME_MUTE = \"AudioVolumeMute\";\n\nexport const KEY_CODE_AUDIO_VOLUME_UP = \"AudioVolumeUp\";\n\nexport const KEY_CODE_BACKQUOTE = \"Backquote\";\n\nexport const KEY_CODE_BACKSLASH = \"Backslash\";\n\nexport const KEY_CODE_BACKSPACE = \"Backspace\";\n\nexport const KEY_CODE_BRACKET_LEFT = \"BracketLeft\";\n\nexport const KEY_CODE_BRACKET_RIGHT = \"BracketRight\";\n\nexport const KEY_CODE_BROWSER_BACK = \"BrowserBack\";\n\nexport const KEY_CODE_BROWSER_FAVORITES = \"BrowserFavorites\";\n\nexport const KEY_CODE_BROWSER_FORWARD = \"BrowserForward\";\n\nexport const KEY_CODE_BROWSER_HOME = \"BrowserHome\";\n\nexport const KEY_CODE_BROWSER_REFRESH = \"BrowserRefresh\";\n\nexport const KEY_CODE_BROWSER_SEARCH = \"BrowserSearch\";\n\nexport const KEY_CODE_BROWSER_STOP = \"BrowserStop\";\n\nexport const KEY_CODE_CANCEL = \"Cancel\";\n\nexport const KEY_CODE_CAPS_LOCK = \"CapsLock\";\n\nexport const KEY_CODE_COMMA = \"Comma\";\n\nexport const KEY_CODE_CONTEXT_MENU = \"ContextMenu\";\n\nexport const KEY_CODE_CONTROL_LEFT = \"ControlLeft\";\n\nexport const KEY_CODE_CONTROL_RIGHT = \"ControlRight\";\n\nexport const KEY_CODE_CONVERT = \"Convert\";\n\nexport const KEY_CODE_COPY = \"Copy\";\n\nexport const KEY_CODE_CUT = \"Cut\";\n\nexport const KEY_CODE_DELETE = \"Delete\";\n\nexport const KEY_CODE_DIGIT_0 = \"Digit0\";\n\nexport const KEY_CODE_DIGIT_1 = \"Digit1\";\n\nexport const KEY_CODE_DIGIT_2 = \"Digit2\";\n\nexport const KEY_CODE_DIGIT_3 = \"Digit3\";\n\nexport const KEY_CODE_DIGIT_4 = \"Digit4\";\n\nexport const KEY_CODE_DIGIT_5 = \"Digit5\";\n\nexport const KEY_CODE_DIGIT_6 = \"Digit6\";\n\nexport const KEY_CODE_DIGIT_7 = \"Digit7\";\n\nexport const KEY_CODE_DIGIT_8 = \"Digit8\";\n\nexport const KEY_CODE_DIGIT_9 = \"Digit9\";\n\nexport const KEY_CODE_EJECT = \"Eject\";\n\nexport const KEY_CODE_END = \"End\";\n\nexport const KEY_CODE_ENTER = \"Enter\";\n\nexport const KEY_CODE_EQUAL = \"Equal\";\n\nexport const KEY_CODE_ESCAPE = \"Escape\";\n\nexport const KEY_CODE_F1 = \"F1\";\n\nexport const KEY_CODE_F2 = \"F2\";\n\nexport const KEY_CODE_F3 = \"F3\";\n\nexport const KEY_CODE_F4 = \"F4\";\n\nexport const KEY_CODE_F5 = \"F5\";\n\nexport const KEY_CODE_F6 = \"F6\";\n\nexport const KEY_CODE_F7 = \"F7\";\n\nexport const KEY_CODE_F8 = \"F8\";\n\nexport const KEY_CODE_F9 = \"F9\";\n\nexport const KEY_CODE_F10 = \"F10\";\n\nexport const KEY_CODE_F11 = \"F11\";\n\nexport const KEY_CODE_F12 = \"F12\";\n\nexport const KEY_CODE_F13 = \"F13\";\n\nexport const KEY_CODE_F14 = \"F14\";\n\nexport const KEY_CODE_F15 = \"F15\";\n\nexport const KEY_CODE_F16 = \"F16\";\n\nexport const KEY_CODE_F17 = \"F17\";\n\nexport const KEY_CODE_F18 = \"F18\";\n\nexport const KEY_CODE_F19 = \"F19\";\n\nexport const KEY_CODE_F20 = \"F20\";\n\nexport const KEY_CODE_F21 = \"F21\";\n\nexport const KEY_CODE_F22 = \"F22\";\n\nexport const KEY_CODE_F23 = \"F23\";\n\nexport const KEY_CODE_F24 = \"F24\";\n\nexport const KEY_CODE_FIND = \"Find\";\n\nexport const KEY_CODE_FN = \"Fn\";\n\nexport const KEY_CODE_HANGUL_MODE = \"HangulMode\";\n\nexport const KEY_CODE_HANJA = \"Hanja\";\n\nexport const KEY_CODE_HELP = \"Help\";\n\nexport const KEY_CODE_HOME = \"Home\";\n\nexport const KEY_CODE_INSERT = \"Insert\";\n\nexport const KEY_CODE_INTL_BACKSLASH = \"IntlBackslash\";\n\nexport const KEY_CODE_INTL_RO = \"IntlRo\";\n\nexport const KEY_CODE_INTL_YEN = \"IntlYen\";\n\nexport const KEY_CODE_KANA_MODE = \"KanaMode\";\n\nexport const KEY_CODE_KEY_A = \"KeyA\";\n\nexport const KEY_CODE_KEY_B = \"KeyB\";\n\nexport const KEY_CODE_KEY_C = \"KeyC\";\n\nexport const KEY_CODE_KEY_D = \"KeyD\";\n\nexport const KEY_CODE_KEY_E = \"KeyE\";\n\nexport const KEY_CODE_KEY_F = \"KeyF\";\n\nexport const KEY_CODE_KEY_G = \"KeyG\";\n\nexport const KEY_CODE_KEY_H = \"KeyH\";\n\nexport const KEY_CODE_KEY_I = \"KeyI\";\n\nexport const KEY_CODE_KEY_J = \"KeyJ\";\n\nexport const KEY_CODE_KEY_K = \"KeyK\";\n\nexport const KEY_CODE_KEY_L = \"KeyL\";\n\nexport const KEY_CODE_KEY_M = \"KeyM\";\n\nexport const KEY_CODE_KEY_N = \"KeyN\";\n\nexport const KEY_CODE_KEY_O = \"KeyO\";\n\nexport const KEY_CODE_KEY_P = \"KeyP\";\n\nexport const KEY_CODE_KEY_Q = \"KeyQ\";\n\nexport const KEY_CODE_KEY_R = \"KeyR\";\n\nexport const KEY_CODE_KEY_S = \"KeyS\";\n\nexport const KEY_CODE_KEY_T = \"KeyT\";\n\nexport const KEY_CODE_KEY_U = \"KeyU\";\n\nexport const KEY_CODE_KEY_V = \"KeyV\";\n\nexport const KEY_CODE_KEY_W = \"KeyW\";\n\nexport const KEY_CODE_KEY_X = \"KeyX\";\n\nexport const KEY_CODE_KEY_Y = \"KeyY\";\n\nexport const KEY_CODE_KEY_Z = \"KeyZ\";\n\nexport const KEY_CODE_LANG_1 = \"Lang1\";\n\nexport const KEY_CODE_LANG_2 = \"Lang2\";\n\nexport const KEY_CODE_LAUNCH_APP_1 = \"LaunchApp1\";\n\nexport const KEY_CODE_LAUNCH_APP_2 = \"LaunchApp2\";\n\nexport const KEY_CODE_LAUNCH_MAIL = \"LaunchMail\";\n\nexport const KEY_CODE_LAUNCH_MEDIA_PLAYER = \"LaunchMediaPlayer\";\n\nexport const KEY_CODE_MEDIA_PLAY_PAUSE = \"MediaPlayPause\";\n\nexport const KEY_CODE_MEDIA_SELECT = \"MediaSelect\";\n\nexport const KEY_CODE_MEDIA_STOP = \"MediaStop\";\n\nexport const KEY_CODE_MEDIA_TRACK_NEXT = \"MediaTrackNext\";\n\nexport const KEY_CODE_MEDIA_TRACK_PREVIOUS = \"MediaTrackPrevious\";\n\nexport const KEY_CODE_META_LEFT = \"MetaLeft\";\n\nexport const KEY_CODE_META_RIGHT = \"MetaRight\";\n\nexport const KEY_CODE_MINUS = \"Minus\";\n\nexport const KEY_CODE_NON_CONVERT = \"NonConvert\";\n\nexport const KEY_CODE_NUM_LOCK = \"NumLock\";\n\nexport const KEY_CODE_NUMPAD_0 = \"Numpad0\";\n\nexport const KEY_CODE_NUMPAD_1 = \"Numpad1\";\n\nexport const KEY_CODE_NUMPAD_2 = \"Numpad2\";\n\nexport const KEY_CODE_NUMPAD_3 = \"Numpad3\";\n\nexport const KEY_CODE_NUMPAD_4 = \"Numpad4\";\n\nexport const KEY_CODE_NUMPAD_5 = \"Numpad5\";\n\nexport const KEY_CODE_NUMPAD_6 = \"Numpad6\";\n\nexport const KEY_CODE_NUMPAD_7 = \"Numpad7\";\n\nexport const KEY_CODE_NUMPAD_8 = \"Numpad8\";\n\nexport const KEY_CODE_NUMPAD_9 = \"Numpad9\";\n\nexport const KEY_CODE_NUMPAD_ADD = \"NumpadAdd\";\n\nexport const KEY_CODE_NUMPAD_CHANGE_SIGN = \"NumpadChangeSign\";\n\nexport const KEY_CODE_NUMPAD_COMMA = \"NumpadComma\";\n\nexport const KEY_CODE_NUMPAD_DECIMAL = \"NumpadDecimal\";\n\nexport const KEY_CODE_NUMPAD_DIVIDE = \"NumpadDivide\";\n\nexport const KEY_CODE_NUMPAD_ENTER = \"NumpadEnter\";\n\nexport const KEY_CODE_NUMPAD_EQUAL = \"NumpadEqual\";\n\nexport const KEY_CODE_NUMPAD_MULTIPLY = \"NumpadMultiply\";\n\nexport const KEY_CODE_NUMPAD_PAREN_LEFT = \"NumpadParenLeft\";\n\nexport const KEY_CODE_NUMPAD_PAREN_RIGHT = \"NumpadParenRight\";\n\nexport const KEY_CODE_NUMPAD_SUBTRACT = \"NumpadSubtract\";\n\nexport const KEY_CODE_OPEN = \"Open\";\n\nexport const KEY_CODE_OSLEFT = \"OSLeft\";\n\nexport const KEY_CODE_OSRIGHT = \"OSRight\";\n\nexport const KEY_CODE_PAGE_DOWN = \"PageDown\";\n\nexport const KEY_CODE_PAGE_UP = \"PageUp\";\n\nexport const KEY_CODE_PASTE = \"Paste\";\n\nexport const KEY_CODE_PAUSE = \"Pause\";\n\nexport const KEY_CODE_PERIOD = \"Period\";\n\nexport const KEY_CODE_POWER = \"Power\";\n\nexport const KEY_CODE_PRINT_SCREEN = \"PrintScreen\";\n\nexport const KEY_CODE_PROPS = \"Props\";\n\nexport const KEY_CODE_QUOTE = \"Quote\";\n\nexport const KEY_CODE_SCROLL_LOCK = \"ScrollLock\";\n\nexport const KEY_CODE_SELECT = \"Select\";\n\nexport const KEY_CODE_SEMICOLON = \"Semicolon\";\n\nexport const KEY_CODE_SHIFT_LEFT = \"ShiftLeft\";\n\nexport const KEY_CODE_SHIFT_RIGHT = \"ShiftRight\";\n\nexport const KEY_CODE_SLASH = \"Slash\";\n\nexport const KEY_CODE_SLEEP = \"Sleep\";\n\nexport const KEY_CODE_SPACE = \"Space\";\n\nexport const KEY_CODE_TAB = \"Tab\";\n\nexport const KEY_CODE_UNDO = \"Undo\";\n\nexport const KEY_CODE_UNIDENTIFIED = \"Unidentified\";\n\nexport const KEY_CODE_VOLUME_DOWN = \"VolumeDown\";\n\nexport const KEY_CODE_VOLUME_MUTE = \"VolumeMute\";\n\nexport const KEY_CODE_VOLUME_UP = \"VolumeUp\";\n\nexport const KEY_CODE_WAKE_UP = \"WakeUp\";\n\nexport type KEY_CODE =\n  | \"\"\n  | \"Again\"\n  | \"AltLeft\"\n  | \"AltRight\"\n  | \"ArrowDown\"\n  | \"ArrowLeft\"\n  | \"ArrowRight\"\n  | \"ArrowUp\"\n  | \"AudioVolumeDown\"\n  | \"AudioVolumeMute\"\n  | \"AudioVolumeUp\"\n  | \"Backquote\"\n  | \"Backslash\"\n  | \"Backspace\"\n  | \"BracketLeft\"\n  | \"BracketRight\"\n  | \"BrowserBack\"\n  | \"BrowserFavorites\"\n  | \"BrowserForward\"\n  | \"BrowserHome\"\n  | \"BrowserRefresh\"\n  | \"BrowserSearch\"\n  | \"BrowserStop\"\n  | \"Cancel\"\n  | \"CapsLock\"\n  | \"Comma\"\n  | \"ContextMenu\"\n  | \"ControlLeft\"\n  | \"ControlRight\"\n  | \"Convert\"\n  | \"Copy\"\n  | \"Cut\"\n  | \"Delete\"\n  | \"Digit0\"\n  | \"Digit1\"\n  | \"Digit2\"\n  | \"Digit3\"\n  | \"Digit4\"\n  | \"Digit5\"\n  | \"Digit6\"\n  | \"Digit7\"\n  | \"Digit8\"\n  | \"Digit9\"\n  | \"Eject\"\n  | \"End\"\n  | \"Enter\"\n  | \"Equal\"\n  | \"Escape\"\n  | \"F1\"\n  | \"F2\"\n  | \"F3\"\n  | \"F4\"\n  | \"F5\"\n  | \"F6\"\n  | \"F7\"\n  | \"F8\"\n  | \"F9\"\n  | \"F10\"\n  | \"F11\"\n  | \"F12\"\n  | \"F13\"\n  | \"F14\"\n  | \"F15\"\n  | \"F16\"\n  | \"F17\"\n  | \"F18\"\n  | \"F19\"\n  | \"F20\"\n  | \"F21\"\n  | \"F22\"\n  | \"F23\"\n  | \"F24\"\n  | \"Find\"\n  | \"Fn\"\n  | \"HangulMode\"\n  | \"Hanja\"\n  | \"Help\"\n  | \"Home\"\n  | \"Insert\"\n  | \"IntlBackslash\"\n  | \"IntlRo\"\n  | \"IntlYen\"\n  | \"KanaMode\"\n  | \"KeyA\"\n  | \"KeyB\"\n  | \"KeyC\"\n  | \"KeyD\"\n  | \"KeyE\"\n  | \"KeyF\"\n  | \"KeyG\"\n  | \"KeyH\"\n  | \"KeyI\"\n  | \"KeyJ\"\n  | \"KeyK\"\n  | \"KeyL\"\n  | \"KeyM\"\n  | \"KeyN\"\n  | \"KeyO\"\n  | \"KeyP\"\n  | \"KeyQ\"\n  | \"KeyR\"\n  | \"KeyS\"\n  | \"KeyT\"\n  | \"KeyU\"\n  | \"KeyV\"\n  | \"KeyW\"\n  | \"KeyX\"\n  | \"KeyY\"\n  | \"KeyZ\"\n  | \"Lang1\"\n  | \"Lang2\"\n  | \"LaunchApp1\"\n  | \"LaunchApp2\"\n  | \"LaunchMail\"\n  | \"LaunchMediaPlayer\"\n  | \"MediaPlayPause\"\n  | \"MediaSelect\"\n  | \"MediaStop\"\n  | \"MediaTrackNext\"\n  | \"MediaTrackPrevious\"\n  | \"MetaLeft\"\n  | \"MetaRight\"\n  | \"Minus\"\n  | \"NonConvert\"\n  | \"NumLock\"\n  | \"Numpad0\"\n  | \"Numpad1\"\n  | \"Numpad2\"\n  | \"Numpad3\"\n  | \"Numpad4\"\n  | \"Numpad5\"\n  | \"Numpad6\"\n  | \"Numpad7\"\n  | \"Numpad8\"\n  | \"Numpad9\"\n  | \"NumpadAdd\"\n  | \"NumpadChangeSign\"\n  | \"NumpadComma\"\n  | \"NumpadDecimal\"\n  | \"NumpadDivide\"\n  | \"NumpadEnter\"\n  | \"NumpadEqual\"\n  | \"NumpadMultiply\"\n  | \"NumpadParenLeft\"\n  | \"NumpadParenRight\"\n  | \"NumpadSubtract\"\n  | \"Open\"\n  | \"OSLeft\"\n  | \"OSRight\"\n  | \"PageDown\"\n  | \"PageUp\"\n  | \"Paste\"\n  | \"Pause\"\n  | \"Period\"\n  | \"Power\"\n  | \"PrintScreen\"\n  | \"Props\"\n  | \"Quote\"\n  | \"ScrollLock\"\n  | \"Select\"\n  | \"Semicolon\"\n  | \"ShiftLeft\"\n  | \"ShiftRight\"\n  | \"Slash\"\n  | \"Sleep\"\n  | \"Space\"\n  | \"Tab\"\n  | \"Undo\"\n  | \"Unidentified\"\n  | \"VolumeDown\"\n  | \"VolumeMute\"\n  | \"VolumeUp\"\n  | \"WakeUp\";\n","#version 300 es\n\nlayout(location = 0) in vec4 aPosition;\nlayout(location = 1) in vec3 aNormal;\nlayout(location = 2) in vec4 aColor;\n\nout vec4 VNormal;\nout vec4 FragPos;\nout vec4 UntransformedFragPos;\nout lowp vec4 Color;\n\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 worldMatrices[39];\n\n#define modelId aPosition.w\n\nvoid main() {\n  mat4 worldMatrix = worldMatrices[modelId > 0. ? int(modelId) - 1 : gl_InstanceID];\n  // trick - use worldMatrix[3][3] that normally is 1 as a way to color the handle of pulled levers\n  Color = mix(aColor, vec4(0.7, 1, 0.2, 0), aColor.w > 0. ? 0. : 1. - worldMatrix[3][3]);\n  worldMatrix[3][3] = 1.;\n  UntransformedFragPos = aPosition;\n  FragPos = worldMatrix * vec4(aPosition.xyz, 1);\n  gl_Position = projectionMatrix * (viewMatrix * FragPos);\n  FragPos.w = modelId;\n  VNormal = (worldMatrix * vec4(aNormal, 0));\n}\n","#version 300 es\nprecision highp float;\n\n// as printed by the console.log on csm.ts\nconst vec3 lightDir = vec3(-0.6560590289905073, 0.6663690071652679, -0.3543146860766681);\n\n#define CSM_TEXTURE_SIZE 2048.\n\n#define zNear 0.3\n#define CSM_PLANE_DISTANCE 55.\n#define zFar 177.\n\nin highp vec4 VNormal;\nin highp vec4 FragPos;\nin highp vec4 UntransformedFragPos;\nin lowp vec4 Color;\n\nuniform vec3 viewPos;\nuniform mat4 viewMatrix;\nuniform mat4 csm_matrix0;\nuniform mat4 csm_matrix1;\n\nuniform highp sampler2DShadow csm_texture0;\nuniform highp sampler2DShadow csm_texture1;\nuniform highp sampler2D groundTexture;\n\nout vec4 O;\n\nvoid main() {\n  vec4 fragPosVec4 = vec4(FragPos.xyz, 1);\n  vec3 normal = normalize(VNormal.xyz);\n\n  vec3 tex = Color.w *\n    (texture(groundTexture, UntransformedFragPos.yz * .035) * normal.x +\n     texture(groundTexture, UntransformedFragPos.xz * .035) * normal.y +\n     texture(groundTexture, UntransformedFragPos.xy * .035) * normal.z)\n      .xyz;\n\n  // Displacement map\n  normal = normalize(normal.xyz + tex * .5);\n\n  float lambert = dot(normal, lightDir);\n  float shadow = 1.;\n  float depthValue = abs((viewMatrix * fragPosVec4).z);\n\n  // Gets the fragment position in light space\n  vec4 csmCoords = (depthValue < CSM_PLANE_DISTANCE ? csm_matrix0 : csm_matrix1) * fragPosVec4;\n\n  // perform perspective divide and transform to [0,1] range\n  csmCoords = (csmCoords / csmCoords.w) * .5 + .5;\n\n  if (csmCoords.z < 1.) { // Only if inside far plane\n    shadow = 0.;\n\n    // Shadow bias could be computed based on normal and light, something like\n    // 0.0003 * (1. - clamp(dot(normal, lightDir), 0., 1.))\n\n    for (float x = -1.; x <= 1.; ++x) {\n      for (float y = -1.; y <= 1.; ++y) {\n        vec3 c = vec3(\n          csmCoords.xy + vec2(x, y) / CSM_TEXTURE_SIZE,\n          csmCoords.z -\n            // shadow bias\n            (1. / CSM_TEXTURE_SIZE / 2.8)\n        );\n        shadow += depthValue < CSM_PLANE_DISTANCE ? texture(csm_texture0, c) : texture(csm_texture1, c);\n      }\n    }\n    shadow /= 9.;\n  }\n\n  vec3 rgbColor = Color.xyz * (1. - tex.x);\n\n  O = vec4(\n    // ambient\n    vec3(.09, .05, .1) * rgbColor +\n      // diffuse\n      rgbColor * (max(0., lambert) * .5 + (rgbColor * lambert * lambert * vec3(.5, .45, .3))) * (shadow * .7 + .3) +\n      // lava light\n      rgbColor * max(dot(normal, normalize(vec3(.1, -1, -.1))), 0.) * max(0., 2. - FragPos.y) * (vec3(.6, .1, 0) / 14.) +\n      // specular\n      vec3(.6, .6, .5) * pow(max(0., dot(normalize(FragPos.xyz - viewPos), reflect(lightDir, normal))), 35.) * shadow,\n    1\n  );\n}\n","#version 300 es\nprecision highp float;\n\nuniform vec3 iResolution;\nuniform vec3 viewPos;\nuniform mat4 viewMatrix;\n\nuniform highp sampler2D groundTexture;\n\nout vec4 O;\n\n#define gameTime iResolution.z\n\n/* 1 / Math.tan(fieldOfViewRadians / 2) */\nconst float fieldOfViewAmount = 1.73205;\n\nvoid main() {\n  vec2 fragCoord = (gl_FragCoord.xy / iResolution.xy) * 2. - 1.;\n  vec3 ray =\n    normalize(viewMatrix * vec4(fragCoord.x * -(iResolution.x / iResolution.y), -fragCoord.y, fieldOfViewAmount, 0.)).xyz;\n  float rayTracedLavalDistance = (-32. - viewPos.y) / ray.y;\n  float multiplier = (1. - clamp(abs(rayTracedLavalDistance / 9999.), 0., 1.));\n\n  O = vec4(0, 0, 0, 1);\n\n  if (multiplier > 0.01) {\n    if (rayTracedLavalDistance > 0.) {\n      // Render sky\n      float c = cos(gameTime / 30.), s = sin(gameTime / 30.);\n      ray.xz *= mat2(c, s, -s, c);\n      vec3 absRay = abs(ray);\n      O.xyz = vec3(dot(vec2(texture(groundTexture, ray.xy).z, texture(groundTexture, ray.yz * 2.).z), absRay.zx) * absRay.y);\n\n    } else {\n      // Render raytraced lava\n      ray = viewPos + ray * rayTracedLavalDistance;\n      O.x = multiplier *=\n        0.9 - texture(groundTexture, ray.xz / 150. + vec2(sin(ray.z / 35. + gameTime), cos(ray.x / 25. + gameTime)) / 80.).y;\n      O.y = multiplier * multiplier * multiplier;\n    }\n  }\n}\n","#version 300 es\n\nin vec4 aPosition;\n\nuniform mat4 viewMatrix;\nuniform mat4 worldMatrices[39];\n\n#define modelId aPosition.w\n\nvoid main() {\n  mat4 worldMatrix = worldMatrices[modelId > 0. ? int(modelId) - 1 : gl_InstanceID];\n  worldMatrix[3][3] = 1.;\n  gl_Position = viewMatrix * (worldMatrix * vec4(aPosition.xyz, 1));\n}\n","#version 300 es\n// Do nothing.\nvoid main() {}\n","#version 300 es\n\nin vec4 aPosition;\n\nvoid main() { gl_Position = vec4(aPosition.xy, 1, 1); }\n","#version 300 es\nprecision highp float;\n\nin highp vec4 VNormal;\nin highp vec4 FragPos;\n\nuniform mat4 viewMatrix;\n\nout vec4 O;\n\nvoid main() {\n  vec4 v = viewMatrix * vec4(FragPos.xyz, 1);\n  float z = 1. - min(abs(v.z / v.w), 1.);\n  O = vec4(vec2(z * (gl_FragCoord.y > 31. ? 1. : abs(VNormal.y))), z > 0. ? FragPos.w / 255. : 0., 1);\n}\n","import \"./index.css\";\n\nimport \"./dev-tools/dev-main\";\n\nif (DEBUG) {\n  console.time(\"boot\");\n}\n\nimport groundTextureSvg from \"./groundTexture.svg\";\n\nimport { startMainLoop } from \"./main-loop\";\nimport { song_numChannels } from \"./music/song\";\nimport { soundbox_generate } from \"./music/music-player\";\nimport { loadSong } from \"./music/audio-context\";\nimport { buildWorld } from \"./game/level\";\n\nsetTimeout(() => {\n  let songLoad = 0;\n  let thingsToLoad = 1 + song_numChannels;\n  const image = new Image();\n\n  if (DEBUG) {\n    console.time(\"SVG load\");\n    console.time(\"song load\");\n    console.time(\"load\");\n  }\n\n  const onThingLoaded = () => {\n    h4.innerHTML += \".\";\n    if (!--thingsToLoad) {\n      if (DEBUG) {\n        console.timeEnd(\"load\");\n      }\n\n      startMainLoop(image);\n    }\n  };\n\n  const asyncLoadSongChannels = () => {\n    if (songLoad < song_numChannels) {\n      soundbox_generate(songLoad++);\n      setTimeout(asyncLoadSongChannels);\n    } else {\n      loadSong();\n      if (DEBUG) {\n        console.timeEnd(\"song load\");\n      }\n    }\n    onThingLoaded();\n  };\n\n  image.onload = image.onerror = () => {\n    onThingLoaded();\n    if (DEBUG) {\n      console.timeEnd(\"SVG load\");\n    }\n  };\n  image.src = groundTextureSvg;\n\n  if (DEBUG) {\n    for (let i = 0; i < song_numChannels; ++i) {\n      onThingLoaded();\n    }\n  } else {\n    setTimeout(asyncLoadSongChannels, 9);\n  }\n\n  if (DEBUG) {\n    console.time(\"buildWorld\");\n  }\n\n  buildWorld();\n\n  if (DEBUG) {\n    console.timeEnd(\"buildWorld\");\n  }\n\n  if (DEBUG) {\n    console.timeEnd(\"boot\");\n  }\n});\n"],"names":["groundTextureSvg","btoa","DEG_TO_RAD","Math","PI","identity","min","a","b","max","abs","n","clamp01","t","lerp","from","to","lerpneg","v","angle_wrap_degrees","degrees","angle_wrap_radians","radians","atan2","sin","cos","angle_lerp_degrees","a0","a1","da","angle_lerp","interpolate_with_hysteresis","previous","desired","hysteresis","integers_map","fn","Array","_","i","mat_perspectiveXY","mx","my","near","far","vec3_dot","x","y","z","vec3_distance","hypot","plane_fromPolygon","polygon","at","w","float32Array16Temp","Float32Array","matrixToArray","$matrix","output","index","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","camera_position","camera_rotation","mat_perspective","hC","clientHeight","clientWidth","fieldOfViewAmount","polygon_color","color","smooth","$smooth","$color","polygon_transform","m","map","p","transformPoint","vec3_transform","polygons_transform","polygons","polygon_regular","segments","elongate","cylinder_sides","btm","top","btmi","length","cylinder","topSize","points","translate","bottom","scale3d","reverse","sphere","slices","stacks","vertexFunc","j","vertex","push","csm_buildMatrix","camera_view","nearPlane","farPlane","zMultiplier","tx","ty","tz","roundingRadius","projViewInverse","DOMMatrix","invertSelf","frustumCorners","lightViewTranslated","rotate","translateSelf","left","Infinity","right","multiplySelf","currentEditModel","allModels","meshAdd","transform","$polygons","newModel","$kind","previousModel","model","$modelId","loadShader","source","shader","gl","type","initShaderProgram","vertexShader","sfsSource","program","name","uniforms","powerPreference","s","reduce","c","charCodeAt","toString","song_instruments","getSegmentNumWords","song_rowLen","song_numWords","getnotefreq","osc_sin","value","osc_square","osc_saw","osc_tri","v2","soundbox_mixbuffer","Int32Array","audioContext","AudioContext","songAudioSource","createBufferSource","music_on","touch_movementX","touch_movementY","player_first_person","mainMenuVisible","keyboard_downKeys","updateMusicOnState","disconnect","connect","destination","b4","setMainMenuVisible","document","exitPointerLock","start","body","className","initPage","touchStartTime","touchPosX","touchPosY","touchPosIdentifier","touchPosMoved","touchRotX","touchRotY","touchRotIdentifier","touchRotMoved","touchStartCameraRotY","pageClicked","handleResize","width","innerWidth","height","innerHeight","hidden","onvisibilitychange","onresize","onblur","b1","onclick","b2","b3","confirm","localStorage","LOCAL_STORAGE_SAVED_GAME_KEY","location","reload","e","target","requestPointerLock","onkeyup","onkeydown","code","repeat","pressed","mapped","onmousemove","movementX","movementY","oncontextmenu","ontouchstart","pageX","pageY","identifier","changedTouches","touchStartCameraRotX","absoluteTime","ontouchmove","delta","sign","absDelta","ontouchend","click","preventDefault","touch","diff","gameTime","souls_collected_count","_messageEndTime","player_last_pulled_lever","rotatingPlatform1Rotation","rotatingPlatform2Rotation","rotatingHexCorridorRotation","game_completed","firstBoatLerp","secondBoatLerp","_globalTime","lerpDamp","speed","exp","gameTimeDelta","getItemValue","$value","levers","souls","showMessage","message","duration","h4","innerHTML","clearMessage","worldStateUpdate","shouldRotatePlatforms","$lerpValue","$lerpValue2","_update","lever","soul","updateCollectedSoulsCounter","acc","cur","h3","saveGame","JSON","stringify","initTriangleBuffers","meshFirstIndex","_vertexPositions","_vertexColors","_vertexNormals","Map","_vertexFloats","key","_vertexIntsSmooth","_vertexInts","_vertexMap","get","set","size","buffer","getVertex","_triangleIndices","$vertexBegin","$vertexEnd","Uint16Array","Uint32Array","CSGPolygon_splitSpanning","plane","jd","fpoints","$flipped","iv","$polygon","id","jv","bpoints","$front","$parent","$back","CSGPolygon_split","d","csg_tree_addPolygon","node","csg_tree_clipNode","anode","bnode","polygonPlaneFlipped","result","recursion","csg_tree_each","csg_tree","prev","csg_tree_flip","root","csg_union","inputs","polygonsToAdd","pp","csg_subtract","csg_polygons","tree","add","found","byParent","allPolygons","delete","flipped","player_position_final","GQuad","newLever","locMatrix","multiply","$locMatrix","leverIndex","onPlayerPullLever","scale","material","newSoul","walkingPath","dirX","dirZ","randAngle","lookAngle","prevX","velocity","wasInside","contextualVelocity","isInside","mindist","circles","distance","targetX","targetZ","circleSDF","circle","x1","z1","w1","ax","az","magnitude","angle","random","soulX","soulZ","prevZ","soulPos","parentModel","rotateSelf","leverModel","soulModel","soulCollisionModel","playerModels","buildWorld","tmpMatrix","getBoatAnimationMatrix","hornPolygons","matrices","HORN_STACKS","flat","boatPolygons","bigArcPolygons","slice","getOscillationAmount","blackPlatform","freq","amplitude","pz","level3Oscillation","shouldOscillate","shouldPushRods","hexPadShouldOscillate","entranceBarsPolygons","skewX","hexCorridorPolygons","scaleSelf","osc","skewY","pushingRod","rotPlatformBase","k","eye","bm","theta","phixz","GHOST_STACKS","worldMatricesBuffer","renderModels","worldMatrixLoc","renderPlayer","isCollider","soulModelToRender","matrix","$modelId1","i1","$matrix1","i2","startMainLoop","groundTextureImage","currentModelIdTMinus1","currentModelId","player_respawned","player_look_angle_target","player_look_angle","player_legs_speed","_gamepadInteractPressed","oldModelId","player_has_ground","player_gravity","player_speed","player_collision_velocity_x","player_collision_velocity_z","player_model_y","player_collision_z","camera_player_dir_x","camera_player_dir_y","camera_player_dir_z","player_position_global","player_collision_modelIdCounter","player_respawn","doVerticalCollisions","maxModelIdCount","nextModelId","lines","grav","hasGround","fill","up","yindex","COLLISION_TEXTURE_SIZE","collision_buffer","count","doHorizontalCollisions","front","back","dist1","dist2","dist1Opposite","dist2Opposite","xdist","dx","dz","player_collision_x","updatePlayer","NO_INLINE","strafe","forward","gamepad","navigator","getGamepads","getGamepadButtonState","buttons","axes","interactButtonPressed","amount","playerSpeedCollision","movementRadians","referenceMatrix","inverseReferenceRotationMatrix","inverse","x2","y2","z2","oldx","oldz","ydiff","interpolationSpeed","viewDirDiffz","viewDirDiffx","viewDirDiffy","mainLoop","globalTime","requestAnimationFrame","time","dt","gameTimeUpdate","collision_frameBuffer","collisionShader","csm_framebuffer","csm_render","drawingBufferWidth","drawingBufferHeight","mainShader","skyShader","mainVertexShader","csmShader","collision_texture","csmSplit","lightSpaceMatrix","texture","lightSpaceMatrixLoc","collision_renderBuffer","savedLevers","savedSouls","savedLastPulledLever","savedGameTime","savedSecondBoatLerp","parse","setTimeout","songLoad","onThingLoaded","thingsToLoad","image","asyncLoadSongChannels","channelIndex","mixIndex","OSC1_VOL","OSC1_SEMI","OSC1_XENV","OSC2_VOL","OSC2_SEMI","OSC2_XENV","NOISE_VOL","ENV_ATTACK","ENV_SUSTAIN","ENV_RELEASE","ENV_EXP_DECAY","LFO_FREQ","FX_FREQ","FX_RESONANCE","FX_DRIVE","FX_PAN_AMT","FX_PAN_FREQ","FX_DELAY_AMT","FX_DELAY_TIME","LFO_AMT","COLUMNS","low","band","f","high","filterActive","noteCache","createNote","note","c1","c2","o1t","o2t","OSC1_WAVEFORM","OSC2_WAVEFORM","noteBuf","j1","j2","chnBuf","lfoFreq","panFreq","dly","row","cp","rowStartSample","col","rsample","lsample","soundbox_generate","createBuffer","data","getChannelData","loop","loadSong","Image","onload","onerror","src"],"mappings":"AAAA,MAAAA,mBAAe,+CAA6BC,KAAK;;ACC1C,MAAMC,aAAaC,KAAKC,KAAK;;AAG7B,MAAMC,WAA8C;;AAEpD,MAAMC,MAAsB,CAACC,GAAWC,MAAeA,IAAAD,QAAYC;;AAEnE,MAAMC,MAAsB,CAACF,GAAWC,MAAeD,IAAAC,QAAYA;;AAEnE,MAAME,MAAuBC,KAAmB,IAAnBA,KAAmBA,IAASA;;AAEzD,MAAMC,UAA2BC,KAAe,IAAAA,QAAYA,IAAA,QAAYA;;AAGxE,MAAMC,OAAuB,CAACC,MAAcC,IAAYH,cAAsBG,KAAAD,QAAaH,QAAAC;;AAE3F,MAAMI,UAA0B,CAACC,GAAWL;IACjDK,YAAaA;IACb,OAAYJ,KAAAI,GAAO,IAAAA,GAAIL;AAAA;;AAWlB,MAAMM,qBAAsCC;IAAAC,QAHAC,UAI9BF,UAAAlB,4BAHnBC,KAAAoB,sBAAApB,KAAAqB,IAAAF,0BAAWnB,KAAAsB,IAAAH,aAGgCpB;IAJK,IAACoB;AAIN;;AAOtC,MAAMI,qBAAqC,CAACC,IAAYC,IAAYf,MALjC,EAACc,IAAYC,IAAYf;IACjE,MAAYgB,MAAAD,KAAYD,OAAU,IAAVxB,KAAUC;IAC3B,OAAAuB,UAAmBE,MAAgB,IAAhB1B,WAAgB0B,cAAehB;AAAA,EAGgBiB,CAC9DH,KAAAzB,YAAiB0B,KAAA1B,YAAiBW,KAAKX;;AAE7C,MAAM6B,8BAA8C,CACzDC,UACAC,SACAC,YACArB,MAEAC,KAAAkB,YAAA,IAAAC,UAAAD,YAAA,IAAA,KAAAvB,IAAA,GAAAC,IAAAuB,UAAAD,aAAA,KAAAE,cAAArB,IAAA,GAAAoB,SAAApB,IAAA;;AAAA,MACcsB,eAAA,CAAAxB,GAAqByB,OAAAC,MAAAtB,2BAAcJ,KAAA,CAAA2B,GAAOC,MAAAH;;AAAmD,MACzGI,oBAAA,CAAAC,IAAAC,IAAAC,MAAAC,QAAA,EACIH,IACN,GAE0B,GAEqB,GAC/C,GACAC,IACA,GACA,GACA,GACA,IACAE,MAAAD,SAAAA,OAAAC,OACA,GACA,GACA,GACC,UAAeD,QAAOA,OAAAC,MACvB;;AAEA,MACKC,WAAM,EAASC,GAAOC,GAAAC,IAAA9B,MAAA4B,IAAA5B,EAAA4B,IAAAC,IAAA7B,EAAA6B,IAAAC,IAAA9B,EAAA8B;;AAAA,MAC3BC,gBAAA,EAAAH,GAAAC,GAAAC,IAAAxC,sBAAAL,KAAA+C,MAAAJ,IAAAtC,EAAAsC,GAAAC,IAAAvC,EAAAuC,GAAAC,IAAAxC,EAAAwC,MAAA;;AACF,MAAAG,oBAAAC;IAuCa,IAAAN,IAAM;IAEZ,IAAiCC,IAAA;IAEjC;IAQM,IAAAvC;IAEH,IAAAD,IAAA6C,QAAAC,IAAA;IACR,KAAQ7C,KAAA4C,SAAA;QACAN,MAAAvC,EAAAwC,IAAAvC,EAAAuC,MAAAxC,EAAAyC,IAAAxC,EAAAwC;QACJD,MAAYxC,EAAAyC,IAAAxC,EAAKwC,MAAAzC,EAAAuC,IAAAtC,EAAAsC;QACjBE,MAAAzC,EAAAuC,IAAAtC,EAAAsC,MAAAvC,EAAAwC,IAAAvC,EAAAuC;QACMxC,IAAAC;AACR;IACAA,oBAAYL,KAAA+C,MAAQJ,GAAAC,GAAAC;IACpBF,KAAAtC;IACIuC,KAAAvC;IACNwC,KAAAxC;IACS,OAAA;QACJsC;QACAC;QACAC;QACLM,GAASR,IAAMvC,EAAAuC,IAAMC,IAAAxC,EAAIwC,IAAEC,IAAQzC,EAAAyC;;AACrC;;AAIO,MAAMO,qBACX,IAAAC,aACkC;;AAGlC,MAASC,gBAAA,CAAAC,SAAAC,SAAAJ,oBAAAK,SAAA;IACTA;IACAD,mBAA0BD,QAAAG;IAC1BF,mBAA0BD,QAAAI;IAC1BH,mBAA0BD,QAAAK;IAC1BJ,mBAA0BD,QAAAM;IAC1BL,mBAA0BD,QAAAO;IAC1BN,mBAA0BD,QAAAQ;IAC1BP,mBAA0BD,QAAAS;IAC1BR,mBAA0BD,QAAAU;IAC1BT,mBAA0BD,QAAAW;IAC1BV,mBAA0BD,QAAAY;IAC1BX,mBAA0BD,QAAAa;IAC1BZ,mBAA0BD,QAAAc;IAC1Bb,mBAA0BD,QAAAe;IAC1Bd,mBAA0BD,QAAAgB;IAC1Bf,mBAAwBD,QAAAiB;IACjBhB,OAAAC,UAAAF,QAAAkB;IACT,OAAAjB;AAAA;;ACtKA,MAAAkB;IAEO/B,IAAc;IAEdC,GAAa;IAEbC,IAA2B;;;AAIlC,MAAM8B,kBAAoB;IAEtBhC,GAAO;IACDC,GAAA;IACVC,GAAA;;;AAE+B,MAC1B+B,kBAAA,CAAApC,MAAAC,QAAAJ,kBAAAwC,GAAAC,eAAAD,GAAAE,cAAAC,mBAAAA,mBAAAxC,MAAAC;;AAMA,MACAuC,oBAAA;;AC1BL,MAASC,0BAAiEC,OAAAC;IAEnElC,QAAiBmC,UAAAD;IACrBlC,QAAiCoC,SAC9BH;IACN,OAAAjC;AAAA;;AA8BE,MAAAqC,oBAAA,CAAArC,SAAAsC,GAAAL,QAAAjC,QAAAoC,WAAAJ,cAAAhC,QAAAuC,KAAAC,KAnBkB,GAAA9C,GAAAC,GAAAC,IAAA0C;MAClB5C,GAAiBC,GAAAC,KAAA0C,EAAAG,eAAA;QACV/C;QACTC;;;IAIW,OAAA;QACXD;;;;AAQ2C,EAGzCgD,CAAAF,GAAAF,MAAAL,OAAAjC,QAAAmC;;AAEK,MAAMQ,qBAAqC,CAChDC,UACAN,GACAL,UACGW,SAAAL,KAAavC,WAAaqC,kBAAArC,SAA2BsC,GAAAL;;AAMnD,MAAMY,kBAAkC,CAACC,UAAkBC,WAAmB,mBACtED,WAAA3D;IACL,MAASS,oBAAA7C,KAAAsB,IAAI,IAAJtB,KAAAC,MAASmC,IAAK2D;IACtB,OAAA;QACGpD,mBAAA3C,KAAAqB,QAAArB,KAAAC,MAAcmC,IAAA2D;QACnBnD,GAAA;QACKC,SAAItC,IAAAsC,KAAeA,IAAQ,IAAJA,IAAIA,IAAAmD,WAAenD,IAAAmD;;AAAA;;AASjD,MAAMC,iBAAiC,CAACC,KAAcC,KAAchB,eACrEK,KAAA,CAAAY,MAAAhE,IAAAiE,YAAApB,cAAA,EAAcmB,MAEHD,IAAAE,aAAkB,IACzBF,IAAAE,UAAAjE,IAAA,KAAAiE,SAAA,IACJH,KAAA9D,IAAA,KAAAiE,WACFH,IAAAb,QAAAF;;AACF,MAAAmB,WAAA,CAAAP,UAAAZ,QAAAoB,UAAA,GAAAP;IAGK,eACLD,SACAM,SACAN,2BAEcA,UAAAC;IACd,8BAA4CQ,QAExCtG,SAAAuG,UAAA,cAA4CF,UAAA,IAAAA,UAAA;IAChD,MAAYG,SAAApB,kBAA0BkB,QAAAtG,SAAmBuG,UAAI,IAAU,GAAAE,QAAc,IAAdJ,WAAcA,UAAY,IAAAK;+BAEvEF,QAAAP,cAC5BA,KAEaO;AAIT;;AAEA,MAAOG,SAAU,CAAAC,QAAAC,SAAAD,QAASE,aAAA,EAAArE,GAAAC;IAEdA,KAAA5C,KAAAC,KAAA8G;SACc,cAACD;IACpB,OAAA;QACPnE,mBAAa3C,KAAAsB,IAAGqB,qBAAI3C,KAAAqB,IAAauB;QAC/BA,mBAAgB5C,KAAAsB,IAAAsB;QAChBC,4BAAcF,qBAAO3C,KAAAqB,IAAAuB;;AACrB;IAEA,MAAIiD,WAAG;IACG,KAAA,IAAAzD,IAAA,GAAS0E,SAAT1E,GAASA,KAAS,KAAA,IAAA6E,IAAA,GAAAF,SAAAE,GAAAA,KAAA;QAC5B,MAAAC,SAAA,CAAAvE,GAAAC,MAAAK,QAAAkE,KAAAH,WAAArE,GAAAC,GAAAK;QACI,MAAIA,UAAYgC,cAAA,IAAA,GAAA;QAClBY,SAAYsB,KAAAlE;QACdiE,OAAA9E,GAAA6E;QACOA,KAAQC,QAAA9E,IAAW,KAAA0E,QAAAG;QAC5BF,SAAA,IAAAE,KAAAC,QAAA9E,IAAA,KAAA0E,QAAAG,IAAA,IAAAF;QACFG,OAAA9E,GAAA6E,IAAA,IAAAF;AACO;IACT,OAAAlB;AAAA;;;;AC9GA,MAAAuB,kBAAgC,CAAAC,aAAAC,WAAAC,UAAAC;IAEhC,IAAoBC,KAAA;IACpB,IAAoBC,KAAA;IAEhB,IAAOC,KAAA;IAC2B,MAAAC,iBAAgB,OAAhBL,WAAAD;IAC5B,MAAAO,kBAAyB,IAAAC,UAAAlD,gBAA6B0C,WAAKC,wBAAeF,aAAAU;IACpF,MAAAC,iBAAAhG,aAAA,IAAAI;QAE+C,MAAArB,IAAA8G,gBAE7CnC,eACA;YAGM/C,GAAA,IAAAP,IAAA;YAEAQ,GAAA,IAAAR,IAAA,KAAsB;YAEnBS,GAAA,IAAAT,IAAA,KAAA;;QAEAqF,MAAA1G,EAAA4B,KAAAiF,iBAAA7G,EAAA4B,IAAA,MAAAiF,iBAAA7G,EAAAoC;QAEHuE,MAAiB3G,EAAA6B,KAAAgF,iBAAa7G,EAAG6B,IAAO,MAAAgF,iBAAA7G,EAAAoC;QACtCwE,MAAI5G,wBAA+BA,EAAA8B,IAAA,MAAA+E,iBAAA7G,EAAAoC;QAChC,OAAApC;AAAA;IAEP,MAAOkH,sBAAQ/H,SAAAgI,OA9BZ,KACyB,KA6BbC,cAAAV,KAAA,GAAAC,KAAA,GAAAC,KAAA;IACjB,IAACS,OAAAC;IAED,IAAAC,SAAcD;IACd,IAAA3B,SAAc2B;IACd,IAAAlC,OAAckC;IACP,IAAA7F,OAAA6F;IACR,IAAA5F,OAAA4F;IAE2B/C,kBAAA0C,gBAAAC,qBAA6BzC,KAAW,EAAA7C,GAAAC,GAAgBC;QAEzEuF,OAAAjI,IAAAiI,MAAAzF;QACC2F,QAAAhI,IAAAgI,OAAA3F;QACC+D,SAAAvG,IAAAuG,QAAA9D;QACHuD,MAAA7F,IAAA6F,KAAAvD;QACCJ,OAAArC,IAAAqC,MAAAK;QACDJ,MAAAnC,IAAAmC,KAAAI;AAAA;IAIDL,YAAAA,OAAWgF,cAAA,IAAAA;IACV/E,OAAAA,wBAAY,IAAA+E;IACX,OAAAtH,eAAa,KAAAoI,QAAAF,OAAA,KAAAjC,MAAAO,SAAA,KAAAlE,OAAAC,MAAA0F,eAAAG,QAAAF,SAAA,IAAAjC,MAAAO,WAAA,IAAAlE,OAAAC,OAAA,GAAA8F,aAAAN;AAAA;;ACpD1B,IAAAO;;AAOO,MAAMC,YAAkB;;AAcxB,MAAIC,UAAA,CAAA7C,UAAA8C,YAAAzI,UAAAgF,UAAAsD,iBAAAI,UAAAzB,QAAAvB,mBAAAC,UAAA8C,WAAAzD;;AAEJ,MAAM2D,YAAqB5G,IAAC6G,QAtBc;IAwB1C,MAAgBC,gBAErBP;IAIK,MAAiBQ,QAAC;QACjBzF,SAAgBrD;QAChB+I,UAAeR,UAAApC;QACVyC;mBACW;;mBAERN,mBAAAQ;IACd/G,GAAA+G;;IAEQ,OAAAA;AAAA;;ACxCH,MAAME,aAAQ,CAAAC,eAAqB;IAE1C,MAAAC,SAAoBC,GAAA,OAAAC;IACJD,GAAA,OAAMD,QAAMD;IAC5BE,GAAA,OAAAD;IAE0B,OAAAA;AAAA;;AAExB,MAAGG,oBAAqB,CAAMC,cAAAC;IAC9B,iBAAuB,CAAA;IAEyC,MAAAC,UAAAL,GAAA;IAC9DA,GAAA,OAAUK,SAAMF;IAClBH,GAAA,OAAAK,SAAAR,WAAAO,WAAA;IAEOJ,GAAA,OAAAK;IACT,OAAAC,QAAAA,OAAAC,SAAAD,UAAAC,SAAAD,QAAAN,GAAA,OAAAK,SAAAC,SAAAN,GAAA,OAAAK;AAAA;;AAQE,MAAAL,mBAAwD,UAAA;IAClDQ,iBAAa;;;AAEnB,KAAA,eAAgBR,GAASS,EAAA,KAAA,SAGzBC,QAA+D,CAAAtE,GAAAuE,GAAA5H,OAAAqD,IAAArD,IAAA4H,EAAAC,WAAA,MAAA,MAAA,GAAAC,SAAA,OAAAb,GAAAS;;ACxB1D,MAAMK,mBAAmB,EAC9B,EACE,IACA,KACA,GACA,KACA,KACA,GACA,GACA,KACA,KACA,IACA,GACA,GACA,KACA,KACA,IACA,IACA,GACA,IACA,GACA,GACA,EACE,mIACA,mCACA,mCACA,mCACA,qEACA,yEAGJ,EACE,KACA,KACA,GACA,KACA,KACA,GACA,GACA,KACA,KACA,IACA,GACA,GACA,KACA,GACA,IACA,KACA,GACA,GACA,GACA,KACA,EACE,mCACA,mCACA,mCACA,mCACA,iGACA,6DAGJ,EACE,KACA,KACA,IACA,KACA,KACA,IACA,IACA,IACA,KACA,IACA,IACA,GACA,KACA,IACA,IACA,GACA,GACA,IACA,GACA,GACA,EACE,iCACA,qBAGJ,EACE,GACA,KACA,GACA,GACA,KACA,GACA,IACA,IACA,KACA,IACA,IACA,GACA,KACA,KACA,IACA,KACA,GACA,IACA,GACA,KACA,EACE,mCACA,6BAGJ,EACE,KACA,KACA,IACA,KACA,KACA,IACA,KACA,IACA,KACA,IACA,IACA,GACA,KACA,IACA,IACA,IACA,GACA,GACA,GACA,IACA,EACE,iCACA;;AAoBC,MAAMC,qBAAsBC,eARJ,MAQIA;;AAE5B,MAAMC,gBACXF,mBAlB0B,QAkBSA,mBAhBT,QAgB4CA,mBAd5C;;AC1H5B,MAAAG,cAAA/J,KAAA,gBAAA,OAAAA,IAAA,OAAA;;AAAA,MACEgK,UAAAC,yBAAAzK,KAAAqB,IAAAoJ,QAAAzK,KAAAC,KAAA;;AAAA,MACAyK,aAAAD,SAAA,KAAAA,QAA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"}