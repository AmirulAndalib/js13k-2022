{"version":3,"file":"index.js","sources":["../../app/groundTexture.svg","../../app/math.ts","../../app/geometry/geometry.ts","../../app/geometry/csg.ts","../../app/geometry/solids.ts","../../app/game/scene.ts","../../app/camera.ts","../../app/music/song.ts","../../app/music/music-player.ts","../../app/music/audio-context.ts","../../app/page.ts","../../app/game/world-state.ts","../../app/game/player-position.ts","../../app/game/objects.ts","../../app/game/level.ts","../../app/csm.ts","../../app/gl.ts","../../app/game/render-models.ts","../../app/main-loop.ts","../../app/utils/keycodes.ts","../../app/shaders/main-vertex.vert","../../app/shaders/main-fragment.frag","../../app/shaders/sky-fragment.frag","../../app/shaders/csm-vertex.vert","../../app/shaders/void-fragment.frag","../../app/shaders/sky-vertex.vert","../../app/shaders/collider-fragment.frag","../../app/game/triangle-buffers.ts","../../app/index.ts"],"sourcesContent":["export default \"__VITE_ASSET__b9f78ae4__\"","/** Amount to be multiplied to an angle in degrees to obtain an angle in radians, approximately 0.017453292519943295 */\nexport const DEG_TO_RAD = Math.PI / 180;\n\n/** The identity matrix */\nexport const identity: DOMMatrixReadOnly = /* @__PURE__ */ new DOMMatrix();\n\nexport const min = /* @__PURE__ */ (a: number, b: number) => (a < b ? a : b);\n\nexport const max = /* @__PURE__ */ (a: number, b: number) => (a > b ? a : b);\n\nexport const abs = /* @__PURE__ */ (n: number) => (n < 0 ? -n : n);\n\nexport const clamp01 = /* @__PURE__ */ (t: number) => (t < 0 ? 0 : t > 1 ? 1 : t);\n\n/** Linear interpolation */\nexport const lerp = /* @__PURE__ */ (from: number, to: number, t: number) => from + (to - from) * clamp01(t);\n\nexport const lerpneg = /* @__PURE__ */ (v: number, t: number) => {\n  v = clamp01(v);\n  return lerp(v, 1 - v, t);\n};\n\n/**\n * Trigonometry - Wrap an angle so it is always between -PI and PI\n * @param radians The angle in radians to wrap between -PI and PI\n * @returns The angle in radians wrapped so it is always between -PI and PI\n */\nexport const angle_wrap_radians = /* @__PURE__ */ (radians: number): number =>\n  Math.atan2(Math.sin(radians), Math.cos(radians));\n\nexport const angle_wrap_degrees = /* @__PURE__ */ (degrees: number): number =>\n  angle_wrap_radians(degrees * DEG_TO_RAD) / DEG_TO_RAD;\n\nexport const angle_lerp = /* @__PURE__ */ (a0: number, a1: number, t: number) => {\n  const da = (a1 - a0) % (Math.PI * 2);\n  return a0 + (((2 * da) % (Math.PI * 2)) - da) * clamp01(t);\n};\n\nexport const angle_lerp_degrees = /* @__PURE__ */ (a0: number, a1: number, t: number) =>\n  angle_lerp(a0 * DEG_TO_RAD, a1 * DEG_TO_RAD, t) / DEG_TO_RAD;\n\nexport const interpolate_with_hysteresis = /* @__PURE__ */ (\n  previous: number,\n  desired: number,\n  hysteresis: number,\n  t: number,\n) =>\n  lerp(\n    previous + Math.sign(desired - previous) * max(0, abs(desired - previous) ** 0.9 - hysteresis) * t * 2,\n    desired,\n    t / 7,\n  );\n\nexport const integers_map = <T>(n: number, fn: (i: number) => T) => Array.from(Array(n), (_, i) => fn(i));\n\nexport const mat_perspectiveXY = /* @__PURE__ */ (mx: number, my: number, near: number, far: number) => [\n  mx,\n  0,\n  0,\n  0,\n  0,\n  my,\n  0,\n  0,\n  0,\n  0,\n  (far + near) / (near - far),\n  -1,\n  0,\n  0,\n  (2 * far * near) / (near - far),\n  0,\n];\n\nexport interface Vec2 {\n  x: number;\n  y: number;\n}\n\nexport interface Vec3 {\n  x: number;\n  y: number;\n  z: number;\n}\n\nexport interface Vec4 {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n}\n\nexport interface Vec3Optional {\n  x?: number | undefined;\n  y?: number | undefined;\n  z?: number | undefined;\n}\n\nexport interface Plane {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n}\n\nexport type Vec2In = Readonly<Vec2>;\n\nexport type Vec3In = Readonly<Vec3>;\n\nexport type Vec4In = Readonly<Vec4>;\n\nexport const sqr = (n: number) => n * n;\n\nexport const vec3_dot = /* @__PURE__ */ ({ x, y, z }: Vec3In, v: Vec3In): number => x * v.x + y * v.y + z * v.z;\n\nexport const vec3_distance = /* @__PURE__ */ ({ x, y, z }: Vec3In, b: Vec3In): number =>\n  Math.hypot(x - b.x, y - b.y, z - b.z) || 0;\n\n/**\n * Computes a polygon plane using the Newell's method.\n * We are not using plane from 3 points algorithm,\n * because this can handle coplanar points and has precision problems.\n */\nexport const plane_fromPolygon = /* @__PURE__ */ (polygon: readonly Vec3In[]): Plane => {\n  // Newell's method\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = polygon.at(-1)!;\n  let b: Vec3In | number;\n  for (b of polygon) {\n    x += (a.y - b.y) * (a.z + b.z);\n    y += (a.z - b.z) * (a.x + b.x);\n    z += (a.x - b.x) * (a.y + b.y);\n    a = b;\n  }\n  b = Math.hypot(x, y, z);\n  x /= b;\n  y /= b;\n  z /= b;\n  return { x, y, z, w: x * a.x + y * a.y + z * a.z };\n};\n\nexport const writeMatrixToArray = (output: Float32Array | number[], index: number, $matrix: DOMMatrixReadOnly) => {\n  index *= 16;\n  output[index++] = $matrix.m11;\n  output[index++] = $matrix.m12;\n  output[index++] = $matrix.m13;\n  output[index++] = $matrix.m14;\n  output[index++] = $matrix.m21;\n  output[index++] = $matrix.m22;\n  output[index++] = $matrix.m23;\n  output[index++] = $matrix.m24;\n  output[index++] = $matrix.m31;\n  output[index++] = $matrix.m32;\n  output[index++] = $matrix.m33;\n  output[index++] = $matrix.m34;\n  output[index++] = $matrix.m41;\n  output[index++] = $matrix.m42;\n  output[index++] = $matrix.m43;\n  output[index] = $matrix.m44;\n};\n","import { abs, integers_map, identity, type Vec3, type Vec3Optional } from \"../math\";\n\nexport const material = (r: number, g: number, b: number, a: number = 0): number =>\n  ((a * 255) << 24) | ((b * 255) << 16) | ((g * 255) << 8) | (r * 255);\n\nexport interface Polygon<TVec3 = Vec3> extends Array<TVec3> {\n  /** Polygon material */\n  $color?: number | undefined;\n\n  /** Smooth normals? */\n  $smooth?: 0 | 1 | undefined;\n}\n\nexport const polygon_color = /* @__PURE__ */ (\n  polygon: Polygon,\n  color: number | undefined,\n  smooth?: 0 | 1 | undefined,\n): Polygon => {\n  polygon.$smooth = smooth;\n  polygon.$color = color;\n  return polygon;\n};\n\nexport const vec3_transform = /* @__PURE__ */ ({ x, y, z }: Readonly<Vec3Optional>, m: DOMMatrixReadOnly): Vec3 => {\n  ({ x, y, z } = m.transformPoint({ x, y, z }));\n  return { x, y, z };\n};\n\nexport const polygon_transform = /* @__PURE__ */ (\n  polygon: Polygon<Readonly<Vec3Optional>>,\n  m: DOMMatrixReadOnly,\n  color: number | undefined = polygon.$color,\n): Polygon =>\n  polygon_color(\n    polygon.map((p) => vec3_transform(p, m)),\n    color,\n    polygon.$smooth,\n  );\n\nexport const polygons_transform = /* @__PURE__ */ (\n  polygons: Polygon<Readonly<Vec3Optional>>[],\n  m: DOMMatrixReadOnly,\n  color?: number | undefined,\n) => polygons.map((polygon) => polygon_transform(polygon, m, color));\n\n/**\n * Creates a regular polygon\n * The polygon will face up (normal 0, -1, 0).\n */\nexport const polygon_regular = /* @__PURE__ */ (segments: number, elongate: number = 0): Polygon =>\n  integers_map(segments, (i) => {\n    const z = Math.cos(Math.PI * 2 * (i / segments));\n    return {\n      x: Math.sin(Math.PI * 2 * (i / segments)),\n      y: 0,\n      z: abs(z) < 0.01 ? z : z < 0 ? z - elongate : z + elongate,\n    };\n  });\n\n/**\n * Connects a top and a bottom polygon with side polygons.\n * Top and bottom polygons must have the same length.\n * Top polygon is supposed to be flipped.\n */\nexport const cylinder_sides = /* @__PURE__ */ (btm: Polygon, top: Polygon, smooth?: 0 | 1 | undefined): Polygon[] =>\n  btm.map((btmi, i, { length }) =>\n    polygon_color(\n      [btmi, top[length - i - 1]!, top[length - ((i + 1) % length) - 1]!, btm[(i + 1) % length]!],\n      btm.$color,\n      smooth,\n    ),\n  );\n\n/** Simplest composition of polygon functions. */\nexport const cylinder = /* @__PURE__ */ (\n  segments: number | Vec3Optional[],\n  smooth?: 0 | 1,\n  topSize: number = 0,\n  elongate?: number,\n): Polygon[] => {\n  const points = (segments as Vec3Optional[]).length\n    ? (segments as Vec3Optional[])\n    : polygon_regular(segments as number, elongate);\n  const top = polygon_transform(points, identity.translate(0, 1).scale3d(topSize > 0 ? topSize : 1));\n  const bottom = polygon_transform(points, identity.translate(0, -1).scale3d(topSize < 0 ? -topSize : 1)).reverse();\n  return [...cylinder_sides(bottom as Polygon, top, smooth), bottom, top];\n};\n\nexport const sphere = /* @__PURE__ */ (\n  slices: number,\n  stacks = slices,\n  vertexFunc: (slice: number, stack: number, polygon: Polygon) => Vec3 = (x: number, y: number) => {\n    y *= Math.PI / stacks;\n    x *= (Math.PI * 2) / slices;\n    return { x: Math.cos(x) * Math.sin(y), y: Math.cos(y), z: Math.sin(x) * Math.sin(y) };\n  },\n): Polygon[] => {\n  const polygons: Polygon[] = [];\n  for (let i = 0; i < slices; i++) {\n    for (let j = 0; j < stacks; j++) {\n      const polygon = polygon_color([], 0, 1);\n      polygons.push(polygon);\n      const vertex = (x: number, y: number) => polygon.push(vertexFunc(x, y, polygon));\n      vertex(i, j);\n      if (j) {\n        vertex((i + 1) % slices, j);\n      }\n      if (j < stacks - 1) {\n        vertex((i + 1) % slices, j + (1 % stacks));\n      }\n      vertex(i, j + (1 % stacks));\n    }\n  }\n  return polygons;\n};\n","import { plane_fromPolygon, type Vec3, type Vec3In, type Plane, vec3_dot } from \"../math\";\nimport { polygon_color, type Polygon } from \"./geometry\";\n\nexport const PLANE_EPSILON = 0.00008;\n\nexport interface CSGPolygon {\n  $polygon: Polygon;\n\n  $flipped: 0 | boolean;\n\n  /**\n   * When a polygon is splitted, this will contain the polygon from which this polygon was splitted.\n   * This is then used by csg_polygons to merge back splitted polygons if they are both present,\n   * to reduce the number of vertices and triangles.\n   */\n  $parent: CSGPolygon | 0;\n}\n\nexport interface CSGNode extends Plane {\n  /** Coplanar polygons */\n  $polygons: CSGPolygon[];\n  /** Front child */\n  $front: CSGNode | 0;\n  /** Back child */\n  $back: CSGNode | 0;\n}\n\nexport type CSGInput = CSGNode | readonly Polygon[];\n\ninterface SplitPolygonResult {\n  $front: CSGPolygon | undefined | false;\n  $back: CSGPolygon | undefined | false;\n}\n\nconst CSGPolygon_splitSpanning = /* @__PURE__ */ (plane: Plane, polygon: CSGPolygon): SplitPolygonResult => {\n  const fpoints: Vec3[] = [];\n  const bpoints: Vec3[] = [];\n  const { $polygon, $flipped } = polygon;\n  let jd: number;\n  let iv: Vec3In = $polygon.at(-1)!;\n  let id: number = vec3_dot(plane, iv) - plane.w;\n  for (const jv of $polygon) {\n    jd = vec3_dot(plane, jv) - plane.w;\n    if (id < PLANE_EPSILON) {\n      bpoints.push(iv);\n    }\n    if (id > -PLANE_EPSILON) {\n      fpoints.push(iv);\n    }\n    if ((id > PLANE_EPSILON && jd < -PLANE_EPSILON) || (id < -PLANE_EPSILON && jd > PLANE_EPSILON)) {\n      id /= jd - id;\n      iv = {\n        x: iv.x + (iv.x - jv.x) * id,\n        y: iv.y + (iv.y - jv.y) * id,\n        z: iv.z + (iv.z - jv.z) * id,\n      };\n      fpoints.push(iv);\n      bpoints.push(iv);\n    }\n    iv = jv;\n    id = jd;\n  }\n  return {\n    $front: fpoints.length > 2 && {\n      $polygon: polygon_color(fpoints, $polygon.$color, $polygon.$smooth),\n      $flipped,\n      $parent: polygon,\n    },\n    $back: bpoints.length > 2 && {\n      $polygon: polygon_color(bpoints, $polygon.$color, $polygon.$smooth),\n      $flipped,\n      $parent: polygon,\n    },\n  };\n};\n\nconst CSGPolygon_split = /* @__PURE__ */ (plane: Plane, polygon: CSGPolygon): SplitPolygonResult => {\n  const { $polygon } = polygon;\n  let $front: CSGPolygon | undefined;\n  let $back: CSGPolygon | undefined;\n  let d: number;\n  for (let i = 0; i < $polygon.length; ++i) {\n    d = vec3_dot(plane, $polygon[i]!) - plane.w;\n    if (d < -PLANE_EPSILON) {\n      $back = polygon;\n    } else if (d > PLANE_EPSILON) {\n      $front = polygon;\n    }\n    if ($back && $front) {\n      return CSGPolygon_splitSpanning(plane, polygon);\n    }\n  }\n  return { $front, $back };\n};\n\nconst csg_tree_addPolygon = /* @__PURE__ */ (\n  node: CSGNode | 0 | undefined,\n  polygon: CSGPolygon,\n  plane: Plane = plane_fromPolygon(polygon.$polygon),\n): CSGNode => {\n  if (node) {\n    const { $front, $back } = CSGPolygon_split(node, polygon);\n    if (!$front && !$back) {\n      node.$polygons.push(polygon); // Coplanar\n    }\n    if ($front) {\n      node.$front = csg_tree_addPolygon(node.$front, $front, plane);\n    }\n    if ($back) {\n      node.$back = csg_tree_addPolygon(node.$back, $back, plane);\n    }\n  } else {\n    const { x, y, z, w } = plane;\n    node = { x, y, z, w, $polygons: [polygon], $front: 0, $back: 0 };\n  }\n  return node;\n};\n\nconst csg_tree_clipNode = /* @__PURE__ */ (\n  anode: CSGNode,\n  bnode: CSGNode,\n  polygonPlaneFlipped: -1 | 1,\n): CSGPolygon[] => {\n  const result: CSGPolygon[] = [];\n  const recursion = (node: CSGNode, polygon: CSGPolygon) => {\n    let { $front, $back } = CSGPolygon_split(node, polygon);\n    if (!$front && !$back) {\n      if (polygonPlaneFlipped * vec3_dot(node, bnode) > 0) {\n        $front = polygon; // Coplanar front\n      } else {\n        $back = polygon; // Coplanar back\n      }\n    }\n    if ($front) {\n      if (node.$front) {\n        recursion(node.$front, $front);\n      } else {\n        result.push($front);\n      }\n    }\n    if ($back && node.$back) {\n      recursion(node.$back, $back);\n    }\n  };\n\n  for (const polygon of bnode.$polygons) {\n    recursion(anode, polygon);\n  }\n  return result;\n};\n\n/** Loop through all nodes in a tree */\nconst csg_tree_each = (node: CSGNode | 0 | undefined, fn: (node: CSGNode) => void): unknown =>\n  node && (fn(node), csg_tree_each(node.$front, fn), csg_tree_each(node.$back, fn));\n\n/**\n * If the given argument is a list of polygons, a new BSP tree built from the list of polygons is returned.\n * If the given argument is already a BSP tree, return it as is.\n * Note that array cannot be empty.\n */\nexport const csg_tree = /* @__PURE__ */ (n: CSGInput): CSGNode =>\n  (n as Polygon[]).length\n    ? // Build a BSP tree from a list of polygons\n      ((n as Polygon[]).reduce<CSGNode | 0>(\n        (prev, $polygon) => csg_tree_addPolygon(prev, { $polygon, $flipped: 0, $parent: 0 }),\n        0,\n      ) as CSGNode)\n    : // An object? We assume is a BSP tree.\n      (n as CSGNode);\n\n/** Convert solid space to empty space and empty space to solid space. */\nexport const csg_tree_flip = <T extends CSGNode | 0 | undefined>(root: T): T => {\n  csg_tree_each(root, (node) => {\n    const { $front, $back } = node;\n    node.$back = $front;\n    node.$front = $back;\n    node.x *= -1;\n    node.y *= -1;\n    node.z *= -1;\n    node.w *= -1;\n    for (const polygon of node.$polygons) {\n      polygon.$flipped = !polygon.$flipped;\n    }\n  });\n  return root;\n};\n\n/**\n * Union a[0] = a[0] U a[1] U a[2] U ...\n */\nexport const csg_union = /* @__PURE__ */ (...inputs: CSGInput[]): CSGNode =>\n  inputs.reduce((a: CSGInput, b: CSGInput | undefined): CSGNode => {\n    const polygonsToAdd: [Plane, CSGPolygon[]][] = [];\n    a = csg_tree(a);\n    if (b) {\n      b = csg_tree(b);\n\n      // clip to a, b\n      csg_tree_each(a, (node) => (node.$polygons = csg_tree_clipNode(b as CSGNode, node, 1)));\n\n      // get the list of polygons to be added from b clipped to a\n      csg_tree_each(b, (node) => polygonsToAdd.push([node, csg_tree_clipNode(a as CSGNode, node, -1)]));\n\n      // add the polygons to a\n      for (const [plane, polygons] of polygonsToAdd) {\n        for (const pp of polygons) {\n          csg_tree_addPolygon(a, pp, plane);\n        }\n      }\n    }\n    return a;\n  }) as CSGNode;\n\n/**\n * Subtraction a = a - (b[0] U b[1] U ...)\n * Note that a will be modified if is a tree.\n */\nexport const csg_subtract = /* @__PURE__ */ (a: CSGInput, ...b: CSGInput[]): CSGNode =>\n  csg_tree_flip(csg_union(csg_tree_flip(csg_tree(a)), ...b));\n\n/**\n * Extracts all the polygons from a BSP tree.\n * Some polygons will be merged, to reduce the number of triangles.\n */\nexport const csg_polygons = /* @__PURE__ */ (tree: CSGNode): Polygon[] => {\n  const byParent = new Map<CSGPolygon, CSGPolygon>();\n  const allPolygons = new Map<CSGPolygon, 0 | boolean>();\n\n  /** Adds a polygon, and replaces two splitted polygons that have the same parent with the parent */\n  const add = (polygon: CSGPolygon): CSGPolygon => {\n    if (polygon.$parent) {\n      const found = byParent.get(polygon.$parent);\n      if (found) {\n        allPolygons.delete(found);\n        polygon = add(polygon.$parent);\n      } else {\n        byParent.set(polygon.$parent, polygon);\n      }\n    }\n    return polygon;\n  };\n\n  csg_tree_each(tree, (node) => {\n    for (const polygon of node.$polygons) {\n      allPolygons.set(add(polygon), polygon.$flipped);\n    }\n  });\n\n  return Array.from(allPolygons, ([{ $polygon }, flipped]) => {\n    const polygon = $polygon.map(({ x, y, z }) => ({ x, y, z }));\n    return polygon_color(flipped ? polygon.reverse() : polygon, $polygon.$color, $polygon.$smooth);\n  });\n};\n\nexport const csg_polygons_subtract = (...input: CSGInput[]) => csg_polygons((csg_subtract as any)(...input));\n","import { identity, integers_map } from \"../math\";\nimport { csg_polygons, csg_subtract } from \"./csg\";\nimport {\n  cylinder,\n  cylinder_sides,\n  material,\n  polygons_transform,\n  polygon_regular,\n  polygon_transform,\n  type Polygon,\n} from \"./geometry\";\n\nexport const GQuad = /* @__PURE__ */ [\n  { x: -1, z: 1 },\n  { x: 1, z: 1 },\n  { x: 1, z: -1 },\n  { x: -1, z: -1 },\n];\n\nconst HORN_STACKS = 10;\n\nexport const GHorn = ((): Polygon[] => {\n  const matrices = integers_map(HORN_STACKS + 1, (i: number) =>\n    identity\n      .translate(Math.sin((i / HORN_STACKS) * Math.PI), i / HORN_STACKS)\n      .rotate(10 * (i / HORN_STACKS))\n      .scale(1.0001 - i / HORN_STACKS, 0, 1 - i / HORN_STACKS),\n  );\n\n  const p = polygon_regular(18);\n  return integers_map(HORN_STACKS, (i) =>\n    cylinder_sides(polygon_transform(p, matrices[i]!).reverse(), polygon_transform(p, matrices[i + 1]!), 1),\n  ).flat();\n})();\n\nexport const boatPolygons = csg_polygons(\n  csg_subtract(\n    polygons_transform(\n      cylinder(20, 1, 1.15, 1),\n      identity.translate(0, -3).scale(3.5, 1, 3.5),\n      material(0.7, 0.4, 0.25, 0.7),\n    ),\n    polygons_transform(\n      cylinder(20, 1, 1.3, 1),\n      identity.translate(0, -2.5).scale(2.6, 1, 3),\n      material(0.7, 0.4, 0.25, 0.2),\n    ),\n    polygons_transform(cylinder(GQuad), identity.translate(4, -1.2).scale3d(2), material(0.7, 0.4, 0.25, 0.3)),\n  ),\n);\n\nexport const bigArc = csg_polygons(\n  csg_subtract(\n    polygons_transform(cylinder(GQuad), identity.translate(0, -8).scale(6, 15, 2.2)),\n    polygons_transform(cylinder(GQuad), identity.translate(0, -14.1).scale(4, 13, 4)),\n    polygons_transform(cylinder(20, 1), identity.translate(0, -1).rotate(90, 0, 90).scale3d(4)),\n  ),\n);\n","import { identity, type Vec3Optional } from \"../math\";\nimport { polygons_transform, type Polygon } from \"../geometry/geometry\";\n\nexport const MODEL_KIND_GAME = 1;\n\nexport const MODEL_KIND_GAME_NO_ATTACH_PLAYER = 2;\n\nexport const MODEL_KIND_MESH = 0;\n\nexport type MODEL_KIND = typeof MODEL_KIND_MESH | typeof MODEL_KIND_GAME | typeof MODEL_KIND_GAME_NO_ATTACH_PLAYER;\n\nexport interface Model {\n  $matrix: DOMMatrixReadOnly;\n  $modelId: number;\n  $kind: MODEL_KIND;\n  $polygons: Polygon[] | null;\n  _update?: (model: Model) => DOMMatrixReadOnly;\n  $vertexBegin?: number;\n  $vertexEnd?: number;\n}\n\nexport let currentEditModel: Model;\n\nexport const allModels: Model[] = [];\n\nexport const meshAdd = (\n  polygons: Polygon<Readonly<Vec3Optional>>[],\n  transform: DOMMatrixReadOnly = identity,\n  color?: number | undefined,\n) => currentEditModel.$polygons!.push(...polygons_transform(polygons, transform, color));\n\nexport const newModel = (fn: (model: Model) => void, $kind: MODEL_KIND = MODEL_KIND_GAME) => {\n  const previousModel = currentEditModel;\n  const model: Model = {\n    $matrix: identity,\n    $modelId: allModels.length,\n    $kind,\n    $polygons: [],\n  };\n  allModels.push((currentEditModel = model));\n  fn(model);\n  currentEditModel = previousModel;\n  return model;\n};\n","import { DEG_TO_RAD, mat_perspectiveXY } from \"./math\";\n\nimport { constDef_zNear, constDef_zFar } from \"./shaders/main-fragment.frag\";\n\nexport const zNear = constDef_zNear;\n\nexport const zFar = constDef_zFar;\n\nexport const fieldOfViewDegrees = 60;\n\nexport const fieldOfViewRadians = /* @__PURE__ */ fieldOfViewDegrees * DEG_TO_RAD; // in radians\n\nconst fieldOfViewAmount = 1 / Math.tan(fieldOfViewRadians / 2);\n\nif (DEBUG) {\n  console.log(\"fieldOfViewAmount:\", fieldOfViewAmount);\n}\n\nexport const camera_position = {\n  x: -11,\n  y: 17,\n  z: -90,\n};\n\nexport const camera_rotation = {\n  x: 0,\n  y: 0,\n  z: 0,\n};\n\nexport const mat_perspective = (near: number, far: number) =>\n  mat_perspectiveXY((hC.clientHeight / hC.clientWidth) * fieldOfViewAmount, fieldOfViewAmount, near, far);\n","// This music has been exported by SoundBox and modified manually to minify better.\n\n// Beethoven's Piano Sonata No. 14, 3rd movement, readapted by Ryan Malm for this game\n\nexport const song_patterns = '000001234556112341234556011111111112011111111112000001111112'\n\nexport const song_instruments = [\n  [ // instrument 0\n    69, // OSC1_VOL\n    128, // OSC1_SEMI\n    0, // OSC1_XENV\n    143, // OSC2_VOL\n    128, // OSC2_SEMI\n    0, // OSC2_XENV\n    0, // NOISE_VOL\n    196, // ENV_ATTACK ** 2 * 4\n    100, // ENV_SUSTAIN ** 2 * 4\n    36, // ENV_RELEASE\n    0, // ENV_EXP_DECAY\n    0, // LFO_FREQ\n    149, // FX_FREQ\n    110, // FX_RESONANCE\n    31, // FX_DRIVE\n    47, // FX_PAN_AMT\n    3, // FX_PAN_FREQ\n    56, // FX_DELAY_AMT\n    2, // FX_DELAY_TIME\n    0, // LFO_AMT\n    [ // Columns 0\n      \"(.15:15:=5:=A:=AF=AFIFIMRMRUY(Y(((((((((((((((((((((((((((((M(M(((((((((((((((((((((((((((((R(R(((((((((((((((((((((((((((((U(U\",\n      \"(059<59<A9<AE<AEHAEHMEHMQMQTY(Y\",\n      \"(5:>A:>AF>AFJAFJMFJMRJMRVMRVY(Y\",\n      \"(:?BFFKNRRWZ^(^((:=@FFILRRUX^(^\",\n      \"Q(M(M(O(Q(R(T(Q(T(R(W(U(T(R(Q(N(W((Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(X]\",\n      \"QN(M(N(M(N(M(N(M((((((((((((((((W(Y(Y(Y(Y(Y(Y(Y(Y(((((((((((((((]\",\n    ]\n  ],\n  [ // Instrument 1\n    100, // OSC1_VOL\n    128, // OSC1_SEMI\n    0, // OSC1_XENV\n    201, // OSC2_VOL\n    128, // OSC2_SEMI\n    0, // OSC2_XENV\n    0, // NOISE_VOL\n    100, // ENV_ATTACK ** 2 * 4\n    144, // ENV_SUSTAIN ** 2 * 4\n    35, // ENV_RELEASE\n    0, // ENV_EXP_DECAY\n    6, // LFO_FREQ\n    135, // FX_FREQ\n    0, // FX_RESONANCE\n    32, // FX_DRIVE\n    147, // FX_PAN_AMT\n    6, // FX_PAN_FREQ\n    0, // FX_DELAY_AMT\n    6, // FX_DELAY_TIME\n    195, // LFO_AMT\n    [ // Columns 1\n      \".(5(.(5(.(5(.(5(.(5(.(5(.(5(.(5\",\n      \"-(5(-(5(-(5(-(5(-(5(-(5(-(5(-(5\",\n      \",(5(,(5(,(5(,(5(,(5(,(5(,(5(,(5\",\n      \"*(6(*(6(*(6(*(6(*(6(*(6(*(6(*(6\",\n      \"5(E(E(F(H(I(K(H(K(I(N(M(K(I(H(F(A(((((((((((((((((((((((((((((((5(((5(((5(((5(((5(((5(((5(((5\",\n      \"5(6(5(6(5(6(5(6(5((()(((((((((((A(B(A(B(A(B(A(B(A(((5\",\n    ]\n  ],\n  [ // Instrument 2\n    255, // OSC1_VOL\n    116, // OSC1_SEMI\n    85, // OSC1_XENV\n    255, // OSC2_VOL\n    116, // OSC2_SEMI\n    37, // OSC2_XENV\n    14, // NOISE_VOL\n    64, // ENV_ATTACK ** 2 * 4\n    144, // ENV_SUSTAIN ** 2 * 4\n    73, // ENV_RELEASE\n    99, // ENV_EXP_DECAY\n    0, // LFO_FREQ\n    136, // FX_FREQ\n    15, // FX_RESONANCE\n    32, // FX_DRIVE\n    0, // FX_PAN_AMT\n    0, // FX_PAN_FREQ\n    66, // FX_DELAY_AMT\n    6, // FX_DELAY_TIME\n    0, // LFO_AMT\n    [ // Columns 2\n      \"9(((9(((9(((9(((9(((9(((9(((9\",\n      \"9(((Q(((Q(((Q\",\n    ]\n  ],\n  [ // Instrument 3\n    0, // OSC1_VOL\n    140, // OSC1_SEMI\n    0, // OSC1_XENV\n    0, // OSC2_VOL\n    140, // OSC2_SEMI\n    0, // OSC2_XENV\n    81, // NOISE_VOL\n    64, // ENV_ATTACK ** 2 * 4\n    400, // ENV_SUSTAIN ** 2 * 4\n    47, // ENV_RELEASE\n    55, // ENV_EXP_DECAY\n    5, // LFO_FREQ\n    239, // FX_FREQ\n    135, // FX_RESONANCE\n    13, // FX_DRIVE\n    176, // FX_PAN_AMT\n    5, // FX_PAN_FREQ\n    16, // FX_DELAY_AMT\n    4, // FX_DELAY_TIME\n    187, // LFO_AMT\n    [ // Columns 3\n      \"9(9(9(9(9(9(9(999(9(9(9(999(9(9\",\n      \"9(9(9(9(9(999(9(((((Q\",\n    ]\n  ],\n  [ // Instrument 4\n    221, // OSC1_VOL\n    128, // OSC1_SEMI\n    64, // OSC1_XENV\n    210, // OSC2_VOL\n    128, // OSC2_SEMI\n    64, // OSC2_XENV\n    255, // NOISE_VOL\n    64, // ENV_ATTACK ** 2 * 4\n    144, // ENV_SUSTAIN ** 2 * 4\n    73, // ENV_RELEASE\n    79, // ENV_EXP_DECAY\n    7, // LFO_FREQ\n    195, // FX_FREQ\n    15, // FX_RESONANCE\n    21, // FX_DRIVE\n    20, // FX_PAN_AMT\n    0, // FX_PAN_FREQ\n    9, // FX_DELAY_AMT\n    3, // FX_DELAY_TIME\n    64, // LFO_AMT\n    [ // Columns 4\n      \"((((Q(((((((Q(((((((Q(((((((Q\",\n      \"Q((Q((Q((Q((Q((Q((((Q\",\n    ]\n  ],\n] as const\n\nexport const song_rowLen0 = 5513\n\nexport const song_rowLen1 = 4562\n\nexport const song_rowLen2 = 3891\n\n// Rows per pattern\nexport const song_patternLen = 32\n\n// End pattern\nexport const song_endPattern = 11\n\n// Number of channels\nexport const song_numChannels = 5\n\nexport const getSegmentNumWords = (song_rowLen: number) => song_rowLen * song_patternLen * (song_endPattern + 1) * 2;\n\nexport const song_numWords =\n  getSegmentNumWords(song_rowLen0) + getSegmentNumWords(song_rowLen1) + getSegmentNumWords(song_rowLen2);\n","/* -*- mode: javascript; tab-width: 4; indent-tabs-mode: nil; -*-\n *\n * Copyright (c) 2011-2013 Marcus Geelnard\n *\n * This software is provided 'as-is', without any express or implied\n * warranty. In no event will the authors be held liable for any damages\n * arising from the use of this software.\n *\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n *\n * 1. The origin of this software must not be misrepresented; you must not\n *    claim that you wrote the original software. If you use this software\n *    in a product, an acknowledgment in the product documentation would be\n *    appreciated but is not required.\n *\n * 2. Altered source versions must be plainly marked as such, and must not be\n *    misrepresented as being the original software.\n *\n * 3. This notice may not be removed or altered from any source\n *    distribution.\n *\n */\n\n// WARNING: Source code of the original player was heavily manually modified to reduce bundle size.\n// This player plays only the game song and is modified.\n// This makes this version not compatible with default soundbox songs.\n\nimport {\n  song_endPattern,\n  song_patternLen,\n  song_patterns,\n  song_instruments,\n  song_numWords,\n  getSegmentNumWords,\n  song_rowLen0,\n  song_rowLen1,\n  song_rowLen2,\n} from \"./song\";\n\nconst getnotefreq = (n: number) => 0.003959503758 * 2 ** ((n - 256) / 12);\n\n/** oscillator 0 */\nconst osc_sin = (value: number) => Math.sin(value * Math.PI * 2);\n\n/** oscillator 1 */\nconst osc_square = (value: number) => (value % 1 < 0.5 ? 1 : -1);\n\n/** oscillator 2 */\nconst osc_saw = (value: number) => 2 * (value % 1) - 1;\n\n/** oscillator 3 */\nconst osc_tri = (value: number) => {\n  const v2 = (value % 1) * 4;\n  return v2 < 2 ? v2 - 1 : 3 - v2;\n};\n\n// Work buffer\nexport const soundbox_mixbuffer = new Int32Array(song_numWords);\n\n/**\n * Generate audio data for a single track/channel.\n * Have to be repeated from 0 to song_numChannels-1\n * @returns\n */\nexport const soundbox_generate = (channelIndex: number) => {\n  let mixIndex = 0;\n  let [\n    OSC1_VOL,\n    OSC1_SEMI,\n    OSC1_XENV,\n    OSC2_VOL,\n    OSC2_SEMI,\n    OSC2_XENV,\n    NOISE_VOL,\n    ENV_ATTACK,\n    ENV_SUSTAIN,\n    ENV_RELEASE,\n    ENV_EXP_DECAY,\n    LFO_FREQ,\n    FX_FREQ,\n    FX_RESONANCE,\n    FX_DRIVE,\n    FX_PAN_AMT,\n    FX_PAN_FREQ,\n    FX_DELAY_AMT,\n    FX_DELAY_TIME,\n    LFO_AMT,\n    COLUMNS,\n  ] = song_instruments[channelIndex]!;\n\n  ENV_RELEASE = (ENV_RELEASE * ENV_RELEASE * 4) as any;\n\n  for (const song_rowLen of [song_rowLen0, song_rowLen1, song_rowLen2]) {\n    // Local variables\n    let n;\n    let t;\n    let f;\n\n    const chnBuf = new Int32Array(getSegmentNumWords(song_rowLen));\n\n    // Clear effect state\n    let low = 0;\n    let band = 0;\n    let high;\n    let filterActive: boolean | undefined;\n\n    // Clear note cache.\n    const noteCache = [];\n\n    // Put performance critical instrument properties in local variables\n    const lfoFreq = 2 ** (LFO_FREQ - 9) / song_rowLen;\n    const panFreq = (Math.PI * 2 ** (FX_PAN_FREQ - 8)) / song_rowLen;\n    const dly = (FX_DELAY_TIME * song_rowLen) & ~1; // Must be an even number\n\n    const createNote = (note: number) => {\n      const OSC1_WAVEFORM = channelIndex < 2 ? osc_saw : osc_sin; // mOscillators[0|2]\n      const OSC2_WAVEFORM = channelIndex < 2 ? (channelIndex < 1 ? osc_square : osc_tri) : osc_sin;\n\n      const noteBuf = new Int32Array(ENV_ATTACK + ENV_SUSTAIN + ENV_RELEASE);\n\n      // Re-trig oscillators\n      let c1 = 0;\n      let c2 = 0;\n\n      // Local variables.\n      let o1t: number;\n      let o2t: number;\n\n      // Generate one note (attack + sustain + release)\n      for (let j1 = 0, j2 = 0; j1 < ENV_ATTACK + ENV_SUSTAIN + ENV_RELEASE; ++j1, ++j2) {\n        let e = 1;\n        // Envelope\n        if (j1 < ENV_ATTACK) {\n          e = j1 / ENV_ATTACK;\n        } else if (j1 >= ENV_ATTACK + ENV_SUSTAIN) {\n          e = (j1 - ENV_ATTACK - ENV_SUSTAIN) / ENV_RELEASE;\n          e = (1 - e) * 3 ** ((-ENV_EXP_DECAY / 16) * e);\n        }\n\n        if (j2 >= 0) {\n          // Switch arpeggio note.\n          j2 -= song_rowLen * 4;\n\n          // Calculate note frequencies for the oscillators\n          o1t = getnotefreq(note + OSC1_SEMI);\n          o2t = getnotefreq(note + OSC2_SEMI) * (1 + (channelIndex ? 0 : 0.0008 * 9));\n        }\n\n        // Add to (mono) channel buffer\n        noteBuf[j1] =\n          (80 * // Oscillator 1\n            (OSC1_WAVEFORM((c1 += o1t! * e ** (OSC1_XENV / 32))) * OSC1_VOL +\n              // Oscillator 2\n              OSC2_WAVEFORM((c2 += o2t! * e ** (OSC2_XENV / 32))) * OSC2_VOL +\n              // Noise oscillator\n              (NOISE_VOL ? (Math.random() * 2 - 1) * NOISE_VOL : 0)) *\n            e) |\n          0;\n      }\n      return noteBuf;\n    };\n\n    // Patterns\n    for (let p = 0; p <= song_endPattern; ++p) {\n      // Pattern rows\n      for (let row = 0, cp = +song_patterns[channelIndex * 12 + p]!; row < song_patternLen; ++row) {\n        // Calculate start sample number for this row in the pattern\n        const rowStartSample = (p * song_patternLen + row) * song_rowLen;\n\n        // Generate notes for this pattern row\n        for (let col = 0; col < 4; ++col) {\n          n = 0;\n          if (cp) {\n            n = COLUMNS[cp - 1]!.charCodeAt(row + col * song_patternLen) - 40;\n            n += n > 0 ? 106 : 0;\n          }\n          if (n) {\n            const noteBuf = noteCache[n] || (noteCache[n] = createNote(n));\n            for (let j = 0, i = rowStartSample * 2; j < noteBuf.length; ++j, i += 2) {\n              chnBuf[i] += noteBuf[j]!;\n            }\n          }\n        }\n\n        // Perform effects for this pattern row\n        for (let j = 0, rsample; j < song_rowLen; ++j) {\n          // Dry mono-sample\n          let k = (rowStartSample + j) * 2;\n          let lsample = 0;\n          rsample = chnBuf[k]!;\n\n          // We only do effects if we have some sound input\n          if (rsample || filterActive) {\n            // State variable filter\n            f = FX_FREQ * ((43.23529 * 3.141592) / 44100);\n            if (channelIndex === 1 || channelIndex === 4) {\n              f *= (osc_sin(lfoFreq * k) * LFO_AMT) / 512 + 0.5;\n            }\n            f = 1.5 * Math.sin(f);\n            low += f * band;\n            high = (1 - FX_RESONANCE / 255) * (rsample - band) - low;\n            band += f * high;\n            rsample = channelIndex === 4 ? band : channelIndex === 3 ? high : low;\n\n            // Distortion\n            if (!channelIndex) {\n              rsample *= 22 * 1e-5;\n              rsample = rsample < 1 ? (rsample > -1 ? osc_sin(rsample / 4) : -1) : 1;\n              rsample /= 22 * 1e-5;\n            }\n\n            // Drive\n            rsample *= FX_DRIVE / 32;\n\n            // Is the filter active (i.e. still audiable)?\n            filterActive = rsample * rsample > 1e-5;\n\n            // Panning\n            t = (Math.sin(panFreq * k) * FX_PAN_AMT) / 512 + 0.5;\n            lsample = rsample * (1 - t);\n            rsample *= t;\n          }\n\n          // Delay is always done, since it does not need sound input\n          if (k >= dly) {\n            // Left channel = left + right[-p] * t\n            lsample += (chnBuf[k - dly + 1]! * FX_DELAY_AMT) / 255;\n\n            // Right channel = right + left[-p] * t\n            rsample += (chnBuf[k - dly]! * FX_DELAY_AMT) / 255;\n          }\n\n          soundbox_mixbuffer[mixIndex + k] += chnBuf[k] = lsample;\n          ++k;\n          soundbox_mixbuffer[mixIndex + k] += chnBuf[k] = rsample;\n        }\n      }\n    }\n\n    mixIndex += chnBuf.length;\n  }\n};\n","import { soundbox_mixbuffer } from \"./music-player\";\nimport { song_numWords } from \"./song\";\n\nexport const audioContext = new AudioContext();\n\nexport const songAudioSource = audioContext.createBufferSource();\n\nexport const loadSong = () => {\n  // set the buffer in the AudioBufferSourceNode\n  // Create a new AudioBuffer\n  const buffer = audioContext.createBuffer(2, song_numWords / 2, 44100);\n\n  for (let i = 0; i < 2; i++) {\n    for (let j = i, data = buffer.getChannelData(i); j < song_numWords; j += 2) {\n      data[j >> 1] = soundbox_mixbuffer[j]! / 65536;\n    }\n  }\n\n  // Load the buffer into the audio source\n  songAudioSource.buffer = buffer;\n\n  // Loop forever\n  songAudioSource.loop = true;\n};\n","export let mainMenuVisible: boolean | undefined;\n\nimport type { KEY_CODE } from \"./utils/keycodes\";\nimport { camera_rotation } from \"./camera\";\nimport { absoluteTime, LOCAL_STORAGE_SAVED_GAME_KEY } from \"./game/world-state\";\nimport { audioContext, songAudioSource } from \"./music/audio-context\";\nimport { abs } from \"./math\";\n\nexport const KEY_LEFT = 0;\n\nexport const KEY_FRONT = 1;\n\nexport const KEY_RIGHT = 2;\n\nexport const KEY_BACK = 3;\n\nexport const KEY_INTERACT = 5;\n\nexport const keyboard_downKeys: (boolean | 0 | 1 | undefined)[] = [];\n\nlet music_on = !DEBUG;\n\nexport let player_first_person: 0 | 1 | undefined;\n\nexport let touch_movementX = 0;\n\nexport let touch_movementY = 0;\n\nconst updateMusicOnState = () => {\n  if (mainMenuVisible || !music_on) {\n    songAudioSource.disconnect();\n  } else {\n    // connect the AudioBufferSourceNode to the  destination so we can hear the sound\n    songAudioSource.connect(audioContext.destination);\n  }\n  b4.innerHTML = \"Music: \" + music_on;\n};\n\nexport const setMainMenuVisible = (value: boolean = false) => {\n  if (mainMenuVisible !== value) {\n    mainMenuVisible = value;\n    player_first_person = 0;\n    try {\n      if (value) {\n        document.exitPointerLock();\n      } else {\n        songAudioSource.start();\n      }\n    } catch {}\n\n    document.body.className = value ? \"l m\" : \"l\";\n    updateMusicOnState();\n  }\n};\n\nexport const initPage = () => {\n  let cameraRotTouch: Touch | undefined;\n  let cameraPosTouch: Touch | undefined;\n  let pageClicked: undefined | 1;\n  let touchStartCameraRotX = 0;\n  let touchStartCameraRotY = 0;\n  let touchStartTime = 0;\n\n  const handleResize = () => {\n    hC.width = innerWidth;\n    hC.height = innerHeight;\n    keyboard_downKeys.length = touch_movementX = touch_movementY = 0;\n    cameraRotTouch = cameraPosTouch = undefined;\n    if (document.hidden) {\n      setMainMenuVisible(true);\n    }\n  };\n\n  b1.onclick = () => setMainMenuVisible();\n\n  // b2.ontouchend = () => (touch_first_person = 1);\n\n  b2.onclick = () => {\n    setMainMenuVisible();\n    player_first_person = 1;\n  };\n\n  b3.onclick = () => {\n    // eslint-disable-next-line no-alert\n    if (confirm(\"Restart game?\")) {\n      localStorage[LOCAL_STORAGE_SAVED_GAME_KEY] = \"\";\n      location.reload();\n    }\n  };\n\n  b4.onclick = () => {\n    music_on = !music_on;\n    updateMusicOnState();\n  };\n\n  // touch controls\n\n  b5.onclick = () => setMainMenuVisible(true);\n\n  onclick = () => {\n    pageClicked = 1;\n    if (!mainMenuVisible) {\n      keyboard_downKeys[KEY_INTERACT] = true;\n      if (player_first_person) {\n        hC.requestPointerLock();\n      }\n    }\n  };\n\n  document.onvisibilitychange = onresize = onblur = handleResize;\n\n  onkeydown = onkeyup = ({ code, target, type, repeat }) => {\n    if (!repeat) {\n      const pressed = !!type[5] && target === document.body;\n\n      if (pressed && (code === \"Escape\" || (code === \"Enter\" && mainMenuVisible))) {\n        if (!mainMenuVisible || pageClicked) {\n          setMainMenuVisible(!mainMenuVisible);\n        }\n      } else {\n        const mapped = (\n          {\n            [\"KeyA\"]: KEY_LEFT,\n            [\"ArrowLeft\"]: KEY_LEFT,\n\n            [\"KeyW\"]: KEY_FRONT,\n            [\"ArrowUp\"]: KEY_FRONT,\n\n            [\"KeyD\"]: KEY_RIGHT,\n            [\"ArrowRight\"]: KEY_RIGHT,\n\n            [\"KeyS\"]: KEY_BACK,\n            [\"ArrowDown\"]: KEY_BACK,\n\n            [\"KeyE\"]: KEY_INTERACT,\n            [\"Space\"]: KEY_INTERACT,\n            [\"Enter\"]: KEY_INTERACT,\n          } as Partial<Record<KEY_CODE, number>>\n        )[code as KEY_CODE]!;\n        if (mapped === KEY_INTERACT) {\n          if (pressed) {\n            keyboard_downKeys[mapped] = 1;\n          }\n        } else {\n          keyboard_downKeys[mapped] = pressed;\n        }\n      }\n    }\n  };\n\n  onmousemove = ({ movementX, movementY }) => {\n    if (player_first_person && (movementX || movementY)) {\n      camera_rotation.y += movementX * 0.1;\n      camera_rotation.x += movementY * 0.1;\n    }\n  };\n\n  hC.ontouchstart = (e) => {\n    if (!mainMenuVisible) {\n      for (const touch of e.changedTouches) {\n        if (player_first_person && touch.pageX > hC.clientWidth / 2) {\n          if (!cameraRotTouch) {\n            cameraRotTouch = touch;\n            touchStartCameraRotX = camera_rotation.y;\n            touchStartCameraRotY = camera_rotation.x;\n          }\n        } else if (!cameraPosTouch) {\n          cameraPosTouch = touch;\n        }\n      }\n      touchStartTime = absoluteTime;\n    }\n  };\n\n  hC.ontouchmove = ({ changedTouches }) => {\n    if (!mainMenuVisible) {\n      for (const { pageX, pageY, identifier } of changedTouches) {\n        if (cameraRotTouch?.identifier === identifier) {\n          camera_rotation.y = touchStartCameraRotX + (pageX - cameraRotTouch.pageX) / 3;\n          camera_rotation.x = touchStartCameraRotY + (pageY - cameraRotTouch.pageY) / 3;\n        }\n        if (cameraPosTouch?.identifier === identifier) {\n          touch_movementX = -(pageX - cameraPosTouch.pageX) / 18;\n          touch_movementY = -(pageY - cameraPosTouch.pageY) / 18;\n          touch_movementX = abs(touch_movementX) < 0.35 ? 0 : touch_movementX * 0.8;\n          touch_movementY = abs(touch_movementY) < 0.35 ? 0 : touch_movementY * 0.8;\n        }\n      }\n    }\n  };\n\n  hC.ontouchend = (e) => {\n    for (const touch of e.changedTouches) {\n      if (touch.identifier === cameraRotTouch?.identifier) {\n        cameraRotTouch = undefined;\n      }\n      if (touch.identifier === cameraPosTouch?.identifier) {\n        cameraPosTouch = undefined;\n        touch_movementY = touch_movementX = 0;\n      }\n    }\n    e.preventDefault();\n    const diff = absoluteTime - touchStartTime;\n    if (!touchStartTime || (diff > 0.02 && diff < 0.4)) {\n      keyboard_downKeys[KEY_INTERACT] = true;\n    }\n  };\n\n  if (!DEBUG) {\n    oncontextmenu = () => false;\n  }\n\n  handleResize();\n  setMainMenuVisible(!DEBUG);\n};\n","import type { Model } from \"./scene\";\nimport { lerp, min, angle_wrap_degrees, lerpneg, abs, clamp01 } from \"../math\";\nimport { keyboard_downKeys, KEY_INTERACT, mainMenuVisible } from \"../page\";\n\nexport let absoluteTime = 0;\n\nexport let gameTime = 0;\n\nexport let souls_collected_count = 0;\n\n/** Minimum 15.3 frames per second */\nexport const GAME_TIME_MAX_DELTA_TIME = 0.066;\n\nexport let gameTimeDelta: number = GAME_TIME_MAX_DELTA_TIME;\n\nlet _globalTime: number | undefined;\n\nlet _messageEndTime = 0;\n\nexport const lerpDamp = /* @__PURE__ */ (from: number, to: number, speed: number) =>\n  lerp(from, to, 1 - Math.exp(-speed * gameTimeDelta));\n\nexport const gameTimeUpdate = (time: number) => {\n  const dt = (time - (_globalTime || time)) / 1000;\n  if (mainMenuVisible) {\n    keyboard_downKeys[KEY_INTERACT] = 0;\n    gameTimeDelta = 0;\n  } else {\n    gameTimeDelta = min(GAME_TIME_MAX_DELTA_TIME, dt);\n  }\n  gameTime += gameTimeDelta;\n  absoluteTime += dt;\n  _globalTime = time;\n};\n\n// export const gameTimeUpdate = (time: number) => {\n//   if (mainMenuVisible) {\n//     keyboard_downKeys[KEY_INTERACT] = 0;\n//   }\n//   const delta = (time - (_globalTime || time)) / 1000;\n//   if (delta >= 0.06) {\n//     gameTimeDelta = mainMenuVisible ? 0 : Math.min(GAME_TIME_MAX_DELTA_TIME, (time - (_globalTime || time)) / 1000);\n//     gameTime += gameTimeDelta;\n//     _globalTime = time;\n//   } else {\n//     gameTimeDelta = 0;\n//   }\n//   absoluteTime += delta;\n//   if (!_globalTime) {\n//     _globalTime = time;\n//   }\n// };\n\nexport const LOCAL_STORAGE_SAVED_GAME_KEY = \"DanteSP22\";\n\nexport interface Lever {\n  $value: 0 | 1;\n  $lerpValue: number;\n  $lerpValue2: number;\n  $parent: Model;\n  _update: () => void;\n  $matrix?: DOMMatrixReadOnly;\n  $locMatrix?: DOMMatrixReadOnly;\n}\n\nexport interface Soul {\n  $value: 0 | 1;\n  _update: () => void;\n  $matrix?: DOMMatrixReadOnly;\n}\n\nconst getItemValue = <T>({ $value }: { readonly $value: T }) => $value;\n\nexport const levers: Lever[] = [];\n\nexport const souls: Soul[] = [];\n\nexport let player_last_pulled_lever = 0;\n\nexport let rotatingPlatform1Rotation = 0;\n\nexport let rotatingPlatform2Rotation = 0;\n\nexport let rotatingHexCorridorRotation = 0;\n\nexport let game_completed: 0 | 1 = 0;\n\nexport let firstBoatLerp = 0;\n\nexport let secondBoatLerp = 0;\n\nexport const showMessage = (message: string, duration: number) => {\n  if (!game_completed) {\n    h4.innerHTML = message;\n    _messageEndTime = gameTime + duration;\n  }\n};\n\nconst clearMessage = () => {\n  h4.innerHTML = \"\";\n  _messageEndTime = 0;\n};\n\nexport const worldStateUpdate = () => {\n  const shouldRotatePlatforms = lerpneg(levers[12]!.$lerpValue, levers[13]!.$lerpValue);\n\n  if (gameTime > _messageEndTime) {\n    clearMessage();\n  }\n\n  rotatingHexCorridorRotation = lerp(\n    lerpDamp(rotatingHexCorridorRotation, 0, 1),\n    angle_wrap_degrees(rotatingHexCorridorRotation + gameTimeDelta * 60),\n    levers[5]!.$lerpValue - levers[6]!.$lerpValue2,\n  );\n\n  rotatingPlatform1Rotation = lerp(\n    lerpDamp(rotatingPlatform1Rotation, 0, 5),\n    angle_wrap_degrees(rotatingPlatform1Rotation + gameTimeDelta * 56),\n    shouldRotatePlatforms,\n  );\n\n  rotatingPlatform2Rotation = lerp(\n    lerpDamp(rotatingPlatform2Rotation, 0, 4),\n    angle_wrap_degrees(rotatingPlatform2Rotation + gameTimeDelta * 48),\n    shouldRotatePlatforms,\n  );\n\n  secondBoatLerp = lerpDamp(secondBoatLerp, levers[9]!.$lerpValue2, 0.2 + 0.3 * abs(levers[9]!.$lerpValue2 * 2 - 1));\n\n  firstBoatLerp = lerpDamp(\n    firstBoatLerp,\n    game_completed ? lerp(firstBoatLerp, -9, gameTimeDelta * 1.5) : clamp01(gameTime / 3),\n    1,\n  );\n\n  if (levers[0]!.$value === 1 && levers[0]!.$lerpValue > 0.8) {\n    if (souls_collected_count < 13) {\n      levers[0]!.$value = 0;\n      showMessage(\"Not leaving now, there are souls to catch!\", 3);\n    } else if (!game_completed) {\n      showMessage(\"Well done. They will be punished.<br>Thanks for playing\", Infinity);\n      game_completed = 1;\n    }\n  }\n};\n\nconst updateCollectedSoulsCounter = () => {\n  souls_collected_count = souls.reduce((acc, cur) => acc + cur.$value, 0);\n  h3.innerHTML =\n    \" \" +\n    [\"0\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"XIII\"][souls_collected_count]!;\n};\n\nexport const saveGame = () => {\n  updateCollectedSoulsCounter();\n  localStorage[LOCAL_STORAGE_SAVED_GAME_KEY] = JSON.stringify([\n    levers.map(getItemValue),\n    souls.map(getItemValue),\n    player_last_pulled_lever,\n    gameTime,\n    secondBoatLerp,\n  ]);\n};\n\nexport const loadGame = () => {\n  try {\n    const [savedLevers, savedSouls, savedLastPulledLever, savedGameTime, savedSecondBoatLerp] = JSON.parse(\n      localStorage[LOCAL_STORAGE_SAVED_GAME_KEY]!,\n    );\n    levers.map(\n      (lever, index) =>\n        (lever.$lerpValue = lever.$lerpValue2 = lever.$value = index ? ((savedLevers[index] | 0) as 0 | 1) : 0),\n    );\n    souls.map((soul, index) => (soul.$value = (savedSouls[index] | 0) as 0 | 1));\n    player_last_pulled_lever = savedLastPulledLever;\n    gameTime = savedGameTime;\n    secondBoatLerp = savedSecondBoatLerp;\n  } catch (e) {\n    if (DEBUG) {\n      console.log(e);\n    }\n  }\n  firstBoatLerp = clamp01(player_last_pulled_lever);\n  clearMessage();\n  updateCollectedSoulsCounter();\n};\n\nexport const onPlayerPullLever = (leverIndex: number) => {\n  if (DEBUG) {\n    console.log(\"switch lever \" + leverIndex + \" = \" + levers[leverIndex]?.$value);\n  }\n\n  if (leverIndex) {\n    showMessage(\"* click *\", 1);\n  }\n  player_last_pulled_lever = leverIndex;\n  saveGame();\n};\n\nexport const onSoulCollected = () => {\n  showMessage(\n    [\n      ,\n      \"Mark Zuckemberg<br>made the world worse\",\n      ,\n      \"Andrzej Mazur<br>for the js13k competition\",\n      \"Donald Trump<br>lies\",\n      \"Kim Jong-un<br>Dictator, liked pineapple on pizza\",\n      \"Maxime Euziere<br>forced me to finish this game\",\n      \"She traded NFTs apes\",\n      ,\n      \"Vladimir Putin<br>evil war\",\n      \"He was not a good person\",\n      ,\n      \"Salvatore Previti<br>made this evil game<br><br>Done. Go back to the boat\",\n    ][souls_collected_count] || 'Catched a \"crypto bro\".<br>\"Web3\" is all scam, lies and grift',\n    souls_collected_count && souls_collected_count < 12 ? 5 : 7,\n  );\n\n  saveGame();\n};\n","import type { Vec3 } from \"../math\";\n\nexport const player_position_final: Vec3 = {\n  x: 0,\n  y: 0,\n  z: 0,\n};\n","import { abs, angle_lerp_degrees, DEG_TO_RAD, identity, max, min, vec3_distance } from \"../math\";\nimport { cylinder, material } from \"../geometry/geometry\";\nimport { GQuad } from \"../geometry/solids\";\nimport { allModels, currentEditModel, meshAdd } from \"./scene\";\nimport {\n  levers,\n  souls,\n  onPlayerPullLever,\n  onSoulCollected,\n  lerpDamp,\n  gameTimeDelta,\n  gameTime,\n  type Lever,\n  type Soul,\n} from \"./world-state\";\nimport { player_position_final } from \"./player-position\";\nimport { keyboard_downKeys, KEY_INTERACT } from \"../page\";\n\nconst LEVER_SENSITIVITY_RADIUS = 2.9;\nconst SOUL_SENSITIVITY_RADIUS = 1.5;\n\nexport const MODEL_ID_FIRST_BOAT = 2;\n\n// ========= BOAT ========= //\n\nexport const getBoatAnimationMatrix = (x: number, y: number, z: number) =>\n  identity\n    .translate(x + Math.sin(gameTime + 2) / 5, y + Math.sin(gameTime * 0.8) / 3, z)\n    .rotateSelf(Math.sin(gameTime) * 2, Math.sin(gameTime * 0.7), Math.sin(gameTime * 0.9));\n\nexport type Circle = [number, number, number];\n\nexport const newLever = (transform: DOMMatrixReadOnly): void => {\n  const $parent = currentEditModel;\n  const index = levers.length;\n  const lever: Lever = {\n    $value: 0,\n    $lerpValue: 0,\n    $lerpValue2: 0,\n    $parent,\n    _update: () => {\n      const { $value, $lerpValue, $lerpValue2 } = lever;\n      const locMatrix = $parent.$matrix.multiply(transform);\n      lever.$locMatrix = locMatrix;\n\n      if (\n        vec3_distance(locMatrix.transformPoint(), player_position_final) < LEVER_SENSITIVITY_RADIUS &&\n        keyboard_downKeys[KEY_INTERACT]\n      ) {\n        if ($lerpValue < 0.3 || $lerpValue > 0.7) {\n          lever.$value = $value ? 0 : 1;\n          onPlayerPullLever(index);\n        }\n      }\n\n      lever.$lerpValue = lerpDamp($lerpValue, $value, 4);\n      lever.$lerpValue2 = lerpDamp($lerpValue2, $value, 1);\n      lever.$matrix = locMatrix.rotate(lever.$lerpValue * 60 - 30, 0).translateSelf(0, 1);\n    },\n  };\n  levers.push(lever);\n\n  meshAdd(cylinder(5), transform.translate(-0.2).rotate(90, 90).scale(0.4, 0.1, 0.5), material(0.4, 0.5, 0.5));\n  meshAdd(cylinder(5), transform.translate(0.2).rotate(90, 90).scale(0.4, 0.1, 0.5), material(0.4, 0.5, 0.5));\n  meshAdd(cylinder(GQuad), transform.translate(0, -0.4).scale(0.5, 0.1, 0.5), material(0.5, 0.5, 0.4));\n};\n\nexport const newSoul = (transform: DOMMatrixReadOnly, ...walkingPath: number[][]) => {\n  const parentModel = currentEditModel;\n  const index = souls.length;\n  const circles = (walkingPath as Circle[]).map(([x, z, w]) => ({ x, z, w }));\n  let circle = circles[0]!;\n  let { x: targetX, z: targetZ } = circle;\n  let soulX = targetX;\n  let soulZ = targetZ;\n  let dirX = -1;\n  let dirZ = 0;\n  let randAngle = 0;\n  let lookAngle = 0;\n  let prevX = 0;\n  let prevZ = 0;\n  let velocity = 3;\n  let wasInside: boolean | undefined | 1 = 1;\n\n  const soul: Soul = {\n    $value: 0,\n    _update: () => {\n      if (!soul.$value) {\n        let isInside: boolean | undefined;\n        let contextualVelocity = 1;\n        let mindist = Infinity;\n\n        for (const c of circles) {\n          const { x, z, w } = c;\n          const distance = Math.hypot(targetX - x, targetZ - z);\n          const circleSDF = distance - w;\n          isInside ||= distance < w;\n          if (circleSDF > 0 && circleSDF < mindist) {\n            mindist = circleSDF;\n            circle = c;\n          }\n          contextualVelocity = min(contextualVelocity, distance / w);\n        }\n\n        if (!isInside) {\n          const { x, z, w } = circle;\n          const ax = targetX - x;\n          const az = targetZ - z;\n          let magnitude = Math.hypot(ax, az);\n          let angle = Math.atan2(-az, ax);\n          if (wasInside) {\n            randAngle = ((Math.random() - 0.5) * Math.PI) / 2;\n            velocity = max(1, velocity / (1 + Math.random()));\n          }\n          angle += randAngle;\n          dirX = -Math.cos(angle);\n          dirZ = Math.sin(angle);\n          if (magnitude > 0.1) {\n            // limit the vector length to the circle radius, as a security measure\n            magnitude = min(magnitude, w) / (magnitude || 1);\n            targetX = ax * magnitude + x;\n            targetZ = az * magnitude + z;\n          }\n        }\n\n        wasInside = isInside;\n\n        velocity = lerpDamp(velocity, 3 + (1 - contextualVelocity) * 6, 3 + contextualVelocity);\n        soulX = lerpDamp(soulX, (targetX = lerpDamp(targetX, targetX + dirX, velocity)), velocity);\n        soulZ = lerpDamp(soulZ, (targetZ = lerpDamp(targetZ, targetZ + dirZ, velocity)), velocity);\n\n        lookAngle = angle_lerp_degrees(\n          lookAngle,\n          Math.atan2(soulX - prevX, soulZ - prevZ) / DEG_TO_RAD - 180,\n          3 * gameTimeDelta,\n        );\n\n        prevX = soulX;\n        prevZ = soulZ;\n\n        const soulPos = (soul.$matrix = transform.multiply(\n          parentModel.$matrix\n            .translate(soulX, 0, soulZ)\n            .rotateSelf(0, lookAngle)\n            .skewXSelf(Math.sin(gameTime * 2) * 7)\n            .skewYSelf(Math.sin(gameTime * 1.4) * 7),\n        )).transformPoint();\n\n        if (vec3_distance(soulPos, player_position_final) < SOUL_SENSITIVITY_RADIUS) {\n          soul.$value = 1;\n          onSoulCollected();\n        }\n      }\n\n      if (soul.$value) {\n        soul.$matrix = allModels[MODEL_ID_FIRST_BOAT]!.$matrix.translate(\n          (index % 4) * 1.2 - 1.7 + Math.sin(gameTime + index) / 7,\n          -2,\n          -5.5 + ((index / 4) | 0) * 1.7 + abs((index % 4) - 2) + Math.cos(gameTime / 1.5 + index) / 6,\n        );\n      }\n    },\n  };\n\n  // if (DEBUG_FLAG0) {\n  //   for (const c of circles) {\n  //     meshAdd(cylinder(12), transform.translate(c.x, -1.7, c.z).scale(c.w, 0.01, c.w), material(0.3, 0.3, 0.38));\n  //   }\n  // }\n\n  souls.push(soul);\n};\n\nexport const updateModels = () => {\n  for (const model of allModels) {\n    if (model._update) {\n      model.$matrix = model._update(model);\n    }\n  }\n\n  for (const lever of levers) {\n    lever._update();\n  }\n\n  for (const soul of souls) {\n    soul._update();\n  }\n};\n","import { abs, clamp01, integers_map, lerpneg, max, min, identity } from \"../math\";\nimport type { Polygon } from \"../geometry/geometry\";\nimport { material, cylinder, polygons_transform, polygon_regular, sphere } from \"../geometry/geometry\";\nimport { csg_subtract, csg_polygons, csg_union } from \"../geometry/csg\";\nimport { GQuad, GHorn, boatPolygons, bigArc } from \"../geometry/solids\";\nimport type { Model } from \"./scene\";\nimport { meshAdd, newModel, MODEL_KIND_MESH, MODEL_KIND_GAME_NO_ATTACH_PLAYER } from \"./scene\";\nimport {\n  secondBoatLerp,\n  gameTime,\n  levers,\n  rotatingHexCorridorRotation,\n  rotatingPlatform1Rotation,\n  rotatingPlatform2Rotation,\n  firstBoatLerp,\n} from \"./world-state\";\nimport { getBoatAnimationMatrix, newLever, newSoul } from \"./objects\";\n\nexport let leverModel: Model;\n\nexport let soulModel: Model;\n\nexport let soulCollisionModel: Model;\n\nexport let playerLegsModels: [Model, Model];\n\nexport let playerModel: Model;\n\nexport const buildWorld = () => {\n  let tmpMatrix: DOMMatrixReadOnly;\n\n  // Initialize the full screen triangle for the sky. Must be the first model.\n\n  newModel(() => {\n    meshAdd([GQuad.slice(1)], identity.translate(-2).scale3d(3).rotate(90, 0));\n  }, MODEL_KIND_MESH);\n\n  newModel(() => {\n    // ========= FIRST BOAT (modelId:2) ========= //\n\n    newModel((model) => {\n      model._update = () => getBoatAnimationMatrix(-12, 4.2, -66 + firstBoatLerp * 40);\n      meshAdd(boatPolygons);\n      newLever(identity.translate(0, -3, 4));\n    });\n\n    // ========= entranceBarsMesh ========= //\n\n    const entranceBarsPolygons = integers_map(7, (i) =>\n      polygons_transform(\n        cylinder(6, 1),\n        identity.translate(4 * (i / 6 - 0.5), 3).scale(0.2, 3, 0.2),\n        material(0.3, 0.3, 0.38),\n      ),\n    ).flat();\n\n    // ========= WORLD! ========= //\n\n    // SOUL 0 - soul after first boat\n    newSoul(identity.translate(-0.5, 2.8, -20), [0, 0, 2.5], [0, -3, 2.5]);\n\n    // SOUL 1 - soul after first gate\n    newSoul(\n      identity.translate(0, 2.8),\n      [5, 10, 3],\n      [-5, 10, 3],\n      ...polygon_regular(18).map(({ x, z }) => [x * 7, z * 10, 4.5 - abs(x) * 2]),\n    );\n\n    // first boat attachment\n\n    meshAdd(\n      cylinder(GQuad),\n      identity.translate(-5, -0.2, -26).scale(3.2, 1, 2.5).skewX(3),\n      material(0.8, 0.8, 0.8, 0.2),\n    );\n\n    // gate columns\n\n    GQuad.map(({ x, z }) =>\n      meshAdd(cylinder(6), identity.translate(x * 3, 3, z * 15).scale(0.7, 4, 0.7), material(0.6, 0.3, 0.3, 0.4)),\n    );\n\n    // in and out\n    [-23, 22].map((z) =>\n      meshAdd(cylinder(GQuad), identity.translate(0, 0, z).scale(3, 1, 8), material(0.9, 0.9, 0.9, 0.2)),\n    );\n\n    [-15, 15].map((z, i) => {\n      //  gate top\n      meshAdd(cylinder(GQuad), identity.translate(0, 6.3, z).scale(4, 0.3, 1), material(0.3, 0.3, 0.3, 0.4));\n      //  gate bottom\n      meshAdd(cylinder(GQuad), identity.translate(0, 1, z).scale(3, 0.2, 0.35), material(0.5, 0.5, 0.5, 0.3));\n      // in and out gate bars\n      newModel((model) => {\n        model._update = () => identity.translate(0, -levers[i + 1]!.$lerpValue * 4.7, z);\n        meshAdd(entranceBarsPolygons);\n      });\n    });\n\n    // horns\n\n    integers_map(5, (i) =>\n      integers_map(2, (j) =>\n        meshAdd(\n          GHorn,\n          identity\n            .translate((j - 0.5) * 18.5, 0, i * 4.8 - 9.5)\n            .rotate(0, 180 - j * 180)\n            .scale(1.2, 10, 1.2),\n          material(1, 1, 0.8, 0.2),\n        ),\n      ),\n    );\n\n    meshAdd(cylinder(GQuad), identity.translate(3, 1.5, -20).scale(0.5, 2, 5), material(0.7, 0.7, 0.7, 0.2));\n\n    // first lever pad\n    meshAdd(\n      cylinder(GQuad),\n      identity.translate(-3.4, -0.2, -19).scale(2, 1, 1.5).rotate(0, -90),\n      material(0.75, 0.75, 0.75, 0.2),\n    );\n    meshAdd(cylinder(5), identity.translate(-5.4, 0, -19).scale(2, 1, 2).rotate(0, -90), material(0.6, 0.3, 0.3, 0.4));\n\n    newLever(identity.translate(-5.4, 1.5, -19).rotate(0, -90));\n\n    // descent\n\n    meshAdd(\n      cylinder(GQuad),\n      identity.rotate(0, 60).translate(14.8, -1.46, -1).rotate(0, 0, -30).scale(4, 0.6, 4.5),\n      material(0.8, 0.2, 0.2, 0.5),\n    );\n\n    // base\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          csg_union(\n            // lower base\n            polygons_transform(\n              cylinder(6, 0, 0, 0.3),\n              identity.translate(8, -3, -4).scale(13, 1, 13),\n              material(0.7, 0.7, 0.7, 0.2),\n            ),\n\n            // hole extension\n            polygons_transform(cylinder(6), identity.translate(0, -8).scale(9, 8, 8), material(0.4, 0.2, 0.5, 0.5)),\n\n            // middle base\n            polygons_transform(\n              cylinder(6, 0, 0, 0.3),\n              identity.translate(0, -0.92).scale(13, 2, 13),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n          ),\n          // hole\n          polygons_transform(cylinder(5), identity.scale(5, 30, 5), material(0.4, 0.2, 0.6, 0.5)),\n\n          // smooth hole\n          polygons_transform(\n            cylinder(5, 0, 1.5),\n            identity.translate(0, 1).scale(4.5, 0.3, 4.5),\n            material(0.7, 0.5, 0.9, 0.2),\n          ),\n\n          // descent cut\n          polygons_transform(\n            cylinder(GQuad),\n            identity.rotate(0, 60).translate(14, 0.7, -1).rotate(0, 0, -35).scale(2, 2, 2),\n            material(0.5, 0.5, 0.5, 0.5),\n          ),\n\n          // lower lever pad\n          polygons_transform(\n            cylinder(6),\n            identity.translate(15, -1.5, 4).scale(3.5, 1, 3.5),\n            material(0.5, 0.5, 0.5, 0.5),\n          ),\n        ),\n      ),\n    );\n\n    // moving central platform\n\n    newModel((model) => {\n      model._update = () => {\n        return identity.translate(\n          0,\n          levers[3]!.$lerpValue > 0.01\n            ? (Math.cos(gameTime * 1.5) * 5 + 2) * levers[3]!.$lerpValue2 * (1 - levers[2]!.$lerpValue) +\n                (1 - levers[3]!.$lerpValue) * -15\n            : // invisible\n              -500,\n          0,\n        );\n      };\n\n      newLever(identity.translate(0, 1.2));\n\n      meshAdd(cylinder(5), identity.translate(0, -0.2).scale(5, 1, 5), material(0.6, 0.65, 0.7, 0.3));\n    });\n\n    newLever(identity.translate(15, -2, 4));\n\n    // ******** LEVEL 2 ********\n\n    const getOscillationAmount = () => min(levers[2]!.$lerpValue2, 1 - levers[4]!.$lerpValue2);\n\n    const blackPlatform = (freq: number, amplitude: number, pz: number) =>\n      newModel((model) => {\n        model._update = () =>\n          identity.translate(getOscillationAmount() * Math.sin(freq * 3 + gameTime * freq) * amplitude);\n        GQuad.map(({ x, z }) => {\n          // column body\n          meshAdd(\n            cylinder(11, 1),\n            identity.translate(x * 4, 4, pz + z * 4).scale(0.8, 3, 0.8),\n            material(0.5, 0.3, 0.7, 0.6),\n          );\n          // column top\n          meshAdd(\n            cylinder(GQuad),\n            identity.translate(x * 4, 7, pz + z * 4).scale(1, 0.3),\n            material(0.5, 0.5, 0.5, 0.3),\n          );\n        });\n\n        meshAdd(\n          csg_polygons(\n            csg_subtract(\n              polygons_transform(\n                cylinder(GQuad),\n                identity.translate(0, 0, pz).scale(5, 1, 5),\n                material(0.8, 0.8, 0.8, 0.3),\n              ),\n              ...[-1, 1].map((i) =>\n                polygons_transform(\n                  cylinder(GQuad),\n                  identity\n                    .translate(5 * i, 0.2, pz)\n                    .rotate(0, 0, i * -30)\n                    .scale(4, 1, 2),\n                  material(0.8, 0.8, 0.8, 0.3),\n                ),\n              ),\n            ),\n          ),\n        );\n        // bottom\n        meshAdd(cylinder(GQuad), identity.translate(0, -3, pz).scale(8, 2, 8), material(0.4, 0.4, 0.4, 0.3));\n      });\n\n    blackPlatform(0.7, 12, 35);\n    blackPlatform(1, 8.2, 55);\n\n    // central oscillating platform\n    newModel((model) => {\n      model._update = () => identity.translate(getOscillationAmount() * Math.sin(gameTime / 1.5 + 2) * 12);\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            csg_union(\n              polygons_transform(cylinder(GQuad), identity.scale(1.5, 1, 5), material(0.9, 0.9, 0.9, 0.2)),\n              polygons_transform(cylinder(6), identity.scale(4, 1, 5), material(0.9, 0.9, 0.9, 0.2)),\n              polygons_transform(\n                cylinder(GQuad),\n                identity.translate(0, -2).scale(2, 3.2, 1.9),\n                material(0.3, 0.8, 0.5, 0.5),\n              ),\n              polygons_transform(\n                cylinder(16, 1, 0, 4),\n                identity.scale(1, 1, 1.5).rotate(0, 90),\n                material(0.9, 0.9, 0.9, 0.2),\n              ),\n            ),\n            polygons_transform(cylinder(GQuad), identity.scale(1.3, 10, 1.3), material(0.2, 0.7, 0.4, 0.6)),\n          ),\n        ),\n        identity.translate(0, 0, 45),\n      );\n\n      // SOUL 2 - soul over the central oscillating platform in the second level\n      newSoul(identity.translate(0, 2.8, 45), [0, 0, 4.5]);\n    });\n\n    const level3Oscillation = () =>\n      clamp01(1 - getOscillationAmount() * 5) * lerpneg(levers[4]!.$lerpValue, levers[5]!.$lerpValue);\n\n    // ******** LEVEL 3 ********\n\n    // triangle platform\n\n    newModel((model) => {\n      model._update = () => identity.translate((1 - getOscillationAmount()) * 9.8);\n\n      meshAdd(cylinder(3), identity.translate(-23, -1.7, 55.8).scale(5, 0.7, 8.3), material(0.3, 0.6, 0.6, 0.2));\n      meshAdd(cylinder(8), identity.translate(-23, -2.2, 66.5).scale(1.5, 1.2, 1.5), material(0.8, 0.8, 0.8, 0.2));\n      meshAdd(cylinder(GQuad), identity.translate(-23, -3, 55).scale(5.2, 1.7, 3), material(0.5, 0.5, 0.5, 0.3));\n      meshAdd(cylinder(GQuad), identity.translate(-23, -2.2, 62).scale(3, 1, 4), material(0.5, 0.5, 0.5, 0.3));\n\n      newLever(identity.translate(-23, -0.5, 66.5));\n    });\n\n    meshAdd(\n      cylinder(GQuad),\n      identity.translate(-21.1 + 2.45, -3, 55).scale(2.45, 1.4, 2.7),\n      material(0.9, 0.9, 0.9, 0.2),\n    );\n\n    // vertically oscillating mini platforms\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, level3Oscillation() * Math.sin(gameTime * (1.5 * 0.9)) * 4);\n\n      meshAdd(\n        cylinder(GQuad),\n        identity.translate(-21.1 - 1.45, -3, 55).scale(1.45, 1.4, 2.7),\n        material(0.7, 0.7, 0.7, 0.2),\n      );\n\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(cylinder(GQuad), identity.scale(3, 1.4, 2.7)),\n            polygons_transform(cylinder(GQuad), identity.scale(1.2, 8, 1.2)),\n          ),\n        ),\n        identity.translate(-33, -3, 55),\n        material(0.7, 0.7, 0.7, 0.2),\n      );\n    });\n\n    // horizontaly oscillating mini platforms\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, 0, level3Oscillation() * Math.sin(gameTime * 0.9) * 8);\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-27, -3, 55).scale(3, 1.4, 2.7),\n              material(0.9, 0.9, 0.9, 0.2),\n            ),\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-27, -3, 55).scale(1, 3),\n              material(0.9, 0.9, 0.9, 0.2),\n            ),\n          ),\n        ),\n      );\n\n      meshAdd(cylinder(GQuad), identity.translate(-39, -3, 55).scale(3, 1.4, 2.7), material(0.9, 0.9, 0.9, 0.2));\n    });\n\n    // hex corridor door\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, levers[4]!.$lerpValue2 * -6.5);\n      meshAdd(\n        cylinder(6),\n        identity.translate(-44.5, 0, 55).rotate(90, 90).rotate(0, 90).scale(5.9, 0.5, 5.9),\n        material(0.7, 0.7, 0.7, 0.4),\n      );\n    });\n\n    // hex corridor\n\n    const hexCorridorPolygons = [\n      ...polygons_transform(\n        csg_polygons(\n          csg_union(\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(0, -3).scale(11, 1.4, 3),\n              material(0.9, 0.9, 0.9, 0.2),\n            ),\n            csg_subtract(\n              polygons_transform(cylinder(6), identity.rotate(0, 0, 90).scale(6, 8, 6), material(0.3, 0.6, 0.6, 0.3)),\n              polygons_transform(\n                cylinder(4, 0, 0.01),\n                identity.translate(0, 6).scale(12, 2, 0.75).rotate(0, 45),\n                material(0.3, 0.6, 0.6, 0.3),\n              ),\n              polygons_transform(cylinder(6), identity.rotate(0, 0, 90).scale(5, 12, 5), material(0.3, 0.6, 0.6, 0.3)),\n              ...[5, 0, -5].map((x) =>\n                polygons_transform(\n                  cylinder(5),\n                  identity.translate(x, 2.5).rotate(90, 0, 36).scale(1.8, 10, 1.8),\n                  material(0.3, 0.6, 0.6, 0.3),\n                ),\n              ),\n            ),\n          ),\n        ),\n        identity,\n      ),\n    ];\n\n    meshAdd(hexCorridorPolygons, identity.translate(-53, 0, 55));\n\n    meshAdd(cylinder(6), identity.translate(-61.3, -2.4, 49).scale(3, 1, 5), material(0.4, 0.6, 0.6, 0.3));\n\n    meshAdd(cylinder(7), identity.translate(-57, -2.6, 46).scale(4, 1, 4), material(0.8, 0.8, 0.8, 0.3));\n\n    newLever(identity.translate(-55, -1.1, 46).rotate(0, 90));\n\n    // rotating hex corridor\n\n    newModel((model) => {\n      if (DEBUG) {\n        console.log(\"rotatingHexCorridor modelId:\" + model.$modelId);\n      }\n\n      model._update = () => {\n        return identity\n          .translate(-75, (1 - levers[5]!.$lerpValue2) * (1 - levers[6]!.$lerpValue) * 3, 55)\n          .rotate(180 * (1 - levers[5]!.$lerpValue2) + rotatingHexCorridorRotation, 0);\n      };\n      meshAdd(hexCorridorPolygons);\n    }, MODEL_KIND_GAME_NO_ATTACH_PLAYER);\n\n    // connection from rotating hex corridor to platforms\n\n    meshAdd(\n      cylinder(GQuad),\n      identity.translate(-88.3, -5.1, 55).rotate(0, 0, -30).scale(5, 1.25, 4.5),\n      material(0.7, 0.7, 0.7, 0.2),\n    );\n\n    meshAdd(\n      cylinder(3, 0, -0.5),\n      identity.translate(-88.4, -3.9, 55).rotate(0, -90, 17).scale(3, 1.45, 5.9),\n      material(0.8, 0.8, 0.8, 0.2),\n    );\n\n    // platform after the rotating hex corridor\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          csg_union(\n            // base\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-100, -2.5, 55).scale(8, 1, 8),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n            // right path to the boat\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-113, -2.6, 55).scale(6.2, 1.1, 3).skewX(3),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n            // straiht line\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-100, -2.6, 70).scale(3, 1.1, 7),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n            // 45 degrees detour\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-96, -2.6, 73).rotate(0, 45).scale(3, 1.1, 5),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n            // 45 degrees detour hexagon\n            polygons_transform(\n              cylinder(6),\n              identity.translate(-88.79, -2.6, 80.21).scale(6, 1.1, 6).rotate(0, 15),\n              material(0.6, 0.6, 0.6, 0.3),\n            ),\n\n            // ascension\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-100, -1.1, 82.39).rotate(-15, 0).scale(3, 1.1, 6),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n            // ascension continuation\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-100, 0.42, 92).scale(3, 1.1, 4.1),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n          ),\n\n          // decorative octagon\n          polygons_transform(\n            cylinder(8),\n            identity.translate(-100, -1, 55).scale(7, 0.9, 7),\n            material(0.3, 0.3, 0.3, 0.4),\n          ),\n          polygons_transform(\n            cylinder(8),\n            identity.translate(-100, -2, 55).scale(4, 0.3, 4),\n            material(0.4, 0.4, 0.4, 0.5),\n          ),\n          polygons_transform(\n            cylinder(8),\n            identity.translate(-100, -3, 55).scale(0.6, 1, 0.6),\n            material(0.4, 0.4, 0.4, 0.5),\n          ),\n        ),\n      ),\n      identity,\n    );\n\n    // SOUL 3 - soul in the central area, after the rotating hex corridor\n    newSoul(identity.translate(-100, 0.2, 55), [0, 0, 7.5], [-8, 0, 3.5], [-12, 0, 3.5], [-15, 0, 3.5]);\n\n    // SOUL 4 - soul after the central gate\n    newSoul(identity.translate(-89, 0.2, 80), [0, 0, 6]);\n\n    // first arc door\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          polygons_transform(\n            cylinder(GQuad),\n            identity.translate(-100, 1, 63).scale(7.5, 4),\n            material(0.5, 0.5, 0.5, 0.4),\n          ),\n          polygons_transform(\n            cylinder(GQuad),\n            identity.translate(-100, 0, 70).scale(2, 2, 10),\n            material(0.5, 0.5, 0.5, 0.4),\n          ),\n          polygons_transform(\n            cylinder(20, 1),\n            identity.translate(-100, 2, 70).scale(2, 2, 10).rotate(90, 0),\n            material(0.5, 0.5, 0.5, 0.4),\n          ),\n        ),\n      ),\n    );\n\n    // gate bars\n\n    newModel((model) => {\n      model._update = () => identity.translate(-99.7, -levers[6]!.$lerpValue * 5.3 - 2, 63.5);\n      meshAdd(entranceBarsPolygons);\n    });\n\n    // hex columns\n\n    GQuad.map(({ x, z }) => {\n      meshAdd(\n        cylinder(6),\n        identity.translate(-100 + x * 7, -3, z * 7 + 55).scale(1, 8.1),\n        material(0.6, 0.15, 0.15, 0.8),\n      );\n      [4, -0.4].map((i) =>\n        meshAdd(\n          cylinder(6),\n          identity.translate(-100 + x * 7, i, z * 7 + 55).scale(1.3, 0.5, 1.3),\n          material(0.4, 0.2, 0.2, 0.8),\n        ),\n      );\n    });\n\n    // crystals\n\n    integers_map(7, (i) => {\n      meshAdd(\n        cylinder(((i * 23 + 1) % 5) + 5, 0, 0.55),\n        identity\n          .translate(-101 + Math.sin(i) * 5 + i, -2.3 - i, 44.9 - i * 2.8)\n          .scaleSelf(5 + i / 2, 1 + i / 6, 5 + i / 3),\n        material(0.5 - i / 17, 0.5 - (i & 1) / 9, 0.6, 0.3),\n      );\n    });\n\n    // crystals continuation pad\n\n    meshAdd(cylinder(GQuad), identity.translate(-87, -9.5, 24).scale(7, 1, 3), material(0.4, 0.5, 0.6, 0.4));\n\n    // lever pad\n\n    meshAdd(cylinder(4), identity.translate(-86, -9.2, 27).scale(5, 1, 5), material(0.5, 0.6, 0.7, 0.3));\n\n    meshAdd(cylinder(18, 1), identity.translate(-86, -9, 31).scale(1.5, 1, 1.5), material(0.3, 0.3, 0.4, 0.1));\n\n    newLever(identity.translate(-86, -7.5, 31));\n\n    // elevators\n\n    const shouldOscillate = () => lerpneg(levers[7]!.$lerpValue2, levers[6]!.$lerpValue2);\n\n    newModel((model) => {\n      model._update = () => {\n        const osc = shouldOscillate();\n        return identity.translate(\n          0,\n          (1 - max(levers[6]!.$lerpValue, levers[7]!.$lerpValue)) * 3.5 + osc * Math.sin(gameTime) * 5,\n        );\n      };\n      [0, 12, 24].map((x) =>\n        meshAdd(\n          cylinder(GQuad),\n          identity.translate(x - 76.9, x / -13 - 10, 24).scale(2.8, 1.5, 3),\n          material(0.2, 0.5, 0.6, 0.2),\n        ),\n      );\n    });\n\n    newModel((model) => {\n      model._update = () => {\n        const osc = shouldOscillate();\n        return identity.translate(0, osc * Math.sin(gameTime + 3) * 6, Math.sin(gameTime * 0.6 + osc) * 6 * osc);\n      };\n      [6, 18].map((x) =>\n        meshAdd(\n          cylinder(GQuad),\n          identity.translate(x - 76.9, x / -13 - 10, 24).scale(2.8, 1.5, 3),\n          material(0.1, 0.4, 0.5, 0.2),\n        ),\n      );\n    });\n\n    // pad after elevators\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          csg_union(\n            polygons_transform(cylinder(GQuad), identity.scale(11, 1, 13), material(0.3, 0.4, 0.6, 0.3)),\n            // lever pad\n            polygons_transform(\n              cylinder(5),\n              identity.translate(0, 0, -7).scale(2, 1.2, 2),\n              material(0.2, 0.4, 0.7, 0.3),\n            ),\n            // blue pentagon\n            polygons_transform(cylinder(5), identity.scale(9, 1.2, 9), material(0, 0.2, 0.3, 0.5)),\n          ),\n          polygons_transform(cylinder(5), identity.scale(5.4, 5, 5.4), material(0, 0.2, 0.3, 0.5)),\n        ),\n      ),\n      identity.translate(-38.9, -11.3, 17),\n    );\n\n    newLever(identity.translate(-38.9, -9.6, 10));\n\n    // central sculpture/monument\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, levers[7]!.$lerpValue2 * -7.3);\n\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            csg_union(\n              polygons_transform(\n                cylinder(5),\n                identity.translate(0, 2).scale(5, 7, 5).skewY(8),\n                material(0.2, 0.4, 0.5, 0.5),\n              ),\n              polygons_transform(\n                cylinder(5),\n                identity.translate(0, 6).scale(1.1, 7, 1.1).skewY(-8),\n                material(0.25, 0.35, 0.5, 0.5),\n              ),\n              polygons_transform(\n                cylinder(5),\n                identity.translate(0, 9).scale(0.6, 7, 0.6).skewY(8),\n                material(0.35, 0.3, 0.5, 0.5),\n              ),\n            ),\n            polygons_transform(\n              cylinder(5),\n              identity.translate(0, 5).scale(1.5, 1.5, 8).rotate(90, 0, 35),\n              material(0.2, 0.4, 0.5, 0.5),\n            ),\n          ),\n        ),\n        identity.translate(-38.9, -11.3, 17),\n      );\n\n      // SOUL 5 - soul over the central sculpture/monument\n      newSoul(\n        identity.translate(-38.9, -0.3, 17).rotate(0, 0, 10),\n        ...polygon_regular(15).map(({ x, z }) => [x * 3, z * 3, 1.5]),\n      );\n    });\n\n    // columns\n\n    GQuad.map(({ x, z }) => {\n      tmpMatrix = identity.translate(x * 9 - 38.9, -7.3, z * 11 + 17);\n      meshAdd(cylinder(18, 1), tmpMatrix.scale(1, 4), material(0.25, 0.25, 0.25, 1));\n      [1.5, 8].map((y) =>\n        meshAdd(cylinder(18, 1), tmpMatrix.translate(0, y - 4).scale(1.5, 0.5, 1.5), material(0.6, 0.6, 0.6, 0.3)),\n      );\n    });\n\n    // Grid with holes\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          csg_union(\n            // holed base\n            polygons_transform(\n              cylinder(6),\n              identity.translate(0, 0, -36).scale(15, 1.2, 15),\n              material(0.7, 0.7, 0.7, 0.3),\n            ),\n            // after monument continuation\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(0, 0, -18).scale(4, 1.2, 6),\n              material(0.45, 0.4, 0.6, 0.3),\n            ),\n          ),\n          ...integers_map(6, (z) =>\n            integers_map(6, (x) =>\n              polygons_transform(\n                cylinder(6),\n                identity.translate(x * 4.6 - 12 + 2 * (z & 1), 0, z * 4.6 - 50 + Math.sin(x * 4) * 2).scale(2, 5, 2),\n                material(0.7, 0.7, 0.7, 0.3),\n              ),\n            ),\n          ).flat(),\n        ),\n      ),\n      identity.translate(-38.9, -11.3, 17),\n    );\n\n    // SOUL 6 - soul over the grid with hex holes\n    newSoul(identity.translate(-38.9, 2.9 - 11.3, 75 - 38 - 58), [0, 0, 12]);\n\n    // Detour lever pad\n    meshAdd(cylinder(5), identity.translate(-84, -2, 85).scale(4, 0.8, 4).rotate(0, 10), material(0.8, 0.1, 0.25, 0.4));\n\n    // Detour lever\n    newLever(identity.translate(-84, -0.5, 85).rotate(0, 45));\n\n    // ******** SECOND BOAT ********\n\n    newModel((model) => {\n      model._update = () => getBoatAnimationMatrix(-123, 1.4, 55 + secondBoatLerp * -65);\n      newLever(identity.translate(0, -3, -4).rotate(0, 180));\n      meshAdd(boatPolygons);\n    });\n\n    // ******** LEVEL AFTER SECOND BOAT ********\n\n    // SOUL 7 - soul after the second boat\n    newSoul(identity.translate(8 - 123, 0.2, -12), [0, 0, 3.5]);\n\n    const pushingRod = csg_polygons(\n      csg_subtract(\n        polygons_transform(\n          cylinder(GQuad),\n          identity.translate(0, -0.5, 1).scale(1.15, 1.2, 6.5),\n          material(0.25, 0.25, 0.35, 0.3),\n        ),\n        polygons_transform(cylinder(3), identity.translate(0, 0, -5.5).scale(3, 2), material(0.6, 0.3, 0.4, 0.3)),\n        ...[-1.2, 1.2].map((i) =>\n          polygons_transform(\n            cylinder(GQuad),\n            identity.translate(i, -0.5, 1).scale(0.14, 0.3, 6.5),\n            material(0.7, 0.2, 0, 0.3),\n          ),\n        ),\n      ),\n    );\n\n    // pushing rods\n\n    const shouldPushRods = () => lerpneg(levers[10]!.$lerpValue, levers[11]!.$lerpValue);\n    const shouldBlockRods = () => (1 - levers[10]!.$lerpValue) * (1 - shouldPushRods());\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, -2, shouldPushRods() * abs(Math.sin(gameTime * 1.1)) * -8.5 + 10);\n      integers_map(2, (x) => meshAdd(pushingRod, identity.translate(-110 + x * 9 + (x & 1), 1.7, -12)));\n    });\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, -2, shouldPushRods() * abs(Math.sin(gameTime * 2.1)) * -8.5 + 10);\n      integers_map(2, (x) => meshAdd(pushingRod, identity.translate(-110 + (x + 2) * 9 + (x & 1), 1.7, -12)));\n    });\n\n    newModel((model) => {\n      model._update = () =>\n        identity.translate(0, -2, max(shouldBlockRods(), shouldPushRods() * abs(Math.sin(gameTime * 1.5))) * -8.5 + 10);\n      integers_map(3, (x) => meshAdd(pushingRod, identity.translate(-106 + x * 9, 1.7, -12)));\n    });\n\n    // pushing rods container\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          csg_union(\n            polygons_transform(cylinder(GQuad), identity.translate(26.5, -1.6, 10).scale(17, 2.08, 3)),\n            polygons_transform(cylinder(GQuad), identity.translate(26.5, -0.6, 10).scale(17, 2, 0.5)),\n          ),\n          ...integers_map(4, (x) =>\n            polygons_transform(cylinder(GQuad), identity.translate(13 + x * 9 + (x & 1), -0.8, 9).scale(1.35, 1.35, 9)),\n          ),\n          ...integers_map(3, (x) =>\n            polygons_transform(cylinder(GQuad), identity.translate(17 + x * 9, -0.8, 9).scale(1.35, 1.35, 9)),\n          ),\n        ),\n      ),\n      identity.translate(-123, 0, -12),\n      material(0.5, 0.5, 0.6, 0.2),\n    );\n\n    meshAdd(\n      cylinder(5),\n      identity.translate(-113.6, -1.6, -2).rotate(0, 90, 90).scale(1.5, 0.2, 1.5),\n      material(0.25, 0.25, 0.35, 1),\n    );\n\n    // boat attachment\n\n    meshAdd(\n      cylinder(GQuad),\n      identity.translate(-116, -2.6, -12).scale(3.2, 1.1, 4).skewX(3),\n      material(0.8, 0.8, 0.8, 0.2),\n    );\n\n    meshAdd(cylinder(6), identity.translate(-116, -2.6, -16.5).scale(3.2, 0.8, 3), material(0.6, 0.5, 0.7, 0.2));\n\n    newLever(identity.translate(-116, -1.4, -18).rotate(0, 180));\n\n    // arcs\n\n    integers_map(3, (i) => {\n      meshAdd(bigArc, identity.translate(i * 12 - 109, -9, -12), material(0.6, 0.6, 0.6, 0.3));\n      meshAdd(bigArc, identity.translate(-77, -9, i * -12 - 8 - 12).rotate(0, 90), material(0.6, 0.6, 0.6, 0.3));\n    });\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          polygons_transform(\n            cylinder(12),\n            identity.translate(-77, -13.9, -12).scale(4, 18.2, 4),\n            material(0.7, 0.7, 0.7, 0.2),\n          ),\n          polygons_transform(\n            cylinder(GQuad),\n            identity.translate(-79, 0, -12).scale(3.5, 2.2, 1.3),\n            material(0.4, 0.5, 0.6, 0.2),\n          ),\n          polygons_transform(\n            cylinder(GQuad),\n            identity.translate(-77, 0, -14).scale(1.5, 2.2, 2),\n            material(0.4, 0.5, 0.6, 0.2),\n          ),\n          polygons_transform(\n            cylinder(12),\n            identity.translate(-77, 2.8, -12).scale(3, 5, 3),\n            material(0.4, 0.5, 0.6, 0.2),\n          ),\n        ),\n      ),\n    );\n\n    meshAdd(cylinder(GQuad), identity.translate(-115.5, -17, -12).scale(0.5, 15, 2.2), material(0.6, 0.6, 0.6, 0.3));\n\n    meshAdd(cylinder(GQuad), identity.translate(-77, -17, -50.5).scale(2.2, 15, 0.5), material(0.6, 0.6, 0.6, 0.3));\n\n    // internal pad\n\n    meshAdd(\n      cylinder(GQuad),\n      identity.translate(-84.9, -4.3, -40).rotate(0, 0, 12).scale(6, 1, 3),\n      material(0.6, 0.6, 0.6, 0.3),\n    );\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          polygons_transform(\n            cylinder(GQuad),\n            identity.translate(-93, -5.8, -40).scale(9, 1, 5),\n            material(0.8, 0.8, 0.8, 0.1),\n          ),\n          polygons_transform(\n            cylinder(9),\n            identity.translate(-98, -5.8, -40).scale(3, 8, 3),\n            material(0.7, 0.7, 0.7, 0.2),\n          ),\n        ),\n      ),\n    );\n\n    meshAdd(cylinder(9), identity.translate(-98, -5.8, -40).scale(2.5, 0.9, 2.5), material(0.5, 0.5, 0.5, 0.3));\n\n    newLever(identity.translate(-98, -4.4, -40).rotate(0, 90));\n\n    // SOUL 8 - soul in the internal pad after the pushing rods\n    newSoul(identity.translate(30 - 123, -3, -28 - 12).rotate(0, 0, 4), [0, -2, 3.5], [0, 2, 3.5]);\n\n    // ******** LEVEL AFTER CENTRAL GATE ********\n\n    // base\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          csg_union(\n            polygons_transform(\n              cylinder(6, 0, 0, 0.6),\n              identity.translate(-100, 0.7, 105.5).scale(8, 1, 11),\n              material(0.7, 0.7, 0.7, 0.2),\n            ),\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-101.5, 0.7, 93.5).scale(10.5, 1, 2),\n              material(0.7, 0.7, 0.7, 0.2),\n            ),\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-91.2, 0.7, 107).scale(3, 1, 3.3),\n              material(0.7, 0.7, 0.7, 0.2),\n            ),\n          ),\n          polygons_transform(\n            cylinder(5),\n            identity.translate(-100, 0.7, 113).scale(4, 3, 4),\n            material(0.7, 0.7, 0.7, 0.2),\n          ),\n        ),\n      ),\n    );\n\n    // oscillating hex pads\n\n    const hexPadShouldOscillate = () => lerpneg(levers[8]!.$lerpValue2, levers[12]!.$lerpValue2);\n\n    integers_map(4, (i) =>\n      newModel((model) => {\n        model._update = () => {\n          const osc = hexPadShouldOscillate();\n          return identity.translate(\n            (i > 2 ? (1 - osc) * 2 + osc : 0) - 100,\n            osc * Math.sin(gameTime * 1.3 + i * 1.7) * (3 + i / 3) + 0.7,\n            (i & 1 ? -1 : 1) * (1 - levers[8]!.$lerpValue2) * (1 - levers[12]!.$lerpValue2) * -7 +\n              max(0.05, osc) * Math.cos(gameTime * 1.3 + i * 7) * (4 - 2 * (1 - i / 3)) +\n              115,\n          );\n        };\n        meshAdd(\n          cylinder(6),\n          identity.translate(-14.6 - i * 4.8 - (i > 2 ? 2 : 0), -i / 2.3, -21.5).scale(2.6, 1, 2.5),\n          material(0.5 - i / 8, i / 12 + 0.5, 0.7, 0.3),\n        );\n      }),\n    );\n\n    // after the hex pads\n\n    // donut pad\n    newModel((model) => {\n      model._update = () => {\n        const osc = hexPadShouldOscillate();\n        return identity\n          .translate(\n            (1 - osc) * 2.5 - 139.7,\n            (1 - levers[8]!.$lerpValue) * -3 + osc * Math.sin(gameTime * 0.8) * -1 - 1.8,\n            93.5,\n          )\n          .rotateSelf(Math.cos(gameTime * 1.3) * (osc * 3 + 3), 0);\n      };\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(cylinder(10), identity.scale(6, 2, 6), material(0.1, 0.6, 0.5, 0.3)),\n            polygons_transform(cylinder(10), identity.scale(3.3, 6, 3.3), material(0.1, 0.6, 0.5, 0.5)),\n          ),\n        ),\n      );\n\n      // second pad\n      tmpMatrix = identity.translate(-7.5).rotate(0, 90);\n      meshAdd(cylinder(15), tmpMatrix.scale(3, 2.3, 3), material(0.4, 0.4, 0.4, 0.3));\n      meshAdd(cylinder(10), tmpMatrix.scale(2, 2.5, 2), material(0.3, 0.8, 0.7, 0.3));\n      meshAdd(cylinder(5), tmpMatrix.scale(1, 3), material(0.5, 0.5, 0.5, 0.5));\n      newLever(tmpMatrix.translate(0, 3.4).rotate(0, 180));\n\n      // lateral horns\n      [-1, 1].map((i) =>\n        meshAdd(\n          GHorn,\n          identity\n            .rotate(-i * 90, 180, 90) //\n            .translate(0, 5)\n            .rotate(0, 0, 40) //\n            .scale(1.3, 10, 1.3), //\n          material(1, 1, 0.8, 0.2),\n        ),\n      );\n\n      // SOUL 9 - soul after the hex pads, in the hex donut with horns\n      newSoul(identity.translate(-5, 4), [0, -1.2, 1.7], [0, 1.2, 1.7]);\n    });\n\n    // far arc gate\n    [-1, 1].map((x) => {\n      meshAdd(\n        cylinder(15, 1),\n        identity.translate(-7.5 * x - 100, 3.7, 96).scale(0.8, 4, 0.8),\n        material(0.6, 0.24, 0.2, 0.5),\n      );\n\n      [7.2, 1.5].map((y) =>\n        meshAdd(\n          cylinder(15, 1),\n          identity.translate(-7.5 * x - 100, y + 0.7, 96).scale(1.1, 0.5, 1.1),\n          material(0.5, 0.24, 0.2, 0.4),\n        ),\n      );\n\n      meshAdd(\n        GHorn,\n        identity\n          .translate(x * -5 - 100, 1.7, 114.5)\n          .scale(1.2, 10, 1.2)\n          .rotate(0, 90 * x - 90),\n        material(1, 1, 0.8),\n      );\n\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(x * -4, 3.5, -0.5).scale(4, 4, 0.7),\n              material(0.5, 0.5, 0.5, 0.4),\n            ),\n            polygons_transform(cylinder(GQuad), identity.scale(3, 3, 10), material(0.6, 0.24, 0.2, 0.5)),\n            polygons_transform(\n              cylinder(30, 1),\n              identity.translate(0, 3, -5).scale(3, 4, 10).rotate(90, 0),\n              material(0.6, 0.24, 0.2, 0.5),\n            ),\n            polygons_transform(\n              cylinder(5),\n              identity\n                .translate(x * -5.3, 7)\n                .rotate(90, 0)\n                .scale(1.7, 5, 1.7),\n              material(0.6, 0.24, 0.2, 0.5),\n            ),\n            polygons_transform(\n              cylinder(5),\n              identity\n                .translate(x * -5.3, 3.8)\n                .rotate(90, 0, 35)\n                .scale(0.75, 5, 0.75),\n              material(0.6, 0.24, 0.2, 0.5),\n            ),\n          ),\n        ),\n        identity.translate(x - 100, 0.7, 97),\n      );\n    });\n\n    // far arc gate door\n\n    newModel((model) => {\n      model._update = () => identity.translate(-100, 0.6 - levers[12]!.$lerpValue * 6, 96.5).scale(0.88, 1.2);\n      meshAdd(entranceBarsPolygons);\n    });\n\n    // rotating platforms\n\n    const rotPlatformBase = [\n      ...polygons_transform(cylinder(28, 1), identity.scale(8, 1, 8), material(0.45, 0.45, 0.45, 0.2)),\n      ...polygons_transform(cylinder(5), identity.translate(0, 1).scale(1, 0.2), material(0.3, 0.3, 0.3, 0.2)),\n    ];\n\n    const rotPlatform = () => {\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(cylinder(28, 1), identity.translate(0, 2).scale(8, 1, 8), material(0.35, 0, 0, 0.3)),\n            polygons_transform(cylinder(GQuad), identity.scale(9, 5, 2), material(0.3, 0, 0, 0.3)),\n          ),\n        ),\n      );\n      meshAdd(rotPlatformBase);\n    };\n\n    newModel((model) => {\n      model._update = () => identity.translate(-80, 1, 106).rotate(0, 40 + rotatingPlatform1Rotation);\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(cylinder(28, 1), identity.scale(8, 1, 8), material(0.45, 0.45, 0.45, 0.2)),\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(0, 0, -5.5).scale(1.5, 3, 2.5),\n              material(0.45, 0.45, 0.45, 0.2),\n            ),\n          ),\n        ),\n      );\n      meshAdd(cylinder(8), identity.translate(0, 2).scale(3, 1.5, 3), material(0.7, 0.7, 0.7, 0.1));\n      meshAdd(cylinder(5), identity.translate(0, 2).scale(1, 2), material(0.3, 0.3, 0.3, 0.2));\n\n      // SOUL 10 - soul over the first rotating platform\n      newSoul(identity.translate(0, 3), ...polygon_regular(10).map(({ x, z }) => [x * 5.6, z * 5.6, 2.5]));\n    });\n\n    newModel((model) => {\n      model._update = () => identity.translate(-64, 1, 106).rotate(0, rotatingPlatform2Rotation);\n      rotPlatform();\n      [-1, 1].map((x) =>\n        meshAdd(\n          GHorn,\n          identity\n            .rotate(0, 90)\n            .translate(x * -5, 1, -0.5)\n            .scale(1.2, 10, 1.2)\n            .rotate(0, 90 * x + 90),\n          material(1, 1, 0.8),\n        ),\n      );\n    });\n\n    newModel((model) => {\n      model._update = () => identity.translate(-48, 1, 106).rotate(0, 180 - rotatingPlatform2Rotation);\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(cylinder(30, 1), identity.translate(0, 2).scale(8, 1, 8), material(0.35, 0, 0, 0.3)),\n            polygons_transform(cylinder(GQuad), identity.translate(7).scale(9, 5, 2), material(0.3, 0, 0, 0.3)),\n            polygons_transform(cylinder(GQuad), identity.translate(0, 0, 7).scale(2, 5, 9), material(0.3, 0, 0, 0.3)),\n          ),\n        ),\n      );\n      meshAdd(rotPlatformBase);\n    });\n\n    newModel((model) => {\n      model._update = () => identity.translate(-48, 1, 90).rotate(0, 270 + rotatingPlatform2Rotation);\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(cylinder(30, 1), identity.translate(0, 2).scale(8, 1, 8), material(0.35, 0, 0, 0.3)),\n            polygons_transform(cylinder(GQuad), identity.translate(7).scale(9, 5, 2), material(0.3, 0, 0, 0.3)),\n            polygons_transform(cylinder(GQuad), identity.translate(0, 0, -7).scale(2, 5, 9), material(0.3, 0, 0, 0.3)),\n          ),\n        ),\n      );\n      meshAdd(rotPlatformBase);\n    });\n\n    // rotating platforms connecting pads\n    meshAdd(cylinder(GQuad), identity.translate(-56, 1, 106).scale(0.7, 0.8, 2.5), material(0.7, 0.7, 0.7, 0.2));\n    meshAdd(cylinder(GQuad), identity.translate(-48, 1, 98).scale(2.5, 0.8, 0.7), material(0.7, 0.7, 0.7, 0.2));\n\n    // exit from the rotating platforms\n    meshAdd(cylinder(GQuad), identity.translate(-39, 0.4, 90).scale(2, 1, 2), material(0.7, 0.7, 0.7, 0.3));\n    meshAdd(cylinder(GQuad), identity.translate(-34.2, 0.4, 90).scale(3, 1, 3), material(0.7, 0.7, 0.7, 0.3));\n\n    newLever(identity.translate(-34, 2.7, 96).rotate(-12, 0));\n\n    // lever pad\n    meshAdd(cylinder(5), identity.translate(-34, 0.2, 96).scale(3, 2, 4).rotate(-20, 0), material(0.2, 0.5, 0.5, 0.6));\n\n    // ******** LEVEL AFTER THE ROTATING PLATFORMS ********\n\n    // jumping pads\n\n    [material(0.1, 0.55, 0.45, 0.2), material(0.2, 0.5, 0.5, 0.3), material(0.3, 0.45, 0.55, 0.4)].map((m, i) =>\n      newModel((model) => {\n        model._update = () => {\n          const v = lerpneg(levers[13]!.$lerpValue2, levers[14]!.$lerpValue2);\n          return identity.translate(\n            0,\n            (1 - levers[13]!.$lerpValue2) * (1 - levers[14]!.$lerpValue2) * 3 +\n              v * Math.sin(gameTime * 1.5 + i * 1.5) * 4.7,\n          );\n        };\n        meshAdd(\n          cylinder(8),\n          identity\n            .translate(-23.5, -0.4 + i / 1.5, 90 + 6.8 * i)\n            .scale(3.6, 2 - i / 1.5, 3.6)\n            .rotate(0, 22.5),\n          m,\n        );\n        if (i === 2) {\n          // in connection\n          meshAdd(cylinder(6), identity.translate(-29, 0.4, 90).scale(2.4, 1, 2.8), material(0.6, 0.7, 0.6, 0.3));\n        }\n        if (i === 1) {\n          // out connections\n          meshAdd(\n            cylinder(GQuad),\n            identity.translate(-16.1, 0.5, 103.5).rotate(0, 0, -3.5).scale(3.9, 0.8, 2).skewX(-1),\n            material(0.6, 0.6, 0.7, 0.3),\n          );\n        }\n      }),\n    );\n\n    // middle base\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          polygons_transform(\n            cylinder(6, 0, 0, 0.3),\n            identity.translate(0, -0.92, 95).scale(14, 2, 14),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n          polygons_transform(cylinder(5), identity.translate(0, 0, 95).scale3d(6), material(0.3, 0.3, 0.3, 0.5)),\n        ),\n      ),\n    );\n\n    [8, -6.1].map((y, p) =>\n      integers_map(3, (i) =>\n        meshAdd(\n          bigArc,\n          identity.translate(i * 6 - 6, y - (i & 1), 111 - 0.2 * (i & 1) - p),\n          i & 1 ? material(0.5, 0.5, 0.5, 0.3) : material(0.35, 0.35, 0.35, 0.5),\n        ),\n      ),\n    );\n\n    // horns\n    [-1, 1].map((x) =>\n      meshAdd(\n        GHorn,\n        identity\n          .translate(x * -8, 1, 85)\n          .scale(1.2, 10, 1.2)\n          .rotate(0, 90 * x + 90),\n        material(1, 1, 0.8),\n      ),\n    );\n\n    newLever(identity.translate(0, 1.7, 82).rotate(0, 180));\n\n    // lever pad\n\n    meshAdd(\n      cylinder(5),\n      identity.translate(0, -15.7, 82).scale(2.5, 17, 2.5).rotate(0, 35),\n      material(0.5, 0.3, 0.3, 0.4),\n    );\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          csg_union(\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(0, 16, 110.5).scale(12, 1, 3),\n              material(0.5, 0.3, 0.3, 0.4),\n            ),\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(0, 16, 111).scale(3, 1, 3.8),\n              material(0.5, 0.3, 0.3, 0.4),\n            ),\n          ),\n\n          polygons_transform(\n            cylinder(5),\n            identity.translate(0, 16, 103.5).scale(5.5, 5, 5.5),\n            material(0.5, 0.3, 0.3, 0.4),\n          ),\n        ),\n      ),\n    );\n\n    newModel((model) => {\n      model._update = () => {\n        const k = Math.sin(gameTime);\n        return identity.translate(k * -2).rotate(0, 0, k * 25);\n      };\n      meshAdd(\n        cylinder(3),\n        identity.translate(0, -3, 118.8).scale(0.8, 0.8, 18).rotate(90, 0, 60),\n        material(0.5, 0.3, 0.3, 0.4),\n      );\n      [22, 30].map((z) => {\n        meshAdd(\n          cylinder(6),\n          identity\n            .translate(0, 16, z + 95)\n            .scale(3, 1, 2.3)\n            .rotate(0, 90),\n          material(0.7, 0.7, 0.7, 0.4),\n        );\n        meshAdd(cylinder(GQuad), identity.translate(0, 6.2, z + 95).scale(0.5, 11, 0.5), material(0.5, 0.3, 0.3, 0.4));\n      });\n    });\n\n    meshAdd(cylinder(6), identity.translate(0, 16, 121).scale(2.5, 1, 2.1).rotate(0, 90), material(0.5, 0.6, 0.7, 0.3));\n    meshAdd(cylinder(GQuad), identity.translate(0, 16, 129).scale(1.5, 1, 2), material(0.5, 0.6, 0.7, 0.3));\n    meshAdd(cylinder(7), identity.translate(0, 16.2, 133).scale(5, 1, 5), material(0.4, 0.5, 0.6, 0.4));\n\n    // floating elevator pad\n    newModel((model) => {\n      model._update = () => {\n        const v = lerpneg(\n          lerpneg((levers[14]!.$lerpValue + levers[14]!.$lerpValue2) / 2, levers[13]!.$lerpValue2),\n          (levers[15]!.$lerpValue + levers[15]!.$lerpValue2) / 2,\n        );\n        return identity.translate(0, v * 16, clamp01(v * 2 - 1) * 8.5 + 95);\n      };\n      meshAdd(cylinder(5), identity.scale(5, 1.1, 5), material(0.5, 0.3, 0.3, 0.4));\n      meshAdd(cylinder(5), identity.scale(5.5, 0.9, 5.5), material(0.25, 0.25, 0.25, 0.4));\n\n      newLever(identity.translate(0, 1.5, -1).rotate(0, 180));\n    });\n\n    // SOUL 11 - soul in the last platform\n    newSoul(identity.translate(0, 3, 95), ...polygon_regular(9).map(({ x, z }) => [x * 9, z * 9, 4]));\n\n    // SOUL 12 - soul after the pendulums\n    newSoul(identity.translate(0, 19, 134), [0, 0, 3.5]);\n  });\n\n  // ------ End of game models ------\n\n  playerModel = newModel(() => {\n    // Player legs\n\n    playerLegsModels = [-1, 1].map((x) =>\n      newModel(() => {\n        meshAdd(cylinder(10, 1), identity.translate(x * 0.3, -0.8).scale(0.2, 0.7, 0.24), material(1, 0.3, 0.4));\n      }),\n    ) as [Model, Model];\n\n    // Player body\n\n    // horns\n    [0, 180].map((r) =>\n      meshAdd(\n        GHorn,\n        identity.rotate(0, r).translate(0.2, 1.32).rotate(0, 0, -30).scale(0.2, 0.6, 0.2),\n        material(1, 1, 0.8),\n      ),\n    );\n\n    // head\n    meshAdd(sphere(20), identity.translate(0, 1).scale(0.5, 0.5, 0.5), material(1, 0.3, 0.4));\n\n    const eye = polygons_transform(\n      csg_polygons(\n        csg_subtract(\n          cylinder(15, 1),\n          polygons_transform(cylinder(GQuad), identity.translate(0, 0, 1).scale(2, 2, 0.5)),\n        ),\n      ),\n      identity.rotate(-90, 0).scale(0.1, 0.05, 0.1),\n      material(0.3, 0.3, 0.3),\n    );\n\n    [-1, 1].map((i) => meshAdd(eye, identity.translate(i * 0.2, 1.2, 0.4).rotate(0, i * 20, i * 20)));\n\n    // mouth\n    meshAdd(cylinder(GQuad), identity.translate(0, 0.9, 0.45).scale(0.15, 0.02, 0.06), material(0.3, 0.3, 0.3));\n\n    // body\n    meshAdd(sphere(20), identity.scale(0.7, 0.8, 0.55), material(1, 0.3, 0.4));\n  });\n\n  leverModel = newModel(() => {\n    meshAdd(cylinder(6, 1), identity.scale(0.13, 1.4, 0.13), material(0.3, 0.3, 0.5, 0.1));\n    meshAdd(cylinder(8), identity.translate(0, 1).scale(0.21, 0.3, 0.21), material(1, 0.5, 0.2));\n    meshAdd(cylinder(3), identity.translate(0, -1).rotate(90, 90).scale(0.3, 0.4, 0.3), material(0.2, 0.2, 0.2, 0.1));\n  }, MODEL_KIND_MESH);\n\n  soulCollisionModel = newModel(() => {\n    meshAdd(cylinder(6), identity.scale(0.8, 1, 0.8), material(1, 0.3, 0.5));\n  }, MODEL_KIND_MESH);\n\n  soulModel = newModel(() => {\n    const GHOST_SLICES = 40;\n    const GHOST_STACKS = 30;\n\n    // body\n    meshAdd(\n      sphere(GHOST_SLICES, GHOST_STACKS, (a: number, b: number, polygon: Polygon) => {\n        const bm = b / GHOST_STACKS;\n        const theta = a * (Math.PI * (2 / GHOST_SLICES));\n        const phixz = (bm ** 0.6 * Math.PI) / 2;\n        const osc = (bm * bm * Math.sin(a * Math.PI * (14 / GHOST_SLICES))) / 4;\n        if (b === GHOST_STACKS - 1) {\n          polygon.$smooth = 0;\n          return { x: 0, y: -0.5, z: 0 };\n        }\n        return {\n          x: Math.cos(theta) * Math.sin(phixz),\n          y: Math.cos(bm * Math.PI) - bm - osc,\n          z: Math.sin(theta) * Math.sin(phixz) + Math.sin(osc * Math.PI * 2) / 4,\n        };\n      }),\n      identity.scale3d(0.7),\n      material(1, 1, 1),\n    );\n\n    // eyes\n    [-1, 1].map((x) => meshAdd(sphere(15), identity.translate(x * 0.16, 0.4, -0.36).scale3d(0.09)));\n  }, MODEL_KIND_MESH);\n\n  if (DEBUG) {\n    console.log(levers.length + \" levers\");\n  }\n};\n","import { integers_map, max, min, identity } from \"./math\";\nimport { polygon_transform } from \"./geometry/geometry\";\nimport { mat_perspective } from \"./camera\";\n\nconst LIGHT_ROT_X = 298;\nconst LIGHT_ROT_Y = 139;\n\nif (DEBUG) {\n  const lightMatrix = /* @__PURE__ */ identity.rotate(LIGHT_ROT_X, LIGHT_ROT_Y);\n  console.log(\"light direction: \", lightMatrix.m13, lightMatrix.m23, lightMatrix.m33);\n}\n\nexport const csm_buildMatrix = /* @__PURE__ */ (\n  camera_view: DOMMatrixReadOnly,\n  nearPlane: number,\n  farPlane: number,\n  zMultiplier: number,\n): Float32Array => {\n  const roundingRadius = (farPlane - nearPlane) * 1.1;\n\n  const projViewInverse = new DOMMatrix(mat_perspective(nearPlane, farPlane)).multiplySelf(camera_view).invertSelf();\n\n  let tx = 0;\n  let ty = 0;\n  let tz = 0;\n\n  const frustumCorners = integers_map(8, (i) => {\n    const v = projViewInverse.transformPoint({\n      x: 4 & i ? 1 : -1,\n      y: 2 & i ? 1 : -1,\n      z: 1 & i ? 1 : -1,\n    });\n    // Round to reduce shimmering\n    tx -= v.x = ((roundingRadius * v.x) | 0) / (roundingRadius * v.w);\n    ty -= v.y = ((roundingRadius * v.y) | 0) / (roundingRadius * v.w);\n    tz -= v.z = ((roundingRadius * v.z) | 0) / (roundingRadius * v.w);\n    return v;\n  });\n\n  const lightViewTranslated = identity.rotate(LIGHT_ROT_X, LIGHT_ROT_Y).translateSelf(tx / 8, ty / 8, tz / 8);\n\n  let left = Infinity;\n  let right = -Infinity;\n  let bottom = Infinity;\n  let top = -Infinity;\n  let near = Infinity;\n  let far = -Infinity;\n\n  // Compute the frustum bouding box\n  polygon_transform(frustumCorners, lightViewTranslated).map(({ x, y, z }) => {\n    left = min(left, x);\n    right = max(right, x);\n    bottom = min(bottom, y);\n    top = max(top, y);\n    near = min(near, z);\n    far = max(far, z);\n  });\n\n  near *= near < 0 ? zMultiplier : 1 / zMultiplier;\n  far *= far > 0 ? zMultiplier : 1 / zMultiplier;\n\n  // Build the ortographic matrix, multiply it with the light space view matrix.\n  return identity\n    .scale(2 / (right - left), 2 / (top - bottom), 2 / (near - far))\n    .translateSelf((right + left) / -2, (top + bottom) / -2, (near + far) / 2)\n    .multiplySelf(lightViewTranslated)\n    .toFloat32Array();\n};\n","export const gl = hC.getContext(\"webgl2\")!;\n\nfor (const s in gl) {\n  (gl as any)[s[0] + [...s].reduce((p, c, i) => (p * i + c.charCodeAt(0)) % 434, 0).toString(36)] = (gl as any)[s];\n}\n\nexport const loadShader = (source: string, type: number = gl.VERTEX_SHADER): WebGLShader => {\n  const shader = gl.createShader(type)!;\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (DEBUG && !gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    throw new Error(\"An error occurred compiling the shaders: \" + gl.getShaderInfoLog(shader));\n  }\n\n  return shader;\n};\n\nexport interface WebglProgramAbstraction {\n  (name: string): WebGLUniformLocation;\n  (): void;\n}\n\nexport const initShaderProgram = (vertexShader: WebGLShader, sfsSource: string): WebglProgramAbstraction => {\n  const uniforms: Record<string, WebGLUniformLocation> = {};\n  const program = gl.createProgram()!;\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, loadShader(sfsSource, gl.FRAGMENT_SHADER));\n  gl.linkProgram(program);\n\n  if (DEBUG && !gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    throw new Error(\"Unable to initialize the shader program: \" + gl.getProgramInfoLog(program));\n  }\n\n  return (name?: string): any =>\n    name ? uniforms[name] || (uniforms[name] = gl.getUniformLocation(program, name)!) : gl.useProgram(program);\n};\n","import { allModels } from \"./scene\";\nimport { identity, writeMatrixToArray } from \"../math\";\nimport { mainMenuVisible } from \"../page\";\nimport { absoluteTime, levers, souls } from \"./world-state\";\nimport { leverModel, playerLegsModels, playerModel, soulCollisionModel, soulModel } from \"./level\";\nimport { gl } from \"../gl\";\n\nconst worldMatricesBuffer = new Float32Array(41 * 16);\n\nexport const renderModels = (\n  worldMatrixLoc: WebGLUniformLocation,\n  renderPlayer: 0 | 1 | boolean,\n  isCollider: 0 | 1,\n) => {\n  if (mainMenuVisible) {\n    const matrix = identity.rotate(0, Math.sin(absoluteTime) * 40 - 70);\n    for (const { $modelId } of [playerModel, ...playerLegsModels]) {\n      writeMatrixToArray(worldMatricesBuffer, $modelId - 1, matrix);\n    }\n    gl.uniformMatrix4fv(worldMatrixLoc, false, worldMatricesBuffer);\n    gl.drawElements(\n      gl.TRIANGLES,\n      playerLegsModels[1]!.$vertexEnd! - playerModel.$vertexBegin!,\n      gl.UNSIGNED_SHORT,\n      playerModel.$vertexBegin! * 2,\n    );\n  } else {\n    for (const { $kind, $modelId, $matrix } of allModels) {\n      if ($kind) {\n        writeMatrixToArray(worldMatricesBuffer, $modelId - 1, $matrix);\n      }\n    }\n\n    gl.uniformMatrix4fv(worldMatrixLoc, false, worldMatricesBuffer);\n    gl.drawElements(\n      gl.TRIANGLES,\n      (renderPlayer ? playerLegsModels[1]!.$vertexEnd! : playerModel.$vertexBegin!) - 3,\n      gl.UNSIGNED_SHORT,\n      3 * 2,\n    );\n\n    for (let i = 0; i < levers.length; ++i) {\n      writeMatrixToArray(worldMatricesBuffer, i, levers[i]!.$matrix!);\n      worldMatricesBuffer[i * 16 + 15] = 1 - levers[i]!.$lerpValue;\n    }\n\n    gl.uniformMatrix4fv(worldMatrixLoc, false, worldMatricesBuffer);\n    gl.drawElementsInstanced(\n      gl.TRIANGLES,\n      leverModel.$vertexEnd! - leverModel.$vertexBegin!,\n      gl.UNSIGNED_SHORT,\n      leverModel.$vertexBegin! * 2,\n      levers.length,\n    );\n\n    for (let i = 0; i < 13; ++i) {\n      writeMatrixToArray(worldMatricesBuffer, i, souls[i]!.$matrix!);\n    }\n\n    const soulModelToRender = isCollider ? soulCollisionModel : soulModel;\n\n    gl.uniformMatrix4fv(worldMatrixLoc, false, worldMatricesBuffer);\n    gl.drawElementsInstanced(\n      gl.TRIANGLES,\n      soulModelToRender.$vertexEnd! - soulModelToRender.$vertexBegin!,\n      gl.UNSIGNED_SHORT,\n      soulModelToRender.$vertexBegin! * 2,\n      13,\n    );\n  }\n};\n","// shaders\nimport csm_vsSource from \"./shaders/csm-vertex.vert\";\nimport main_vsSource, {\n  uniformName_projectionMatrix,\n  uniformName_viewMatrix,\n  uniformName_worldMatrices,\n} from \"./shaders/main-vertex.vert\";\nimport main_fsSource, {\n  uniformName_viewPos,\n  uniformName_csm_matrix0,\n  uniformName_csm_matrix1,\n  uniformName_csm_texture0,\n  uniformName_csm_texture1,\n  uniformName_groundTexture,\n  constDef_CSM_TEXTURE_SIZE as CSM_TEXTURE_SIZE,\n  constDef_CSM_PLANE_DISTANCE as CSM_PLANE_DISTANCE,\n} from \"./shaders/main-fragment.frag\";\nimport collider_fsSource from \"./shaders/collider-fragment.frag\";\nimport void_fsSource from \"./shaders/void-fragment.frag\";\nimport sky_vsSource from \"./shaders/sky-vertex.vert\";\nimport sky_fsSource, { uniformName_iResolution } from \"./shaders/sky-fragment.frag\";\n\nimport {\n  abs,\n  angle_wrap_degrees,\n  clamp01,\n  DEG_TO_RAD,\n  integers_map,\n  interpolate_with_hysteresis,\n  lerp,\n  max,\n  min,\n  identity,\n  mat_perspectiveXY,\n  angle_lerp_degrees,\n} from \"./math\";\nimport { mat_perspective, zFar, zNear, camera_position, camera_rotation } from \"./camera\";\nimport { csm_buildMatrix } from \"./csm\";\nimport { allModels, MODEL_KIND_GAME } from \"./game/scene\";\nimport { updateModels } from \"./game/objects\";\nimport { gl, initShaderProgram, loadShader } from \"./gl\";\nimport {\n  absoluteTime,\n  gameTime,\n  gameTimeDelta,\n  gameTimeUpdate,\n  lerpDamp,\n  levers,\n  loadGame,\n  player_last_pulled_lever,\n  worldStateUpdate,\n} from \"./game/world-state\";\nimport {\n  mainMenuVisible,\n  initPage,\n  player_first_person,\n  keyboard_downKeys,\n  KEY_BACK,\n  KEY_FRONT,\n  KEY_LEFT,\n  KEY_RIGHT,\n  touch_movementX,\n  touch_movementY,\n  KEY_INTERACT,\n} from \"./page\";\nimport { initTriangleBuffers } from \"./game/triangle-buffers\";\nimport { renderModels } from \"./game/render-models\";\nimport { player_position_final } from \"./game/player-position\";\nimport {\n  GAMEPAD_BUTTON_LEFT,\n  GAMEPAD_BUTTON_RIGHT,\n  GAMEPAD_BUTTON_UP,\n  GAMEPAD_BUTTON_DOWN,\n  GAMEPAD_BUTTON_A,\n  GAMEPAD_BUTTON_X,\n  GAMEPAD_BUTTON_B,\n  GAMEPAD_BUTTON_Y,\n} from \"./utils/keycodes\";\nimport { playerModel, playerLegsModels } from \"./game/level\";\n\nconst CAMERA_PLAYER_Y_DIST = 13;\nconst CAMERA_PLAYER_Z_DIST = -18;\n\nconst PLAYER_LEGS_VELOCITY = 7 * 1.3;\n\nconst COLLISION_TEXTURE_SIZE = 128;\n\n// let debug2dctx: CanvasRenderingContext2D | null | undefined;\n\nexport const startMainLoop = (groundTextureImage: HTMLImageElement) => {\n  let oldModelId: number | undefined;\n  let currentModelIdTMinus1 = 0;\n  let currentModelId = 0;\n\n  let player_has_ground: 0 | 1 | undefined;\n  let player_respawned: 0 | 1 = 1;\n  let player_look_angle_target = 0;\n  let player_look_angle = 0;\n  let player_legs_speed = 0;\n  let player_gravity: number;\n  let player_speed: number;\n  let player_collision_velocity_x: number;\n  let player_collision_velocity_z: number;\n  let player_model_y: number;\n  const player_position_global = { x: 0, y: 0, z: 0 };\n\n  // let _gamepadStartPressed = false;\n  let _gamepadInteractPressed = false;\n\n  let camera_player_dir_x: number;\n  let camera_player_dir_y: number;\n  let camera_player_dir_z: number;\n\n  const player_collision_modelIdCounter = new Int32Array(256);\n  const collision_buffer = new Uint8Array(COLLISION_TEXTURE_SIZE * COLLISION_TEXTURE_SIZE * 4);\n\n  const mainVertexShader = loadShader(main_vsSource);\n  const csmShader = initShaderProgram(loadShader(csm_vsSource), void_fsSource);\n  const skyShader = initShaderProgram(loadShader(sky_vsSource), sky_fsSource);\n  const collisionShader = initShaderProgram(mainVertexShader, collider_fsSource);\n  const mainShader = initShaderProgram(mainVertexShader, main_fsSource);\n\n  skyShader();\n  gl.uniform1i(skyShader(uniformName_groundTexture), 3); // TEXTURE3\n\n  collisionShader();\n  gl.uniformMatrix4fv(collisionShader(uniformName_projectionMatrix), false, mat_perspectiveXY(1.4, 0.59, 0.0001, 1));\n\n  mainShader();\n  gl.uniform1i(mainShader(uniformName_groundTexture), 3); // TEXTURE3\n\n  const collision_frameBuffer = gl.createFramebuffer()!;\n  const collision_renderBuffer = gl.createRenderbuffer();\n  const collision_texture = gl.createTexture()!;\n\n  const csm_render = integers_map(2, (csmSplit: number) => {\n    let lightSpaceMatrix: Float32Array;\n    const texture = gl.createTexture()!;\n    const frameBuffer = gl.createFramebuffer();\n    const lightSpaceMatrixLoc = mainShader(csmSplit ? uniformName_csm_matrix1 : uniformName_csm_matrix0);\n\n    mainShader();\n    gl.uniform1i(mainShader(csmSplit ? uniformName_csm_texture1 : uniformName_csm_texture0), csmSplit);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n\n    // Disable rendering to the color buffer, we just need the depth buffer\n    gl.drawBuffers([gl.NONE]);\n    gl.readBuffer(gl.NONE);\n\n    gl.activeTexture(gl.TEXTURE0 + csmSplit);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, texture, 0);\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.DEPTH_COMPONENT24,\n      CSM_TEXTURE_SIZE,\n      CSM_TEXTURE_SIZE,\n      0,\n      gl.DEPTH_COMPONENT,\n      gl.UNSIGNED_INT,\n      null,\n    );\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, gl.LEQUAL); // Can be LESS or LEQUAL\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\n    return (matrix?: Float32Array) => {\n      if (matrix) {\n        lightSpaceMatrix = matrix;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n        gl.invalidateFramebuffer(gl.FRAMEBUFFER, [gl.DEPTH_ATTACHMENT]);\n        gl.clear(gl.DEPTH_BUFFER_BIT);\n        gl.uniformMatrix4fv(csmShader(uniformName_viewMatrix), false, lightSpaceMatrix);\n        renderModels(csmShader(uniformName_worldMatrices), !player_first_person, 0);\n      } else {\n        gl.uniformMatrix4fv(lightSpaceMatrixLoc, false, lightSpaceMatrix);\n      }\n    };\n  });\n\n  initTriangleBuffers();\n\n  gl.enable(gl.DEPTH_TEST); // Enable depth testing\n  gl.enable(gl.CULL_FACE); // Don't render triangle backs\n\n  gl.clearDepth(1); // Clear everything. Default value is 1\n  gl.cullFace(gl.BACK); // Default value is already BACK\n  gl.depthFunc(gl.LEQUAL); // LEQUAL to make sky works\n  gl.clearColor(0, 0, 0, 1);\n\n  // Collision framebuffer\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n  gl.bindRenderbuffer(gl.RENDERBUFFER, collision_renderBuffer);\n\n  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE);\n  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, collision_renderBuffer);\n\n  gl.activeTexture(gl.TEXTURE3);\n  gl.bindTexture(gl.TEXTURE_2D, collision_texture);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, collision_texture, 0);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    gl.RGB,\n    COLLISION_TEXTURE_SIZE,\n    COLLISION_TEXTURE_SIZE,\n    0,\n    gl.RGB,\n    gl.UNSIGNED_BYTE,\n    null,\n  );\n\n  // Ground texture\n\n  gl.bindTexture(gl.TEXTURE_2D, gl.createTexture());\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1024, 1024, 0, gl.RGBA, gl.UNSIGNED_BYTE, groundTextureImage);\n  gl.generateMipmap(gl.TEXTURE_2D);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\n  const player_respawn = () => {\n    // TODO: player_respawn player position calculation must be done per frame and after models are updated!\n    // if we don't do this we might risk to be stuck on moving objects\n    const { $parent, $locMatrix } = levers[player_last_pulled_lever]!;\n\n    const { x, y, z } = $locMatrix!.transformPoint({ x: 0, y: 8, z: -3 });\n\n    player_position_final.x = player_position_global.x = x;\n    player_position_final.y = player_position_global.y = player_model_y = y;\n    player_position_final.z = player_position_global.z = z;\n\n    player_speed = 0;\n    player_gravity = 0;\n    player_collision_velocity_x = 0;\n    player_collision_velocity_z = 0;\n    player_has_ground = 0;\n\n    player_respawned = 1;\n    currentModelIdTMinus1 = currentModelId = $parent?.$modelId || 1;\n  };\n\n  const updatePlayer = () => {\n    let player_collision_x = 0;\n    let player_collision_z = 0;\n\n    const doVerticalCollisions = () => {\n      let maxModelIdCount = 0;\n      let nextModelId = 0;\n      player_collision_modelIdCounter.fill(0);\n\n      let lines = 0;\n      let grav = 0;\n      let hasGround: 0 | 1 = 0;\n      for (let y = 0; y < 31; ++y) {\n        let up = 0;\n        const yindex = y * (COLLISION_TEXTURE_SIZE * 4);\n        for (let x = 0; x < COLLISION_TEXTURE_SIZE - 0; x++) {\n          let i = yindex + x * 4;\n          const a = (collision_buffer[i]! + collision_buffer[i + 1]!) / 255;\n          i = collision_buffer[i + 2]!;\n          if (x > 14 && x < COLLISION_TEXTURE_SIZE - 14) {\n            up += a;\n          }\n          if (i && a) {\n            const count = player_collision_modelIdCounter[i]! + 1;\n            player_collision_modelIdCounter[i] = count;\n            if (count >= maxModelIdCount) {\n              maxModelIdCount = count;\n              nextModelId = i;\n            }\n          }\n        }\n        if (up < 3 && y > 5) {\n          grav += y / 32;\n        }\n        if (up > 3) {\n          if (y > 7) {\n            lines += y / 15;\n          }\n          hasGround = 1;\n        }\n      }\n\n      if (nextModelId) {\n        hasGround = 1;\n      }\n\n      if (player_respawned) {\n        // keep the previous modelId until the player touch ground\n        if (nextModelId) {\n          player_respawned = 0;\n          currentModelId = nextModelId;\n        }\n      } else {\n        currentModelId = nextModelId || currentModelIdTMinus1;\n      }\n      currentModelIdTMinus1 = nextModelId;\n\n      player_has_ground = hasGround;\n      player_gravity = lerpDamp(player_gravity, hasGround ? 6.5 : 8, 4);\n\n      // push up and gravity\n      player_position_global.y +=\n        lines / 41 - (hasGround ? 1 : player_gravity) * (grav / 41) * player_gravity * gameTimeDelta;\n    };\n\n    const doHorizontalCollisions = () => {\n      for (let y = 32; y < COLLISION_TEXTURE_SIZE; y += 2) {\n        let front = 0;\n        let back = 0;\n        let left = 0;\n        let right = 0;\n        const yindex = y * (COLLISION_TEXTURE_SIZE * 4);\n        for (let x = (y >> 1) & 1; x < COLLISION_TEXTURE_SIZE; x += 2) {\n          const i1 = yindex + x * 4;\n          const i2 = yindex + (COLLISION_TEXTURE_SIZE - 1 - x) * 4;\n          const dist1 = collision_buffer[i1]! / 255;\n          const dist2 = collision_buffer[i2 + 1]! / 255;\n\n          const t = 1 - abs(2 * (x / (COLLISION_TEXTURE_SIZE - 1)) - 1);\n\n          if (x > 10 && x < COLLISION_TEXTURE_SIZE - 10) {\n            const dist1Opposite = collision_buffer[i2]! / 255;\n            front = max(front, max(dist1 * t, dist1 * dist1Opposite * 2));\n            const dist2Opposite = collision_buffer[i1 + 1]! / 255;\n            back = max(back, max(dist2 * t, dist2 * dist2Opposite));\n          }\n\n          if (x < COLLISION_TEXTURE_SIZE / 2 - 10 || x > COLLISION_TEXTURE_SIZE / 2 + 10) {\n            const xdist = ((1 - t) * max(dist1, dist2)) / 3;\n            if (xdist > 0.001) {\n              if (x < COLLISION_TEXTURE_SIZE / 2 && left < xdist) {\n                left = xdist;\n              } else if (x > COLLISION_TEXTURE_SIZE / 2 && right < xdist) {\n                right = xdist;\n              }\n            }\n          }\n        }\n\n        const dx = right - left;\n        const dz = back - front;\n\n        if (abs(dx) > abs(player_collision_x)) {\n          player_collision_x = dx;\n        }\n        if (abs(dz) > abs(player_collision_z)) {\n          player_collision_z = dz;\n        }\n      }\n    };\n\n    NO_INLINE(doVerticalCollisions)();\n    NO_INLINE(doHorizontalCollisions)();\n\n    let strafe = (keyboard_downKeys[KEY_LEFT] ? 1 : 0) + (keyboard_downKeys[KEY_RIGHT] ? -1 : 0) + touch_movementX;\n    let forward = (keyboard_downKeys[KEY_FRONT] ? 1 : 0) + (keyboard_downKeys[KEY_BACK] ? -1 : 0) + touch_movementY;\n\n    const gamepad = navigator.getGamepads()[0];\n    if (gamepad) {\n      const { buttons, axes } = gamepad;\n      const getGamepadButtonState = (index: number) => buttons[index]?.pressed || (buttons[index]?.value as any) > 0;\n\n      const interactButtonPressed =\n        getGamepadButtonState(GAMEPAD_BUTTON_A) ||\n        getGamepadButtonState(GAMEPAD_BUTTON_X) ||\n        getGamepadButtonState(GAMEPAD_BUTTON_Y) ||\n        getGamepadButtonState(GAMEPAD_BUTTON_B);\n      if (interactButtonPressed !== _gamepadInteractPressed) {\n        _gamepadInteractPressed = interactButtonPressed;\n        if (_gamepadInteractPressed) {\n          keyboard_downKeys[KEY_INTERACT] = 1;\n        }\n      }\n\n      strafe +=\n        (abs(-axes[0]!) > 0.2 ? -axes[0]! : 0) +\n        (getGamepadButtonState(GAMEPAD_BUTTON_LEFT) ? 1 : 0) +\n        (getGamepadButtonState(GAMEPAD_BUTTON_RIGHT) ? -1 : 0);\n      forward +=\n        (abs(-axes[1]!) > 0.2 ? -axes[1]! : 0) +\n        (getGamepadButtonState(GAMEPAD_BUTTON_UP) ? 1 : 0) +\n        (getGamepadButtonState(GAMEPAD_BUTTON_DOWN) ? -1 : 0);\n\n      // const startPressed = getGamepadButtonState(GAMEPAD_BUTTON_START);\n      // if (_gamepadStartPressed !== startPressed && startPressed && game_play_clicked_once) {\n      //   setMainMenuVisible(!mainMenuVisible);\n      // }\n\n      // _gamepadStartPressed = startPressed;\n\n      if (player_first_person) {\n        if (abs(axes[2]!) > 0.3) {\n          camera_rotation.y += axes[2]! * 80 * gameTimeDelta;\n        }\n        if (abs(axes[3]!) > 0.3) {\n          camera_rotation.x += axes[3]! * 80 * gameTimeDelta;\n        }\n      }\n    }\n\n    if (abs(forward) < 0.05) {\n      forward = 0;\n    }\n    if (abs(strafe) < 0.05) {\n      strafe = 0;\n    }\n\n    const angle = Math.atan2(forward, strafe);\n    const amount = clamp01(Math.hypot(forward, strafe));\n\n    strafe = amount * Math.cos(angle);\n    forward = amount * Math.sin(angle);\n\n    const playerSpeedCollision = clamp01(1 - max(abs(player_collision_x), abs(player_collision_z)) * 5);\n\n    if (!currentModelId) {\n      player_collision_x += player_collision_velocity_x * playerSpeedCollision * gameTimeDelta;\n      player_collision_z += player_collision_velocity_z * playerSpeedCollision * gameTimeDelta;\n    }\n    player_collision_velocity_x = lerpDamp(player_collision_velocity_x, 0, player_has_ground ? 8 : 4);\n    player_collision_velocity_z = lerpDamp(player_collision_velocity_z, 0, player_has_ground ? 8 : 4);\n\n    player_speed = lerpDamp(\n      player_speed,\n      player_has_ground ? (strafe || forward ? (player_has_ground ? 7 : 4) : 0) * playerSpeedCollision : 0,\n      player_has_ground ? (playerSpeedCollision > 0.1 ? 10 : strafe || forward ? 5 : 7) : 1,\n    );\n\n    const movementRadians = player_first_person ? camera_rotation.y * DEG_TO_RAD : Math.PI;\n    const s = Math.sin(movementRadians) * player_speed * gameTimeDelta;\n    const c = Math.cos(movementRadians) * player_speed * gameTimeDelta;\n    player_collision_x -= strafe * c - forward * s;\n    player_collision_z -= strafe * s + forward * c;\n\n    const referenceMatrix =\n      (allModels[currentModelId]!.$kind === MODEL_KIND_GAME && allModels[currentModelId]!.$matrix) || identity;\n    const inverseReferenceRotationMatrix = referenceMatrix.inverse();\n    inverseReferenceRotationMatrix.m41 = 0;\n    inverseReferenceRotationMatrix.m42 = 0;\n    inverseReferenceRotationMatrix.m43 = 0;\n    ({ x: player_collision_x, z: player_collision_z } = inverseReferenceRotationMatrix.transformPoint({\n      x: player_collision_x,\n      z: player_collision_z,\n      w: 0,\n    }));\n\n    player_position_global.x += player_collision_x;\n    player_position_global.z += player_collision_z;\n\n    if (currentModelId !== oldModelId) {\n      if (DEBUG) {\n        console.log(\"modelId: \" + oldModelId + \" -> \" + currentModelId);\n      }\n\n      oldModelId = currentModelId;\n\n      const { x, y, z } = referenceMatrix.inverse().transformPoint(player_position_final);\n      player_position_global.x = x;\n      player_position_global.y = y;\n      player_position_global.z = z;\n    }\n\n    const oldx = player_position_final.x;\n    const oldz = player_position_final.z;\n\n    const { x, y, z } = referenceMatrix.transformPoint(player_position_global);\n    player_position_final.x = x;\n    player_position_final.y = y;\n    player_position_final.z = z;\n\n    const ydiff = abs(player_model_y - y);\n    player_model_y = lerpDamp(player_model_y, y + 0.1, ydiff * 50 + 5);\n\n    if (currentModelId) {\n      player_collision_velocity_x = (player_position_final.x - oldx) / gameTimeDelta;\n      player_collision_velocity_z = (player_position_final.z - oldz) / gameTimeDelta;\n    }\n\n    if (strafe || forward) {\n      player_look_angle_target = 90 - angle / DEG_TO_RAD;\n    }\n    player_look_angle = angle_lerp_degrees(player_look_angle, player_look_angle_target, gameTimeDelta * 8);\n    player_legs_speed = lerp(player_legs_speed, amount, gameTimeDelta * 10);\n  };\n\n  const mainLoop = (globalTime: number) => {\n    let camera_view: DOMMatrixReadOnly = identity;\n\n    requestAnimationFrame(mainLoop);\n\n    gameTimeUpdate(globalTime);\n\n    // *** COLLISIONS ***\n\n    if (gameTimeDelta > 0) {\n      // *** COLLISION from the previos frame ***\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n      gl.readPixels(0, 0, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE, gl.RGBA, gl.UNSIGNED_BYTE, collision_buffer);\n      gl.invalidateFramebuffer(gl.FRAMEBUFFER, [gl.COLOR_ATTACHMENT0]);\n\n      NO_INLINE(updatePlayer)();\n\n      updateModels();\n\n      // if (DEBUG) {\n      //   const debugCanvas = document.getElementById(\"debug-canvas\") as HTMLCanvasElement;\n\n      //   const buf = new Uint8ClampedArray(COLLISION_TEXTURE_SIZE * COLLISION_TEXTURE_SIZE * 4);\n\n      //   if (debugCanvas) {\n      //     for (let y = 0; y < COLLISION_TEXTURE_SIZE; ++y) {\n      //       for (let x = 0; x < COLLISION_TEXTURE_SIZE; ++x) {\n      //         const i = ((COLLISION_TEXTURE_SIZE - y) * COLLISION_TEXTURE_SIZE + x) * 4;\n      //         const r = collision_buffer[i]!;\n      //         const g = collision_buffer[i + 1]!;\n      //         const b = collision_buffer[i + 2]!;\n\n      //         buf[(y * COLLISION_TEXTURE_SIZE + x) * 4] = r;\n      //         buf[(y * COLLISION_TEXTURE_SIZE + x) * 4 + 1] = g;\n      //         buf[(y * COLLISION_TEXTURE_SIZE + x) * 4 + 2] = b ? 200 : 0;\n      //         buf[(y * COLLISION_TEXTURE_SIZE + x) * 4 + 3] = 255;\n      //       }\n      //     }\n\n      //     const imgdata = new ImageData(buf, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE);\n\n      //     if (!debug2dctx) {\n      //       debug2dctx = debugCanvas.getContext(\"2d\")!;\n      //     }\n      //     debug2dctx.putImageData(imgdata, 0, 0, 0, 0, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE);\n      //   }\n      // }\n    }\n\n    if (gameTimeDelta > 0) {\n      if (!DEBUG_CAMERA) {\n        camera_player_dir_x = interpolate_with_hysteresis(\n          camera_player_dir_x,\n          player_position_final.x,\n          0.5,\n          gameTimeDelta,\n        );\n        camera_player_dir_y = interpolate_with_hysteresis(\n          camera_player_dir_y,\n          player_position_final.y,\n          2,\n          gameTimeDelta,\n        );\n        camera_player_dir_z = interpolate_with_hysteresis(\n          camera_player_dir_z,\n          player_position_final.z,\n          0.5,\n          gameTimeDelta,\n        );\n\n        if (player_first_person) {\n          const interpolationSpeed = player_respawned * 200;\n          camera_position.x = lerpDamp(camera_position.x, player_position_final.x, 18 + interpolationSpeed);\n          camera_position.y = lerpDamp(camera_position.y, player_position_final.y + 1.5, 15 + interpolationSpeed);\n          camera_position.z = lerpDamp(camera_position.z, player_position_final.z, 18 + interpolationSpeed);\n          camera_rotation.x = max(min(camera_rotation.x, 87), -87);\n        } else {\n          camera_position.x = interpolate_with_hysteresis(camera_position.x, camera_player_dir_x, 1, gameTimeDelta * 2);\n          camera_position.y = interpolate_with_hysteresis(\n            camera_position.y,\n            camera_player_dir_y + CAMERA_PLAYER_Y_DIST + player_respawned * 15,\n            4,\n            gameTimeDelta * 2,\n          );\n          camera_position.z = interpolate_with_hysteresis(\n            camera_position.z,\n            camera_player_dir_z + CAMERA_PLAYER_Z_DIST,\n            1,\n            gameTimeDelta * 2,\n          );\n\n          const viewDirDiffz = camera_position.z - camera_player_dir_z;\n          if (abs(viewDirDiffz) > 1) {\n            const viewDirDiffx = camera_position.x - camera_player_dir_x;\n            const viewDirDiffy = camera_position.y - camera_player_dir_y;\n            camera_rotation.y = 270 + Math.atan2(viewDirDiffz, viewDirDiffx) / DEG_TO_RAD;\n            camera_rotation.x = 90 - Math.atan2(Math.hypot(viewDirDiffz, viewDirDiffx), viewDirDiffy) / DEG_TO_RAD;\n          }\n        }\n      }\n      camera_rotation.y = angle_wrap_degrees(camera_rotation.y);\n\n      if (gameTimeDelta > 0) {\n        worldStateUpdate();\n        keyboard_downKeys[KEY_INTERACT] = 0;\n\n        if (player_position_final.y < (player_position_final.x < -25 || player_position_final.z < 109 ? -25 : -9)) {\n          // Player fell in lava\n          player_respawn();\n        }\n      }\n    }\n\n    camera_view = mainMenuVisible\n      ? identity\n          .rotate(-20, -90)\n          .invertSelf()\n          .translateSelf(4.5, -2, -3.2 + clamp01(hC.clientWidth / 1000))\n      : identity\n          .rotate(-camera_rotation.x, -camera_rotation.y, -camera_rotation.z)\n          .invertSelf()\n          .translateSelf(-camera_position.x, -camera_position.y, -camera_position.z);\n\n    if (gameTimeDelta > 0) {\n      // *** COLLISION RENDERER ***\n\n      collisionShader();\n\n      // first collision render\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n      gl.viewport(0, 0, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE);\n      gl.colorMask(true, false, true, false);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      gl.uniformMatrix4fv(\n        collisionShader(uniformName_viewMatrix),\n        false,\n        identity\n          .rotate(0, 180)\n          .invertSelf()\n          .translateSelf(-player_position_final.x, -player_position_final.y, 0.3 - player_position_final.z)\n          .toFloat32Array(),\n      );\n      renderModels(collisionShader(uniformName_worldMatrices), 0, 1);\n\n      // second collision render\n\n      gl.colorMask(false, true, false, false);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      gl.colorMask(false, true, true, false);\n      gl.uniformMatrix4fv(\n        collisionShader(uniformName_viewMatrix),\n        false,\n        identity\n          .translate(-player_position_final.x, -player_position_final.y, -player_position_final.z - 0.3)\n          .toFloat32Array(),\n      );\n      renderModels(collisionShader(uniformName_worldMatrices), 0, 1);\n      gl.colorMask(true, true, true, true);\n\n      // Special handling for the second boat (lever 7) - the boat must be on the side of the map the player is\n      if (currentModelId === 1) {\n        levers[9]!.$value = player_position_final.x < -15 && player_position_final.z < 0 ? 1 : 0;\n      }\n    }\n\n    // *** CASCADED SHADOWMAPS ***\n\n    csmShader();\n\n    gl.viewport(0, 0, CSM_TEXTURE_SIZE, CSM_TEXTURE_SIZE);\n\n    csm_render[0]!(csm_buildMatrix(camera_view, zNear, CSM_PLANE_DISTANCE, 10));\n    csm_render[1]!(csm_buildMatrix(camera_view, CSM_PLANE_DISTANCE, zFar, 11));\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    // *** MAIN RENDER ***\n\n    mainShader();\n\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    gl.uniformMatrix4fv(mainShader(uniformName_projectionMatrix), false, mat_perspective(zNear, zFar));\n    gl.uniformMatrix4fv(mainShader(uniformName_viewMatrix), false, camera_view.toFloat32Array());\n    gl.uniform3f(mainShader(uniformName_viewPos), camera_position.x, camera_position.y, camera_position.z);\n\n    csm_render[0]!();\n    csm_render[1]!();\n\n    renderModels(mainShader(uniformName_worldMatrices), !player_first_person, 0);\n\n    // *** SKY RENDER ***\n\n    skyShader();\n\n    gl.uniform3f(skyShader(uniformName_iResolution), gl.drawingBufferWidth, gl.drawingBufferHeight, absoluteTime);\n    if (mainMenuVisible) {\n      gl.uniform3f(skyShader(uniformName_viewPos), 0, 0, 0);\n    } else {\n      gl.uniform3f(skyShader(uniformName_viewPos), camera_position.x, camera_position.y, camera_position.z);\n    }\n    gl.uniformMatrix4fv(skyShader(uniformName_viewMatrix), false, camera_view.inverse().toFloat32Array());\n\n    gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 0);\n  };\n\n  playerModel._update = () =>\n    identity\n      .translate(player_position_final.x, player_model_y, player_position_final.z)\n      .rotateSelf(0, player_look_angle);\n\n  playerLegsModels.map((model, i) => {\n    model._update = () =>\n      playerModel.$matrix\n        .translate(\n          0,\n          player_legs_speed * clamp01(Math.sin(gameTime * PLAYER_LEGS_VELOCITY + Math.PI * i - Math.PI / 2) * 0.45),\n        )\n        .rotateSelf(\n          player_legs_speed * Math.sin(gameTime * PLAYER_LEGS_VELOCITY + Math.PI * i) * (0.25 / DEG_TO_RAD),\n          0,\n        );\n  });\n\n  loadGame();\n\n  updateModels();\n\n  NO_INLINE(initPage)();\n\n  player_respawn();\n\n  camera_position.x = camera_player_dir_x = player_position_final.x;\n  camera_position.y = (camera_player_dir_y = player_position_final.y) + CAMERA_PLAYER_Y_DIST;\n  camera_position.z = (camera_player_dir_z = player_position_final.z) + CAMERA_PLAYER_Z_DIST;\n\n  requestAnimationFrame(mainLoop);\n};\n","export const GAMEPAD_BUTTON_UP = 12;\n\nexport const GAMEPAD_BUTTON_DOWN = 13;\n\nexport const GAMEPAD_BUTTON_LEFT = 14;\n\nexport const GAMEPAD_BUTTON_RIGHT = 15;\n\nexport const GAMEPAD_BUTTON_START = 9;\n\nexport const GAMEPAD_BUTTON_A = 1;\n\nexport const GAMEPAD_BUTTON_B = 0;\n\nexport const GAMEPAD_BUTTON_X = 3;\n\nexport const GAMEPAD_BUTTON_Y = 2;\n\nexport const GAMEPAD_BUTTON_LB = 4;\n\nexport const GAMEPAD_BUTTON_RB = 5;\n\nexport const KEY_CODE_EMPTY = \"\";\n\nexport const KEY_CODE_AGAIN = \"Again\";\n\nexport const KEY_CODE_ALT_LEFT = \"AltLeft\";\n\nexport const KEY_CODE_ALT_RIGHT = \"AltRight\";\n\nexport const KEY_CODE_ARROW_DOWN = \"ArrowDown\";\n\nexport const KEY_CODE_ARROW_LEFT = \"ArrowLeft\";\n\nexport const KEY_CODE_ARROW_RIGHT = \"ArrowRight\";\n\nexport const KEY_CODE_ARROW_UP = \"ArrowUp\";\n\nexport const KEY_CODE_AUDIO_VOLUME_DOWN = \"AudioVolumeDown\";\n\nexport const KEY_CODE_AUDIO_VOLUME_MUTE = \"AudioVolumeMute\";\n\nexport const KEY_CODE_AUDIO_VOLUME_UP = \"AudioVolumeUp\";\n\nexport const KEY_CODE_BACKQUOTE = \"Backquote\";\n\nexport const KEY_CODE_BACKSLASH = \"Backslash\";\n\nexport const KEY_CODE_BACKSPACE = \"Backspace\";\n\nexport const KEY_CODE_BRACKET_LEFT = \"BracketLeft\";\n\nexport const KEY_CODE_BRACKET_RIGHT = \"BracketRight\";\n\nexport const KEY_CODE_BROWSER_BACK = \"BrowserBack\";\n\nexport const KEY_CODE_BROWSER_FAVORITES = \"BrowserFavorites\";\n\nexport const KEY_CODE_BROWSER_FORWARD = \"BrowserForward\";\n\nexport const KEY_CODE_BROWSER_HOME = \"BrowserHome\";\n\nexport const KEY_CODE_BROWSER_REFRESH = \"BrowserRefresh\";\n\nexport const KEY_CODE_BROWSER_SEARCH = \"BrowserSearch\";\n\nexport const KEY_CODE_BROWSER_STOP = \"BrowserStop\";\n\nexport const KEY_CODE_CANCEL = \"Cancel\";\n\nexport const KEY_CODE_CAPS_LOCK = \"CapsLock\";\n\nexport const KEY_CODE_COMMA = \"Comma\";\n\nexport const KEY_CODE_CONTEXT_MENU = \"ContextMenu\";\n\nexport const KEY_CODE_CONTROL_LEFT = \"ControlLeft\";\n\nexport const KEY_CODE_CONTROL_RIGHT = \"ControlRight\";\n\nexport const KEY_CODE_CONVERT = \"Convert\";\n\nexport const KEY_CODE_COPY = \"Copy\";\n\nexport const KEY_CODE_CUT = \"Cut\";\n\nexport const KEY_CODE_DELETE = \"Delete\";\n\nexport const KEY_CODE_DIGIT_0 = \"Digit0\";\n\nexport const KEY_CODE_DIGIT_1 = \"Digit1\";\n\nexport const KEY_CODE_DIGIT_2 = \"Digit2\";\n\nexport const KEY_CODE_DIGIT_3 = \"Digit3\";\n\nexport const KEY_CODE_DIGIT_4 = \"Digit4\";\n\nexport const KEY_CODE_DIGIT_5 = \"Digit5\";\n\nexport const KEY_CODE_DIGIT_6 = \"Digit6\";\n\nexport const KEY_CODE_DIGIT_7 = \"Digit7\";\n\nexport const KEY_CODE_DIGIT_8 = \"Digit8\";\n\nexport const KEY_CODE_DIGIT_9 = \"Digit9\";\n\nexport const KEY_CODE_EJECT = \"Eject\";\n\nexport const KEY_CODE_END = \"End\";\n\nexport const KEY_CODE_ENTER = \"Enter\";\n\nexport const KEY_CODE_EQUAL = \"Equal\";\n\nexport const KEY_CODE_ESCAPE = \"Escape\";\n\nexport const KEY_CODE_F1 = \"F1\";\n\nexport const KEY_CODE_F2 = \"F2\";\n\nexport const KEY_CODE_F3 = \"F3\";\n\nexport const KEY_CODE_F4 = \"F4\";\n\nexport const KEY_CODE_F5 = \"F5\";\n\nexport const KEY_CODE_F6 = \"F6\";\n\nexport const KEY_CODE_F7 = \"F7\";\n\nexport const KEY_CODE_F8 = \"F8\";\n\nexport const KEY_CODE_F9 = \"F9\";\n\nexport const KEY_CODE_F10 = \"F10\";\n\nexport const KEY_CODE_F11 = \"F11\";\n\nexport const KEY_CODE_F12 = \"F12\";\n\nexport const KEY_CODE_F13 = \"F13\";\n\nexport const KEY_CODE_F14 = \"F14\";\n\nexport const KEY_CODE_F15 = \"F15\";\n\nexport const KEY_CODE_F16 = \"F16\";\n\nexport const KEY_CODE_F17 = \"F17\";\n\nexport const KEY_CODE_F18 = \"F18\";\n\nexport const KEY_CODE_F19 = \"F19\";\n\nexport const KEY_CODE_F20 = \"F20\";\n\nexport const KEY_CODE_F21 = \"F21\";\n\nexport const KEY_CODE_F22 = \"F22\";\n\nexport const KEY_CODE_F23 = \"F23\";\n\nexport const KEY_CODE_F24 = \"F24\";\n\nexport const KEY_CODE_FIND = \"Find\";\n\nexport const KEY_CODE_FN = \"Fn\";\n\nexport const KEY_CODE_HANGUL_MODE = \"HangulMode\";\n\nexport const KEY_CODE_HANJA = \"Hanja\";\n\nexport const KEY_CODE_HELP = \"Help\";\n\nexport const KEY_CODE_HOME = \"Home\";\n\nexport const KEY_CODE_INSERT = \"Insert\";\n\nexport const KEY_CODE_INTL_BACKSLASH = \"IntlBackslash\";\n\nexport const KEY_CODE_INTL_RO = \"IntlRo\";\n\nexport const KEY_CODE_INTL_YEN = \"IntlYen\";\n\nexport const KEY_CODE_KANA_MODE = \"KanaMode\";\n\nexport const KEY_CODE_KEY_A = \"KeyA\";\n\nexport const KEY_CODE_KEY_B = \"KeyB\";\n\nexport const KEY_CODE_KEY_C = \"KeyC\";\n\nexport const KEY_CODE_KEY_D = \"KeyD\";\n\nexport const KEY_CODE_KEY_E = \"KeyE\";\n\nexport const KEY_CODE_KEY_F = \"KeyF\";\n\nexport const KEY_CODE_KEY_G = \"KeyG\";\n\nexport const KEY_CODE_KEY_H = \"KeyH\";\n\nexport const KEY_CODE_KEY_I = \"KeyI\";\n\nexport const KEY_CODE_KEY_J = \"KeyJ\";\n\nexport const KEY_CODE_KEY_K = \"KeyK\";\n\nexport const KEY_CODE_KEY_L = \"KeyL\";\n\nexport const KEY_CODE_KEY_M = \"KeyM\";\n\nexport const KEY_CODE_KEY_N = \"KeyN\";\n\nexport const KEY_CODE_KEY_O = \"KeyO\";\n\nexport const KEY_CODE_KEY_P = \"KeyP\";\n\nexport const KEY_CODE_KEY_Q = \"KeyQ\";\n\nexport const KEY_CODE_KEY_R = \"KeyR\";\n\nexport const KEY_CODE_KEY_S = \"KeyS\";\n\nexport const KEY_CODE_KEY_T = \"KeyT\";\n\nexport const KEY_CODE_KEY_U = \"KeyU\";\n\nexport const KEY_CODE_KEY_V = \"KeyV\";\n\nexport const KEY_CODE_KEY_W = \"KeyW\";\n\nexport const KEY_CODE_KEY_X = \"KeyX\";\n\nexport const KEY_CODE_KEY_Y = \"KeyY\";\n\nexport const KEY_CODE_KEY_Z = \"KeyZ\";\n\nexport const KEY_CODE_LANG_1 = \"Lang1\";\n\nexport const KEY_CODE_LANG_2 = \"Lang2\";\n\nexport const KEY_CODE_LAUNCH_APP_1 = \"LaunchApp1\";\n\nexport const KEY_CODE_LAUNCH_APP_2 = \"LaunchApp2\";\n\nexport const KEY_CODE_LAUNCH_MAIL = \"LaunchMail\";\n\nexport const KEY_CODE_LAUNCH_MEDIA_PLAYER = \"LaunchMediaPlayer\";\n\nexport const KEY_CODE_MEDIA_PLAY_PAUSE = \"MediaPlayPause\";\n\nexport const KEY_CODE_MEDIA_SELECT = \"MediaSelect\";\n\nexport const KEY_CODE_MEDIA_STOP = \"MediaStop\";\n\nexport const KEY_CODE_MEDIA_TRACK_NEXT = \"MediaTrackNext\";\n\nexport const KEY_CODE_MEDIA_TRACK_PREVIOUS = \"MediaTrackPrevious\";\n\nexport const KEY_CODE_META_LEFT = \"MetaLeft\";\n\nexport const KEY_CODE_META_RIGHT = \"MetaRight\";\n\nexport const KEY_CODE_MINUS = \"Minus\";\n\nexport const KEY_CODE_NON_CONVERT = \"NonConvert\";\n\nexport const KEY_CODE_NUM_LOCK = \"NumLock\";\n\nexport const KEY_CODE_NUMPAD_0 = \"Numpad0\";\n\nexport const KEY_CODE_NUMPAD_1 = \"Numpad1\";\n\nexport const KEY_CODE_NUMPAD_2 = \"Numpad2\";\n\nexport const KEY_CODE_NUMPAD_3 = \"Numpad3\";\n\nexport const KEY_CODE_NUMPAD_4 = \"Numpad4\";\n\nexport const KEY_CODE_NUMPAD_5 = \"Numpad5\";\n\nexport const KEY_CODE_NUMPAD_6 = \"Numpad6\";\n\nexport const KEY_CODE_NUMPAD_7 = \"Numpad7\";\n\nexport const KEY_CODE_NUMPAD_8 = \"Numpad8\";\n\nexport const KEY_CODE_NUMPAD_9 = \"Numpad9\";\n\nexport const KEY_CODE_NUMPAD_ADD = \"NumpadAdd\";\n\nexport const KEY_CODE_NUMPAD_CHANGE_SIGN = \"NumpadChangeSign\";\n\nexport const KEY_CODE_NUMPAD_COMMA = \"NumpadComma\";\n\nexport const KEY_CODE_NUMPAD_DECIMAL = \"NumpadDecimal\";\n\nexport const KEY_CODE_NUMPAD_DIVIDE = \"NumpadDivide\";\n\nexport const KEY_CODE_NUMPAD_ENTER = \"NumpadEnter\";\n\nexport const KEY_CODE_NUMPAD_EQUAL = \"NumpadEqual\";\n\nexport const KEY_CODE_NUMPAD_MULTIPLY = \"NumpadMultiply\";\n\nexport const KEY_CODE_NUMPAD_PAREN_LEFT = \"NumpadParenLeft\";\n\nexport const KEY_CODE_NUMPAD_PAREN_RIGHT = \"NumpadParenRight\";\n\nexport const KEY_CODE_NUMPAD_SUBTRACT = \"NumpadSubtract\";\n\nexport const KEY_CODE_OPEN = \"Open\";\n\nexport const KEY_CODE_OSLEFT = \"OSLeft\";\n\nexport const KEY_CODE_OSRIGHT = \"OSRight\";\n\nexport const KEY_CODE_PAGE_DOWN = \"PageDown\";\n\nexport const KEY_CODE_PAGE_UP = \"PageUp\";\n\nexport const KEY_CODE_PASTE = \"Paste\";\n\nexport const KEY_CODE_PAUSE = \"Pause\";\n\nexport const KEY_CODE_PERIOD = \"Period\";\n\nexport const KEY_CODE_POWER = \"Power\";\n\nexport const KEY_CODE_PRINT_SCREEN = \"PrintScreen\";\n\nexport const KEY_CODE_PROPS = \"Props\";\n\nexport const KEY_CODE_QUOTE = \"Quote\";\n\nexport const KEY_CODE_SCROLL_LOCK = \"ScrollLock\";\n\nexport const KEY_CODE_SELECT = \"Select\";\n\nexport const KEY_CODE_SEMICOLON = \"Semicolon\";\n\nexport const KEY_CODE_SHIFT_LEFT = \"ShiftLeft\";\n\nexport const KEY_CODE_SHIFT_RIGHT = \"ShiftRight\";\n\nexport const KEY_CODE_SLASH = \"Slash\";\n\nexport const KEY_CODE_SLEEP = \"Sleep\";\n\nexport const KEY_CODE_SPACE = \"Space\";\n\nexport const KEY_CODE_TAB = \"Tab\";\n\nexport const KEY_CODE_UNDO = \"Undo\";\n\nexport const KEY_CODE_UNIDENTIFIED = \"Unidentified\";\n\nexport const KEY_CODE_VOLUME_DOWN = \"VolumeDown\";\n\nexport const KEY_CODE_VOLUME_MUTE = \"VolumeMute\";\n\nexport const KEY_CODE_VOLUME_UP = \"VolumeUp\";\n\nexport const KEY_CODE_WAKE_UP = \"WakeUp\";\n\nexport type KEY_CODE =\n  | \"\"\n  | \"Again\"\n  | \"AltLeft\"\n  | \"AltRight\"\n  | \"ArrowDown\"\n  | \"ArrowLeft\"\n  | \"ArrowRight\"\n  | \"ArrowUp\"\n  | \"AudioVolumeDown\"\n  | \"AudioVolumeMute\"\n  | \"AudioVolumeUp\"\n  | \"Backquote\"\n  | \"Backslash\"\n  | \"Backspace\"\n  | \"BracketLeft\"\n  | \"BracketRight\"\n  | \"BrowserBack\"\n  | \"BrowserFavorites\"\n  | \"BrowserForward\"\n  | \"BrowserHome\"\n  | \"BrowserRefresh\"\n  | \"BrowserSearch\"\n  | \"BrowserStop\"\n  | \"Cancel\"\n  | \"CapsLock\"\n  | \"Comma\"\n  | \"ContextMenu\"\n  | \"ControlLeft\"\n  | \"ControlRight\"\n  | \"Convert\"\n  | \"Copy\"\n  | \"Cut\"\n  | \"Delete\"\n  | \"Digit0\"\n  | \"Digit1\"\n  | \"Digit2\"\n  | \"Digit3\"\n  | \"Digit4\"\n  | \"Digit5\"\n  | \"Digit6\"\n  | \"Digit7\"\n  | \"Digit8\"\n  | \"Digit9\"\n  | \"Eject\"\n  | \"End\"\n  | \"Enter\"\n  | \"Equal\"\n  | \"Escape\"\n  | \"F1\"\n  | \"F2\"\n  | \"F3\"\n  | \"F4\"\n  | \"F5\"\n  | \"F6\"\n  | \"F7\"\n  | \"F8\"\n  | \"F9\"\n  | \"F10\"\n  | \"F11\"\n  | \"F12\"\n  | \"F13\"\n  | \"F14\"\n  | \"F15\"\n  | \"F16\"\n  | \"F17\"\n  | \"F18\"\n  | \"F19\"\n  | \"F20\"\n  | \"F21\"\n  | \"F22\"\n  | \"F23\"\n  | \"F24\"\n  | \"Find\"\n  | \"Fn\"\n  | \"HangulMode\"\n  | \"Hanja\"\n  | \"Help\"\n  | \"Home\"\n  | \"Insert\"\n  | \"IntlBackslash\"\n  | \"IntlRo\"\n  | \"IntlYen\"\n  | \"KanaMode\"\n  | \"KeyA\"\n  | \"KeyB\"\n  | \"KeyC\"\n  | \"KeyD\"\n  | \"KeyE\"\n  | \"KeyF\"\n  | \"KeyG\"\n  | \"KeyH\"\n  | \"KeyI\"\n  | \"KeyJ\"\n  | \"KeyK\"\n  | \"KeyL\"\n  | \"KeyM\"\n  | \"KeyN\"\n  | \"KeyO\"\n  | \"KeyP\"\n  | \"KeyQ\"\n  | \"KeyR\"\n  | \"KeyS\"\n  | \"KeyT\"\n  | \"KeyU\"\n  | \"KeyV\"\n  | \"KeyW\"\n  | \"KeyX\"\n  | \"KeyY\"\n  | \"KeyZ\"\n  | \"Lang1\"\n  | \"Lang2\"\n  | \"LaunchApp1\"\n  | \"LaunchApp2\"\n  | \"LaunchMail\"\n  | \"LaunchMediaPlayer\"\n  | \"MediaPlayPause\"\n  | \"MediaSelect\"\n  | \"MediaStop\"\n  | \"MediaTrackNext\"\n  | \"MediaTrackPrevious\"\n  | \"MetaLeft\"\n  | \"MetaRight\"\n  | \"Minus\"\n  | \"NonConvert\"\n  | \"NumLock\"\n  | \"Numpad0\"\n  | \"Numpad1\"\n  | \"Numpad2\"\n  | \"Numpad3\"\n  | \"Numpad4\"\n  | \"Numpad5\"\n  | \"Numpad6\"\n  | \"Numpad7\"\n  | \"Numpad8\"\n  | \"Numpad9\"\n  | \"NumpadAdd\"\n  | \"NumpadChangeSign\"\n  | \"NumpadComma\"\n  | \"NumpadDecimal\"\n  | \"NumpadDivide\"\n  | \"NumpadEnter\"\n  | \"NumpadEqual\"\n  | \"NumpadMultiply\"\n  | \"NumpadParenLeft\"\n  | \"NumpadParenRight\"\n  | \"NumpadSubtract\"\n  | \"Open\"\n  | \"OSLeft\"\n  | \"OSRight\"\n  | \"PageDown\"\n  | \"PageUp\"\n  | \"Paste\"\n  | \"Pause\"\n  | \"Period\"\n  | \"Power\"\n  | \"PrintScreen\"\n  | \"Props\"\n  | \"Quote\"\n  | \"ScrollLock\"\n  | \"Select\"\n  | \"Semicolon\"\n  | \"ShiftLeft\"\n  | \"ShiftRight\"\n  | \"Slash\"\n  | \"Sleep\"\n  | \"Space\"\n  | \"Tab\"\n  | \"Undo\"\n  | \"Unidentified\"\n  | \"VolumeDown\"\n  | \"VolumeMute\"\n  | \"VolumeUp\"\n  | \"WakeUp\";\n","#version 300 es\n\nlayout(location = 0) in vec4 aPosition;\nlayout(location = 1) in vec3 aNormal;\nlayout(location = 2) in vec4 aColor;\n\nout vec4 VNormal;\nout vec4 FragPos;\nout vec4 UntransformedFragPos;\nout lowp vec4 Color;\n\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 worldMatrices[40];\n\n#define modelId aPosition.w\n\nvoid main() {\n  mat4 worldMatrix = worldMatrices[modelId > 0. ? int(modelId) - 1 : gl_InstanceID];\n  // trick - use worldMatrix[3][3] that normally is 1 as a way to color the handle of pulled levers\n  Color = mix(aColor, vec4(0.7, 1, 0.2, 0), aColor.w > 0. ? 0. : 1. - worldMatrix[3][3]);\n  worldMatrix[3][3] = 1.;\n  UntransformedFragPos = aPosition;\n  FragPos = worldMatrix * vec4(aPosition.xyz, 1);\n  gl_Position = projectionMatrix * (viewMatrix * FragPos);\n  FragPos.w = modelId;\n  VNormal = (worldMatrix * vec4(aNormal, 0));\n}\n","#version 300 es\nprecision highp float;\n\n// as printed by the console.log on csm.ts\nconst vec3 lightDir = vec3(-0.6560590289905073, 0.6663690071652679, -0.3543146860766681);\n\n#define CSM_TEXTURE_SIZE 2048.\n\n#define zNear 0.3\n#define CSM_PLANE_DISTANCE 55.\n#define zFar 177.\n\nin highp vec4 VNormal;\nin highp vec4 FragPos;\nin highp vec4 UntransformedFragPos;\nin lowp vec4 Color;\n\nuniform vec3 viewPos;\nuniform mat4 viewMatrix;\nuniform mat4 csm_matrix0;\nuniform mat4 csm_matrix1;\n\nuniform highp sampler2DShadow csm_texture0;\nuniform highp sampler2DShadow csm_texture1;\nuniform highp sampler2D groundTexture;\n\nout vec4 O;\n\nvoid main() {\n  vec4 fragPosVec4 = vec4(FragPos.xyz, 1);\n  vec3 normal = normalize(VNormal.xyz);\n\n  vec3 tex = Color.w *\n    (texture(groundTexture, UntransformedFragPos.yz * .035) * normal.x +\n     texture(groundTexture, UntransformedFragPos.xz * .035) * normal.y +\n     texture(groundTexture, UntransformedFragPos.xy * .035) * normal.z)\n      .xyz;\n\n  // Displacement map\n  normal = normalize(normal.xyz + tex * .5);\n\n  float lambert = dot(normal, lightDir);\n  float shadow = 1.;\n  float depthValue = abs((viewMatrix * fragPosVec4).z);\n\n  // Gets the fragment position in light space\n  vec4 csmCoords = (depthValue < CSM_PLANE_DISTANCE ? csm_matrix0 : csm_matrix1) * fragPosVec4;\n\n  // perform perspective divide and transform to [0,1] range\n  csmCoords = (csmCoords / csmCoords.w) * .5 + .5;\n\n  if (csmCoords.z < 1.) { // Only if inside far plane\n    shadow = 0.;\n\n    // TODO: Shadow bias could be computed based on normal and light, something like 0.0003 * (1. -\n    // clamp(dot(normal, lightDir), 0., 1.))\n\n    for (float x = -1.; x <= 1.; ++x) {\n      for (float y = -1.; y <= 1.; ++y) {\n        vec3 c = vec3(\n          csmCoords.xy + vec2(x, y) / CSM_TEXTURE_SIZE,\n          csmCoords.z -\n            // shadow bias\n            (1. / CSM_TEXTURE_SIZE / 2.8)\n        );\n        shadow += depthValue < CSM_PLANE_DISTANCE ? texture(csm_texture0, c) : texture(csm_texture1, c);\n      }\n    }\n    shadow /= 9.;\n  }\n\n  vec3 rgbColor = Color.xyz * (1. - tex.x);\n\n  O = vec4(\n    // ambient\n    vec3(.09, .05, .1) * rgbColor +\n      // diffuse\n      rgbColor * (max(0., lambert) * .5 + (rgbColor * lambert * lambert * vec3(.5, .45, .3))) * (shadow * .7 + .3) +\n      // lava light\n      rgbColor * max(dot(normal, normalize(vec3(.1, -1, -.1))), 0.) * max(0., 2. - FragPos.y) * (vec3(.6, .1, 0) / 14.) +\n      // specular\n      vec3(.6, .6, .5) * pow(max(0., dot(normalize(FragPos.xyz - viewPos), reflect(lightDir, normal))), 35.) * shadow,\n    1\n  );\n}\n","#version 300 es\nprecision highp float;\n\nuniform vec3 iResolution;\nuniform vec3 viewPos;\nuniform mat4 viewMatrix;\n\nuniform highp sampler2D groundTexture;\n\nout vec4 O;\n\n#define gameTime iResolution.z\n\n/* 1 / Math.tan(fieldOfViewRadians / 2) */\nconst float fieldOfViewAmount = 1.73205;\n\nvoid main() {\n  vec2 fragCoord = (gl_FragCoord.xy / iResolution.xy) * 2. - 1.;\n  vec3 ray =\n    normalize(viewMatrix * vec4(fragCoord.x * -(iResolution.x / iResolution.y), -fragCoord.y, fieldOfViewAmount, 0.)).xyz;\n  float rayTracedLavalDistance = (-32. - viewPos.y) / ray.y;\n  float multiplier = (1. - clamp(abs(rayTracedLavalDistance / 9999.), 0., 1.));\n\n  O = vec4(0, 0, 0, 1);\n\n  if (multiplier > 0.01) {\n    if (rayTracedLavalDistance > 0.) {\n      // Render sky\n      float c = cos(gameTime / 30.), s = sin(gameTime / 30.);\n      ray.xz *= mat2(c, s, -s, c);\n      vec3 absRay = abs(ray);\n      O.xyz = vec3(dot(vec2(texture(groundTexture, ray.xy).z, texture(groundTexture, ray.yz * 2.).z), absRay.zx) * absRay.y);\n\n    } else {\n      // Render raytraced lava\n      ray = viewPos + ray * rayTracedLavalDistance;\n      O.x = multiplier *=\n        0.9 - texture(groundTexture, ray.xz / 150. + vec2(sin(ray.z / 35. + gameTime), cos(ray.x / 25. + gameTime)) / 80.).y;\n      O.y = multiplier * multiplier * multiplier;\n    }\n  }\n}\n","#version 300 es\n\nin vec4 aPosition;\n\nuniform mat4 viewMatrix;\nuniform mat4 worldMatrices[40];\n\n#define modelId aPosition.w\n\nvoid main() {\n  mat4 worldMatrix = worldMatrices[modelId > 0. ? int(modelId) - 1 : gl_InstanceID];\n  worldMatrix[3][3] = 1.;\n  gl_Position = viewMatrix * (worldMatrix * vec4(aPosition.xyz, 1));\n}\n","#version 300 es\n// Do nothing.\nvoid main() {}\n","#version 300 es\n\nin vec4 aPosition;\n\nvoid main() { gl_Position = vec4(aPosition.xy, 1, 1); }\n","#version 300 es\nprecision highp float;\n\nin highp vec4 VNormal;\nin highp vec4 FragPos;\n\nuniform mat4 viewMatrix;\n\nout vec4 O;\n\nvoid main() {\n  vec4 v = viewMatrix * vec4(FragPos.xyz, 1);\n  float z = 1. - min(abs(v.z / v.w), 1.);\n  O = vec4(vec2(z * (gl_FragCoord.y > 31. ? 1. : abs(VNormal.y))), z > 0. ? FragPos.w / 255. : 0., 1);\n}\n","import type { Model } from \"./scene\";\nimport { allModels } from \"./scene\";\nimport { gl } from \"../gl\";\nimport type { Polygon } from \"../geometry/geometry\";\nimport { plane_fromPolygon } from \"../math\";\n\nexport const initTriangleBuffers = () => {\n  const _triangleIndices: number[] = [];\n  const _vertexPositions: number[] = [];\n  const _vertexColors: number[] = [];\n  const _vertexNormals: number[] = [];\n\n  const _vertexMap = new Map<string, number>();\n  const _vertexInts = new Int32Array(8);\n  const _vertexIntsSmooth = new Int32Array(_vertexInts.buffer, 0, 5);\n  const _vertexFloats = new Float32Array(_vertexInts.buffer);\n\n  let model: Model;\n  let polygon: Polygon | undefined;\n  let meshFirstIndex: number = 0;\n\n  const getVertex = (i: number): number => {\n    let { x, y, z } = polygon![i]!;\n    _vertexFloats[0] = x;\n    _vertexFloats[1] = y;\n    _vertexFloats[2] = z;\n    const key = \"\" + (polygon!.$smooth ? _vertexIntsSmooth : _vertexInts);\n    let index = _vertexMap.get(key);\n    if (index !== undefined) {\n      x = index * 3;\n      _vertexNormals[x] = (_vertexNormals[x++]! + _vertexInts[5]!) / 2;\n      _vertexNormals[x] = (_vertexNormals[x++]! + _vertexInts[6]!) / 2;\n      _vertexNormals[x] = (_vertexNormals[x]! + _vertexInts[7]!) / 2;\n    } else {\n      _vertexMap.set(key, (index = _vertexMap.size));\n      _vertexPositions.push(x, y, z, _vertexFloats[3]!);\n      _vertexColors.push(_vertexInts[4]!);\n      _vertexNormals.push(_vertexInts[5]!, _vertexInts[6]!, _vertexInts[7]!);\n    }\n    return index;\n  };\n\n  for (model of allModels) {\n    _vertexFloats[3] = model.$kind ? model.$modelId : 0;\n    for (polygon of model.$polygons!) {\n      const { x, y, z } = plane_fromPolygon(polygon);\n      _vertexInts[4] = polygon.$color! | 0;\n      _vertexInts[5] = x * 32767;\n      _vertexInts[6] = y * 32767;\n      _vertexInts[7] = z * 32767;\n      for (let i = 2, a = getVertex(0), b = getVertex(1); i < polygon.length; ++i) {\n        _triangleIndices.push(a, b, (b = getVertex(i)));\n      }\n    }\n\n    // free memory\n    model.$polygons = null;\n\n    // write the indices offset and count\n    model.$vertexBegin = meshFirstIndex;\n    model.$vertexEnd = meshFirstIndex = _triangleIndices.length;\n  }\n\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(_triangleIndices), gl.STATIC_DRAW);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(_vertexPositions), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ARRAY_BUFFER, new Int16Array(_vertexNormals), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(1, 3, gl.SHORT, true, 0, 0);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ARRAY_BUFFER, new Uint32Array(_vertexColors), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(2, 4, gl.UNSIGNED_BYTE, true, 0, 0);\n\n  gl.enableVertexAttribArray(0);\n  gl.enableVertexAttribArray(1);\n  gl.enableVertexAttribArray(2);\n\n  if (DEBUG) {\n    console.log(\n      \"game models:\" +\n        allModels.filter((m) => !!m.$kind).length +\n        \" models: \" +\n        allModels.length +\n        \" vertices: \" +\n        _vertexPositions.length / 3 +\n        \" indices:\" +\n        _triangleIndices.length +\n        \" triangles:\" +\n        _triangleIndices.length / 3,\n    );\n  }\n};\n","import \"./index.css\";\n\nimport \"./dev-tools/dev-main\";\n\nif (DEBUG) {\n  console.time(\"boot\");\n}\n\nimport groundTextureSvg from \"./groundTexture.svg\";\n\nimport { buildWorld } from \"./game/level\";\nimport { startMainLoop } from \"./main-loop\";\nimport { song_numChannels } from \"./music/song\";\nimport { soundbox_generate } from \"./music/music-player\";\nimport { loadSong } from \"./music/audio-context\";\n\nsetTimeout(() => {\n  let songLoad = 0;\n  let thingsToLoad = 1 + song_numChannels;\n  const image = new Image();\n\n  if (DEBUG) {\n    console.time(\"SVG load\");\n    console.time(\"song load\");\n    console.time(\"load\");\n  }\n\n  const onThingLoaded = () => {\n    h4.innerHTML += \".\";\n    if (!--thingsToLoad) {\n      if (DEBUG) {\n        console.timeEnd(\"load\");\n      }\n      startMainLoop(image);\n    }\n  };\n\n  const asyncLoadSongChannels = () => {\n    if (songLoad < song_numChannels) {\n      soundbox_generate(songLoad++);\n      setTimeout(asyncLoadSongChannels);\n    } else {\n      loadSong();\n      if (DEBUG) {\n        console.timeEnd(\"song load\");\n      }\n    }\n    onThingLoaded();\n  };\n\n  image.onload = image.onerror = () => {\n    onThingLoaded();\n    if (DEBUG) {\n      console.timeEnd(\"SVG load\");\n    }\n  };\n  image.src = groundTextureSvg;\n\n  if (DEBUG) {\n    for (let i = 0; i < song_numChannels; ++i) {\n      onThingLoaded();\n    }\n  } else {\n    setTimeout(asyncLoadSongChannels, 50);\n  }\n\n  NO_INLINE(buildWorld)();\n\n  if (DEBUG) {\n    console.timeEnd(\"boot\");\n  }\n});\n"],"names":["groundTextureSvg","btoa","DEG_TO_RAD","Math","PI","identity","min","a","b","max","abs","n","clamp01","t","lerp","from","to","lerpneg","v","angle_wrap_degrees","degrees","angle_wrap_radians","radians","atan2","sin","cos","angle_lerp_degrees","a0","a1","da","angle_lerp","interpolate_with_hysteresis","previous","desired","hysteresis","sign","integers_map","fn","Array","i","mat_perspectiveXY","mx","my","near","far","vec3_dot","x","y","z","vec3_distance","hypot","plane_fromPolygon","polygon","at","w","writeMatrixToArray","output","index","$matrix","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","material","g","r","polygon_color","color","smooth","$smooth","$color","polygon_transform","m","map","p","transformPoint","vec3_transform","polygons_transform","polygons","segments","elongate","cylinder_sides","btm","top","btmi","length","cylinder","topSize","polygon_regular","points","scale3d","bottom","translate","reverse","sphere","slices","stacks","vertexFunc","j","vertex","push","CSGPolygon_splitSpanning","plane","jd","fpoints","$flipped","iv","$polygon","id","jv","bpoints","$front","$parent","$back","CSGPolygon_split","d","csg_tree_addPolygon","node","$polygons","csg_tree_clipNode","anode","bnode","polygonPlaneFlipped","result","recursion","csg_tree_each","csg_tree","reduce","prev","csg_tree_flip","root","csg_union","inputs","polygonsToAdd","pp","csg_subtract","csg_polygons","tree","Map","add","found","byParent","get","allPolygons","delete","set","flipped","GQuad","GHorn","matrices","HORN_STACKS","rotate","scale","flat","boatPolygons","bigArc","currentEditModel","allModels","meshAdd","transform","newModel","$kind","previousModel","model","$modelId","camera_position","camera_rotation","mat_perspective","hC","clientHeight","clientWidth","fieldOfViewAmount","song_instruments","getSegmentNumWords","song_rowLen","song_numWords","getnotefreq","osc_sin","value","osc_square","osc_saw","osc_tri","v2","soundbox_mixbuffer","Int32Array","audioContext","AudioContext","songAudioSource","createBufferSource","music_on","touch_movementX","touch_movementY","mainMenuVisible","player_first_person","keyboard_downKeys","updateMusicOnState","disconnect","connect","destination","b4","innerHTML","setMainMenuVisible","document","exitPointerLock","start","initPage","touchStartCameraRotX","touchStartCameraRotY","touchStartTime","cameraRotTouch","cameraPosTouch","pageClicked","handleResize","width","innerWidth","height","innerHeight","hidden","b1","onclick","b2","b3","confirm","localStorage","LOCAL_STORAGE_SAVED_GAME_KEY","location","reload","b5","requestPointerLock","onvisibilitychange","onresize","onblur","onkeydown","onkeyup","code","target","type","repeat","pressed","body","mapped","onmousemove","movementX","movementY","ontouchstart","e","touch","changedTouches","pageX","absoluteTime","ontouchmove","pageY","identifier","ontouchend","preventDefault","diff","oncontextmenu","gameTime","souls_collected_count","_messageEndTime","player_last_pulled_lever","rotatingPlatform1Rotation","rotatingPlatform2Rotation","rotatingHexCorridorRotation","game_completed","firstBoatLerp","secondBoatLerp","_globalTime","lerpDamp","speed","exp","gameTimeDelta","getItemValue","$value","levers","souls","showMessage","message","duration","h4","clearMessage","updateCollectedSoulsCounter","acc","cur","h3","saveGame","JSON","stringify","player_position_final","getBoatAnimationMatrix","rotateSelf","newLever","lever","$lerpValue","$lerpValue2","_update","multiply","$locMatrix","locMatrix","leverIndex","onPlayerPullLever","translateSelf","newSoul","walkingPath","dirX","dirZ","randAngle","lookAngle","prevX","prevZ","velocity","wasInside","soul","contextualVelocity","isInside","mindist","Infinity","c","circles","distance","targetX","targetZ","circleSDF","circle","x1","z1","w1","ax","az","magnitude","angle","random","soulX","soulZ","soulPos","parentModel","skewXSelf","skewYSelf","updateModels","leverModel","soulModel","soulCollisionModel","playerLegsModels","playerModel","buildWorld","tmpMatrix","slice","getOscillationAmount","blackPlatform","freq","pz","amplitude","level3Oscillation","shouldPushRods","hexPadShouldOscillate","entranceBarsPolygons","skewX","hexCorridorPolygons","scaleSelf","osc","shouldOscillate","skewY","pushingRod","rotPlatformBase","k","eye","bm","theta","phixz","GHOST_STACKS","csm_buildMatrix","camera_view","nearPlane","farPlane","zMultiplier","tx","ty","tz","roundingRadius","projViewInverse","DOMMatrix","invertSelf","frustumCorners","lightViewTranslated","left","right","multiplySelf","toFloat32Array","loadShader","source","shader","gl","initShaderProgram","vertexShader","sfsSource","program","name","uniforms","s","charCodeAt","worldMatricesBuffer","Float32Array","renderModels","worldMatrixLoc","renderPlayer","isCollider","matrix","$vertexBegin","$modelId1","$vertexEnd","i1","soulModelToRender","startMainLoop","groundTextureImage","currentModelIdTMinus1","currentModelId","player_respawned","player_look_angle_target","player_look_angle","player_legs_speed","_gamepadInteractPressed","oldModelId","player_has_ground","player_gravity","player_speed","player_collision_velocity_x","player_collision_velocity_z","player_model_y","camera_player_dir_y","camera_player_dir_z","player_position_global","player_collision_modelIdCounter","player_respawn","updatePlayer","player_collision_x","player_collision_z","NO_INLINE","maxModelIdCount","nextModelId","lines","grav","hasGround","fill","y2","up","yindex","x2","COLLISION_TEXTURE_SIZE","collision_buffer","count","front","back","i2","dist1","dist2","dist1Opposite","dist2Opposite","xdist","dz","dx","strafe","forward","gamepad","navigator","getGamepads","getGamepadButtonState","buttons","axes","interactButtonPressed","amount","playerSpeedCollision","movementRadians","referenceMatrix","inverseReferenceRotationMatrix","inverse","z2","oldx","oldz","ydiff","mainLoop","globalTime","requestAnimationFrame","time","dt","gameTimeUpdate","collision_frameBuffer","camera_player_dir_x","interpolationSpeed","viewDirDiffz","viewDirDiffx","viewDirDiffy","shouldRotatePlatforms","collisionShader","csm_render","drawingBufferWidth","drawingBufferHeight","mainShader","skyShader","Uint8Array","mainVertexShader","csmShader","collision_renderBuffer","collision_texture","lightSpaceMatrix","texture","frameBuffer","lightSpaceMatrixLoc","csmSplit","meshFirstIndex","_vertexMap","_vertexInts","_vertexFloats","key","_vertexIntsSmooth","_vertexNormals","size","_vertexPositions","_vertexColors","buffer","getVertex","_triangleIndices","Uint16Array","Int16Array","Uint32Array","savedLevers","savedSouls","savedLastPulledLever","savedGameTime","savedSecondBoatLerp","parse","setTimeout","songLoad","onThingLoaded","thingsToLoad","image","asyncLoadSongChannels","channelIndex","mixIndex","OSC1_VOL","OSC1_SEMI","OSC1_XENV","OSC2_VOL","OSC2_SEMI","OSC2_XENV","NOISE_VOL","ENV_ATTACK","ENV_SUSTAIN","ENV_RELEASE","ENV_EXP_DECAY","LFO_FREQ","FX_FREQ","FX_RESONANCE","FX_DRIVE","FX_PAN_AMT","FX_PAN_FREQ","FX_DELAY_AMT","FX_DELAY_TIME","LFO_AMT","COLUMNS","low","band","f","high","filterActive","noteCache","createNote","note","c1","c2","o1t","o2t","OSC1_WAVEFORM","OSC2_WAVEFORM","noteBuf","j1","j2","chnBuf","lfoFreq","panFreq","dly","row","cp","rowStartSample","col","rsample","lsample","soundbox_generate","createBuffer","data","getChannelData","loop","loadSong","Image","onload","onerror","src"],"mappings":"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AAAC,UAAAiF,WAAA5F;;AAEJ,MAAM6F,YAAqBvI,IAACwI,QAtBc;IAwB1C,MAAgBC,gBAErBN;IAIK,MAAiBO,QAAC;QACjBrH,SAAgBrD;QAChB2K,UAAeP,UAAAxE;QACV4E;mBACW;;mBAERL,mBAAAO;IACd1I,GAAA0I;;IAEQ,OAAAA;AAAA;;ACtCV,MAAAE;IAEOnI,IAAc;IAEdC,GAAa;IAEbC,IAA2B;;;AAIlC,MAAMkI,kBAAoB;IAEtBpI,GAAO;IACDC,GAAA;IACVC,GAAA;;;AAE+B,MAC1BmI,kBAAA,CAAAxI,MAAAC,QAAAJ,kBAAA4I,GAAAC,eAAAD,GAAAE,cAAAC,mBAAAA,mBAAA5I,MAAAC;;AAMA,MACA2I,oBAAA;;ACpBE,MAAMC,mBAAmB,EAC9B,EACE,IACA,KACA,GACA,KACA,KACA,GACA,GACA,KACA,KACA,IACA,GACA,GACA,KACA,KACA,IACA,IACA,GACA,IACA,GACA,GACA,EACE,mIACA,mCACA,mCACA,mCACA,qEACA,yEAGJ,EACE,KACA,KACA,GACA,KACA,KACA,GACA,GACA,KACA,KACA,IACA,GACA,GACA,KACA,GACA,IACA,KACA,GACA,GACA,GACA,KACA,EACE,mCACA,mCACA,mCACA,mCACA,iGACA,6DAGJ,EACE,KACA,KACA,IACA,KACA,KACA,IACA,IACA,IACA,KACA,IACA,IACA,GACA,KACA,IACA,IACA,GACA,GACA,IACA,GACA,GACA,EACE,iCACA,qBAGJ,EACE,GACA,KACA,GACA,GACA,KACA,GACA,IACA,IACA,KACA,IACA,IACA,GACA,KACA,KACA,IACA,KACA,GACA,IACA,GACA,KACA,EACE,mCACA,6BAGJ,EACE,KACA,KACA,IACA,KACA,KACA,IACA,KACA,IACA,KACA,IACA,IACA,GACA,KACA,IACA,IACA,IACA,GACA,GACA,GACA,IACA,EACE,iCACA;;AAoBC,MAAMC,qBAAsBC,eARJ,MAQIA;;AAE5B,MAAMC,gBACXF,mBAlB0B,QAkBSA,mBAhBT,QAgB4CA,mBAd5C;;AC1H5B,MAAAG,cAAAjL,KAAA,g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"}