{"version":3,"file":"index.js","sources":["../../app/groundTexture.svg","../../app/math.ts","../../app/geometry/geometry.ts","../../app/geometry/csg.ts","../../app/game/models.ts","../../app/game/world-state.ts","../../app/game/models-factory.ts","../../app/game/level.ts","../../app/shaders/csm-vertex.vert","../../app/shaders/main-vertex.vert","../../app/shaders/main-fragment.frag","../../app/shaders/collider-fragment.frag","../../app/shaders/void-fragment.frag","../../app/shaders/sky-vertex.vert","../../app/shaders/sky-fragment.frag","../../app/camera.ts","../../app/csm.ts","../../app/music/audio-context.ts","../../app/page.ts","../../app/gl.ts","../../app/utils/keycodes.ts","../../app/player.ts","../../app/shaders-utils.ts","../../app/game/models-render.ts","../../app/main-loop.ts","../../app/game/triangle-buffers.ts","../../app/music/song.ts","../../app/load-step.ts","../../app/music/music-player.ts","../../app/index.ts"],"sourcesContent":["export default \"__VITE_ASSET__b9f78ae4__\"","export const integers_map = <T>(n: number, fn: (i: number) => T) => Array.from(Array(n), (_, i) => fn(i));\n\n/** Amount to be multiplied to an angle in degrees to obtain an angle in radians, approximately 0.017453292519943295 */\nexport const DEG_TO_RAD = Math.PI / 180;\n\nexport const min = /* @__PURE__ */ (a: number, b: number) => (a < b ? a : b);\n\nexport const max = /* @__PURE__ */ (a: number, b: number) => (a > b ? a : b);\n\nexport const clamp = /* @__PURE__ */ (value: number, minValue: number = 0, maxValue: number = 1) =>\n  value < minValue ? minValue : value > maxValue ? maxValue : value;\n\nexport const threshold = (value: number | undefined, amount: number) => (Math.abs(value!) > amount ? value! : 0);\n\n/** Linear interpolation */\nexport const lerp = /* @__PURE__ */ (a: number, b: number, t: number) =>\n  (t <= 0 ? a : t >= 1 ? b : a + (b - a) * t) || 0;\n\nexport const lerpneg = /* @__PURE__ */ (v: number, t: number) => {\n  v = clamp(v);\n  return lerp(v, 1 - v, t);\n};\n\n/**\n * Trigonometry - Wrap an angle so it is always between -PI and PI\n * @param radians The angle in radians to wrap between -PI and PI\n * @returns The angle in radians wrapped so it is always between -PI and PI\n */\nexport const angle_wrap_radians = /* @__PURE__ */ (radians: number): number =>\n  Math.atan2(Math.sin(radians), Math.cos(radians));\n\nexport const angle_wrap_degrees = /* @__PURE__ */ (degrees: number): number =>\n  angle_wrap_radians(degrees * DEG_TO_RAD) / DEG_TO_RAD;\n\nexport const angle_lerp_degrees = /* @__PURE__ */ (a0: number, a1: number, t: number) => {\n  const da = (a1 - a0) % 360;\n  return a0 + (((2 * da) % 360) - da) * clamp(t);\n};\n\nexport interface Vec2 {\n  x: number;\n  y: number;\n}\n\nexport interface Vec3 {\n  x: number;\n  y: number;\n  z: number;\n}\n\nexport interface Vec4 {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n}\n\nexport interface Vec3Optional {\n  x?: number | undefined;\n  y?: number | undefined;\n  z?: number | undefined;\n}\n\nexport interface Plane {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n}\n\nexport type Vec2In = Readonly<Vec2>;\n\nexport type Vec3In = Readonly<Vec3>;\n\nexport type Vec4In = Readonly<Vec4>;\n\nexport const vec3_distance = /* @__PURE__ */ ({ x, y, z }: Vec3In, b: Vec3In): number =>\n  Math.hypot(x - b.x, y - b.y, z - b.z);\n\nexport const vec3_dot = /* @__PURE__ */ ({ x, y, z }: Vec3In, b: Vec3In): number => x * b.x + y * b.y + z * b.z;\n\n/**\n * Computes a polygon plane using the Newell's method.\n * We are not using plane from 3 points algorithm,\n * because this can handle coplanar points and has precision problems.\n */\nexport const plane_fromPolygon = /* @__PURE__ */ (polygon: readonly Vec3In[]): Plane => {\n  // Newell's method\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = polygon.at(-1)!;\n  let b: Vec3In | number;\n  for (b of polygon) {\n    x += (a.y - b.y) * (a.z + b.z);\n    y += (a.z - b.z) * (a.x + b.x);\n    z += (a.x - b.x) * (a.y + b.y);\n    a = b;\n  }\n  b = Math.hypot(x, y, z);\n  x /= b;\n  y /= b;\n  z /= b;\n  return { x, y, z, w: x * a.x + y * a.y + z * a.z };\n};\n\n/** The identity matrix */\nexport const identity: DOMMatrixReadOnly = /* @__PURE__ */ new DOMMatrix();\n\nexport const float32Array16Temp = new Float32Array(16);\n\nexport const matrixToArray = (\n  $matrix: DOMMatrixReadOnly,\n  output: Float32Array | number[] = float32Array16Temp,\n  index: number = 0,\n) => {\n  index *= 16;\n  output[index++] = $matrix.m11;\n  output[index++] = $matrix.m12;\n  output[index++] = $matrix.m13;\n  output[index++] = $matrix.m14;\n  output[index++] = $matrix.m21;\n  output[index++] = $matrix.m22;\n  output[index++] = $matrix.m23;\n  output[index++] = $matrix.m24;\n  output[index++] = $matrix.m31;\n  output[index++] = $matrix.m32;\n  output[index++] = $matrix.m33;\n  output[index++] = $matrix.m34;\n  output[index++] = $matrix.m41;\n  output[index++] = $matrix.m42;\n  output[index++] = $matrix.m43;\n  output[index] = $matrix.m44;\n  return output;\n};\n\nexport const mat_perspectiveXY = /* @__PURE__ */ (mx: number, my: number, near: number, far: number) => [\n  mx,\n  0,\n  0,\n  0,\n  0,\n  my,\n  0,\n  0,\n  0,\n  0,\n  (far + near) / (near - far),\n  -1,\n  0,\n  0,\n  (2 * far * near) / (near - far),\n  0,\n];\n","import { integers_map, identity, type Vec3, type Vec3Optional } from \"../math\";\n\nexport const GQuad = /* @__PURE__ */ [\n  { x: -1, z: 1 },\n  { x: 1, z: 1 },\n  { x: 1, z: -1 },\n  { x: -1, z: -1 },\n];\n\nexport interface Polygon<TVec3 = Vec3> extends Array<TVec3> {\n  /** Polygon material */\n  $color?: number | undefined;\n\n  /** Smooth normals? */\n  $smooth?: 0 | 1 | undefined;\n}\n\nexport const polygon_color = (polygon: Polygon, color: number | undefined, smooth?: 0 | 1 | undefined): Polygon => {\n  polygon.$smooth = smooth;\n  polygon.$color = color;\n  return polygon;\n};\n\nexport const vec3_transform = /* @__PURE__ */ ({ x, y, z }: Readonly<Vec3Optional>, m: DOMMatrixReadOnly): Vec3 => {\n  ({ x, y, z } = m.transformPoint({ x, y, z }));\n  return { x, y, z };\n};\n\nexport const polygon_transform = /* @__PURE__ */ (\n  polygon: Polygon<Readonly<Vec3Optional>>,\n  m: DOMMatrixReadOnly,\n  color: number | undefined = polygon.$color,\n): Polygon =>\n  polygon_color(\n    polygon.map((p) => vec3_transform(p, m)),\n    color,\n    polygon.$smooth,\n  );\n\nexport const polygons_transform = /* @__PURE__ */ (\n  polygons: Polygon<Readonly<Vec3Optional>>[],\n  m: DOMMatrixReadOnly,\n  color?: number | undefined,\n) => polygons.map((polygon) => polygon_transform(polygon, m, color));\n\n/**\n * Creates a regular polygon\n * The polygon will face up (normal 0, -1, 0).\n */\nexport const polygon_regular = /* @__PURE__ */ (segments: number, elongate: number = 0): Polygon =>\n  integers_map(segments, (i) => {\n    const z = Math.cos(Math.PI * 2 * (i / segments));\n    return {\n      x: Math.sin(Math.PI * 2 * (i / segments)),\n      y: 0,\n      z: Math.abs(z) < 0.01 ? z : z < 0 ? z - elongate : z + elongate,\n    };\n  });\n\n/**\n * Connects a top and a bottom polygon with side polygons.\n * Top and bottom polygons must have the same length.\n * Top polygon is supposed to be flipped.\n */\nexport const cylinder_sides = /* @__PURE__ */ (btm: Polygon, top: Polygon, smooth?: 0 | 1 | undefined): Polygon[] =>\n  btm.map((btmi, i, { length }) =>\n    polygon_color(\n      [btmi, top[length - i - 1]!, top[length - ((i + 1) % length) - 1]!, btm[(i + 1) % length]!],\n      btm.$color,\n      smooth,\n    ),\n  );\n\n/** Simplest composition of polygon functions. */\nexport const cylinder = /* @__PURE__ */ (\n  segments?: number,\n  smooth?: 0 | 1,\n  topSize: number = 0,\n  elongate?: number,\n): Polygon[] => {\n  const points = segments ? polygon_regular(segments, elongate) : GQuad;\n  const top = polygon_transform(points, identity.translate(0, 1).scale3d(topSize > 0 ? topSize : 1));\n  const bottom = polygon_transform(points, identity.translate(0, -1).scale3d(topSize < 0 ? -topSize : 1)).reverse();\n  return [...cylinder_sides(bottom as Polygon, top, smooth), top, bottom];\n};\n\nexport const sphere = /* @__PURE__ */ (\n  slices: number,\n  stacks = slices,\n  vertexFunc: (slice: number, stack: number, polygon: Polygon) => Vec3 = (x: number, y: number) => {\n    y *= Math.PI / stacks;\n    x *= (Math.PI * 2) / slices;\n    return { x: Math.cos(x) * Math.sin(y), y: Math.cos(y), z: Math.sin(x) * Math.sin(y) };\n  },\n): Polygon[] => {\n  const polygons: Polygon[] = [];\n  for (let i = 0; i < slices; i++) {\n    for (let j = 0; j < stacks; j++) {\n      const polygon = polygon_color([], 0, 1);\n      const vertex = (x: number, y: number) => polygon.push(vertexFunc(x, y, polygon));\n      polygons.push(polygon);\n      vertex(i, j);\n      if (j) {\n        vertex((i + 1) % slices, j);\n      }\n      if (j < stacks - 1) {\n        vertex((i + 1) % slices, j + (1 % stacks));\n      }\n      vertex(i, j + (1 % stacks));\n    }\n  }\n  return polygons;\n};\n","import { plane_fromPolygon, type Vec3, type Vec3In, type Plane, vec3_dot } from \"../math\";\nimport { polygon_color, type Polygon } from \"./geometry\";\n\nexport const PLANE_EPSILON = 0.00008;\n\nexport interface CSGPolygon {\n  $polygon: Polygon;\n\n  $flipped: 0 | boolean;\n\n  /**\n   * When a polygon is splitted, this will contain the polygon from which this polygon was splitted.\n   * This is then used by csg_polygons to merge back splitted polygons if they are both present,\n   * to reduce the number of vertices and triangles.\n   */\n  $parent: CSGPolygon | 0;\n}\n\nexport interface CSGNode extends Plane {\n  /** Coplanar polygons */\n  $polygons: CSGPolygon[];\n  /** Front child */\n  $front: CSGNode | 0;\n  /** Back child */\n  $back: CSGNode | 0;\n}\n\nexport type CSGInput = CSGNode | readonly Polygon[];\n\ninterface SplitPolygonResult {\n  $front: CSGPolygon | undefined | false;\n  $back: CSGPolygon | undefined | false;\n}\n\nconst CSGPolygon_splitSpanning = /* @__PURE__ */ (plane: Plane, polygon: CSGPolygon): SplitPolygonResult => {\n  const fpoints: Vec3[] = [];\n  const bpoints: Vec3[] = [];\n  const { $polygon, $flipped } = polygon;\n  let jd: number;\n  let iv: Vec3In = $polygon.at(-1)!;\n  let id: number = vec3_dot(plane, iv) - plane.w;\n  for (const jv of $polygon) {\n    jd = vec3_dot(plane, jv) - plane.w;\n    if (id < PLANE_EPSILON) {\n      bpoints.push(iv);\n    }\n    if (id > -PLANE_EPSILON) {\n      fpoints.push(iv);\n    }\n    if ((id > PLANE_EPSILON && jd < -PLANE_EPSILON) || (id < -PLANE_EPSILON && jd > PLANE_EPSILON)) {\n      id /= jd - id;\n      iv = {\n        x: iv.x + (iv.x - jv.x) * id,\n        y: iv.y + (iv.y - jv.y) * id,\n        z: iv.z + (iv.z - jv.z) * id,\n      };\n      fpoints.push(iv);\n      bpoints.push(iv);\n    }\n    iv = jv;\n    id = jd;\n  }\n  return {\n    $front: fpoints.length > 2 && {\n      $polygon: polygon_color(fpoints, $polygon.$color, $polygon.$smooth),\n      $flipped,\n      $parent: polygon,\n    },\n    $back: bpoints.length > 2 && {\n      $polygon: polygon_color(bpoints, $polygon.$color, $polygon.$smooth),\n      $flipped,\n      $parent: polygon,\n    },\n  };\n};\n\nconst CSGPolygon_split = /* @__PURE__ */ (plane: Plane, polygon: CSGPolygon): SplitPolygonResult => {\n  const { $polygon } = polygon;\n  let $front: CSGPolygon | undefined;\n  let $back: CSGPolygon | undefined;\n  let d: number;\n  for (let i = 0; i < $polygon.length; ++i) {\n    d = vec3_dot(plane, $polygon[i]!) - plane.w;\n    if (d < -PLANE_EPSILON) {\n      $back = polygon;\n    } else if (d > PLANE_EPSILON) {\n      $front = polygon;\n    }\n    if ($back && $front) {\n      return CSGPolygon_splitSpanning(plane, polygon);\n    }\n  }\n  return { $front, $back };\n};\n\nconst csg_tree_addPolygon = /* @__PURE__ */ (\n  node: CSGNode | 0 | undefined,\n  polygon: CSGPolygon,\n  plane: Plane = plane_fromPolygon(polygon.$polygon),\n): CSGNode => {\n  if (node) {\n    const { $front, $back } = CSGPolygon_split(node, polygon);\n    if (!$front && !$back) {\n      node.$polygons.push(polygon); // Coplanar\n    }\n    if ($front) {\n      node.$front = csg_tree_addPolygon(node.$front, $front, plane);\n    }\n    if ($back) {\n      node.$back = csg_tree_addPolygon(node.$back, $back, plane);\n    }\n  } else {\n    const { x, y, z, w } = plane;\n    node = { x, y, z, w, $polygons: [polygon], $front: 0, $back: 0 };\n  }\n  return node;\n};\n\nconst csg_tree_clipNode = /* @__PURE__ */ (\n  anode: CSGNode,\n  bnode: CSGNode,\n  polygonPlaneFlipped: -1 | 1,\n): CSGPolygon[] => {\n  const result: CSGPolygon[] = [];\n  const recursion = (node: CSGNode, polygon: CSGPolygon) => {\n    let { $front, $back } = CSGPolygon_split(node, polygon);\n    if (!$front && !$back) {\n      if (polygonPlaneFlipped * vec3_dot(node, bnode) > 0) {\n        $front = polygon; // Coplanar front\n      } else {\n        $back = polygon; // Coplanar back\n      }\n    }\n    if ($front) {\n      if (node.$front) {\n        recursion(node.$front, $front);\n      } else {\n        result.push($front);\n      }\n    }\n    if ($back && node.$back) {\n      recursion(node.$back, $back);\n    }\n  };\n\n  for (const polygon of bnode.$polygons) {\n    recursion(anode, polygon);\n  }\n  return result;\n};\n\n/** Loop through all nodes in a tree */\nconst csg_tree_each = (node: CSGNode | 0 | undefined, fn: (node: CSGNode) => void): unknown =>\n  node && (fn(node), csg_tree_each(node.$front, fn), csg_tree_each(node.$back, fn));\n\n/**\n * If the given argument is a list of polygons, a new BSP tree built from the list of polygons is returned.\n * If the given argument is already a BSP tree, return it as is.\n * Note that array cannot be empty.\n */\nexport const csg_tree = /* @__PURE__ */ (n: CSGInput): CSGNode =>\n  (n as Polygon[]).length\n    ? // Build a BSP tree from a list of polygons\n      ((n as Polygon[]).reduce<CSGNode | 0>(\n        (prev, $polygon) => csg_tree_addPolygon(prev, { $polygon, $flipped: 0, $parent: 0 }),\n        0,\n      ) as CSGNode)\n    : // An object? We assume is a BSP tree.\n      (n as CSGNode);\n\n/** Convert solid space to empty space and empty space to solid space. */\nexport const csg_tree_flip = <T extends CSGNode | 0 | undefined>(root: T): T => {\n  csg_tree_each(root, (node) => {\n    const { $front, $back } = node;\n    node.$back = $front;\n    node.$front = $back;\n    node.x *= -1;\n    node.y *= -1;\n    node.z *= -1;\n    node.w *= -1;\n    for (const polygon of node.$polygons) {\n      polygon.$flipped = !polygon.$flipped;\n    }\n  });\n  return root;\n};\n\n/**\n * Union a[0] = a[0] U a[1] U a[2] U ...\n */\nexport const csg_union = /* @__PURE__ */ (...inputs: CSGInput[]): CSGNode =>\n  inputs.reduce((a: CSGInput, b: CSGInput | undefined): CSGNode => {\n    const polygonsToAdd: [Plane, CSGPolygon[]][] = [];\n    a = csg_tree(a);\n    if (b) {\n      b = csg_tree(b);\n\n      // clip to a, b\n      csg_tree_each(a, (node) => (node.$polygons = csg_tree_clipNode(b as CSGNode, node, 1)));\n\n      // get the list of polygons to be added from b clipped to a\n      csg_tree_each(b, (node) => polygonsToAdd.push([node, csg_tree_clipNode(a as CSGNode, node, -1)]));\n\n      // add the polygons to a\n      for (const [plane, polygons] of polygonsToAdd) {\n        for (const pp of polygons) {\n          csg_tree_addPolygon(a, pp, plane);\n        }\n      }\n    }\n    return a;\n  }) as CSGNode;\n\n/**\n * Subtraction a = a - (b[0] U b[1] U ...)\n * Note that a will be modified if is a tree.\n */\nexport const csg_subtract = /* @__PURE__ */ (a: CSGInput, ...b: CSGInput[]): CSGNode =>\n  csg_tree_flip(csg_union(csg_tree_flip(csg_tree(a)), ...b));\n\n/**\n * Extracts all the polygons from a BSP tree.\n * Some polygons will be merged, to reduce the number of triangles.\n */\nexport const csg_polygons = /* @__PURE__ */ (tree: CSGNode): Polygon[] => {\n  const byParent = new Map<CSGPolygon, CSGPolygon>();\n  const allPolygons = new Map<CSGPolygon, 0 | boolean>();\n\n  /** Adds a polygon, and replaces two splitted polygons that have the same parent with the parent */\n  const add = (polygon: CSGPolygon): CSGPolygon => {\n    if (polygon.$parent) {\n      const found = byParent.get(polygon.$parent);\n      if (found) {\n        allPolygons.delete(found);\n        polygon = add(polygon.$parent);\n      } else {\n        byParent.set(polygon.$parent, polygon);\n      }\n    }\n    return polygon;\n  };\n\n  csg_tree_each(tree, (node) => {\n    for (const polygon of node.$polygons) {\n      allPolygons.set(add(polygon), polygon.$flipped);\n    }\n  });\n\n  return Array.from(allPolygons, ([{ $polygon }, flipped]) => {\n    const polygon = $polygon.map(({ x, y, z }) => ({ x, y, z }));\n    return polygon_color(flipped ? polygon.reverse() : polygon, $polygon.$color, $polygon.$smooth);\n  });\n};\n\nexport const csg_polygons_subtract = (...input: CSGInput[]) => csg_polygons((csg_subtract as any)(...input));\n\nexport const csg_polygons_union = (...input: CSGInput[]) => csg_polygons(csg_union(...input));\n","import type { Vec3 } from \"../math\";\nimport type { Polygon } from \"../geometry/geometry\";\n\nexport interface Model {\n  $matrix: DOMMatrixReadOnly;\n  $modelId: number;\n  $kind: MODEL_KIND;\n  $polygons: Polygon[] | null;\n  _update?: () => DOMMatrixReadOnly;\n  $vertexBegin?: number;\n  $vertexEnd?: number;\n}\n\nexport interface Lever {\n  $value: 0 | 1;\n  $lerpValue: number;\n  $lerpValue2: number;\n  $parent: Model;\n  _update: () => void;\n  $matrix?: DOMMatrixReadOnly;\n  $locMatrix?: DOMMatrixReadOnly;\n}\n\nexport interface Soul {\n  $value: 0 | 1;\n  _update: () => void;\n  $matrix?: DOMMatrixReadOnly;\n}\n\nexport type Circle = [number, number, number];\n\nexport const allModels: Model[] = [];\n\n/** Fixed number of levers */\n\nexport const levers: Lever[] = [];\n\n/** Fixed number of souls */\nexport const SOULS_COUNT = 13;\n\nexport const souls: Soul[] = [];\n\nexport const player_position_final: Vec3 = {\n  x: 0,\n  y: 0,\n  z: 0,\n};\n\nexport const MODEL_KIND_MESH = 0;\n\nexport const MODEL_KIND_GAME = 1;\n\nexport const MODEL_KIND_GAME_NO_ATTACH_PLAYER = 2;\n\nexport type MODEL_KIND = typeof MODEL_KIND_MESH | typeof MODEL_KIND_GAME | typeof MODEL_KIND_GAME_NO_ATTACH_PLAYER;\n\nexport const MODEL_ID_STATIC_WORLD = 1;\n\nexport const MODEL_ID_FIRST_BOAT = 2;\n\nexport const MODEL_ID_PLAYER_BODY = 37;\n\nexport const MODEL_ID_PLAYER_LEG0 = 38;\n\nexport const MODEL_ID_PLAYER_LEG1 = 39;\n\nexport const MODEL_ID_LEVER = 40;\n\nexport const MODEL_ID_SOUL_COLLISION = 41;\n\nexport const MODEL_ID_SOUL = 42;\n","import { lerp, angle_wrap_degrees, lerpneg, clamp, min } from \"../math\";\nimport { allModels, levers, souls, SOULS_COUNT } from \"./models\";\n\nexport const KEY_LEFT = 0;\n\nexport const KEY_FRONT = 1;\n\nexport const KEY_RIGHT = 2;\n\nexport const KEY_BACK = 3;\n\nexport const KEY_INTERACT = 5;\n\nexport const keyboard_downKeys: (boolean | 0 | 1 | undefined)[] = [];\n\nexport let souls_collected_count = 0;\n\n/** Minimum 15.3 frames per second */\nexport const GAME_TIME_MAX_DELTA_TIME = 0.066;\n\nexport let absoluteTime = 0;\n\nexport let gameTime = 0;\n\nexport let gameTimeDelta: number = GAME_TIME_MAX_DELTA_TIME;\n\nexport let mainMenuVisible: boolean | undefined;\n\nexport const setMainMenuVisible = (visible: boolean) => {\n  mainMenuVisible = visible;\n};\n\nlet _globalTime: number | undefined;\n\nlet _messageEndTime = 1;\n\nexport const damp = (speed: number) => 1 - Math.exp(-speed * gameTimeDelta);\n\nexport const lerpDamp = /* @__PURE__ */ (from: number, to: number, speed: number) => lerp(from, to, damp(speed));\n\nexport const gameTimeUpdate = (time: number) => {\n  const dt = (time - (_globalTime || time)) / 1000;\n  if (mainMenuVisible) {\n    gameTimeDelta = 0;\n    keyboard_downKeys[KEY_INTERACT] = 0;\n  } else {\n    gameTimeDelta = min(GAME_TIME_MAX_DELTA_TIME, dt);\n  }\n  gameTime += gameTimeDelta;\n  absoluteTime += dt;\n  _globalTime = time;\n};\n\n// export const gameTimeUpdate = (time: number) => {\n//   if (mainMenuVisible) {\n//     keyboard_downKeys[KEY_INTERACT] = 0;\n//   }\n//   const delta = (time - (_globalTime || time)) / 1000;\n//   if (delta >= 0.06) {\n//     gameTimeDelta = mainMenuVisible ? 0 : Math.min(GAME_TIME_MAX_DELTA_TIME, (time - (_globalTime || time)) / 1000);\n//     gameTime += gameTimeDelta;\n//     _globalTime = time;\n//   } else {\n//     gameTimeDelta = 0;\n//   }\n//   absoluteTime += delta;\n//   if (!_globalTime) {\n//     _globalTime = time;\n//   }\n// };\n\nexport const LOCAL_STORAGE_SAVED_GAME_KEY = \"DanteSP22\";\n\nexport let player_last_pulled_lever = 0;\n\nexport let rotatingPlatform1Rotation = 0;\n\nexport let rotatingPlatform2Rotation = 0;\n\nexport let rotatingHexCorridorRotation = 0;\n\nexport let game_completed: 0 | 1 = 0;\n\nexport let firstBoatLerp = 0;\n\nexport let secondBoatLerp = 0;\n\nconst showMessage = (message: string, duration: number) => {\n  if (_messageEndTime < Infinity) {\n    _messageEndTime = gameTime + duration;\n    h4.innerHTML = message;\n  }\n};\n\nexport const worldStateUpdate = () => {\n  const shouldRotatePlatforms = lerpneg(levers[12]!.$lerpValue, levers[13]!.$lerpValue);\n\n  rotatingHexCorridorRotation = lerp(\n    lerpDamp(rotatingHexCorridorRotation, 0, 1),\n    angle_wrap_degrees(rotatingHexCorridorRotation + gameTimeDelta * 60),\n    levers[5]!.$lerpValue - levers[6]!.$lerpValue2,\n  );\n\n  rotatingPlatform1Rotation = lerp(\n    lerpDamp(rotatingPlatform1Rotation, 0, 5),\n    angle_wrap_degrees(rotatingPlatform1Rotation + gameTimeDelta * 56),\n    shouldRotatePlatforms,\n  );\n\n  rotatingPlatform2Rotation = lerp(\n    lerpDamp(rotatingPlatform2Rotation, 0, 4),\n    angle_wrap_degrees(rotatingPlatform2Rotation + gameTimeDelta * 48),\n    shouldRotatePlatforms,\n  );\n\n  secondBoatLerp = lerpDamp(\n    secondBoatLerp,\n    levers[9]!.$lerpValue2,\n    0.2 + 0.3 * Math.abs(levers[9]!.$lerpValue2 * 2 - 1),\n  );\n\n  firstBoatLerp = lerpDamp(firstBoatLerp, game_completed ? lerpDamp(firstBoatLerp, -9, 1.5) : clamp(gameTime / 3), 1);\n\n  if (_messageEndTime && gameTime > _messageEndTime) {\n    _messageEndTime = 0;\n    h4.innerHTML = \"\";\n  }\n\n  if (levers[0]!.$value && levers[0]!.$lerpValue > 0.8) {\n    if (souls_collected_count < SOULS_COUNT) {\n      showMessage(\"Not leaving now, there are souls to catch!\", 3);\n      levers[0]!.$value = 0;\n    } else if (!game_completed) {\n      showMessage(\"Well done. They will be punished.<br>Thanks for playing\", Infinity);\n      game_completed = 1;\n    }\n  }\n\n  for (const model of allModels) {\n    if (model._update) {\n      model.$matrix = model._update();\n    }\n  }\n\n  for (const lever of levers) {\n    lever._update();\n  }\n\n  for (const soul of souls) {\n    soul._update();\n  }\n};\n\nexport const updateCollectedSoulsCounter = () => {\n  h3.innerHTML =\n    \"Souls: \" +\n    [0, \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"XIII\"][\n      (souls_collected_count = souls.reduce((acc, { $value }) => acc + $value, 0))\n    ]! +\n    \" / XIII\";\n};\n\nexport const loadGame = () => {\n  try {\n    const [savedLevers, savedSouls, savedLastPulledLever, savedGameTime, savedSecondBoatLerp] = JSON.parse(\n      localStorage[LOCAL_STORAGE_SAVED_GAME_KEY]!,\n    );\n    levers.map(\n      (lever, index) =>\n        (lever.$lerpValue = lever.$lerpValue2 = lever.$value = index ? ((savedLevers[index] | 0) as 0 | 1) : 0),\n    );\n    souls.map((soul, index) => (soul.$value = (savedSouls[index] | 0) as 0 | 1));\n    player_last_pulled_lever = savedLastPulledLever;\n    gameTime = savedGameTime;\n    secondBoatLerp = savedSecondBoatLerp;\n  } catch (e) {\n    if (DEBUG) {\n      console.log(e);\n    }\n  }\n  firstBoatLerp = clamp(player_last_pulled_lever);\n};\n\nexport const saveGame = () => {\n  localStorage[LOCAL_STORAGE_SAVED_GAME_KEY] = JSON.stringify([\n    levers.map(({ $value }) => $value),\n    souls.map(({ $value }) => $value),\n    player_last_pulled_lever,\n    gameTime,\n    secondBoatLerp,\n  ]);\n};\n\nexport const onSoulCollected = () => {\n  showMessage(\n    [\n      ,\n      \"Mark Zuckemberg<br>made the world worse\",\n      ,\n      \"Andrzej Mazur<br>for the js13k competition\",\n      \"Donald Trump<br>lies\",\n      \"Kim Jong-un<br>Dictator, liked pineapple on pizza\",\n      \"Maxime Euziere<br>forced me to finish this game\",\n      \"She traded NFTs apes\",\n      ,\n      \"Vladimir Putin<br>evil war\",\n      \"He was not a good person\",\n      ,\n      \"Salvatore Previti<br>made this evil game<br><br>Done. Go back to the boat\",\n    ][souls_collected_count] || 'Catched a \"crypto bro\".<br>\"Web3\" is all scam, lies and grift',\n    souls_collected_count && souls_collected_count < 12 ? 5 : 7,\n  );\n\n  updateCollectedSoulsCounter();\n  saveGame();\n};\n\nexport const onPlayerPullLever = (leverIndex: number) => {\n  if (DEBUG) {\n    console.log(\"switch lever \" + leverIndex + \" = \" + levers[leverIndex]?.$value);\n  }\n\n  if (leverIndex) {\n    showMessage(\"* click *\", 1);\n  }\n  player_last_pulled_lever = leverIndex;\n  saveGame();\n};\n","import { min, angle_lerp_degrees, DEG_TO_RAD, identity, type Vec3Optional, vec3_distance, clamp } from \"../math\";\nimport { cylinder, polygons_transform, type Polygon } from \"../geometry/geometry\";\nimport {\n  levers,\n  souls,\n  allModels,\n  MODEL_ID_FIRST_BOAT,\n  MODEL_KIND_GAME,\n  type Circle,\n  type Lever,\n  type Model,\n  type Soul,\n  type MODEL_KIND,\n  player_position_final,\n} from \"./models\";\nimport {\n  keyboard_downKeys,\n  KEY_INTERACT,\n  onPlayerPullLever,\n  lerpDamp,\n  gameTimeDelta,\n  gameTime,\n  onSoulCollected,\n} from \"./world-state\";\n\nconst LEVER_SENSITIVITY_RADIUS = 3;\nconst SOUL_SENSITIVITY_RADIUS = 1.55;\n\nexport const material = NO_INLINE(\n  (r: number, g: number, b: number, a: number = 0): number =>\n    ((a * 255) << 24) | ((b * 255) << 16) | ((g * 255) << 8) | (r * 255),\n);\n\nexport let currentEditModel: Model;\n\nexport const newModel = (fn: (model: Model) => void, $kind: MODEL_KIND = MODEL_KIND_GAME) => {\n  const previousModel = currentEditModel;\n  const model: Model = {\n    $matrix: identity,\n    $modelId: allModels.length,\n    $kind,\n    $polygons: [],\n  };\n  allModels.push((currentEditModel = model));\n  fn(model);\n  currentEditModel = previousModel;\n  return model;\n};\n\nexport const meshAdd = (\n  polygons: Polygon<Readonly<Vec3Optional>>[],\n  transform: DOMMatrixReadOnly = identity,\n  color?: number | undefined,\n) => currentEditModel.$polygons!.push(...polygons_transform(polygons, transform, color));\n\nexport const newLever = (transform: DOMMatrixReadOnly): void => {\n  const $parent = currentEditModel;\n  const index = levers.length;\n  const lever: Lever = {\n    $value: 0,\n    $lerpValue: 0,\n    $lerpValue2: 0,\n    $parent,\n    _update: () => {\n      const { $value, $lerpValue, $lerpValue2 } = lever;\n      const locMatrix = $parent.$matrix.multiply(transform);\n      lever.$locMatrix = locMatrix;\n\n      if (\n        vec3_distance(locMatrix.transformPoint(), player_position_final) < LEVER_SENSITIVITY_RADIUS &&\n        keyboard_downKeys[KEY_INTERACT]\n      ) {\n        if ($lerpValue < 0.3 || $lerpValue > 0.7) {\n          lever.$value = $value ? 0 : 1;\n          onPlayerPullLever(index);\n        }\n      }\n\n      lever.$lerpValue = lerpDamp($lerpValue, $value, 4);\n      lever.$lerpValue2 = lerpDamp($lerpValue2, $value, 1);\n      lever.$matrix = locMatrix.rotate(lever.$lerpValue * 60 - 30, 0).translateSelf(0, 1);\n    },\n  };\n  levers.push(lever);\n\n  meshAdd(cylinder(5), transform.translate(-0.2).rotate(90, 90).scale(0.4, 0.1, 0.5), material(0.4, 0.5, 0.5));\n  meshAdd(cylinder(5), transform.translate(0.2).rotate(90, 90).scale(0.4, 0.1, 0.5), material(0.4, 0.5, 0.5));\n  meshAdd(cylinder(), transform.translate(0, -0.4).scale(0.5, 0.1, 0.5), material(0.5, 0.5, 0.4));\n};\n\nexport const newSoul = (transform: DOMMatrixReadOnly, ...walkingPath: number[][]) => {\n  const parentModel = currentEditModel;\n  const index = souls.length;\n  const circles = (walkingPath as Circle[]).map(([x, z, w]) => ({ x, z, w }));\n  let circle = circles[0]!;\n  let { x: targetX, z: targetZ } = circle;\n  let soulX = targetX;\n  let soulZ = targetZ;\n  let dirX = -1;\n  let dirZ = 0;\n  let randAngle = 0;\n  let lookAngle = 0;\n  let prevX = 0;\n  let prevZ = 0;\n  let velocity = 3;\n  let wasInside: boolean | undefined | 1 = 1;\n\n  const soul: Soul = {\n    $value: 0,\n    _update: () => {\n      if (!soul.$value) {\n        let isInside: boolean | undefined;\n        let contextualVelocity = 1;\n        let mindist = Infinity;\n\n        for (const c of circles) {\n          const { x, z, w } = c;\n          const distance = Math.hypot(targetX - x, targetZ - z);\n          const circleSDF = distance - w;\n          isInside ||= distance < w;\n          if (circleSDF > 0 && circleSDF < mindist) {\n            mindist = circleSDF;\n            circle = c;\n          }\n          contextualVelocity = min(contextualVelocity, distance / w);\n        }\n\n        if (!isInside) {\n          const { x, z, w } = circle;\n          const ax = targetX - x;\n          const az = targetZ - z;\n          let magnitude = Math.hypot(ax, az);\n          let angle = Math.atan2(-az, ax);\n          if (wasInside) {\n            randAngle = ((Math.random() - 0.5) * Math.PI) / 2;\n            velocity = clamp(velocity / (1 + Math.random()));\n          }\n          angle += randAngle;\n          dirX = -Math.cos(angle);\n          dirZ = Math.sin(angle);\n          if (magnitude > 0.1) {\n            // limit the vector length to the circle radius, as a security measure\n            magnitude = min(magnitude, w) / (magnitude || 1);\n            targetX = ax * magnitude + x;\n            targetZ = az * magnitude + z;\n          }\n        }\n\n        wasInside = isInside;\n\n        velocity = lerpDamp(velocity, (1 - contextualVelocity) * 6 + 3, contextualVelocity + 3);\n        soulX = lerpDamp(soulX, (targetX = lerpDamp(targetX, targetX + dirX, velocity)), velocity);\n        soulZ = lerpDamp(soulZ, (targetZ = lerpDamp(targetZ, targetZ + dirZ, velocity)), velocity);\n\n        lookAngle = angle_lerp_degrees(\n          lookAngle,\n          Math.atan2(soulX - prevX, soulZ - prevZ) / DEG_TO_RAD - 180,\n          3 * gameTimeDelta,\n        );\n\n        prevX = soulX;\n        prevZ = soulZ;\n\n        const soulPos = (soul.$matrix = parentModel.$matrix.multiply(\n          transform.translate(soulX, 0, soulZ).rotateSelf(0, lookAngle, Math.sin(gameTime * 1.7) * 7),\n        )).transformPoint();\n\n        if (vec3_distance(soulPos, player_position_final) < SOUL_SENSITIVITY_RADIUS) {\n          soul.$value = 1;\n          onSoulCollected();\n        }\n      }\n\n      if (soul.$value) {\n        soul.$matrix = allModels[MODEL_ID_FIRST_BOAT]!.$matrix.translate(\n          (index % 4) * 1.2 - 1.7 + Math.sin(gameTime + index) / 7,\n          -2,\n          -5.5 + ((index / 4) | 0) * 1.7 + Math.abs((index % 4) - 2) + Math.cos(gameTime / 1.5 + index) / 6,\n        );\n      }\n    },\n  };\n\n  if (DEBUG_FLAG0) {\n    for (const c of circles) {\n      meshAdd(cylinder(12), transform.translate(c.x, -1.7, c.z).scale(c.w, 0.01, c.w), material(0.3, 0.3, 0.38));\n    }\n  }\n\n  souls.push(soul);\n};\n","import { clamp, integers_map, lerpneg, max, min, identity } from \"../math\";\nimport {\n  GQuad,\n  cylinder,\n  polygons_transform,\n  polygon_regular,\n  sphere,\n  cylinder_sides,\n  polygon_transform,\n  type Polygon,\n} from \"../geometry/geometry\";\nimport { csg_union, csg_polygons_subtract } from \"../geometry/csg\";\nimport {\n  levers,\n  MODEL_KIND_MESH,\n  MODEL_KIND_GAME_NO_ATTACH_PLAYER,\n  MODEL_ID_FIRST_BOAT,\n  MODEL_ID_PLAYER_BODY,\n  MODEL_ID_PLAYER_LEG0,\n  MODEL_ID_PLAYER_LEG1,\n  MODEL_ID_LEVER,\n  MODEL_ID_SOUL_COLLISION,\n  MODEL_ID_SOUL,\n  souls,\n} from \"./models\";\nimport { currentEditModel, material, meshAdd, newLever, newModel, newSoul } from \"./models-factory\";\nimport {\n  gameTime,\n  firstBoatLerp,\n  secondBoatLerp,\n  rotatingHexCorridorRotation,\n  rotatingPlatform1Rotation,\n  rotatingPlatform2Rotation,\n} from \"./world-state\";\n\nconst checkModelId = DEBUG\n  ? (name: string, expectedId: number) => {\n      console.log(`model ${name} id: ${currentEditModel.$modelId}`);\n      if (currentEditModel.$modelId !== expectedId) {\n        throw new Error(`Model ${name} id should be ${expectedId} but is ${currentEditModel.$modelId}`);\n      }\n    }\n  : () => {};\n\nexport const build_life_the_universe_and_everything = (): 42 | void => {\n  if (DEBUG) {\n    console.time(\"build_life_the_universe_and_everything\");\n  }\n  const HORN_STACKS = 10;\n\n  const hornsMatrices = integers_map(HORN_STACKS + 1, (i: number) =>\n    identity\n      .translate(Math.sin((i / HORN_STACKS) * Math.PI), i / HORN_STACKS)\n      .rotate(10 * (i / HORN_STACKS))\n      .scale(1.0001 - i / HORN_STACKS, 0, 1 - i / HORN_STACKS),\n  );\n\n  const hornPolygons = integers_map(HORN_STACKS, (i) =>\n    cylinder_sides(\n      polygon_transform(polygon_regular(18), hornsMatrices[i]!).reverse(),\n      polygon_transform(polygon_regular(18), hornsMatrices[i + 1]!),\n      1,\n    ),\n  ).flat();\n\n  // Initialize the full screen triangle for the sky. Must be the first model.\n\n  newModel(() => meshAdd([GQuad.slice(1)], identity.translate(-2).scale3d(3).rotate(90, 0)), MODEL_KIND_MESH);\n\n  newModel(() => {\n    const getBoatAnimationMatrix = (x: number, y: number, z: number) =>\n      identity\n        .translate(x + Math.sin(gameTime + 2) / 5, y + Math.sin(gameTime * 0.8) / 3, z)\n        .rotateSelf(Math.sin(gameTime) * 2, Math.sin(gameTime * 0.7), Math.sin(gameTime * 0.9));\n\n    const makeBigArcPolygons = (height: number) =>\n      csg_polygons_subtract(\n        polygons_transform(cylinder(), identity.translate(0, -height / 2).scale(6, height - 1, 2.2)),\n        polygons_transform(cylinder(), identity.translate(0, -height / 2 - 6).scale(4, height - 3, 4)),\n        polygons_transform(\n          cylinder(32, 1),\n          identity\n            .translate(0, height / 2 - 9)\n            .rotate(90, 0, 90)\n            .scale3d(4),\n        ),\n      );\n\n    const boatPolygons = csg_polygons_subtract(\n      polygons_transform(\n        cylinder(20, 1, 1.15, 1),\n        identity.translate(0, -3).scale(3.5, 1, 3.5),\n        material(0.7, 0.4, 0.25, 0.7),\n      ),\n      polygons_transform(\n        cylinder(20, 1, 1.3, 1),\n        identity.translate(0, -2.5).scale(2.6, 1, 3),\n        material(0.7, 0.4, 0.25, 0.2),\n      ),\n      polygons_transform(cylinder(), identity.translate(4, -1.2).scale3d(2), material(0.7, 0.4, 0.25, 0.3)),\n    );\n\n    const gateBarsPolygons = integers_map(7, (i) =>\n      polygons_transform(\n        cylinder(6, 1),\n        identity.translate(4 * (i / 6 - 0.5), 3).scale(0.2, 3, 0.2),\n        material(0.3, 0.3, 0.38),\n      ),\n    ).flat();\n\n    // ========= FIRST BOAT (modelId:2) ========= //\n\n    newModel((model) => {\n      checkModelId(\"FIRST_BOAT\", MODEL_ID_FIRST_BOAT);\n      model._update = () => getBoatAnimationMatrix(-12, 4.2, -66 + firstBoatLerp * 40);\n      meshAdd(boatPolygons);\n\n      // LEVER 0 - lever over the first boat\n      newLever(identity.translate(0, -3, 4));\n    });\n\n    // LEVER 1 - lever for the first gate, after the first boat\n    newLever(identity.translate(-5.4, 1.5, -19).rotate(0, -90));\n\n    // ========= WORLD! ========= //\n\n    // SOUL 0 - soul after first boat\n    newSoul(identity.translate(-0.5, 2.8, -20), [0, 0, 2.5], [0, -3, 2.5]);\n\n    // SOUL 1 - soul after first gate\n    newSoul(\n      identity.translate(0, 2.8),\n      [5, 10, 3],\n      [-5, 10, 3],\n      ...polygon_regular(18).map(({ x, z }) => [x * 7, z * 10, 4.5 - Math.abs(x) * 2]),\n    );\n\n    // first boat attachment\n\n    meshAdd(cylinder(), identity.translate(-5, -0.2, -26).scale(3.2, 1, 2.5).skewX(3), material(0.8, 0.8, 0.8, 0.2));\n\n    // gate columns\n    GQuad.map(({ x, z }) =>\n      meshAdd(cylinder(6), identity.translate(x * 3, 3, z * 15).scale(0.7, 4, 0.7), material(0.6, 0.3, 0.3, 0.4)),\n    );\n\n    // in and out\n    [-23, 22].map((z) => meshAdd(cylinder(), identity.translate(0, 0, z).scale(3, 1, 8), material(0.9, 0.9, 0.9, 0.2)));\n\n    [-15, 15].map((z, i) => {\n      //  gate top\n      meshAdd(cylinder(), identity.translate(0, 6.3, z).scale(4, 0.3, 1), material(0.3, 0.3, 0.3, 0.4));\n      //  gate bottom\n      meshAdd(cylinder(), identity.translate(0, 1, z).scale(3, 0.2, 0.35), material(0.5, 0.5, 0.5, 0.3));\n      // in and out gate bars\n      newModel((model) => {\n        model._update = () => identity.translate(0, 0, z).scale(1, clamp(1.22 - levers[i + 1]!.$lerpValue), 1);\n        meshAdd(gateBarsPolygons);\n      });\n    });\n\n    // horns\n\n    integers_map(5, (i) =>\n      integers_map(2, (j) =>\n        meshAdd(\n          hornPolygons,\n          identity\n            .translate((j - 0.5) * 18.5, 0, i * 4.8 - 9.5)\n            .rotate(0, 180 - j * 180)\n            .scale(1.2, 10, 1.2),\n          material(1, 1, 0.8, 0.2),\n        ),\n      ),\n    );\n\n    meshAdd(cylinder(), identity.translate(3, 1.5, -20).scale(0.5, 2, 5), material(0.7, 0.7, 0.7, 0.2));\n\n    // first lever pad\n    meshAdd(\n      cylinder(),\n      identity.translate(-3.4, -0.2, -19).scale(2, 1, 1.5).rotate(0, -90),\n      material(0.75, 0.75, 0.75, 0.2),\n    );\n    meshAdd(cylinder(5), identity.translate(-5.4, 0, -19).scale(2, 1, 2).rotate(0, -90), material(0.6, 0.3, 0.3, 0.4));\n\n    // descent\n\n    meshAdd(\n      cylinder(),\n      identity.rotate(0, 60).translate(14.8, -1.46, -1).rotate(-30).scale(4, 0.6, 4.5),\n      material(0.8, 0.2, 0.2, 0.5),\n    );\n\n    // base\n\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          // lower base\n          polygons_transform(\n            cylinder(6, 0, 0, 0.3),\n            identity.translate(8, -3, -4).scale(13, 1, 13),\n            material(0.7, 0.7, 0.7, 0.2),\n          ),\n\n          // hole extension\n          polygons_transform(cylinder(6), identity.translate(0, -8).scale(9, 8, 8), material(0.4, 0.2, 0.5, 0.5)),\n\n          // middle base\n          polygons_transform(\n            cylinder(6, 0, 0, 0.3),\n            identity.translate(0, -0.92).scale(13, 2, 13),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n        ),\n        // hole\n        polygons_transform(cylinder(5), identity.scale(5, 30, 5), material(0.4, 0.2, 0.6, 0.5)),\n\n        // smooth hole\n        polygons_transform(\n          cylinder(5, 0, 1.5),\n          identity.translate(0, 1).scale(4.5, 0.3, 4.5),\n          material(0.7, 0.5, 0.9, 0.2),\n        ),\n\n        // descent cut\n        polygons_transform(\n          cylinder(),\n          identity.rotate(0, 60).translate(14, 0.7, -1).rotate(-35).scale(2, 2, 2),\n          material(0.5, 0.5, 0.5, 0.5),\n        ),\n\n        // lower lever pad\n        polygons_transform(\n          cylinder(6),\n          identity.translate(15, -1.5, 4).scale(3.5, 1, 3.5),\n          material(0.5, 0.5, 0.5, 0.5),\n        ),\n      ),\n    );\n\n    // moving central platform in the first level\n\n    newModel((model) => {\n      model._update = () =>\n        identity.translate(\n          0,\n          levers[3]!.$lerpValue > 0.01\n            ? (Math.cos(gameTime * 1.5) * 5 + 2) * levers[3]!.$lerpValue2 * (1 - levers[2]!.$lerpValue) +\n                (1 - levers[3]!.$lerpValue) * -15\n            : // invisible\n              -500,\n          0,\n        );\n      meshAdd(cylinder(5), identity.translate(0, -0.2).scale(5, 1, 5), material(0.6, 0.65, 0.7, 0.3));\n\n      // LEVER 2 - lever over the central moving platform\n      newLever(identity.translate(0, 1.2));\n    });\n\n    // LEVER 3, lever in the descent of the first level\n    newLever(identity.translate(15, -2, 4));\n\n    // ******** LEVEL 2 ********\n\n    const level2Oscillation = () => min(levers[2]!.$lerpValue2, 1 - levers[4]!.$lerpValue2);\n\n    const blackPlatform = (freq: number, amplitude: number, pz: number) =>\n      newModel((model) => {\n        model._update = () =>\n          identity.translate(level2Oscillation() * Math.sin(freq * 3 + gameTime * freq) * amplitude);\n        GQuad.map(({ x, z }) => {\n          // column body\n          meshAdd(\n            cylinder(11, 1),\n            identity.translate(x * 4, 4, pz + z * 4).scale(0.8, 3, 0.8),\n            material(0.5, 0.3, 0.7, 0.6),\n          );\n          // column top\n          meshAdd(cylinder(), identity.translate(x * 4, 7, pz + z * 4).scale(1, 0.3), material(0.5, 0.5, 0.5, 0.3));\n        });\n\n        meshAdd(\n          csg_polygons_subtract(\n            polygons_transform(cylinder(), identity.translate(0, 0, pz).scale(5, 1, 5), material(0.8, 0.8, 0.8, 0.3)),\n            ...[-1, 1].map((i) =>\n              polygons_transform(\n                cylinder(),\n                identity\n                  .translate(5 * i, 0.2, pz)\n                  .rotate(i * -30)\n                  .scale(4, 1, 2),\n                material(0.8, 0.8, 0.8, 0.3),\n              ),\n            ),\n          ),\n        );\n        // bottom\n        meshAdd(cylinder(), identity.translate(0, -3, pz).scale(8, 2, 8), material(0.4, 0.4, 0.4, 0.3));\n      });\n\n    blackPlatform(0.7, 12, 35);\n    blackPlatform(1, 8.2, 55);\n\n    // central oscillating platform\n    newModel((model) => {\n      model._update = () => identity.translate(level2Oscillation() * Math.sin(gameTime / 1.5 + 2) * 12);\n      meshAdd(\n        csg_polygons_subtract(\n          csg_union(\n            polygons_transform(cylinder(), identity.scale(1.5, 1, 5), material(0.9, 0.9, 0.9, 0.2)),\n            polygons_transform(cylinder(6), identity.scale(4, 1, 5), material(0.9, 0.9, 0.9, 0.2)),\n            polygons_transform(cylinder(), identity.translate(0, -2).scale(2, 3.2, 1.9), material(0.3, 0.8, 0.5, 0.5)),\n            polygons_transform(\n              cylinder(16, 1, 0, 4),\n              identity.scale(1, 1, 1.5).rotate(0, 90),\n              material(0.9, 0.9, 0.9, 0.2),\n            ),\n          ),\n          polygons_transform(cylinder(), identity.scale(1.3, 10, 1.3), material(0.2, 0.7, 0.4, 0.6)),\n        ),\n        identity.translate(0, 0, 45),\n      );\n\n      // SOUL 2 - soul over the central oscillating platform in the second level\n      newSoul(identity.translate(0, 2.8, 45), [0, 0, 4.5]);\n    });\n\n    const level3Oscillation = () =>\n      clamp(1 - level2Oscillation() * 5) * lerpneg(levers[4]!.$lerpValue, levers[5]!.$lerpValue);\n\n    // ******** LEVEL 3 ********\n\n    meshAdd(cylinder(), identity.translate(-21.1 + 2.45, -3, 55).scale(2.45, 1.4, 2.7), material(0.9, 0.9, 0.9, 0.2));\n\n    // triangle platform\n\n    newModel((model) => {\n      model._update = () => identity.translate((1 - level2Oscillation()) * 9.8);\n\n      meshAdd(cylinder(3), identity.translate(-23, -1.7, 55.8).scale(5, 0.7, 8.3), material(0.3, 0.6, 0.6, 0.2));\n      meshAdd(cylinder(8), identity.translate(-23, -2.2, 66.5).scale(1.5, 1.2, 1.5), material(0.8, 0.8, 0.8, 0.2));\n      meshAdd(cylinder(), identity.translate(-23, -3, 55).scale(5.2, 1.7, 3), material(0.5, 0.5, 0.5, 0.3));\n      meshAdd(cylinder(), identity.translate(-23, -2.2, 62).scale(3, 1, 4), material(0.5, 0.5, 0.5, 0.3));\n\n      newLever(identity.translate(-23, -0.5, 66.5));\n    });\n\n    // vertically oscillating mini platforms\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, level3Oscillation() * Math.sin(gameTime * (1.5 * 0.9)) * 4);\n\n      meshAdd(cylinder(), identity.translate(-21.1 - 1.45, -3, 55).scale(1.45, 1.4, 2.7), material(0.7, 0.7, 0.7, 0.2));\n\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(cylinder(), identity.scale(3, 1.4, 2.7)),\n          polygons_transform(cylinder(), identity.scale(1.2, 8, 1.2)),\n        ),\n        identity.translate(-33, -3, 55),\n        material(0.7, 0.7, 0.7, 0.2),\n      );\n    });\n\n    // horizontaly oscillating mini platforms\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, 0, level3Oscillation() * Math.sin(gameTime * 0.9) * 8);\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(\n            cylinder(),\n            identity.translate(-27, -3, 55).scale(3, 1.4, 2.7),\n            material(0.9, 0.9, 0.9, 0.2),\n          ),\n          polygons_transform(cylinder(), identity.translate(-27, -3, 55).scale(1, 3), material(0.9, 0.9, 0.9, 0.2)),\n        ),\n      );\n\n      meshAdd(cylinder(), identity.translate(-39, -3, 55).scale(3, 1.4, 2.7), material(0.9, 0.9, 0.9, 0.2));\n    });\n\n    // hex corridor door\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, levers[4]!.$lerpValue2 * -6.5);\n      meshAdd(\n        cylinder(6),\n        identity.translate(-44.5, 0, 55).rotate(90, 90).rotate(0, 90).scale(5.9, 0.5, 5.9),\n        material(0.7, 0.7, 0.7, 0.4),\n      );\n    });\n\n    newLever(identity.translate(-55, -1.1, 46).rotate(0, 90));\n\n    meshAdd(cylinder(6), identity.translate(-61.3, -2.4, 49).scale(3, 1, 5), material(0.4, 0.6, 0.6, 0.3));\n    meshAdd(cylinder(7), identity.translate(-57, -2.6, 46).scale(4, 1, 4), material(0.8, 0.8, 0.8, 0.3));\n\n    // hex corridor\n\n    const hexCorridorPolygons = [\n      ...polygons_transform(cylinder(), identity.translate(0, -3).scale(11, 1.4, 3), material(0.9, 0.9, 0.9, 0.2)),\n      ...csg_polygons_subtract(\n        polygons_transform(cylinder(6), identity.rotate(90).scale(6, 8, 6), material(0.3, 0.6, 0.6, 0.3)),\n        polygons_transform(\n          cylinder(4, 0, 0.01),\n          identity.translate(0, 6).scale(12, 2, 0.75).rotate(0, 45),\n          material(0.3, 0.6, 0.6, 0.3),\n        ),\n        polygons_transform(cylinder(6), identity.rotate(90).scale(5, 12, 5), material(0.3, 0.6, 0.6, 0.3)),\n        ...[5, 0, -5].map((x) =>\n          polygons_transform(\n            cylinder(5),\n            identity.translate(x, 2.5).rotate(90, 0, 36).scale(1.8, 10, 1.8),\n            material(0.3, 0.6, 0.6, 0.3),\n          ),\n        ),\n      ),\n    ];\n\n    meshAdd(hexCorridorPolygons, identity.translate(-53, 0, 55));\n\n    // rotating hex corridor\n\n    newModel((model) => {\n      model._update = () => {\n        return identity\n          .translate(-75, (1 - levers[5]!.$lerpValue2) * (1 - levers[6]!.$lerpValue) * 3, 55)\n          .rotate(180 * (1 - levers[5]!.$lerpValue2) + rotatingHexCorridorRotation, 0);\n      };\n      meshAdd(hexCorridorPolygons);\n    }, MODEL_KIND_GAME_NO_ATTACH_PLAYER);\n\n    // connection from rotating hex corridor to platforms\n\n    meshAdd(\n      cylinder(),\n      identity.translate(-88.3, -5.1, 55).rotate(-30).scale(5, 1.25, 4.5),\n      material(0.7, 0.7, 0.7, 0.2),\n    );\n\n    meshAdd(\n      cylinder(3, 0, -0.5),\n      identity.translate(-88.4, -3.9, 55).rotate(0, -90, 17).scale(3, 1.45, 5.9),\n      material(0.8, 0.8, 0.8, 0.2),\n    );\n\n    // platform after the rotating hex corridor\n\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          // base\n          polygons_transform(\n            cylinder(),\n            identity.translate(-100, -2.5, 55).scale(8, 1, 8),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n          // right path to the boat\n          polygons_transform(\n            cylinder(),\n            identity.translate(-113, -2.6, 55).scale(6.2, 1.1, 3).skewX(3),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n          // straiht line\n          polygons_transform(\n            cylinder(),\n            identity.translate(-100, -2.6, 70).scale(3, 1.1, 7),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n          // 45 degrees detour\n          polygons_transform(\n            cylinder(),\n            identity.translate(-96, -2.6, 73).rotate(0, 45).scale(3, 1.1, 5),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n          // 45 degrees detour hexagon\n          polygons_transform(\n            cylinder(6),\n            identity.translate(-88.79, -2.6, 80.21).scale(6, 1.1, 6).rotate(0, 15),\n            material(0.6, 0.6, 0.6, 0.3),\n          ),\n\n          // ascension\n          polygons_transform(\n            cylinder(),\n            identity.translate(-100, -1.1, 82.39).rotate(-15, 0).scale(3, 1.1, 6),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n          // ascension continuation\n          polygons_transform(\n            cylinder(),\n            identity.translate(-100, 0.42, 92).scale(3, 1.1, 4.1),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n        ),\n\n        // decorative octagon\n        polygons_transform(\n          cylinder(8),\n          identity.translate(-100, -1, 55).scale(7, 0.9, 7),\n          material(0.3, 0.3, 0.3, 0.4),\n        ),\n        polygons_transform(\n          cylinder(8),\n          identity.translate(-100, -2, 55).scale(4, 0.3, 4),\n          material(0.4, 0.4, 0.4, 0.5),\n        ),\n        polygons_transform(\n          cylinder(8),\n          identity.translate(-100, -3, 55).scale(0.6, 1, 0.6),\n          material(0.4, 0.4, 0.4, 0.5),\n        ),\n      ),\n    );\n\n    // SOUL 3 - soul in the central area, after the rotating hex corridor\n    newSoul(identity.translate(-100, 0.2, 55), [0, 0, 7.5], [-8, 0, 3.5], [-12, 0, 3.5], [-15, 0, 3.5]);\n\n    // SOUL 4 - soul after the central gate\n    newSoul(identity.translate(-89, 0.2, 80), [0, 0, 6]);\n\n    // first arc door\n\n    meshAdd(\n      csg_polygons_subtract(\n        polygons_transform(cylinder(), identity.translate(-100, 1, 63).scale(7.5, 4), material(0.5, 0.5, 0.5, 0.4)),\n        polygons_transform(cylinder(), identity.translate(-100, 0, 70).scale(2, 2, 10), material(0.5, 0.5, 0.5, 0.4)),\n        polygons_transform(\n          cylinder(20, 1),\n          identity.translate(-100, 2, 70).scale(2, 2, 10).rotate(90, 0),\n          material(0.5, 0.5, 0.5, 0.4),\n        ),\n      ),\n    );\n\n    // gate bars\n    newModel((model) => {\n      model._update = () => identity.translate(-99.7, -1.9, 63.5).scale(1, clamp(1.1 - levers[6]!.$lerpValue), 1);\n      meshAdd(gateBarsPolygons);\n    });\n\n    // hex columns\n\n    GQuad.map(({ x, z }) => {\n      meshAdd(\n        cylinder(6),\n        identity.translate(-100 + x * 7, -3, z * 7 + 55).scale(1, 8.1),\n        material(0.6, 0.15, 0.15, 0.8),\n      );\n      [4, -0.4].map((i) =>\n        meshAdd(\n          cylinder(6),\n          identity.translate(-100 + x * 7, i, z * 7 + 55).scale(1.3, 0.5, 1.3),\n          material(0.4, 0.2, 0.2, 0.8),\n        ),\n      );\n    });\n\n    // crystals\n\n    integers_map(7, (i) => {\n      meshAdd(\n        cylinder(((i * 23 + 1) % 5) + 5, 0, 0.55),\n        identity\n          .translate(-101 + Math.sin(i) * 5 + i, -2.3 - i, 44.9 - i * 2.8)\n          .scaleSelf(5 + i / 2, 1 + i / 6, 5 + i / 3),\n        material(0.5 - i / 17, 0.5 - (i & 1) / 9, 0.6, 0.3),\n      );\n    });\n\n    // crystals continuation pad\n\n    meshAdd(cylinder(), identity.translate(-87, -9.5, 24).scale(7, 1, 3), material(0.4, 0.5, 0.6, 0.4));\n\n    // lever pad\n\n    meshAdd(cylinder(4), identity.translate(-86, -9.2, 27).scale(5, 1, 5), material(0.5, 0.6, 0.7, 0.3));\n\n    meshAdd(cylinder(12, 1), identity.translate(-86, -9, 31).scale(1.5, 1, 1.5), material(0.3, 0.3, 0.4, 0.1));\n\n    newLever(identity.translate(-86, -7.5, 31));\n\n    // elevators\n\n    const shouldOscillate = () => lerpneg(levers[7]!.$lerpValue2, levers[6]!.$lerpValue2);\n\n    newModel((model) => {\n      model._update = () =>\n        identity.translate(\n          0,\n          (1 - max(levers[6]!.$lerpValue, levers[7]!.$lerpValue)) * 3.5 + shouldOscillate() * Math.sin(gameTime) * 5,\n        );\n      [0, 12, 24].map((x) =>\n        meshAdd(\n          cylinder(),\n          identity.translate(x - 76.9, x / -13 - 10, 24).scale(2.8, 1.5, 3),\n          material(0.2, 0.5, 0.6, 0.2),\n        ),\n      );\n    });\n\n    newModel((model) => {\n      model._update = () =>\n        identity.translate(\n          0,\n          shouldOscillate() * Math.sin(gameTime + 3) * 6,\n          Math.sin(gameTime * 0.6 + 1) * 6 * shouldOscillate(),\n        );\n      [6, 18].map((x) =>\n        meshAdd(\n          cylinder(),\n          identity.translate(x - 76.9, x / -13 - 10, 24).scale(2.8, 1.5, 3),\n          material(0.1, 0.4, 0.5, 0.2),\n        ),\n      );\n    });\n\n    // pad after elevators\n\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          // lever pad\n          polygons_transform(cylinder(5), identity.translate(0, 0, -7).scale(2, 1.2, 2), material(0.2, 0.4, 0.7, 0.3)),\n          // blue pentagon\n          polygons_transform(cylinder(5), identity.scale(9, 1.2, 9), material(0, 0.2, 0.3, 0.5)),\n          // base\n          polygons_transform(cylinder(), identity.scale(11, 1, 13), material(0.3, 0.4, 0.6, 0.3)),\n        ),\n        polygons_transform(cylinder(5), identity.scale(5.4, 5, 5.4), material(0, 0.2, 0.3, 0.5)),\n      ),\n      identity.translate(-38.9, -11.3, 17),\n    );\n\n    newLever(identity.translate(-38.9, -9.6, 10));\n\n    // central sculpture/monument\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, levers[7]!.$lerpValue2 * -7.3);\n\n      meshAdd(\n        csg_polygons_subtract(\n          csg_union(\n            polygons_transform(\n              cylinder(5),\n              identity.translate(0, 2).scale(5, 7, 5).skewY(8),\n              material(0.2, 0.4, 0.5, 0.5),\n            ),\n            polygons_transform(\n              cylinder(5),\n              identity.translate(0, 6).scale(1.1, 7, 1.1).skewY(-8),\n              material(0.25, 0.35, 0.5, 0.5),\n            ),\n            polygons_transform(\n              cylinder(5),\n              identity.translate(0, 9).scale(0.6, 7, 0.6).skewY(8),\n              material(0.35, 0.3, 0.5, 0.5),\n            ),\n          ),\n          polygons_transform(cylinder(5), identity.scale(4, 8, 4), material(0.2, 0.4, 0.5, 0.5)),\n          polygons_transform(\n            cylinder(5),\n            identity.translate(0, 5).scale(1.5, 1.5, 8).rotate(90, 0, 35),\n            material(0.2, 0.4, 0.5, 0.5),\n          ),\n        ),\n        identity.translate(-38.9, -11.3, 17),\n      );\n\n      // SOUL 5 - soul over the central sculpture/monument\n      newSoul(\n        identity.translate(-39.1, -0.6, 17).rotate(11),\n        ...polygon_regular(15).map(({ x, z }) => [x * 3, z * 3, 1.2]),\n      );\n    });\n\n    // columns\n\n    GQuad.map(({ x, z }) => {\n      meshAdd(\n        cylinder(14, 1),\n        identity.translate(x * 9 - 38.9, -7.3, z * 11 + 17).scale(1, 4),\n        material(0.25, 0.25, 0.25, 1),\n      );\n      [1.5, 8].map((y) =>\n        meshAdd(\n          cylinder(17, 1),\n          identity\n            .translate(x * 9 - 38.9, -7.3, z * 11 + 17)\n            .translate(0, y - 4)\n            .scale(1.5, 0.5, 1.5),\n          material(0.6, 0.6, 0.6, 0.3),\n        ),\n      );\n    });\n\n    // Grid with holes\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          // holed base\n          polygons_transform(\n            cylinder(6),\n            identity.translate(0, 0, -36).scale(15, 1.2, 15),\n            material(0.7, 0.7, 0.7, 0.3),\n          ),\n          // after monument continuation\n          polygons_transform(cylinder(), identity.translate(0, 0, -18).scale(4, 1.2, 6), material(0.45, 0.4, 0.6, 0.3)),\n        ),\n        ...integers_map(6, (z) =>\n          integers_map(6, (x) =>\n            polygons_transform(\n              cylinder(6),\n              identity.translate(x * 4.6 - 12 + 2 * (z & 1), 0, z * 4.6 - 50 + Math.sin(x * 4) * 2).scale(2, 5, 2),\n              material(0.7, 0.7, 0.7, 0.3),\n            ),\n          ),\n        ).flat(),\n      ),\n      identity.translate(-38.9, -11.3, 17),\n    );\n\n    // SOUL 6 - soul over the grid with hex holes\n    newSoul(identity.translate(-38.9, -8.4, -21), [-7, -2.5, 6], [6, -3, 6], [0, -5, 7]);\n\n    // Detour lever pad\n    meshAdd(cylinder(5), identity.translate(-84, -2, 85).scale(4, 0.8, 4).rotate(0, 10), material(0.8, 0.1, 0.25, 0.4));\n\n    // Detour lever\n    newLever(identity.translate(-84, -0.5, 85).rotate(0, 45));\n\n    // ******** SECOND BOAT ********\n\n    newModel((model) => {\n      model._update = () => getBoatAnimationMatrix(-123, 1.4, 55 + secondBoatLerp * -65);\n      meshAdd(boatPolygons);\n      newLever(identity.translate(0, -3, -4).rotate(0, 180));\n    });\n\n    // ******** LEVEL AFTER SECOND BOAT ********\n\n    // pushing rods\n\n    const shouldPushRods = () => lerpneg(levers[10]!.$lerpValue, levers[11]!.$lerpValue);\n    const shouldBlockRods = () => (1 - levers[10]!.$lerpValue) * (1 - shouldPushRods());\n\n    const pushingRod = csg_polygons_subtract(\n      polygons_transform(\n        cylinder(),\n        identity.translate(0, -0.5, 1).scale(1.15, 1.2, 6.5),\n        material(0.25, 0.25, 0.35, 0.3),\n      ),\n      polygons_transform(cylinder(3), identity.translate(0, 0, -5.5).scale(3, 2), material(0.6, 0.3, 0.4, 0.3)),\n      ...[-1.2, 1.2].map((i) =>\n        polygons_transform(\n          cylinder(),\n          identity.translate(i, -0.5, 1).scale(0.14, 0.3, 6.5),\n          material(0.7, 0.2, 0, 0.3),\n        ),\n      ),\n    );\n\n    newModel((model) => {\n      model._update = () =>\n        identity.translate(0, -2, shouldPushRods() * Math.abs(Math.sin(gameTime * 1.1)) * -8.5 + 10);\n      integers_map(2, (x) => meshAdd(pushingRod, identity.translate(-110 + x * 9 + (x & 1), 1.7, -12)));\n    });\n\n    newModel((model) => {\n      model._update = () =>\n        identity.translate(0, -2, shouldPushRods() * Math.abs(Math.sin(gameTime * 2.1)) * -8.5 + 10);\n      integers_map(2, (x) => meshAdd(pushingRod, identity.translate(-110 + (x + 2) * 9 + (x & 1), 1.7, -12)));\n    });\n\n    newModel((model) => {\n      model._update = () =>\n        identity.translate(\n          0,\n          -2,\n          max(shouldBlockRods(), shouldPushRods() * Math.abs(Math.sin(gameTime * 1.5))) * -8.5 + 10,\n        );\n      integers_map(3, (x) => meshAdd(pushingRod, identity.translate(-106 + x * 9, 1.7, -12)));\n    });\n\n    // pushing rods container\n\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          polygons_transform(cylinder(), identity.translate(26.5, -1.6, 10).scale(20, 2.08, 3)),\n          polygons_transform(cylinder(), identity.translate(26.5, -0.6, 10).scale(19, 2, 0.5)),\n        ),\n        ...integers_map(4, (x) =>\n          polygons_transform(cylinder(), identity.translate(13 + x * 9 + (x & 1), -0.8, 9).scale(1.35, 1.35, 9)),\n        ),\n        ...integers_map(3, (x) =>\n          polygons_transform(cylinder(), identity.translate(17 + x * 9, -0.8, 9).scale(1.35, 1.35, 9)),\n        ),\n      ),\n      identity.translate(-123, 0, -12),\n      material(0.5, 0.5, 0.6, 0.2),\n    );\n\n    // boat attachment\n\n    newLever(identity.translate(-116, -1.4, -18).rotate(0, 180));\n\n    meshAdd(cylinder(), identity.translate(-116, -2.6, -12).scale(3.2, 1.1, 4).skewX(3), material(0.8, 0.8, 0.8, 0.2));\n    meshAdd(cylinder(6), identity.translate(-116, -2.6, -16.5).scale(3.2, 0.8, 3), material(0.6, 0.5, 0.7, 0.2));\n\n    meshAdd(cylinder(), identity.translate(-115.5, -17, -12).scale(0.5, 15, 2.2), material(0.6, 0.6, 0.6, 0.3));\n\n    meshAdd(cylinder(8), identity.translate(-114, -17, -2).scale(2, 15, 2), material(0.6, 0.6, 0.6, 0.3));\n    meshAdd(cylinder(8), identity.translate(-79, -17, -2).scale(2, 15, 2), material(1, 1, 1, 0.3));\n\n    meshAdd(cylinder(), identity.translate(-77, -17, -50.5).scale(2.2, 15, 0.5), material(0.6, 0.6, 0.6, 0.3));\n\n    // arcs\n\n    integers_map(3, (i) => {\n      meshAdd(makeBigArcPolygons(16), identity.translate(i * 12 - 109, -9, -12), material(0.6, 0.6, 0.6, 0.3));\n\n      meshAdd(\n        makeBigArcPolygons(16),\n        identity.translate(-77, -9, i * -12 - 8 - 12).rotate(0, 90),\n        material(0.6, 0.6, 0.6, 0.3),\n      );\n    });\n\n    // tower\n\n    meshAdd(\n      csg_polygons_subtract(\n        polygons_transform(\n          cylinder(12),\n          identity.translate(-77, -14.5, -12).scale(4, 17.5, 4),\n          material(0.7, 0.7, 0.7, 0.2),\n        ),\n        polygons_transform(\n          cylinder(),\n          identity.translate(-79, 0.1, -12).scale(3.5, 2, 1.3),\n          material(0.4, 0.5, 0.6, 0.2),\n        ),\n        polygons_transform(\n          cylinder(),\n          identity.translate(-77, 0.1, -14).scale(1.5, 2, 2),\n          material(0.4, 0.5, 0.6, 0.2),\n        ),\n        polygons_transform(\n          cylinder(12),\n          identity.translate(-77, 3.1, -12).scale(3, 5, 3),\n          material(0.4, 0.5, 0.6, 0.2),\n        ),\n      ),\n    );\n\n    // internal pad\n\n    meshAdd(cylinder(), identity.translate(-84.9, -4.3, -40).rotate(12).scale(6, 1, 3), material(0.6, 0.6, 0.6, 0.3));\n    meshAdd(cylinder(9), identity.translate(-98, -18.4, -40).scale(2.5, 13.5, 2.5), material(0.5, 0.5, 0.5, 0.3));\n\n    meshAdd(\n      csg_polygons_subtract(\n        polygons_transform(cylinder(), identity.translate(-93, -5.8, -40).scale(9, 1, 5), material(0.8, 0.8, 0.8, 0.1)),\n        polygons_transform(\n          cylinder(9),\n          identity.translate(-98, -5.8, -40).scale(3, 8, 3),\n          material(0.7, 0.7, 0.7, 0.2),\n        ),\n      ),\n    );\n\n    newLever(identity.translate(-98, -4.4, -40).rotate(0, 90));\n\n    // SOUL 7 - soul after the second boat\n    newSoul(identity.translate(-115, 0.2, -12), [0, 0, 3.5]);\n\n    // SOUL 8 - soul in the internal pad after the pushing rods\n    newSoul(identity.translate(-93, -3, -28 - 12).rotate(4), [0, -2, 3.5], [0, 2, 3.5]);\n\n    // ******** LEVEL AFTER CENTRAL GATE ********\n\n    // base\n\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          polygons_transform(\n            cylinder(6, 0, 0, 0.6),\n            identity.translate(-100, 0.7, 105.5).scale(8, 1, 11),\n            material(0.7, 0.7, 0.7, 0.2),\n          ),\n          polygons_transform(\n            cylinder(),\n            identity.translate(-101.5, 0.7, 93.5).scale(10.5, 1, 2),\n            material(0.7, 0.7, 0.7, 0.2),\n          ),\n        ),\n        polygons_transform(\n          cylinder(5),\n          identity.translate(-100, 0.7, 113).scale(4, 3, 4),\n          material(0.7, 0.7, 0.7, 0.2),\n        ),\n      ),\n    );\n\n    // oscillating hex pads\n\n    const hexPadShouldOscillate = () => lerpneg(levers[8]!.$lerpValue2, levers[12]!.$lerpValue2);\n\n    integers_map(4, (i) =>\n      newModel((model) => {\n        model._update = () => {\n          const osc = hexPadShouldOscillate();\n          return identity.translate(\n            (i > 2 ? (1 - osc) * 2 + osc : 0) - 100,\n            osc * Math.sin(gameTime * 1.3 + i * 1.7) * (3 + i / 3) + 0.7,\n            (i & 1 ? -1 : 1) * (1 - levers[8]!.$lerpValue2) * (1 - levers[12]!.$lerpValue2) * -7 +\n              max(osc, 0.05) * Math.cos(gameTime * 1.3 + i * 7) * (4 - 2 * (1 - i / 3)) +\n              115,\n          );\n        };\n        meshAdd(\n          cylinder(6),\n          identity.translate(-14.6 - i * 4.8 - (i > 2 ? 2 : 0), -i / 2.3, -21.5).scale(2.6, 1, 2.5),\n          material(0.5 - i / 8, i / 12 + 0.5, 0.7, 0.3),\n        );\n      }),\n    );\n\n    // after the hex pads\n\n    // donut pad\n    newModel((model) => {\n      model._update = () => {\n        const osc = hexPadShouldOscillate();\n        return identity\n          .translate(\n            (1 - osc) * 2.5 - 139.7,\n            (1 - levers[8]!.$lerpValue) * -3 + osc * Math.sin(gameTime * 0.8) * -1 - 1.8,\n            93.5,\n          )\n          .rotateSelf(Math.cos(gameTime * 1.3) * (osc * 3 + 3), 0);\n      };\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(cylinder(10), identity.scale(6, 2, 6), material(0.1, 0.6, 0.5, 0.3)),\n          polygons_transform(cylinder(10), identity.scale(3.3, 6, 3.3), material(0.1, 0.6, 0.5, 0.5)),\n        ),\n      );\n\n      // second pad\n      meshAdd(cylinder(15, 1), identity.translate(-7.5).rotate(0, 90).scale(3, 2.3, 3), material(0.4, 0.4, 0.4, 0.3));\n      meshAdd(cylinder(10), identity.translate(-7.5).rotate(0, 90).scale(2, 2.5, 2), material(0.3, 0.8, 0.7, 0.3));\n      meshAdd(cylinder(5), identity.translate(-7.5).rotate(0, 90).scale(1, 3), material(0.5, 0.5, 0.5, 0.5));\n      newLever(identity.translate(-7.5).rotate(0, 90).translate(0, 3.4).rotate(0, 180));\n\n      // lateral horns\n      [-1, 1].map((i) =>\n        meshAdd(\n          hornPolygons,\n          identity\n            .rotate(-i * 90, 180, 90) //\n            .translate(0, 5)\n            .rotate(40) //\n            .scale(1.3, 10, 1.3), //\n          material(1, 1, 0.8, 0.2),\n        ),\n      );\n\n      // SOUL 9 - soul after the hex pads, in the hex donut with horns\n      newSoul(identity.translate(-5, 4), [0, -1.2, 1.7], [0, 1.2, 1.7]);\n    });\n\n    // far arc gate\n    [-1, 1].map((x) => {\n      meshAdd(\n        cylinder(12, 1),\n        identity.translate(-7.5 * x - 100, 3.7, 96).scale(0.8, 4, 0.8),\n        material(0.6, 0.24, 0.2, 0.5),\n      );\n\n      [7.2, 1.5].map((y) =>\n        meshAdd(\n          cylinder(15, 1),\n          identity.translate(-7.5 * x - 100, y + 0.7, 96).scale(1.1, 0.5, 1.1),\n          material(0.5, 0.24, 0.2, 0.4),\n        ),\n      );\n\n      meshAdd(\n        hornPolygons,\n        identity\n          .translate(x * -5 - 100, 1.7, 114.5)\n          .scale(1.2, 10, 1.2)\n          .rotate(0, 90 * x - 90),\n        material(1, 1, 0.8),\n      );\n\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(\n            cylinder(),\n            identity.translate(x * -4, 3.5, -0.5).scale(4, 4, 0.7),\n            material(0.5, 0.5, 0.5, 0.4),\n          ),\n          polygons_transform(cylinder(), identity.scale(3, 3, 10), material(0.6, 0.24, 0.2, 0.5)),\n          polygons_transform(\n            cylinder(28, 1),\n            identity.translate(0, 3, -5).scale(3, 4, 10).rotate(90, 0),\n            material(0.6, 0.24, 0.2, 0.5),\n          ),\n          polygons_transform(\n            cylinder(5),\n            identity\n              .translate(x * -5.3, 7)\n              .rotate(90, 0)\n              .scale(1.7, 5, 1.7),\n            material(0.6, 0.24, 0.2, 0.5),\n          ),\n          polygons_transform(\n            cylinder(5),\n            identity\n              .translate(x * -5.3, 3.8)\n              .rotate(90, 0, 35)\n              .scale(0.75, 5, 0.75),\n            material(0.6, 0.24, 0.2, 0.5),\n          ),\n        ),\n        identity.translate(x - 100, 0.7, 97),\n      );\n    });\n\n    // far arc gate door\n\n    // model._update = () => identity.translate(-99.7, -1.9, 63.5).scale(1, clamp01(1.1 - levers[6]!.$lerpValue), 1);\n\n    newModel((model) => {\n      model._update = () => identity.translate(-100, 0.6, 96.5).scale(0.88, 1.2 - levers[12]!.$lerpValue);\n      meshAdd(gateBarsPolygons);\n    });\n\n    // left continuation with hole for rotating corridor\n    meshAdd(\n      csg_polygons_subtract(\n        polygons_transform(\n          cylinder(),\n          identity.translate(-82.07, 0.8, 106).scale(11, 0.9, 2.2),\n          material(0.7, 0.7, 0.7, 0.1),\n        ),\n        polygons_transform(\n          cylinder(45, 1),\n          identity.translate(-81, 0.7, 106).scale3d(7.7),\n          material(0.7, 0.7, 0.7, 0.1),\n        ),\n      ),\n    );\n\n    // rotating platforms\n\n    // First rotating platform (with hole)\n    newModel((model) => {\n      model._update = () => identity.translate(-81, 0.6, 106).rotate(0, 40 + rotatingPlatform1Rotation);\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(cylinder(45, 1), identity.scale(7.5, 1, 7.5), material(0.45, 0.45, 0.45, 0.2)),\n          polygons_transform(\n            cylinder(),\n            identity.translate(0, 0, -5.5).scale(1.5, 3, 2.7),\n            material(0.45, 0.45, 0.45, 0.2),\n          ),\n        ),\n      );\n      meshAdd(cylinder(8), identity.translate(0, 2).scale(3, 1.5, 3).rotate(0, 22), material(0.7, 0.7, 0.7, 0.1));\n      meshAdd(cylinder(5), identity.translate(0, 2).scale(1, 2), material(0.3, 0.3, 0.3, 0.2));\n\n      // SOUL 10 - soul over the first rotating platform\n      newSoul(identity.translate(0, 3), ...polygon_regular(14).map(({ x, z }) => [x * 5.6, z * 5.6, 2]));\n    });\n\n    // Second rotating platform\n    newModel((model) => {\n      model._update = () => identity.translate(-65.8, 0.8, 106).rotate(0, rotatingPlatform2Rotation);\n\n      // rotating platform horns\n      [-1, 1].map((x) =>\n        meshAdd(\n          hornPolygons,\n          identity\n            .rotate(0, 90)\n            .translate(x * -5, 1, -0.5)\n            .scale(1.2, 10, 1.2)\n            .rotate(0, 90 * x + 90),\n          material(1, 1, 0.8),\n        ),\n      );\n\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(cylinder(28, 1), identity.translate(0, 2).scale(7.5, 1, 7.5), material(0.35, 0, 0, 0.3)),\n          polygons_transform(cylinder(), identity.scale(9, 5, 2), material(0.3, 0, 0, 0.3)),\n        ),\n      );\n\n      meshAdd(polygons_transform(cylinder(28, 1), identity.scale(7.5, 1, 7.5), material(0.45, 0.45, 0.45, 0.2)));\n      meshAdd(polygons_transform(cylinder(5), identity.translate(0, 1).scale(1, 0.2), material(0.3, 0.3, 0.3, 0.2)));\n    });\n\n    // Third rotating platform\n    newModel((model) => {\n      model._update = () => identity.translate(-50.7, 0.8, 106).rotate(0, 180 - rotatingPlatform2Rotation);\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(cylinder(28, 1), identity.translate(0, 2).scale(7.5, 1, 7.5), material(0.35, 0, 0, 0.3)),\n          polygons_transform(cylinder(), identity.translate(7).scale(9, 5, 2), material(0.3, 0, 0, 0.3)),\n          polygons_transform(cylinder(), identity.translate(0, 0, 7).scale(2, 5, 9), material(0.3, 0, 0, 0.3)),\n        ),\n      );\n      meshAdd(polygons_transform(cylinder(28, 1), identity.scale(7.5, 1, 7.5), material(0.45, 0.45, 0.45, 0.2)));\n      meshAdd(polygons_transform(cylinder(5), identity.translate(0, 1).scale(1, 0.2), material(0.3, 0.3, 0.3, 0.2)));\n    });\n\n    // Fourth rotating platform\n    newModel((model) => {\n      model._update = () => identity.translate(-50.7, 0.8, 91).rotate(0, 270 + rotatingPlatform2Rotation);\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(cylinder(28, 1), identity.translate(0, 2).scale(7.5, 1, 7.5), material(0.35, 0, 0, 0.3)),\n          polygons_transform(cylinder(), identity.translate(7).scale(9, 5, 2), material(0.3, 0, 0, 0.3)),\n          polygons_transform(cylinder(), identity.translate(0, 0, -7).scale(2, 5, 9), material(0.3, 0, 0, 0.3)),\n        ),\n      );\n      meshAdd(polygons_transform(cylinder(28, 1), identity.scale(7.5, 1, 7.5), material(0.45, 0.45, 0.45, 0.2)));\n      meshAdd(polygons_transform(cylinder(5), identity.translate(0, 1).scale(1, 0.2), material(0.3, 0.3, 0.3, 0.2)));\n    });\n\n    // rotating platforms connecting pads\n    meshAdd(cylinder(), identity.translate(-58, 1, 106).scale(2, 0.65, 2), material(0.7, 0.7, 0.7, 0.2));\n    meshAdd(cylinder(), identity.translate(-50.7, 1, 99).scale(2, 0.65, 1), material(0.7, 0.7, 0.7, 0.2));\n\n    // exit from the rotating platforms\n    meshAdd(cylinder(), identity.translate(-42, 0.4, 91).scale(5, 1, 2.5), material(0.7, 0.7, 0.7, 0.3));\n    meshAdd(cylinder(), identity.translate(-34.2, 0.4, 91).scale(3, 1, 3), material(0.7, 0.7, 0.7, 0.3));\n\n    newLever(identity.translate(-34, 2.7, 96).rotate(-12, 0));\n\n    // lever pad\n    meshAdd(cylinder(5), identity.translate(-34, 0.2, 96).scale(3, 2, 4).rotate(-20, 0), material(0.2, 0.5, 0.5, 0.6));\n\n    // ******** LEVEL AFTER THE ROTATING PLATFORMS ********\n\n    // jumping pads\n\n    [material(0.1, 0.55, 0.45, 0.2), material(0.2, 0.5, 0.5, 0.3), material(0.3, 0.45, 0.55, 0.4)].map((m, i) =>\n      newModel((model) => {\n        model._update = () => {\n          const v = lerpneg(levers[13]!.$lerpValue2, levers[14]!.$lerpValue2);\n          return identity.translate(\n            0,\n            (1 - levers[13]!.$lerpValue2) * (1 - levers[14]!.$lerpValue2) * (i ? 0 : 3) +\n              v * Math.sin(gameTime * 1.5 + i * 1.5) * 4,\n          );\n        };\n        meshAdd(cylinder(), identity.translate(-23.5, 0.5, 91 + 6.8 * i).scale(i === 1 ? 2 : 3.3, 1, 3.3), m);\n        if (i === 2) {\n          // in connection\n          meshAdd(cylinder(), identity.translate(-29.1, 0.4, 91).scale(2.1, 1, 3), material(0.7, 0.7, 0.7, 0.3));\n        }\n        if (i === 1) {\n          // out connections\n          meshAdd(\n            cylinder(),\n            identity.translate(-16.1, 0.5, 103.5).rotate(-3.5).scale(3.9, 0.8, 2).skewX(-1),\n            material(0.6, 0.6, 0.7, 0.3),\n          );\n        }\n      }),\n    );\n\n    // horns\n    [-1, 1].map((x) =>\n      meshAdd(\n        hornPolygons,\n        identity\n          .translate(x * -8, 1, 85)\n          .scale(1.2, 10, 1.2)\n          .rotate(0, 90 * x + 90),\n        material(1, 1, 0.8),\n      ),\n    );\n\n    integers_map(3, (i) =>\n      meshAdd(\n        makeBigArcPolygons(16 + 8.7 - (i & 1) * 0.7),\n        identity.translate(i * 6 - 6, 4 - (i & 1), 111 - 0.2 * (i & 1)),\n        i & 1 ? material(0.5, 0.5, 0.5, 0.3) : material(0.35, 0.35, 0.35, 0.5),\n      ),\n    );\n\n    // middle base\n    meshAdd(\n      csg_polygons_subtract(\n        polygons_transform(\n          cylinder(6, 0, 0, 0.3),\n          identity.translate(0, -0.92, 95).scale(14, 2, 14),\n          material(0.8, 0.8, 0.8, 0.2),\n        ),\n        polygons_transform(cylinder(5), identity.translate(0, 0, 95).scale3d(6), material(0.3, 0.3, 0.3, 0.5)),\n      ),\n    );\n\n    newLever(identity.translate(0, 1.7, 82).rotate(0, 180));\n\n    // lever pad\n\n    meshAdd(\n      cylinder(5),\n      identity.translate(0, -15.7, 82).scale(2.5, 17, 2.5).rotate(0, 35),\n      material(0.5, 0.3, 0.3, 0.4),\n    );\n\n    meshAdd(cylinder(6), identity.translate(0, 16, 121).scale(2.5, 1, 2.1).rotate(0, 90), material(0.5, 0.6, 0.7, 0.3));\n    meshAdd(cylinder(), identity.translate(0, 16, 129).scale(1.5, 1, 2), material(0.5, 0.6, 0.7, 0.3));\n    meshAdd(cylinder(7), identity.translate(0, 16.2, 133).scale(5, 1, 5), material(0.4, 0.5, 0.6, 0.4));\n\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          polygons_transform(\n            cylinder(),\n            identity.translate(0, 16, 110.5).scale(12, 1, 3),\n            material(0.5, 0.3, 0.3, 0.4),\n          ),\n          polygons_transform(cylinder(), identity.translate(0, 16, 111).scale(3, 1, 3.8), material(0.5, 0.3, 0.3, 0.4)),\n        ),\n\n        polygons_transform(\n          cylinder(5),\n          identity.translate(0, 16, 103.5).scale(5.5, 5, 5.5),\n          material(0.5, 0.3, 0.3, 0.4),\n        ),\n      ),\n    );\n\n    newModel((model) => {\n      model._update = () => {\n        const k = Math.sin(gameTime);\n        return identity.translate(k * -2).rotate(k * 25);\n      };\n      meshAdd(\n        cylinder(3),\n        identity.translate(0, -3, 118.8).scale(0.8, 0.8, 18).rotate(90, 0, 60),\n        material(0.5, 0.3, 0.3, 0.4),\n      );\n      [22, 30].map((z) => {\n        meshAdd(\n          cylinder(6),\n          identity\n            .translate(0, 16, z + 95)\n            .scale(3, 1, 2.3)\n            .rotate(0, 90),\n          material(0.7, 0.7, 0.7, 0.4),\n        );\n        meshAdd(cylinder(), identity.translate(0, 6.2, z + 95).scale(0.5, 11, 0.5), material(0.5, 0.3, 0.3, 0.4));\n      });\n    });\n\n    // floating elevator pad\n    newModel((model) => {\n      model._update = () => {\n        const v = lerpneg(\n          lerpneg((levers[14]!.$lerpValue + levers[14]!.$lerpValue2) / 2, levers[13]!.$lerpValue2),\n          (levers[15]!.$lerpValue + levers[15]!.$lerpValue2) / 2,\n        );\n        return identity.translate(0, v * 16, clamp(v * 2 - 1) * 8.5 + 95);\n      };\n      meshAdd(cylinder(5), identity.scale(5, 1.1, 5), material(0.5, 0.3, 0.3, 0.4));\n      meshAdd(cylinder(5), identity.scale(5.5, 0.9, 5.5), material(0.25, 0.25, 0.25, 0.4));\n\n      newLever(identity.translate(0, 1.5, -1).rotate(0, 180));\n    });\n\n    // SOUL 11 - soul in the last platform\n    newSoul(identity.translate(0, 3, 95), ...polygon_regular(9).map(({ x, z }) => [x * 9, z * 9, 4]));\n\n    // SOUL 12 - soul after the pendulums\n    newSoul(identity.translate(0, 19, 134), [0, 0, 3.5]);\n  });\n\n  // ------ End of game models ------\n\n  // ------ player model and legs, must be declared just after level model ------\n\n  newModel(() => {\n    checkModelId(\"PLAYER_BODY\", MODEL_ID_PLAYER_BODY);\n    // horns\n    [0, 180].map((r) =>\n      meshAdd(\n        hornPolygons,\n        identity.rotate(0, r).translate(0.2, 1.32).rotate(-30).scale(0.2, 0.6, 0.2),\n        material(1, 1, 0.8),\n      ),\n    );\n\n    // head\n    meshAdd(sphere(20), identity.translate(0, 1).scale(0.5, 0.5, 0.5), material(1, 0.3, 0.4));\n\n    const eye = polygons_transform(\n      csg_polygons_subtract(\n        cylinder(15, 1),\n        polygons_transform(cylinder(), identity.translate(0, 0, 1).scale(2, 2, 0.5)),\n      ),\n      identity.rotate(-90, 0).scale(0.1, 0.05, 0.1),\n      material(0.3, 0.3, 0.3),\n    );\n\n    [-1, 1].map((i) => meshAdd(eye, identity.translate(i * 0.2, 1.2, 0.4).rotate(0, i * 20, i * 20)));\n\n    // mouth\n    meshAdd(cylinder(), identity.translate(0, 0.9, 0.45).scale(0.15, 0.02, 0.06), material(0.3, 0.3, 0.3));\n\n    // body\n    meshAdd(sphere(20), identity.scale(0.7, 0.8, 0.55), material(1, 0.3, 0.4));\n  });\n\n  [-1, 1].map((x) =>\n    newModel(() => {\n      checkModelId(\"PLAYER_LEG\" + (x + 1), x === -1 ? MODEL_ID_PLAYER_LEG0 : MODEL_ID_PLAYER_LEG1);\n      meshAdd(cylinder(10, 1), identity.translate(x * 0.3, -0.8).scale(0.2, 0.7, 0.24), material(1, 0.3, 0.4));\n    }),\n  );\n\n  newModel(() => {\n    checkModelId(\"LEVER\", MODEL_ID_LEVER);\n    meshAdd(cylinder(6, 1), identity.scale(0.13, 1.4, 0.13), material(0.3, 0.3, 0.5, 0.1));\n    meshAdd(cylinder(10), identity.translate(0, 1).scale(0.21, 0.3, 0.21), material(1, 0.5, 0.2));\n    meshAdd(cylinder(3), identity.translate(0, -1).rotate(90, 90).scale(0.3, 0.4, 0.3), material(0.2, 0.2, 0.2, 0.1));\n  }, MODEL_KIND_MESH);\n\n  newModel(() => {\n    checkModelId(\"SOUL_COLLISION\", MODEL_ID_SOUL_COLLISION);\n    meshAdd(cylinder(6).slice(0, -1), identity.scale(0.77, 1, 0.77), material(1, 0.3, 0.5));\n  }, MODEL_KIND_MESH);\n\n  newModel(() => {\n    checkModelId(\"SOUL\", MODEL_ID_SOUL);\n    const GHOST_SLICES = 30;\n    const GHOST_STACKS = 24;\n\n    // body\n    meshAdd(\n      sphere(GHOST_SLICES, GHOST_STACKS, (a: number, b: number, polygon: Polygon) => {\n        const bm = b / GHOST_STACKS;\n        const theta = a * (Math.PI * (2 / GHOST_SLICES));\n        const phixz = (bm ** 0.6 * Math.PI) / 2;\n        const osc = (bm * bm * Math.sin(a * Math.PI * (14 / GHOST_SLICES))) / 4;\n        if (b === GHOST_STACKS - 1) {\n          polygon.$smooth = 0;\n          return { x: 0, y: -0.5, z: 0 };\n        }\n        return {\n          x: Math.cos(theta) * Math.sin(phixz),\n          y: Math.cos(bm * Math.PI) - bm - osc,\n          z: Math.sin(theta) * Math.sin(phixz) + Math.sin(osc * Math.PI * 2) / 4,\n        };\n      }),\n      identity.scale3d(0.7),\n      material(1, 1, 1),\n    );\n\n    // eyes\n    [-1, 1].map((x) => meshAdd(sphere(12), identity.translate(x * 0.16, 0.4, -0.36).scale3d(0.09)));\n  }, MODEL_KIND_MESH);\n\n  if (DEBUG) {\n    console.timeEnd(\"build_life_the_universe_and_everything\");\n    console.log(souls.length + \" souls, \" + levers.length + \" levers\");\n  }\n};\n","#version 300 es\n\nin vec4 aPosition;\n\nuniform mat4 viewMatrix;\nuniform mat4 worldMatrices[39];\n\n#define modelId aPosition.w\n\nvoid main() {\n  gl_Position = viewMatrix * (worldMatrices[max(0, abs(int(modelId)) - 1) + gl_InstanceID] * vec4(aPosition.xyz, 1));\n}\n","#version 300 es\n\nlayout(location = 0) in vec4 aPosition;\nlayout(location = 1) in vec3 aNormal;\nlayout(location = 2) in vec4 aColor;\n\nout vec4 VNormal;\nout vec4 FragPos;\nout vec4 UntransformedFragPos;\nout lowp vec4 Color;\n\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 worldMatrices[39];\n\n#define modelId aPosition.w\n\nvoid main() {\n  mat4 worldMatrix = worldMatrices[max(0, abs(int(modelId)) - 1) + gl_InstanceID];\n  // trick - use worldMatrix[3][3] that normally is 1 as a way to color the handle of pulled levers\n  Color = mix(aColor, vec4(0.7, 1, 0.2, 0), aColor.w > 0. ? 0. : 1. - worldMatrix[3][3]);\n  worldMatrix[3][3] = 1.;\n  UntransformedFragPos = aPosition;\n  FragPos = worldMatrix * vec4(aPosition.xyz, 1);\n  gl_Position = projectionMatrix * (viewMatrix * FragPos);\n  FragPos.w = modelId;\n  VNormal = (worldMatrix * vec4(aNormal, 0));\n}\n","#version 300 es\nprecision highp float;\n\n// as printed by the console.log on csm.ts\nconst vec3 lightDir = vec3(-0.6560590289905073, 0.6663690071652679, -0.3543146860766681);\n\n#define CSM_TEXTURE_SIZE 2048.\n\n#define zNear 0.3\n#define CSM_PLANE_DISTANCE 55.\n#define zFar 186.\n\nin highp vec4 VNormal;\nin highp vec4 FragPos;\nin highp vec4 UntransformedFragPos;\nin lowp vec4 Color;\n\nuniform vec3 viewPos;\nuniform mat4 viewMatrix;\nuniform mat4 csm_matrix0;\nuniform mat4 csm_matrix1;\n\nuniform highp sampler2DShadow csm_texture0;\nuniform highp sampler2DShadow csm_texture1;\nuniform highp sampler2D groundTexture;\n\nout vec4 O;\n\nvoid main() {\n  vec4 fragPosVec4 = vec4(FragPos.xyz, 1);\n  vec3 normal = normalize(VNormal.xyz);\n\n  vec3 tex = Color.w *\n    (texture(groundTexture, UntransformedFragPos.yz * .035) * normal.x +\n     texture(groundTexture, UntransformedFragPos.xz * .035) * normal.y +\n     texture(groundTexture, UntransformedFragPos.xy * .035) * normal.z)\n      .xyz;\n\n  // Displacement map\n  normal = normalize(normal.xyz + tex * .5);\n\n  float lambert = dot(normal, lightDir);\n  float shadow = 1.;\n  float depthValue = abs((viewMatrix * fragPosVec4).z);\n\n  // Gets the fragment position in light space\n  vec4 csmCoords = (depthValue < CSM_PLANE_DISTANCE ? csm_matrix0 : csm_matrix1) * fragPosVec4;\n\n  // perform perspective divide and transform to [0,1] range\n  csmCoords = (csmCoords / csmCoords.w) * .5 + .5;\n\n  if (csmCoords.z < 1.) { // Only if inside far plane\n    shadow = 0.;\n\n    // Shadow bias could be computed based on normal and light, something like\n    // 0.0003 * (1. - clamp(dot(normal, lightDir), 0., 1.))\n\n    for (float x = -1.; x <= 1.; ++x) {\n      for (float y = -1.; y <= 1.; ++y) {\n        vec3 c = vec3(\n          csmCoords.xy + vec2(x, y) / CSM_TEXTURE_SIZE,\n          csmCoords.z -\n            // shadow bias\n            (1. / CSM_TEXTURE_SIZE / 2.8)\n        );\n        shadow += depthValue < CSM_PLANE_DISTANCE ? texture(csm_texture0, c) : texture(csm_texture1, c);\n      }\n    }\n    shadow /= 9.;\n  }\n\n  vec3 rgbColor = Color.xyz * (1. - tex.x);\n\n  float lavaLight = max(max(abs(normal.x), abs(normal.z)) * .3 - normal.y, 0.) * pow(max(0., (8. - FragPos.y) / 48.), 1.6);\n\n  O = vec4(\n    // lava light\n    vec3(lavaLight, lavaLight * lavaLight * .5, 0) +\n      // ambient\n      vec3(.09, .05, .11) * rgbColor +\n      // diffuse\n      (rgbColor * (max(0., lambert) * .5 + (rgbColor * lambert * lambert * vec3(.5, .45, .3))) * (shadow * .75 + .25)) +\n      // specular\n      vec3(.6, .6, .5) * pow(max(0., dot(normalize(FragPos.xyz - viewPos), reflect(lightDir, normal))), 35.) * shadow,\n    1\n  );\n}\n","#version 300 es\nprecision highp float;\n\nin highp vec4 VNormal;\nin highp vec4 FragPos;\n\nuniform mat4 viewMatrix;\n\nout vec4 O;\n\n#define modelId FragPos.w\n\nvoid main() {\n  vec4 v = viewMatrix * vec4(FragPos.xyz, 1);\n  float z = 1. - min(abs(v.z / v.w), 1.);\n  O = vec4(vec2(z * (gl_FragCoord.y > 31. ? 1. : abs(VNormal.y))), z > 0. ? modelId / 255. : 0., 1);\n}\n","#version 300 es\n// Do nothing.\nvoid main() {}\n","#version 300 es\n\nin vec4 aPosition;\n\nvoid main() { gl_Position = vec4(aPosition.xy, 1, 1); }\n","#version 300 es\nprecision highp float;\n\nuniform vec3 iResolution;\nuniform vec3 viewPos;\nuniform mat4 viewMatrix;\n\nuniform highp sampler2D groundTexture;\n\nout vec4 O;\n\n#define gameTime iResolution.z\n\n/* 1 / Math.tan(fieldOfViewRadians / 2) */\nconst float fieldOfViewAmount = 1.73205;\n\nvoid main() {\n  vec2 fragCoord = (gl_FragCoord.xy / iResolution.xy) * 2. - 1.;\n  vec3 ray =\n    normalize(viewMatrix * vec4(fragCoord.x * -(iResolution.x / iResolution.y), -fragCoord.y, fieldOfViewAmount, 0.)).xyz;\n  float rayTracedLavalDistance = (-32. - viewPos.y) / ray.y;\n  float multiplier = (1. - clamp(abs(rayTracedLavalDistance / 9999.), 0., 1.));\n\n  O = vec4(0, 0, 0, 1);\n\n  if (multiplier > 0.01) {\n    if (rayTracedLavalDistance > 0.) {\n      // Render sky\n      float c = cos(gameTime / 30.), s = sin(gameTime / 30.);\n      ray.xz *= mat2(c, s, -s, c);\n      vec3 absRay = abs(ray);\n      O.xyz = vec3(dot(vec2(texture(groundTexture, ray.xy).z, texture(groundTexture, ray.yz * 2.).z), absRay.zx) * absRay.y);\n\n    } else {\n      // Render raytraced lava\n      ray = viewPos + ray * rayTracedLavalDistance;\n      O.x = multiplier *=\n        0.9 - texture(groundTexture, ray.xz / 150. + vec2(sin(ray.z / 35. + gameTime), cos(ray.x / 25. + gameTime)) / 80.).y;\n      O.y = multiplier * multiplier * multiplier;\n    }\n  }\n}\n","import { constDef_zNear, constDef_zFar } from \"./shaders/main-fragment.frag\";\n\nimport { DEG_TO_RAD, mat_perspectiveXY, type Vec2 } from \"./math\";\n\nexport const zNear = constDef_zNear;\n\nexport const zFar = constDef_zFar;\n\nexport const fieldOfViewDegrees = 60;\n\nexport const fieldOfViewRadians = /* @__PURE__ */ fieldOfViewDegrees * DEG_TO_RAD; // in radians\n\nconst fieldOfViewAmount = 1 / Math.tan(fieldOfViewRadians / 2);\n\nexport const camera_rotation: Vec2 = { x: 0, y: 180 } as Vec2;\n\nexport const mat_perspective = (near: number, far: number) =>\n  mat_perspectiveXY((hC.clientHeight / hC.clientWidth) * fieldOfViewAmount, fieldOfViewAmount, near, far);\n\nif (DEBUG) {\n  console.log(\"fieldOfViewAmount:\", fieldOfViewAmount);\n}\n","import { integers_map, max, min, identity } from \"./math\";\nimport { polygon_transform } from \"./geometry/geometry\";\nimport { mat_perspective } from \"./camera\";\n\nconst LIGHT_ROT_X = 298;\nconst LIGHT_ROT_Y = 139;\n\nif (DEBUG) {\n  const lightMatrix = /* @__PURE__ */ identity.rotate(LIGHT_ROT_X, LIGHT_ROT_Y);\n  console.log(\"light direction: \", lightMatrix.m13, lightMatrix.m23, lightMatrix.m33);\n}\n\nexport const csm_buildMatrix = /* @__PURE__ */ (\n  camera_view: DOMMatrixReadOnly,\n  nearPlane: number,\n  farPlane: number,\n  zMultiplier: number,\n) => {\n  const roundingRadius = (farPlane - nearPlane) * 1.1;\n\n  const projViewInverse = new DOMMatrix(mat_perspective(nearPlane, farPlane)).multiplySelf(camera_view).invertSelf();\n\n  let tx = 0;\n  let ty = 0;\n  let tz = 0;\n\n  const frustumCorners = integers_map(8, (i) => {\n    const v = projViewInverse.transformPoint({\n      x: 4 & i ? 1 : -1,\n      y: 2 & i ? 1 : -1,\n      z: 1 & i ? 1 : -1,\n    });\n    // Round to reduce shimmering\n    tx -= v.x = ((roundingRadius * v.x) | 0) / (roundingRadius * v.w);\n    ty -= v.y = ((roundingRadius * v.y) | 0) / (roundingRadius * v.w);\n    tz -= v.z = ((roundingRadius * v.z) | 0) / (roundingRadius * v.w);\n    return v;\n  });\n\n  const lightViewTranslated = identity.rotate(LIGHT_ROT_X, LIGHT_ROT_Y).translateSelf(tx / 8, ty / 8, tz / 8);\n\n  let left = Infinity;\n  let right = -Infinity;\n  let bottom = Infinity;\n  let top = -Infinity;\n  let near = Infinity;\n  let far = -Infinity;\n\n  // Compute the frustum bouding box\n  polygon_transform(frustumCorners, lightViewTranslated).map(({ x, y, z }) => {\n    left = min(left, x);\n    right = max(right, x);\n    bottom = min(bottom, y);\n    top = max(top, y);\n    near = min(near, z);\n    far = max(far, z);\n  });\n\n  near *= near < 0 ? zMultiplier : 1 / zMultiplier;\n  far *= far > 0 ? zMultiplier : 1 / zMultiplier;\n\n  // Build the ortographic matrix, multiply it with the light space view matrix.\n  return identity\n    .scale(2 / (right - left), 2 / (top - bottom), 2 / (near - far))\n    .translateSelf((right + left) / -2, (top + bottom) / -2, (near + far) / 2)\n    .multiplySelf(lightViewTranslated);\n};\n","export const audioContext = new AudioContext();\n\nexport const songAudioSource = audioContext.createBufferSource();\n","import type { KEY_CODE } from \"./utils/keycodes\";\nimport { camera_rotation } from \"./camera\";\nimport {\n  absoluteTime,\n  keyboard_downKeys,\n  KEY_BACK,\n  KEY_FRONT,\n  KEY_INTERACT,\n  KEY_LEFT,\n  KEY_RIGHT,\n  LOCAL_STORAGE_SAVED_GAME_KEY,\n  mainMenuVisible,\n  setMainMenuVisible,\n  updateCollectedSoulsCounter,\n} from \"./game/world-state\";\nimport { songAudioSource, audioContext } from \"./music/audio-context\";\nimport { clamp } from \"./math\";\n\nexport let player_first_person: 0 | 1 | undefined;\n\nexport let touch_movementX = 0;\n\nexport let touch_movementY = 0;\n\nexport const initPage = () => {\n  let touchStartTime: number | undefined;\n\n  let touchPosStartX: number | undefined;\n  let touchPosStartY: number | undefined;\n  let touchPosIdentifier: number | undefined;\n  let touchPosMoved: number | undefined;\n\n  let touchRotX: number | undefined;\n  let touchRotY: number | undefined;\n  let touchRotIdentifier: number | undefined;\n  let touchRotMoved: number | undefined;\n  let touchStartCameraRotX: number | undefined;\n  let touchStartCameraRotY: number | undefined;\n\n  let pageClicked: undefined | 1;\n\n  let music_on = !DEBUG;\n\n  const updateMusicOnState = () => {\n    if (mainMenuVisible || !music_on) {\n      songAudioSource.disconnect();\n    } else {\n      // connect the AudioBufferSourceNode to the  destination so we can hear the sound\n      songAudioSource.connect(audioContext.destination);\n    }\n    b4.innerHTML = \"Music: \" + music_on;\n  };\n\n  const toggleMusic = () => {\n    music_on = !music_on;\n    updateMusicOnState();\n  };\n\n  const mainMenu = (value: boolean = false) => {\n    if (mainMenuVisible !== value) {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      setMainMenuVisible(value);\n      try {\n        if (value) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          document.exitFullscreen().catch(() => {});\n          document.exitPointerLock();\n        } else {\n          songAudioSource.start();\n        }\n      } catch {}\n      player_first_person = 0;\n      document.body.className = value ? \"l m\" : \"l\";\n      updateMusicOnState();\n      updateCollectedSoulsCounter();\n    }\n  };\n\n  const handleResize = () => {\n    hC.width = innerWidth;\n    hC.height = innerHeight;\n    keyboard_downKeys.length = touch_movementX = touch_movementY = 0;\n    touchPosIdentifier = touchRotIdentifier = undefined;\n    if (document.hidden) {\n      mainMenu(true);\n    }\n  };\n\n  if (!DEBUG) {\n    oncontextmenu = () => false;\n  }\n\n  // \"Restart\" button\n  b3.onclick = () => {\n    // eslint-disable-next-line no-alert\n    if (confirm(\"Restart game?\")) {\n      localStorage[LOCAL_STORAGE_SAVED_GAME_KEY] = \"\";\n      location.reload();\n    }\n  };\n\n  // \"Play\" button\n  b1.onclick = () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    document.body.requestFullscreen();\n    mainMenu();\n  };\n\n  // \"Play first person\" button\n  b2.onclick = () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    document.body.requestFullscreen();\n    mainMenu();\n    player_first_person = 1;\n  };\n\n  // \"Music\" button\n  b4.onclick = toggleMusic;\n\n  // Menu hamburger button\n  b5.onclick = () => mainMenu(true);\n\n  onclick = (e) => {\n    pageClicked = 1;\n    if (!mainMenuVisible) {\n      if (e.target === hC) {\n        keyboard_downKeys[KEY_INTERACT] = true;\n      }\n      if (player_first_person) {\n        hC.requestPointerLock();\n      }\n    }\n  };\n\n  onkeyup = onkeydown = ({ code, target, type, repeat }) => {\n    if (!repeat) {\n      const pressed = !!type[5] && target === document.body;\n\n      if (pressed && (code === \"Escape\" || (code === \"Enter\" && mainMenuVisible))) {\n        if (!mainMenuVisible || pageClicked) {\n          mainMenu(!mainMenuVisible);\n        }\n      } else {\n        const mapped = (\n          {\n            [\"KeyA\"]: KEY_LEFT,\n            [\"ArrowLeft\"]: KEY_LEFT,\n\n            [\"KeyW\"]: KEY_FRONT,\n            [\"ArrowUp\"]: KEY_FRONT,\n\n            [\"KeyD\"]: KEY_RIGHT,\n            [\"ArrowRight\"]: KEY_RIGHT,\n\n            [\"KeyS\"]: KEY_BACK,\n            [\"ArrowDown\"]: KEY_BACK,\n\n            [\"KeyE\"]: KEY_INTERACT,\n            [\"Space\"]: KEY_INTERACT,\n            [\"Enter\"]: KEY_INTERACT,\n          } as Partial<Record<KEY_CODE, number>>\n        )[code as KEY_CODE]!;\n        if (mapped === KEY_INTERACT) {\n          if (pressed) {\n            keyboard_downKeys[mapped] = 1;\n          }\n        } else {\n          keyboard_downKeys[mapped] = pressed;\n        }\n      }\n    }\n  };\n\n  onmousemove = ({ movementX, movementY }) => {\n    if (player_first_person && (movementX || movementY)) {\n      camera_rotation.y += movementX * 0.1;\n      camera_rotation.x += movementY * 0.1;\n    }\n  };\n\n  hC.ontouchstart = (e) => {\n    if (!mainMenuVisible) {\n      for (const { pageX, pageY, identifier } of e.changedTouches) {\n        if (player_first_person && pageX > hC.clientWidth / 2) {\n          if (touchRotIdentifier === undefined) {\n            touchRotMoved = 0;\n            touchRotX = pageX;\n            touchRotY = pageY;\n            touchRotIdentifier = identifier;\n            touchStartCameraRotX = camera_rotation.y;\n            touchStartCameraRotY = camera_rotation.x;\n          }\n        } else if (touchPosIdentifier === undefined) {\n          touchPosMoved = 0;\n          touchPosStartX = pageX;\n          touchPosStartY = pageY;\n          touchPosIdentifier = identifier;\n        }\n      }\n      touchStartTime = absoluteTime;\n    }\n  };\n\n  const TOUCH_SIZE = 20;\n  const TOUCH_MOVE_THRESHOLD = 0.5;\n  const TOUCH_MOVE_SNAP = 0.2;\n\n  hC.ontouchmove = (e) => {\n    if (!mainMenuVisible) {\n      for (const { pageX, pageY, identifier } of e.changedTouches) {\n        if (touchRotIdentifier === identifier) {\n          camera_rotation.y = touchStartCameraRotX! + (pageX - touchRotX!) / 2.3;\n          camera_rotation.x = touchStartCameraRotY! + (pageY - touchRotY!) / 2.3;\n          touchRotMoved = 1;\n        }\n        if (touchPosIdentifier === identifier) {\n          const deltaX = (touchPosStartX! - pageX) / TOUCH_SIZE;\n          const deltaY = (touchPosStartY! - pageY) / TOUCH_SIZE;\n          const absDeltaX = Math.abs(deltaX);\n          const absDeltaY = Math.abs(deltaY);\n\n          const angle = Math.atan2(deltaY, deltaX);\n          const speed = clamp(Math.hypot(deltaY, deltaX) - TOUCH_MOVE_THRESHOLD);\n\n          touch_movementX = absDeltaX > TOUCH_MOVE_SNAP ? Math.cos(angle) * speed : 0;\n          touch_movementY = absDeltaY > TOUCH_MOVE_SNAP ? Math.sin(angle) * speed : 0;\n\n          if (touch_movementX || touch_movementY) {\n            // Moved, disable the click\n            touchPosMoved = 1;\n          }\n\n          // Move the invisible joysticks\n          if (absDeltaX > 2) {\n            touchPosStartX = pageX + Math.sign(deltaX) * TOUCH_SIZE;\n          }\n          if (absDeltaY > 2) {\n            touchPosStartY = pageY + Math.sign(deltaY) * TOUCH_SIZE;\n          }\n        }\n      }\n    }\n  };\n\n  hC.ontouchend = (e) => {\n    e.preventDefault();\n\n    let click: 1 | undefined;\n    for (const touch of e.changedTouches) {\n      if (touch.identifier === touchRotIdentifier) {\n        touchRotIdentifier = undefined;\n        if (!touchRotMoved) {\n          click = 1;\n        }\n        touchRotMoved = 0;\n      } else if (touch.identifier === touchPosIdentifier) {\n        touchPosIdentifier = undefined;\n        touch_movementY = touch_movementX = 0;\n        if (!touchPosMoved) {\n          click = 1;\n        }\n        touchPosMoved = 0;\n      } else {\n        click = 1;\n      }\n    }\n\n    if (click && e.target === hC && touchStartTime) {\n      const diff = absoluteTime - touchStartTime;\n      if (diff > 0.02 && diff < 0.7) {\n        keyboard_downKeys[KEY_INTERACT] = true;\n      }\n    }\n  };\n\n  document.onvisibilitychange = onblur = onresize = handleResize;\n\n  handleResize();\n  mainMenu(!DEBUG || DEBUG_FLAG2);\n};\n","export const gl: WebGL2RenderingContext = hC.getContext(\"webgl2\", { powerPreference: \"high-performance\" })!;\n\nfor (const s in gl) {\n  (gl as any)[s[0] + [...s].reduce((p, c, i) => (p * i + c.charCodeAt(0)) % 434, 0).toString(36)] = (gl as any)[s];\n}\n","export const GAMEPAD_BUTTON_UP = 12;\n\nexport const GAMEPAD_BUTTON_DOWN = 13;\n\nexport const GAMEPAD_BUTTON_LEFT = 14;\n\nexport const GAMEPAD_BUTTON_RIGHT = 15;\n\nexport const GAMEPAD_BUTTON_START = 9;\n\nexport const GAMEPAD_BUTTON_B = 0;\n\nexport const GAMEPAD_BUTTON_A = 1;\n\nexport const GAMEPAD_BUTTON_Y = 2;\n\nexport const GAMEPAD_BUTTON_X = 3;\n\nexport const GAMEPAD_BUTTON_LB = 4;\n\nexport const GAMEPAD_BUTTON_RB = 5;\n\nexport const KEY_CODE_EMPTY = \"\";\n\nexport const KEY_CODE_AGAIN = \"Again\";\n\nexport const KEY_CODE_ALT_LEFT = \"AltLeft\";\n\nexport const KEY_CODE_ALT_RIGHT = \"AltRight\";\n\nexport const KEY_CODE_ARROW_DOWN = \"ArrowDown\";\n\nexport const KEY_CODE_ARROW_LEFT = \"ArrowLeft\";\n\nexport const KEY_CODE_ARROW_RIGHT = \"ArrowRight\";\n\nexport const KEY_CODE_ARROW_UP = \"ArrowUp\";\n\nexport const KEY_CODE_AUDIO_VOLUME_DOWN = \"AudioVolumeDown\";\n\nexport const KEY_CODE_AUDIO_VOLUME_MUTE = \"AudioVolumeMute\";\n\nexport const KEY_CODE_AUDIO_VOLUME_UP = \"AudioVolumeUp\";\n\nexport const KEY_CODE_BACKQUOTE = \"Backquote\";\n\nexport const KEY_CODE_BACKSLASH = \"Backslash\";\n\nexport const KEY_CODE_BACKSPACE = \"Backspace\";\n\nexport const KEY_CODE_BRACKET_LEFT = \"BracketLeft\";\n\nexport const KEY_CODE_BRACKET_RIGHT = \"BracketRight\";\n\nexport const KEY_CODE_BROWSER_BACK = \"BrowserBack\";\n\nexport const KEY_CODE_BROWSER_FAVORITES = \"BrowserFavorites\";\n\nexport const KEY_CODE_BROWSER_FORWARD = \"BrowserForward\";\n\nexport const KEY_CODE_BROWSER_HOME = \"BrowserHome\";\n\nexport const KEY_CODE_BROWSER_REFRESH = \"BrowserRefresh\";\n\nexport const KEY_CODE_BROWSER_SEARCH = \"BrowserSearch\";\n\nexport const KEY_CODE_BROWSER_STOP = \"BrowserStop\";\n\nexport const KEY_CODE_CANCEL = \"Cancel\";\n\nexport const KEY_CODE_CAPS_LOCK = \"CapsLock\";\n\nexport const KEY_CODE_COMMA = \"Comma\";\n\nexport const KEY_CODE_CONTEXT_MENU = \"ContextMenu\";\n\nexport const KEY_CODE_CONTROL_LEFT = \"ControlLeft\";\n\nexport const KEY_CODE_CONTROL_RIGHT = \"ControlRight\";\n\nexport const KEY_CODE_CONVERT = \"Convert\";\n\nexport const KEY_CODE_COPY = \"Copy\";\n\nexport const KEY_CODE_CUT = \"Cut\";\n\nexport const KEY_CODE_DELETE = \"Delete\";\n\nexport const KEY_CODE_DIGIT_0 = \"Digit0\";\n\nexport const KEY_CODE_DIGIT_1 = \"Digit1\";\n\nexport const KEY_CODE_DIGIT_2 = \"Digit2\";\n\nexport const KEY_CODE_DIGIT_3 = \"Digit3\";\n\nexport const KEY_CODE_DIGIT_4 = \"Digit4\";\n\nexport const KEY_CODE_DIGIT_5 = \"Digit5\";\n\nexport const KEY_CODE_DIGIT_6 = \"Digit6\";\n\nexport const KEY_CODE_DIGIT_7 = \"Digit7\";\n\nexport const KEY_CODE_DIGIT_8 = \"Digit8\";\n\nexport const KEY_CODE_DIGIT_9 = \"Digit9\";\n\nexport const KEY_CODE_EJECT = \"Eject\";\n\nexport const KEY_CODE_END = \"End\";\n\nexport const KEY_CODE_ENTER = \"Enter\";\n\nexport const KEY_CODE_EQUAL = \"Equal\";\n\nexport const KEY_CODE_ESCAPE = \"Escape\";\n\nexport const KEY_CODE_F1 = \"F1\";\n\nexport const KEY_CODE_F2 = \"F2\";\n\nexport const KEY_CODE_F3 = \"F3\";\n\nexport const KEY_CODE_F4 = \"F4\";\n\nexport const KEY_CODE_F5 = \"F5\";\n\nexport const KEY_CODE_F6 = \"F6\";\n\nexport const KEY_CODE_F7 = \"F7\";\n\nexport const KEY_CODE_F8 = \"F8\";\n\nexport const KEY_CODE_F9 = \"F9\";\n\nexport const KEY_CODE_F10 = \"F10\";\n\nexport const KEY_CODE_F11 = \"F11\";\n\nexport const KEY_CODE_F12 = \"F12\";\n\nexport const KEY_CODE_F13 = \"F13\";\n\nexport const KEY_CODE_F14 = \"F14\";\n\nexport const KEY_CODE_F15 = \"F15\";\n\nexport const KEY_CODE_F16 = \"F16\";\n\nexport const KEY_CODE_F17 = \"F17\";\n\nexport const KEY_CODE_F18 = \"F18\";\n\nexport const KEY_CODE_F19 = \"F19\";\n\nexport const KEY_CODE_F20 = \"F20\";\n\nexport const KEY_CODE_F21 = \"F21\";\n\nexport const KEY_CODE_F22 = \"F22\";\n\nexport const KEY_CODE_F23 = \"F23\";\n\nexport const KEY_CODE_F24 = \"F24\";\n\nexport const KEY_CODE_FIND = \"Find\";\n\nexport const KEY_CODE_FN = \"Fn\";\n\nexport const KEY_CODE_HANGUL_MODE = \"HangulMode\";\n\nexport const KEY_CODE_HANJA = \"Hanja\";\n\nexport const KEY_CODE_HELP = \"Help\";\n\nexport const KEY_CODE_HOME = \"Home\";\n\nexport const KEY_CODE_INSERT = \"Insert\";\n\nexport const KEY_CODE_INTL_BACKSLASH = \"IntlBackslash\";\n\nexport const KEY_CODE_INTL_RO = \"IntlRo\";\n\nexport const KEY_CODE_INTL_YEN = \"IntlYen\";\n\nexport const KEY_CODE_KANA_MODE = \"KanaMode\";\n\nexport const KEY_CODE_KEY_A = \"KeyA\";\n\nexport const KEY_CODE_KEY_B = \"KeyB\";\n\nexport const KEY_CODE_KEY_C = \"KeyC\";\n\nexport const KEY_CODE_KEY_D = \"KeyD\";\n\nexport const KEY_CODE_KEY_E = \"KeyE\";\n\nexport const KEY_CODE_KEY_F = \"KeyF\";\n\nexport const KEY_CODE_KEY_G = \"KeyG\";\n\nexport const KEY_CODE_KEY_H = \"KeyH\";\n\nexport const KEY_CODE_KEY_I = \"KeyI\";\n\nexport const KEY_CODE_KEY_J = \"KeyJ\";\n\nexport const KEY_CODE_KEY_K = \"KeyK\";\n\nexport const KEY_CODE_KEY_L = \"KeyL\";\n\nexport const KEY_CODE_KEY_M = \"KeyM\";\n\nexport const KEY_CODE_KEY_N = \"KeyN\";\n\nexport const KEY_CODE_KEY_O = \"KeyO\";\n\nexport const KEY_CODE_KEY_P = \"KeyP\";\n\nexport const KEY_CODE_KEY_Q = \"KeyQ\";\n\nexport const KEY_CODE_KEY_R = \"KeyR\";\n\nexport const KEY_CODE_KEY_S = \"KeyS\";\n\nexport const KEY_CODE_KEY_T = \"KeyT\";\n\nexport const KEY_CODE_KEY_U = \"KeyU\";\n\nexport const KEY_CODE_KEY_V = \"KeyV\";\n\nexport const KEY_CODE_KEY_W = \"KeyW\";\n\nexport const KEY_CODE_KEY_X = \"KeyX\";\n\nexport const KEY_CODE_KEY_Y = \"KeyY\";\n\nexport const KEY_CODE_KEY_Z = \"KeyZ\";\n\nexport const KEY_CODE_LANG_1 = \"Lang1\";\n\nexport const KEY_CODE_LANG_2 = \"Lang2\";\n\nexport const KEY_CODE_LAUNCH_APP_1 = \"LaunchApp1\";\n\nexport const KEY_CODE_LAUNCH_APP_2 = \"LaunchApp2\";\n\nexport const KEY_CODE_LAUNCH_MAIL = \"LaunchMail\";\n\nexport const KEY_CODE_LAUNCH_MEDIA_PLAYER = \"LaunchMediaPlayer\";\n\nexport const KEY_CODE_MEDIA_PLAY_PAUSE = \"MediaPlayPause\";\n\nexport const KEY_CODE_MEDIA_SELECT = \"MediaSelect\";\n\nexport const KEY_CODE_MEDIA_STOP = \"MediaStop\";\n\nexport const KEY_CODE_MEDIA_TRACK_NEXT = \"MediaTrackNext\";\n\nexport const KEY_CODE_MEDIA_TRACK_PREVIOUS = \"MediaTrackPrevious\";\n\nexport const KEY_CODE_META_LEFT = \"MetaLeft\";\n\nexport const KEY_CODE_META_RIGHT = \"MetaRight\";\n\nexport const KEY_CODE_MINUS = \"Minus\";\n\nexport const KEY_CODE_NON_CONVERT = \"NonConvert\";\n\nexport const KEY_CODE_NUM_LOCK = \"NumLock\";\n\nexport const KEY_CODE_NUMPAD_0 = \"Numpad0\";\n\nexport const KEY_CODE_NUMPAD_1 = \"Numpad1\";\n\nexport const KEY_CODE_NUMPAD_2 = \"Numpad2\";\n\nexport const KEY_CODE_NUMPAD_3 = \"Numpad3\";\n\nexport const KEY_CODE_NUMPAD_4 = \"Numpad4\";\n\nexport const KEY_CODE_NUMPAD_5 = \"Numpad5\";\n\nexport const KEY_CODE_NUMPAD_6 = \"Numpad6\";\n\nexport const KEY_CODE_NUMPAD_7 = \"Numpad7\";\n\nexport const KEY_CODE_NUMPAD_8 = \"Numpad8\";\n\nexport const KEY_CODE_NUMPAD_9 = \"Numpad9\";\n\nexport const KEY_CODE_NUMPAD_ADD = \"NumpadAdd\";\n\nexport const KEY_CODE_NUMPAD_CHANGE_SIGN = \"NumpadChangeSign\";\n\nexport const KEY_CODE_NUMPAD_COMMA = \"NumpadComma\";\n\nexport const KEY_CODE_NUMPAD_DECIMAL = \"NumpadDecimal\";\n\nexport const KEY_CODE_NUMPAD_DIVIDE = \"NumpadDivide\";\n\nexport const KEY_CODE_NUMPAD_ENTER = \"NumpadEnter\";\n\nexport const KEY_CODE_NUMPAD_EQUAL = \"NumpadEqual\";\n\nexport const KEY_CODE_NUMPAD_MULTIPLY = \"NumpadMultiply\";\n\nexport const KEY_CODE_NUMPAD_PAREN_LEFT = \"NumpadParenLeft\";\n\nexport const KEY_CODE_NUMPAD_PAREN_RIGHT = \"NumpadParenRight\";\n\nexport const KEY_CODE_NUMPAD_SUBTRACT = \"NumpadSubtract\";\n\nexport const KEY_CODE_OPEN = \"Open\";\n\nexport const KEY_CODE_OSLEFT = \"OSLeft\";\n\nexport const KEY_CODE_OSRIGHT = \"OSRight\";\n\nexport const KEY_CODE_PAGE_DOWN = \"PageDown\";\n\nexport const KEY_CODE_PAGE_UP = \"PageUp\";\n\nexport const KEY_CODE_PASTE = \"Paste\";\n\nexport const KEY_CODE_PAUSE = \"Pause\";\n\nexport const KEY_CODE_PERIOD = \"Period\";\n\nexport const KEY_CODE_POWER = \"Power\";\n\nexport const KEY_CODE_PRINT_SCREEN = \"PrintScreen\";\n\nexport const KEY_CODE_PROPS = \"Props\";\n\nexport const KEY_CODE_QUOTE = \"Quote\";\n\nexport const KEY_CODE_SCROLL_LOCK = \"ScrollLock\";\n\nexport const KEY_CODE_SELECT = \"Select\";\n\nexport const KEY_CODE_SEMICOLON = \"Semicolon\";\n\nexport const KEY_CODE_SHIFT_LEFT = \"ShiftLeft\";\n\nexport const KEY_CODE_SHIFT_RIGHT = \"ShiftRight\";\n\nexport const KEY_CODE_SLASH = \"Slash\";\n\nexport const KEY_CODE_SLEEP = \"Sleep\";\n\nexport const KEY_CODE_SPACE = \"Space\";\n\nexport const KEY_CODE_TAB = \"Tab\";\n\nexport const KEY_CODE_UNDO = \"Undo\";\n\nexport const KEY_CODE_UNIDENTIFIED = \"Unidentified\";\n\nexport const KEY_CODE_VOLUME_DOWN = \"VolumeDown\";\n\nexport const KEY_CODE_VOLUME_MUTE = \"VolumeMute\";\n\nexport const KEY_CODE_VOLUME_UP = \"VolumeUp\";\n\nexport const KEY_CODE_WAKE_UP = \"WakeUp\";\n\nexport type KEY_CODE =\n  | \"\"\n  | \"Again\"\n  | \"AltLeft\"\n  | \"AltRight\"\n  | \"ArrowDown\"\n  | \"ArrowLeft\"\n  | \"ArrowRight\"\n  | \"ArrowUp\"\n  | \"AudioVolumeDown\"\n  | \"AudioVolumeMute\"\n  | \"AudioVolumeUp\"\n  | \"Backquote\"\n  | \"Backslash\"\n  | \"Backspace\"\n  | \"BracketLeft\"\n  | \"BracketRight\"\n  | \"BrowserBack\"\n  | \"BrowserFavorites\"\n  | \"BrowserForward\"\n  | \"BrowserHome\"\n  | \"BrowserRefresh\"\n  | \"BrowserSearch\"\n  | \"BrowserStop\"\n  | \"Cancel\"\n  | \"CapsLock\"\n  | \"Comma\"\n  | \"ContextMenu\"\n  | \"ControlLeft\"\n  | \"ControlRight\"\n  | \"Convert\"\n  | \"Copy\"\n  | \"Cut\"\n  | \"Delete\"\n  | \"Digit0\"\n  | \"Digit1\"\n  | \"Digit2\"\n  | \"Digit3\"\n  | \"Digit4\"\n  | \"Digit5\"\n  | \"Digit6\"\n  | \"Digit7\"\n  | \"Digit8\"\n  | \"Digit9\"\n  | \"Eject\"\n  | \"End\"\n  | \"Enter\"\n  | \"Equal\"\n  | \"Escape\"\n  | \"F1\"\n  | \"F2\"\n  | \"F3\"\n  | \"F4\"\n  | \"F5\"\n  | \"F6\"\n  | \"F7\"\n  | \"F8\"\n  | \"F9\"\n  | \"F10\"\n  | \"F11\"\n  | \"F12\"\n  | \"F13\"\n  | \"F14\"\n  | \"F15\"\n  | \"F16\"\n  | \"F17\"\n  | \"F18\"\n  | \"F19\"\n  | \"F20\"\n  | \"F21\"\n  | \"F22\"\n  | \"F23\"\n  | \"F24\"\n  | \"Find\"\n  | \"Fn\"\n  | \"HangulMode\"\n  | \"Hanja\"\n  | \"Help\"\n  | \"Home\"\n  | \"Insert\"\n  | \"IntlBackslash\"\n  | \"IntlRo\"\n  | \"IntlYen\"\n  | \"KanaMode\"\n  | \"KeyA\"\n  | \"KeyB\"\n  | \"KeyC\"\n  | \"KeyD\"\n  | \"KeyE\"\n  | \"KeyF\"\n  | \"KeyG\"\n  | \"KeyH\"\n  | \"KeyI\"\n  | \"KeyJ\"\n  | \"KeyK\"\n  | \"KeyL\"\n  | \"KeyM\"\n  | \"KeyN\"\n  | \"KeyO\"\n  | \"KeyP\"\n  | \"KeyQ\"\n  | \"KeyR\"\n  | \"KeyS\"\n  | \"KeyT\"\n  | \"KeyU\"\n  | \"KeyV\"\n  | \"KeyW\"\n  | \"KeyX\"\n  | \"KeyY\"\n  | \"KeyZ\"\n  | \"Lang1\"\n  | \"Lang2\"\n  | \"LaunchApp1\"\n  | \"LaunchApp2\"\n  | \"LaunchMail\"\n  | \"LaunchMediaPlayer\"\n  | \"MediaPlayPause\"\n  | \"MediaSelect\"\n  | \"MediaStop\"\n  | \"MediaTrackNext\"\n  | \"MediaTrackPrevious\"\n  | \"MetaLeft\"\n  | \"MetaRight\"\n  | \"Minus\"\n  | \"NonConvert\"\n  | \"NumLock\"\n  | \"Numpad0\"\n  | \"Numpad1\"\n  | \"Numpad2\"\n  | \"Numpad3\"\n  | \"Numpad4\"\n  | \"Numpad5\"\n  | \"Numpad6\"\n  | \"Numpad7\"\n  | \"Numpad8\"\n  | \"Numpad9\"\n  | \"NumpadAdd\"\n  | \"NumpadChangeSign\"\n  | \"NumpadComma\"\n  | \"NumpadDecimal\"\n  | \"NumpadDivide\"\n  | \"NumpadEnter\"\n  | \"NumpadEqual\"\n  | \"NumpadMultiply\"\n  | \"NumpadParenLeft\"\n  | \"NumpadParenRight\"\n  | \"NumpadSubtract\"\n  | \"Open\"\n  | \"OSLeft\"\n  | \"OSRight\"\n  | \"PageDown\"\n  | \"PageUp\"\n  | \"Paste\"\n  | \"Pause\"\n  | \"Period\"\n  | \"Power\"\n  | \"PrintScreen\"\n  | \"Props\"\n  | \"Quote\"\n  | \"ScrollLock\"\n  | \"Select\"\n  | \"Semicolon\"\n  | \"ShiftLeft\"\n  | \"ShiftRight\"\n  | \"Slash\"\n  | \"Sleep\"\n  | \"Space\"\n  | \"Tab\"\n  | \"Undo\"\n  | \"Unidentified\"\n  | \"VolumeDown\"\n  | \"VolumeMute\"\n  | \"VolumeUp\"\n  | \"WakeUp\";\n","import { max, clamp, DEG_TO_RAD, identity, angle_lerp_degrees, lerp, angle_wrap_degrees, threshold } from \"./math\";\nimport {\n  levers,\n  player_position_final,\n  allModels,\n  MODEL_KIND_GAME,\n  MODEL_ID_PLAYER_BODY,\n  MODEL_ID_PLAYER_LEG0,\n  MODEL_ID_PLAYER_LEG1,\n} from \"./game/models\";\nimport {\n  player_last_pulled_lever,\n  lerpDamp,\n  gameTimeDelta,\n  keyboard_downKeys,\n  gameTime,\n  firstBoatLerp,\n  KEY_LEFT,\n  KEY_RIGHT,\n  KEY_FRONT,\n  KEY_BACK,\n  KEY_INTERACT,\n  damp,\n} from \"./game/world-state\";\nimport { camera_rotation } from \"./camera\";\nimport {\n  GAMEPAD_BUTTON_A,\n  GAMEPAD_BUTTON_X,\n  GAMEPAD_BUTTON_Y,\n  GAMEPAD_BUTTON_B,\n  GAMEPAD_BUTTON_LEFT,\n  GAMEPAD_BUTTON_RIGHT,\n  GAMEPAD_BUTTON_UP,\n  GAMEPAD_BUTTON_DOWN,\n} from \"./utils/keycodes\";\nimport { touch_movementX, touch_movementY, player_first_person } from \"./page\";\nimport { gl } from \"./gl\";\n\nexport let player_update: () => void;\n\nexport const CAMERA_PLAYER_Y_DIST = 13;\n\nexport const CAMERA_PLAYER_Z_DIST = -18;\n\nexport const PLAYER_LEGS_VELOCITY = 7 * 1.3;\n\nexport const PLAYER_RESPAWN_Z = -2.4;\n\nexport const COLLISION_TEXTURE_SIZE = 128;\n\nexport const player_position_global = { x: 0, y: 0, z: 0 };\n\nexport let camera_position_x: number = 0;\n\nexport let camera_position_y: number = 0;\n\nexport let camera_position_z: number = 0;\n\nexport const set_camera_position = (x: number, y: number, z: number) => {\n  camera_position_x = x;\n  camera_position_y = y;\n  camera_position_z = z;\n};\n\nexport const player_init = () => {\n  let gamepadInteractPressed: 0 | 1 | undefined;\n\n  let currentModelId: number;\n  let currentModelIdTMinus1: number;\n  let oldModelId: number | undefined;\n\n  let player_gravity = 2;\n  let player_respawned: 0 | 1 | 2 = 2;\n  let boot: 0 | 1 = 1;\n  let player_look_angle_target: number;\n  let player_look_angle: number;\n  let player_has_ground: 0 | 1;\n\n  let player_legs_speed: number;\n\n  let player_speed: number;\n  let player_collision_velocity_x: number;\n  let player_collision_velocity_z: number;\n\n  let player_model_y: number;\n\n  let player_mov_x: number;\n  let player_mov_z: number;\n\n  let camera_lookat_x: number;\n  let camera_lookat_y: number;\n  let camera_lookat_z: number;\n\n  const player_collision_modelIdCounter = new Int32Array(256);\n  const collision_buffer = new Uint8Array(COLLISION_TEXTURE_SIZE * COLLISION_TEXTURE_SIZE * 4);\n\n  // const interpolate_with_hysteresis = /* @__PURE__ */ (previous: number, desired: number, hysteresis: number) => {\n  //   return boot ? desired: lerpDamp(previous, desired, 2 + clamp(Math.abs(previous - desired) ** 0.9 - hysteresis, 0, 3.2));\n  // };\n\n  const interpolate_with_hysteresis = /* @__PURE__ */ (previous: number, desired: number, hysteresis: number) =>\n    boot\n      ? desired\n      : lerp(\n          previous +\n            Math.sign(desired - previous) *\n              max(0, Math.abs(desired - previous) ** 0.9 - hysteresis) *\n              gameTimeDelta *\n              2,\n          desired,\n          gameTimeDelta / 7,\n        );\n\n  const getReferenceMatrix = () =>\n    player_respawned\n      ? levers[player_last_pulled_lever]!.$parent.$matrix\n      : (oldModelId && allModels[oldModelId]!.$kind === MODEL_KIND_GAME && allModels[oldModelId]!.$matrix) || identity;\n\n  const playerMovedGlobalPos = (referenceMatrix: DOMMatrixReadOnly) => {\n    const inverseReferenceRotationMatrix = referenceMatrix.inverse();\n    inverseReferenceRotationMatrix.m41 = inverseReferenceRotationMatrix.m42 = inverseReferenceRotationMatrix.m43 = 0;\n    const v = inverseReferenceRotationMatrix.transformPoint({\n      x: player_mov_x,\n      z: player_mov_z,\n      w: 0,\n    });\n    player_position_global.x += v.x;\n    player_position_global.z += v.z;\n    return referenceMatrix.transformPoint(player_position_global);\n  };\n\n  const player_move = () => {\n    let referenceMatrix = getReferenceMatrix();\n\n    const { x, y, z } =\n      player_respawned > 1\n        ? levers[player_last_pulled_lever]!.$locMatrix!.transformPoint({\n            x: 0,\n            y: player_last_pulled_lever || firstBoatLerp > 0.9 ? 15 : 1,\n            z: PLAYER_RESPAWN_Z,\n          })\n        : playerMovedGlobalPos(referenceMatrix);\n\n    const dx = x - player_position_final.x;\n    const dz = z - player_position_final.z;\n\n    if (player_respawned) {\n      player_respawned = player_has_ground && currentModelId ? 0 : 1;\n    }\n\n    player_position_final.x = x;\n    player_position_final.y = y;\n    player_position_final.z = z;\n\n    if (player_respawned || currentModelId !== oldModelId) {\n      if (DEBUG && currentModelId !== oldModelId) {\n        console.log(\"modelId: \" + oldModelId + \" -> \" + currentModelId);\n      }\n\n      oldModelId = currentModelId;\n      referenceMatrix = getReferenceMatrix();\n\n      const v = referenceMatrix.inverse().transformPoint(player_position_final);\n      player_position_global.x = v.x;\n      player_position_global.y = v.y;\n      player_position_global.z = v.z;\n    }\n\n    if (y < (x < -25 || z < 109 ? -25 : -9)) {\n      // Player fell in lava\n      player_respawned = 2;\n    }\n\n    if (currentModelId) {\n      player_collision_velocity_x = dx / gameTimeDelta;\n      player_collision_velocity_z = dz / gameTimeDelta;\n    }\n\n    // Special handling for the second boat (lever 7) - the boat must be on the side of the map the player is\n    if (currentModelId === 1) {\n      levers[9]!.$value = x < -15 && z < 0 ? 1 : 0;\n    }\n\n    player_model_y = lerp(lerpDamp(player_model_y, y, 2), y, player_respawned || Math.abs(player_model_y - y) * 8);\n    camera_lookat_y = interpolate_with_hysteresis(camera_lookat_y, player_model_y, 3);\n    camera_lookat_x = interpolate_with_hysteresis(camera_lookat_x, x, 2);\n    camera_lookat_z = interpolate_with_hysteresis(camera_lookat_z, z, 2);\n\n    if (!DEBUG_CAMERA) {\n      if (player_first_person) {\n        const d = player_respawned + damp(18);\n        camera_position_x = lerp(camera_position_x, x, d);\n        camera_position_y = lerp(camera_position_y, player_model_y + 1.5, d);\n        camera_position_z = lerp(camera_position_z, z, d);\n        camera_rotation.y = angle_wrap_degrees(camera_rotation.y);\n      } else {\n        const camMovSpeed = boot + damp(2);\n        camera_position_x = lerp(camera_position_x, camera_lookat_x, camMovSpeed);\n        camera_position_y = lerp(\n          camera_position_y,\n          max(camera_lookat_y + clamp((-60 - z) / 8, 0, 20) + CAMERA_PLAYER_Y_DIST, 6),\n          camMovSpeed,\n        );\n        camera_position_z = lerp(camera_position_z, camera_lookat_z + CAMERA_PLAYER_Z_DIST, camMovSpeed);\n\n        const viewDirDiffx = camera_lookat_x - camera_position_x;\n        const viewDirDiffz = -Math.abs(camera_lookat_z - camera_position_z);\n\n        const camRotSpeed = boot + damp(4);\n        camera_rotation.x = angle_lerp_degrees(\n          camera_rotation.x,\n          90 - Math.atan2(Math.hypot(viewDirDiffz, viewDirDiffx), camera_position_y - camera_lookat_y) / DEG_TO_RAD,\n          camRotSpeed,\n        );\n\n        camera_rotation.y = angle_lerp_degrees(\n          camera_rotation.y,\n          90 - angle_wrap_degrees(Math.atan2(viewDirDiffz, viewDirDiffx) / DEG_TO_RAD),\n          camRotSpeed,\n        );\n      }\n\n      camera_rotation.x = clamp(camera_rotation.x, -87, 87);\n    }\n\n    const playerMatrix = (allModels[MODEL_ID_PLAYER_BODY]!.$matrix = identity\n      .translate(x, player_model_y, z)\n      .rotateSelf(0, player_look_angle));\n\n    [MODEL_ID_PLAYER_LEG0, MODEL_ID_PLAYER_LEG1].map((modelId, i) => {\n      allModels[modelId]!.$matrix = playerMatrix\n        .translate(\n          0,\n          player_legs_speed * clamp(Math.sin(gameTime * PLAYER_LEGS_VELOCITY + Math.PI * (i - 1) - Math.PI / 2) * 0.45),\n        )\n        .rotateSelf(\n          player_legs_speed * Math.sin(gameTime * PLAYER_LEGS_VELOCITY + Math.PI * (i - 1)) * (0.25 / DEG_TO_RAD),\n          0,\n        );\n    });\n\n    boot = 0;\n  };\n\n  const doVerticalCollisions = () => {\n    let maxModelIdCount = 0;\n    let nextModelId = 0;\n    let grav = 0;\n    let lines = 0;\n    player_has_ground = 0;\n    player_collision_modelIdCounter.fill(0);\n    for (let y = 0; y < 31; ++y) {\n      let up = 0;\n      const yindex = y * (COLLISION_TEXTURE_SIZE * 4);\n      for (let x = 0; x < COLLISION_TEXTURE_SIZE - 0; x++) {\n        let i = yindex + x * 4;\n        const a = (collision_buffer[i]! + collision_buffer[i + 1]!) / 255;\n        i = collision_buffer[i + 2]!;\n        if (x > 14 && x < COLLISION_TEXTURE_SIZE - 14) {\n          up += a;\n        }\n        if (i && a) {\n          const count = player_collision_modelIdCounter[i]! + 1;\n          player_collision_modelIdCounter[i] = count;\n          if (count >= maxModelIdCount) {\n            maxModelIdCount = count;\n            nextModelId = i;\n          }\n        }\n      }\n      if (up < 3 && y > 5) {\n        grav += y / 32;\n      }\n      if (up > 3) {\n        if (y > 7) {\n          lines += y / 15;\n        }\n        player_has_ground = 1;\n      }\n    }\n\n    if (nextModelId) {\n      player_has_ground = 1;\n    }\n\n    currentModelId = nextModelId || currentModelIdTMinus1;\n    currentModelIdTMinus1 = nextModelId;\n\n    player_gravity = lerpDamp(player_gravity, player_has_ground ? 6.5 : 8, 4);\n\n    // push up and gravity\n    player_position_global.y +=\n      lines / 41 - (player_has_ground || player_gravity) * (grav / 41) * player_gravity * gameTimeDelta;\n  };\n\n  const doHorizontalCollisions = () => {\n    player_mov_x = 0;\n    player_mov_z = 0;\n    for (let y = 32; y < COLLISION_TEXTURE_SIZE; y += 2) {\n      let front = 0;\n      let back = 0;\n      let left = 0;\n      let right = 0;\n      const yindex = y * (COLLISION_TEXTURE_SIZE * 4);\n      for (let x = y & 1; x < COLLISION_TEXTURE_SIZE; x += 2) {\n        const i1 = yindex + x * 4;\n        const i2 = yindex + (COLLISION_TEXTURE_SIZE - 1 - x) * 4;\n        const dist1 = collision_buffer[i1]! / 255;\n        const dist2 = collision_buffer[i2 + 1]! / 255;\n        const t = 1 - Math.abs(2 * (x / (COLLISION_TEXTURE_SIZE - 1)) - 1);\n\n        if (x > 10 && x < COLLISION_TEXTURE_SIZE - 10) {\n          front = max(max(dist1 * t, (dist1 * collision_buffer[i2]!) / 255), front);\n          back = max(max(dist2 * t, (dist2 * collision_buffer[i1 + 1]!) / 255), back);\n        }\n\n        if (x < COLLISION_TEXTURE_SIZE / 2 - 10 || x > COLLISION_TEXTURE_SIZE / 2 + 10) {\n          const xdist = ((1 - t) * max(dist1, dist2)) / 3;\n          if (xdist > 0.001) {\n            if (x < COLLISION_TEXTURE_SIZE / 2 && left < xdist) {\n              left = xdist;\n            } else if (x > COLLISION_TEXTURE_SIZE / 2 && right < xdist) {\n              right = xdist;\n            }\n          }\n        }\n      }\n\n      if (Math.abs(right - left) > Math.abs(player_mov_x)) {\n        player_mov_x = right - left;\n      }\n      if (Math.abs(back - front) > Math.abs(player_mov_z)) {\n        player_mov_z = back - front;\n      }\n    }\n  };\n\n  player_update = () => {\n    let forward = touch_movementY + (keyboard_downKeys[KEY_FRONT] ? 1 : 0) - (keyboard_downKeys[KEY_BACK] ? 1 : 0);\n    let strafe = touch_movementX + (keyboard_downKeys[KEY_LEFT] ? 1 : 0) - (keyboard_downKeys[KEY_RIGHT] ? 1 : 0);\n\n    const gamepad = navigator.getGamepads()[0];\n    if (gamepad) {\n      const { buttons, axes } = gamepad;\n      const getGamepadButtonState = (index: number) =>\n        buttons[index]?.pressed || (buttons[index]?.value as any) > 0 ? 1 : 0;\n\n      const interactButtonPressed =\n        getGamepadButtonState(GAMEPAD_BUTTON_X) ||\n        getGamepadButtonState(GAMEPAD_BUTTON_Y) ||\n        getGamepadButtonState(GAMEPAD_BUTTON_A) ||\n        getGamepadButtonState(GAMEPAD_BUTTON_B);\n\n      forward +=\n        getGamepadButtonState(GAMEPAD_BUTTON_UP) - getGamepadButtonState(GAMEPAD_BUTTON_DOWN) - threshold(axes[1], 0.2);\n\n      strafe +=\n        getGamepadButtonState(GAMEPAD_BUTTON_LEFT) -\n        getGamepadButtonState(GAMEPAD_BUTTON_RIGHT) -\n        threshold(axes[0], 0.2);\n\n      if (player_first_person) {\n        camera_rotation.x += threshold(axes[3], 0.3) * 80 * gameTimeDelta;\n        camera_rotation.y += threshold(axes[2], 0.3) * 80 * gameTimeDelta;\n      }\n\n      if (interactButtonPressed && !gamepadInteractPressed) {\n        keyboard_downKeys[KEY_INTERACT] = 1;\n      }\n      gamepadInteractPressed = interactButtonPressed;\n    }\n\n    const movAngle = Math.atan2(forward, strafe);\n    const movAmount = threshold(clamp(Math.hypot(forward, strafe)), 0.05);\n\n    // ------- read collision renderBuffer -------\n\n    gl.finish();\n    gl.readPixels(0, 0, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE, gl.RGBA, gl.UNSIGNED_BYTE, collision_buffer);\n    gl.invalidateFramebuffer(gl.READ_FRAMEBUFFER, [gl.COLOR_ATTACHMENT0, gl.DEPTH_ATTACHMENT]);\n    gl.invalidateFramebuffer(gl.DRAW_FRAMEBUFFER, [gl.COLOR_ATTACHMENT0, gl.DEPTH_ATTACHMENT]);\n\n    // ------- process collision renderBuffer -------\n\n    NO_INLINE(doHorizontalCollisions)();\n    NO_INLINE(doVerticalCollisions)();\n\n    const playerSpeedCollision = clamp(1 - max(Math.abs(player_mov_x), Math.abs(player_mov_z)) * 5);\n    const movementRadians = player_first_person ? camera_rotation.y * DEG_TO_RAD : Math.PI;\n    player_legs_speed = lerpDamp(player_legs_speed, movAmount, 10);\n    if (movAmount) {\n      player_look_angle_target = 90 - movAngle / DEG_TO_RAD;\n    }\n    player_look_angle = angle_lerp_degrees(player_look_angle, player_look_angle_target, gameTimeDelta * 8);\n\n    player_speed = lerpDamp(\n      player_speed,\n      player_has_ground * playerSpeedCollision * clamp(2 * movAmount) * 7,\n      player_has_ground ? (playerSpeedCollision > 0.1 ? 10 : 5 + 2 * movAmount) : 1,\n    );\n\n    player_collision_velocity_x = lerpDamp(player_collision_velocity_x, 0, player_has_ground ? 8 : 4);\n    player_mov_x +=\n      gameTimeDelta *\n      ((currentModelId ? 0 : playerSpeedCollision * player_collision_velocity_x) -\n        Math.cos(movAngle + movementRadians) * movAmount * player_speed);\n\n    player_collision_velocity_z = lerpDamp(player_collision_velocity_z, 0, player_has_ground ? 8 : 4);\n    player_mov_z +=\n      gameTimeDelta *\n      ((currentModelId ? 0 : playerSpeedCollision * player_collision_velocity_z) -\n        Math.sin(movAngle + movementRadians) * movAmount * player_speed);\n\n    NO_INLINE(player_move)();\n\n    keyboard_downKeys[KEY_INTERACT] = 0;\n  };\n};\n","import { gl } from \"./gl\";\n\nexport interface WebglProgramAbstraction {\n  (name: string): WebGLUniformLocation;\n  (): void;\n}\n\nexport const loadShader = (source: string, type: number = gl.VERTEX_SHADER): WebGLShader => {\n  const shader = gl.createShader(type)!;\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (DEBUG && !gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    throw new Error(\"An error occurred compiling the shaders: \" + gl.getShaderInfoLog(shader));\n  }\n\n  return shader;\n};\n\nexport const initShaderProgram = (vertexShader: WebGLShader, sfsSource: string): WebglProgramAbstraction => {\n  const uniforms: Record<string, WebGLUniformLocation> = {};\n  const program = gl.createProgram()!;\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, loadShader(sfsSource, gl.FRAGMENT_SHADER));\n  gl.linkProgram(program);\n\n  if (DEBUG && !gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    throw new Error(\"Unable to initialize the shader program: \" + gl.getProgramInfoLog(program));\n  }\n\n  return (name?: string): any =>\n    name ? uniforms[name] || (uniforms[name] = gl.getUniformLocation(program, name)!) : gl.useProgram(program);\n};\n","import { identity, matrixToArray } from \"../math\";\nimport { absoluteTime, mainMenuVisible } from \"./world-state\";\nimport type { MODEL_ID_SOUL } from \"./models\";\nimport {\n  allModels,\n  levers,\n  MODEL_ID_LEVER,\n  MODEL_ID_PLAYER_BODY,\n  MODEL_ID_PLAYER_LEG0,\n  MODEL_ID_PLAYER_LEG1,\n  souls,\n  SOULS_COUNT,\n  type MODEL_ID_SOUL_COLLISION,\n} from \"./models\";\nimport { gl } from \"../gl\";\n\nconst worldMatricesBuffer = new Float32Array(39 * 16);\n\nexport const renderModels = (\n  worldMatrixLoc: WebGLUniformLocation,\n  renderPlayer: 0 | 1 | boolean,\n  soulModelId: typeof MODEL_ID_SOUL | typeof MODEL_ID_SOUL_COLLISION,\n  isShadowRender: 0 | 1,\n) => {\n  if (mainMenuVisible) {\n    const matrix = identity.rotate(0, Math.sin(absoluteTime) * 40 - 70);\n    for (const modelId of [MODEL_ID_PLAYER_BODY, MODEL_ID_PLAYER_LEG0, MODEL_ID_PLAYER_LEG1]) {\n      matrixToArray(matrix, worldMatricesBuffer, modelId - 1);\n    }\n\n    gl.uniformMatrix4fv(worldMatrixLoc, false, worldMatricesBuffer);\n    gl.drawElements(\n      gl.TRIANGLES,\n      allModels[MODEL_ID_PLAYER_LEG1]!.$vertexEnd! - allModels[MODEL_ID_PLAYER_BODY]!.$vertexBegin!,\n      gl.UNSIGNED_SHORT,\n      allModels[MODEL_ID_PLAYER_BODY]!.$vertexBegin! * 2,\n    );\n    return;\n  }\n\n  // Setup world matrices\n\n  for (let i = 0; i < allModels.length; ++i) {\n    if (allModels[i]!.$kind) {\n      matrixToArray(allModels[i]!.$matrix, worldMatricesBuffer, i - 1);\n    }\n  }\n  gl.uniformMatrix4fv(worldMatrixLoc, false, worldMatricesBuffer);\n\n  // Render world\n\n  gl.drawElements(\n    gl.TRIANGLES,\n    (renderPlayer ? allModels[MODEL_ID_PLAYER_LEG1]!.$vertexEnd! : allModels[MODEL_ID_PLAYER_BODY]!.$vertexBegin!) - 3,\n    gl.UNSIGNED_SHORT,\n    3 * 2,\n  );\n\n  // Setup souls and levers matrices\n\n  for (let i = 0; i < SOULS_COUNT; ++i) {\n    matrixToArray(souls[i]!.$matrix!, worldMatricesBuffer, i);\n  }\n\n  for (let i = 0; i < levers.length; ++i) {\n    matrixToArray(levers[i]!.$matrix!, worldMatricesBuffer, i + SOULS_COUNT);\n    // Encode lerp value in matrix m44 so fragmemt shader can change the lever handle color\n    if (!isShadowRender) {\n      worldMatricesBuffer[(i + SOULS_COUNT) * 16 + 15] = 1 - levers[i]!.$lerpValue;\n    }\n  }\n\n  gl.uniformMatrix4fv(worldMatrixLoc, false, worldMatricesBuffer);\n\n  // Render souls\n\n  gl.drawElementsInstanced(\n    gl.TRIANGLES,\n    allModels[soulModelId]!.$vertexEnd! - allModels[soulModelId]!.$vertexBegin!,\n    gl.UNSIGNED_SHORT,\n    allModels[soulModelId]!.$vertexBegin! * 2,\n    13,\n  );\n\n  // Render levers\n\n  gl.drawElementsInstanced(\n    gl.TRIANGLES,\n    allModels[MODEL_ID_LEVER]!.$vertexEnd! - allModels[MODEL_ID_LEVER]!.$vertexBegin!,\n    gl.UNSIGNED_SHORT,\n    allModels[MODEL_ID_LEVER]!.$vertexBegin! * 2,\n    levers.length,\n  );\n};\n","// shaders\nimport csm_vsSource from \"./shaders/csm-vertex.vert\";\nimport main_vsSource, {\n  uniformName_projectionMatrix,\n  uniformName_viewMatrix,\n  uniformName_worldMatrices,\n} from \"./shaders/main-vertex.vert\";\nimport main_fsSource, {\n  uniformName_viewPos,\n  uniformName_csm_matrix0,\n  uniformName_csm_matrix1,\n  uniformName_csm_texture0,\n  uniformName_csm_texture1,\n  uniformName_groundTexture,\n  constDef_CSM_TEXTURE_SIZE as CSM_TEXTURE_SIZE,\n  constDef_CSM_PLANE_DISTANCE as CSM_PLANE_DISTANCE,\n} from \"./shaders/main-fragment.frag\";\nimport collider_fsSource from \"./shaders/collider-fragment.frag\";\nimport void_fsSource from \"./shaders/void-fragment.frag\";\nimport sky_vsSource from \"./shaders/sky-vertex.vert\";\nimport sky_fsSource, { uniformName_iResolution } from \"./shaders/sky-fragment.frag\";\n\nimport { clamp, integers_map, identity, mat_perspectiveXY, matrixToArray } from \"./math\";\nimport { MODEL_ID_SOUL, MODEL_ID_SOUL_COLLISION, player_position_final } from \"./game/models\";\nimport { absoluteTime, gameTimeDelta, gameTimeUpdate, mainMenuVisible, worldStateUpdate } from \"./game/world-state\";\nimport { mat_perspective, zFar, zNear, camera_rotation } from \"./camera\";\nimport { csm_buildMatrix } from \"./csm\";\nimport { initPage, player_first_person } from \"./page\";\nimport { gl } from \"./gl\";\nimport {\n  player_update,\n  COLLISION_TEXTURE_SIZE,\n  player_init,\n  camera_position_x,\n  camera_position_y,\n  camera_position_z,\n} from \"./player\";\nimport { loadShader, initShaderProgram } from \"./shaders-utils\";\nimport { renderModels } from \"./game/models-render\";\n\nexport const startMainLoop = (groundTextureImage: HTMLImageElement) => {\n  const mainVertexShader = loadShader(main_vsSource);\n  const csmShader = initShaderProgram(loadShader(csm_vsSource), void_fsSource);\n  const skyShader = initShaderProgram(loadShader(sky_vsSource), sky_fsSource);\n  const collisionShader = initShaderProgram(mainVertexShader, collider_fsSource);\n  const mainShader = initShaderProgram(mainVertexShader, main_fsSource);\n\n  const csm_render = integers_map(2, (csmSplit: number) => {\n    const texture = gl.createTexture()!;\n\n    gl.activeTexture(gl.TEXTURE0 + csmSplit);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.DEPTH_COMPONENT24,\n      CSM_TEXTURE_SIZE,\n      CSM_TEXTURE_SIZE,\n      0,\n      gl.DEPTH_COMPONENT,\n      gl.UNSIGNED_INT,\n      null,\n    );\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, gl.LEQUAL); // Can be LESS or LEQUAL\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\n    const lightSpaceMatrix: Float32Array = new Float32Array(16);\n    return (matrix?: DOMMatrix) => {\n      if (matrix) {\n        matrixToArray(matrix, lightSpaceMatrix);\n        gl.uniformMatrix4fv(csmShader(uniformName_viewMatrix), false, lightSpaceMatrix);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, texture, 0);\n        gl.clear(gl.DEPTH_BUFFER_BIT);\n        renderModels(csmShader(uniformName_worldMatrices), !player_first_person, MODEL_ID_SOUL, 1);\n      } else {\n        gl.uniformMatrix4fv(\n          mainShader(csmSplit ? uniformName_csm_matrix1 : uniformName_csm_matrix0),\n          false,\n          lightSpaceMatrix,\n        );\n      }\n    };\n  });\n\n  const csm_framebuffer = gl.createFramebuffer();\n  const collision_renderBuffer = gl.createRenderbuffer();\n  const collision_frameBuffer = gl.createFramebuffer()!;\n  const collision_texture = gl.createTexture()!;\n\n  const mainLoop = (globalTime: number) => {\n    gl.flush();\n\n    requestAnimationFrame(mainLoop);\n\n    gameTimeUpdate(globalTime);\n\n    if (gameTimeDelta > 0) {\n      // read collision shader output\n\n      worldStateUpdate();\n\n      player_update();\n    }\n\n    const camera_view = (\n      mainMenuVisible ? identity.rotate(-20, -90) : identity.rotate(-camera_rotation.x, -camera_rotation.y)\n    )\n      .invertSelf()\n      .translateSelf(\n        mainMenuVisible ? -4.5 : -camera_position_x,\n        mainMenuVisible ? 2 : -camera_position_y,\n        mainMenuVisible ? 3.2 - clamp(hC.clientWidth / 1000) : -camera_position_z,\n      );\n\n    if (gameTimeDelta > 0) {\n      const { x, y, z } = player_position_final;\n      // *** COLLISION RENDERER ***\n\n      collisionShader();\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n      gl.viewport(0, 0, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE);\n\n      // first collision render\n\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      gl.colorMask(true, false, true, false);\n      gl.uniformMatrix4fv(\n        collisionShader(uniformName_viewMatrix),\n        false,\n        matrixToArray(\n          identity\n            .rotate(0, 180)\n            .invertSelf()\n            .translateSelf(-x, -y, 0.3 - z),\n        ),\n      );\n      renderModels(collisionShader(uniformName_worldMatrices), 0, MODEL_ID_SOUL_COLLISION, 0);\n\n      // second collision render\n\n      gl.clear(gl.DEPTH_BUFFER_BIT);\n      gl.colorMask(false, true, true, false);\n      gl.uniformMatrix4fv(\n        collisionShader(uniformName_viewMatrix),\n        false,\n        matrixToArray(identity.translate(-x, -y, -z - 0.3)),\n      );\n      renderModels(collisionShader(uniformName_worldMatrices), 0, MODEL_ID_SOUL_COLLISION, 0);\n\n      // Flushing collision render\n      gl.flush();\n    }\n\n    // *** CASCADED SHADOWMAPS ***\n\n    csmShader();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, csm_framebuffer);\n    gl.viewport(0, 0, CSM_TEXTURE_SIZE, CSM_TEXTURE_SIZE);\n\n    csm_render[0]!(csm_buildMatrix(camera_view, zNear, CSM_PLANE_DISTANCE, 10));\n    csm_render[1]!(csm_buildMatrix(camera_view, CSM_PLANE_DISTANCE, zFar, 11));\n\n    // *** MAIN RENDER ***\n\n    mainShader();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    gl.colorMask(true, true, true, true);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    csm_render[0]!();\n    csm_render[1]!();\n\n    gl.uniformMatrix4fv(mainShader(uniformName_projectionMatrix), false, mat_perspective(zNear, zFar));\n    gl.uniformMatrix4fv(mainShader(uniformName_viewMatrix), false, matrixToArray(camera_view));\n    gl.uniform3f(mainShader(uniformName_viewPos), camera_position_x, camera_position_y, camera_position_z);\n\n    renderModels(mainShader(uniformName_worldMatrices), !player_first_person, MODEL_ID_SOUL, 0);\n\n    // *** SKY RENDER ***\n\n    skyShader();\n\n    gl.uniform3f(skyShader(uniformName_iResolution), gl.drawingBufferWidth, gl.drawingBufferHeight, absoluteTime);\n    gl.uniform3f(skyShader(uniformName_viewPos), camera_position_x, camera_position_y, camera_position_z);\n    gl.uniformMatrix4fv(skyShader(uniformName_viewMatrix), false, matrixToArray(camera_view.inverse()));\n\n    gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 0);\n\n    // Prepare for collision reading on next frame.\n    // Flushing here increase the chance of the GPU finishing the rendering before we read the texture.\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n    gl.flush();\n  };\n\n  collisionShader();\n  gl.uniformMatrix4fv(collisionShader(uniformName_projectionMatrix), false, mat_perspectiveXY(1.4, 0.59, 0.0001, 1));\n\n  mainShader();\n  gl.uniform1i(mainShader(uniformName_groundTexture), 2);\n  gl.uniform1i(mainShader(uniformName_csm_texture1), 1);\n  gl.uniform1i(mainShader(uniformName_csm_texture0), 0);\n\n  skyShader();\n  gl.uniform1i(skyShader(uniformName_groundTexture), 2);\n\n  // Shadows framebuffer\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, csm_framebuffer);\n  // Disable rendering to the csm color buffer, we just need the depth buffer\n  gl.drawBuffers([gl.NONE]);\n  gl.readBuffer(gl.NONE);\n\n  // Collision framebuffer\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n  gl.bindRenderbuffer(gl.RENDERBUFFER, collision_renderBuffer);\n\n  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE);\n  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, collision_renderBuffer);\n\n  gl.activeTexture(gl.TEXTURE2);\n\n  gl.bindTexture(gl.TEXTURE_2D, collision_texture);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    gl.RGB,\n    COLLISION_TEXTURE_SIZE,\n    COLLISION_TEXTURE_SIZE,\n    0,\n    gl.RGB,\n    gl.UNSIGNED_BYTE,\n    null,\n  );\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, collision_texture, 0);\n\n  // Ground texture\n\n  gl.bindTexture(gl.TEXTURE_2D, gl.createTexture());\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1024, 1024, 0, gl.RGBA, gl.UNSIGNED_BYTE, groundTextureImage);\n  gl.generateMipmap(gl.TEXTURE_2D);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\n  // GL Setup\n\n  gl.enable(gl.DEPTH_TEST); // Enable depth testing\n  gl.enable(gl.CULL_FACE); // Don't render triangle backs\n\n  gl.clearDepth(1); // Clear everything. Default value is 1\n  gl.cullFace(gl.BACK); // Default value is already BACK\n  gl.depthFunc(gl.LEQUAL); // LEQUAL to make sky works\n  gl.clearColor(0, 0, 0, 1);\n\n  worldStateUpdate();\n\n  NO_INLINE(player_init)();\n\n  NO_INLINE(initPage)();\n\n  // gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n  requestAnimationFrame(mainLoop);\n};\n","import { plane_fromPolygon } from \"../math\";\nimport type { Polygon } from \"../geometry/geometry\";\nimport { allModels, MODEL_ID_LEVER, souls, SOULS_COUNT } from \"./models\";\nimport { gl } from \"../gl\";\n\nexport const initTriangleBuffers = () => {\n  if (DEBUG) {\n    console.time(\"initTriangleBuffers\");\n  }\n\n  let polygon: Polygon | undefined;\n\n  const _triangleIndices: number[] = [];\n  const _vertexPositions: number[] = [];\n  const _vertexColors: number[] = [];\n  const _vertexNormals: number[] = [];\n\n  const _vertexInts = new Int32Array(8);\n  const _vertexIntsSmooth = new Int32Array(_vertexInts.buffer, 0, 5);\n  const _vertexFloats = new Float32Array(_vertexInts.buffer);\n  const _vertexMap = new Map<string, number>();\n\n  const getVertex = (i: number): number => {\n    let { x, y, z } = polygon![i]!;\n    _vertexFloats[0] = x;\n    _vertexFloats[1] = y;\n    _vertexFloats[2] = z;\n    const key = \"\" + (polygon!.$smooth ? _vertexIntsSmooth : _vertexInts);\n    let index = _vertexMap.get(key);\n    if (index !== undefined) {\n      x = index * 3;\n      _vertexNormals[x] = (_vertexNormals[x++]! + _vertexInts[5]!) / 2;\n      _vertexNormals[x] = (_vertexNormals[x++]! + _vertexInts[6]!) / 2;\n      _vertexNormals[x] = (_vertexNormals[x]! + _vertexInts[7]!) / 2;\n    } else {\n      _vertexMap.set(key, (index = _vertexMap.size));\n      _vertexPositions.push(x, y, z, _vertexFloats[3]!);\n      _vertexColors.push(_vertexInts[4]!);\n      _vertexNormals.push(_vertexInts[5]!, _vertexInts[6]!, _vertexInts[7]!);\n    }\n    return index;\n  };\n\n  let meshFirstIndex: number = 0;\n\n  for (const model of allModels) {\n    _vertexFloats[3] = model.$modelId === MODEL_ID_LEVER ? -SOULS_COUNT - 1 : model.$kind && model.$modelId;\n    for (polygon of model.$polygons!) {\n      const { x, y, z } = plane_fromPolygon(polygon);\n      _vertexInts[4] = polygon.$color! | 0;\n      _vertexInts[5] = x * 32767;\n      _vertexInts[6] = y * 32767;\n      _vertexInts[7] = z * 32767;\n      for (let i = 2, a = getVertex(0), b = getVertex(1); i < polygon.length; ++i) {\n        _triangleIndices.push(a, b, (b = getVertex(i)));\n      }\n    }\n\n    // free memory\n    model.$polygons = null;\n\n    // write the indices offset and count\n    model.$vertexBegin = meshFirstIndex;\n    model.$vertexEnd = meshFirstIndex = _triangleIndices.length;\n  }\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(_vertexPositions), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ARRAY_BUFFER, new Int16Array(_vertexNormals), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(1, 3, gl.SHORT, true, 0, 0);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ARRAY_BUFFER, new Uint32Array(_vertexColors), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(2, 4, gl.UNSIGNED_BYTE, true, 0, 0);\n\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(_triangleIndices), gl.STATIC_DRAW);\n\n  gl.enableVertexAttribArray(0);\n  gl.enableVertexAttribArray(1);\n  gl.enableVertexAttribArray(2);\n\n  if (DEBUG) {\n    console.timeEnd(\"initTriangleBuffers\");\n    console.table({\n      \"game models\": allModels.filter((m) => !!m.$kind).length,\n      \"all models\": allModels.length,\n      \"vertices\": _vertexMap.size,\n      \"triangles\": _triangleIndices.length / 3,\n      \"indices\": _triangleIndices.length,\n    });\n\n    if (souls.length !== SOULS_COUNT) {\n      throw new Error(\"Souls must be \" + SOULS_COUNT + \" but is \" + souls.length);\n    }\n  }\n};\n","// This music has been exported by SoundBox and modified manually to minify better.\n\n// Beethoven's Piano Sonata No. 14, 3rd movement, readapted by Ryan Malm for this game\n\nexport const song_patterns = '000001234556112341234556011111111112011111111112000001111112'\n\nexport const song_columns = [\n  [ // Columns 0\n    \"(.15:15:=5:=A:=AF=AFIFIMRMRUY(Y(((((((((((((((((((((((((((((M(M(((((((((((((((((((((((((((((R(R(((((((((((((((((((((((((((((U(U\",\n    \"(059<59<A9<AE<AEHAEHMEHMQMQTY(Y\",\n    \"(5:>A:>AF>AFJAFJMFJMRJMRVMRVY(Y\",\n    \"(:?BFFKNRRWZ^(^((:=@FFILRRUX^(^\",\n    \"Q(M(M(O(Q(R(T(Q(T(R(W(U(T(R(Q(N(W((Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(X]\",\n    \"QN(M(N(M(N(M(N(M((((((((((((((((W(Y(Y(Y(Y(Y(Y(Y(Y(((((((((((((((]\",\n  ],\n  [ // Columns 1\n    \".(5(.(5(.(5(.(5(.(5(.(5(.(5(.(5\",\n    \"-(5(-(5(-(5(-(5(-(5(-(5(-(5(-(5\",\n    \",(5(,(5(,(5(,(5(,(5(,(5(,(5(,(5\",\n    \"*(6(*(6(*(6(*(6(*(6(*(6(*(6(*(6\",\n    \"5(E(E(F(H(I(K(H(K(I(N(M(K(I(H(F(A(((((((((((((((((((((((((((((((5(((5(((5(((5(((5(((5(((5(((5\",\n    \"5(6(5(6(5(6(5(6(5((()(((((((((((A(B(A(B(A(B(A(B(A(((5\",\n  ],[ // Columns 2\n    \"9(((9(((9(((9(((9(((9(((9(((9\",\n    \"9(((Q(((Q(((Q\",\n  ],[ // Columns 3\n    \"9(9(9(9(9(9(9(999(9(9(9(999(9(9\",\n    \"9(9(9(9(9(999(9(((((Q\",\n  ],[ // Columns 4\n    \"((((Q(((((((Q(((((((Q(((((((Q\",\n    \"Q((Q((Q((Q((Q((Q((((Q\",\n  ]\n] as const;\n\nexport const song_instruments = [\n  [ // instrument 0\n    69, // OSC1_VOL\n    128, // OSC1_SEMI\n    0, // OSC1_XENV\n    143, // OSC2_VOL\n    128, // OSC2_SEMI\n    0, // OSC2_XENV\n    0, // NOISE_VOL\n    196, // ENV_ATTACK ** 2 * 4\n    100, // ENV_SUSTAIN ** 2 * 4\n    36, // ENV_RELEASE\n    0, // ENV_EXP_DECAY\n    0, // LFO_FREQ\n    149, // FX_FREQ\n    110, // FX_RESONANCE\n    31, // FX_DRIVE\n    47, // FX_PAN_AMT\n    3, // FX_PAN_FREQ\n    56, // FX_DELAY_AMT\n    2, // FX_DELAY_TIME\n    0, // LFO_AMT\n  ],\n  [ // Instrument 1\n    100, // OSC1_VOL\n    128, // OSC1_SEMI\n    0, // OSC1_XENV\n    201, // OSC2_VOL\n    128, // OSC2_SEMI\n    0, // OSC2_XENV\n    0, // NOISE_VOL\n    100, // ENV_ATTACK ** 2 * 4\n    144, // ENV_SUSTAIN ** 2 * 4\n    35, // ENV_RELEASE\n    0, // ENV_EXP_DECAY\n    6, // LFO_FREQ\n    135, // FX_FREQ\n    0, // FX_RESONANCE\n    32, // FX_DRIVE\n    147, // FX_PAN_AMT\n    6, // FX_PAN_FREQ\n    0, // FX_DELAY_AMT\n    6, // FX_DELAY_TIME\n    195, // LFO_AMT\n  ],\n  [ // Instrument 2\n    255, // OSC1_VOL\n    116, // OSC1_SEMI\n    85, // OSC1_XENV\n    255, // OSC2_VOL\n    116, // OSC2_SEMI\n    37, // OSC2_XENV\n    14, // NOISE_VOL\n    64, // ENV_ATTACK ** 2 * 4\n    144, // ENV_SUSTAIN ** 2 * 4\n    73, // ENV_RELEASE\n    99, // ENV_EXP_DECAY\n    0, // LFO_FREQ\n    136, // FX_FREQ\n    15, // FX_RESONANCE\n    32, // FX_DRIVE\n    0, // FX_PAN_AMT\n    0, // FX_PAN_FREQ\n    66, // FX_DELAY_AMT\n    6, // FX_DELAY_TIME\n    0, // LFO_AMT\n  ],\n  [ // Instrument 3\n    0, // OSC1_VOL\n    140, // OSC1_SEMI\n    0, // OSC1_XENV\n    0, // OSC2_VOL\n    140, // OSC2_SEMI\n    0, // OSC2_XENV\n    81, // NOISE_VOL\n    64, // ENV_ATTACK ** 2 * 4\n    400, // ENV_SUSTAIN ** 2 * 4\n    47, // ENV_RELEASE\n    55, // ENV_EXP_DECAY\n    5, // LFO_FREQ\n    239, // FX_FREQ\n    135, // FX_RESONANCE\n    13, // FX_DRIVE\n    176, // FX_PAN_AMT\n    5, // FX_PAN_FREQ\n    16, // FX_DELAY_AMT\n    4, // FX_DELAY_TIME\n    187, // LFO_AMT\n  ],\n  [ // Instrument 4\n    221, // OSC1_VOL\n    128, // OSC1_SEMI\n    64, // OSC1_XENV\n    210, // OSC2_VOL\n    128, // OSC2_SEMI\n    64, // OSC2_XENV\n    255, // NOISE_VOL\n    64, // ENV_ATTACK ** 2 * 4\n    144, // ENV_SUSTAIN ** 2 * 4\n    73, // ENV_RELEASE\n    79, // ENV_EXP_DECAY\n    7, // LFO_FREQ\n    195, // FX_FREQ\n    15, // FX_RESONANCE\n    21, // FX_DRIVE\n    20, // FX_PAN_AMT\n    0, // FX_PAN_FREQ\n    9, // FX_DELAY_AMT\n    3, // FX_DELAY_TIME\n    64, // LFO_AMT\n  ],\n] as const\n\nexport const song_rowLen0 = 5513\n\nexport const song_rowLen1 = 4562\n\nexport const song_rowLen2 = 3891\n\n// Rows per pattern\nexport const song_patternLen = 32\n\n// End pattern\nexport const song_endPattern = 11\n\n// Number of channels\nexport const song_numChannels = 5\n\n","export const loadStep = (fn: () => void) => {\n  // loading dots ...\n  h4.innerHTML += \".\";\n  setTimeout(fn);\n};\n","/* -*- mode: javascript; tab-width: 4; indent-tabs-mode: nil; -*-\n *\n * Copyright (c) 2011-2013 Marcus Geelnard\n *\n * This software is provided 'as-is', without any express or implied\n * warranty. In no event will the authors be held liable for any damages\n * arising from the use of this software.\n *\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n *\n * 1. The origin of this software must not be misrepresented; you must not\n *    claim that you wrote the original software. If you use this software\n *    in a product, an acknowledgment in the product documentation would be\n *    appreciated but is not required.\n *\n * 2. Altered source versions must be plainly marked as such, and must not be\n *    misrepresented as being the original software.\n *\n * 3. This notice may not be removed or altered from any source\n *    distribution.\n *\n */\n\n// WARNING: Source code of the original player was heavily manually modified to reduce bundle size.\n// This player plays only the game song and is modified.\n// This makes this version not compatible with default soundbox songs.\n\nimport { audioContext, songAudioSource } from \"./audio-context\";\nimport {\n  song_endPattern,\n  song_patternLen,\n  song_patterns,\n  song_instruments,\n  song_rowLen0,\n  song_rowLen1,\n  song_rowLen2,\n  song_numChannels,\n  song_columns,\n} from \"./song\";\nimport { loadStep } from \"../load-step\";\n\nconst getnotefreq = (n: number) => 0.003959503758 * 2 ** ((n - 256) / 12);\n\n/** oscillator 0 */\nconst osc_sin = (value: number) => Math.sin(value * Math.PI * 2);\n\n/** oscillator 1 */\nconst osc_square = (value: number) => (value % 1 < 0.5 ? 1 : -1);\n\n/** oscillator 2 */\nconst osc_saw = (value: number) => 2 * (value % 1) - 1;\n\n/** oscillator 3 */\nconst osc_tri = (value: number) => {\n  const v2 = (value % 1) * 4;\n  return v2 < 2 ? v2 - 1 : 3 - v2;\n};\n\nconst SEGMENT_NUM_WORDS = song_patternLen * (song_endPattern + 1) * 2;\n\n// const getSegmentNumWords = (song_rowLen: number) => song_rowLen * SEGMENT_NUM_WORDS;\n\nconst song_numWords = (song_rowLen0 + song_rowLen1 + song_rowLen2) * SEGMENT_NUM_WORDS;\n\nexport const loadSong = (done: () => void) => {\n  let channelIndex = 0;\n\n  const mixBuffer = new Int32Array(song_numWords);\n\n  const finish = () => {\n    const audioBuffer = audioContext.createBuffer(2, song_numWords / 2, 44100);\n    for (let i = 0; i < 2; i++) {\n      for (let j = i, data = audioBuffer.getChannelData(i); j < song_numWords; j += 2) {\n        data[j >> 1] = mixBuffer[j]! / 65536;\n      }\n    }\n\n    // Load the buffer into the audio source\n    songAudioSource.buffer = audioBuffer;\n\n    // Loop forever\n    songAudioSource.loop = true;\n\n    loadStep(done);\n  };\n\n  const next = () => {\n    const COLUMNS = song_columns[channelIndex]!;\n\n    const [\n      OSC1_VOL,\n      OSC1_SEMI,\n      OSC1_XENV,\n      OSC2_VOL,\n      OSC2_SEMI,\n      OSC2_XENV,\n      NOISE_VOL,\n      ENV_ATTACK,\n      ENV_SUSTAIN,\n      _ENV_RELEASE,\n      ENV_EXP_DECAY,\n      LFO_FREQ,\n      FX_FREQ,\n      FX_RESONANCE,\n      FX_DRIVE,\n      FX_PAN_AMT,\n      FX_PAN_FREQ,\n      FX_DELAY_AMT,\n      FX_DELAY_TIME,\n      LFO_AMT,\n    ] = song_instruments[channelIndex]!;\n\n    const ENV_RELEASE = _ENV_RELEASE ** 2 * 4;\n\n    // Generate audio data for a single track/channel.\n    let mixIndex = 0;\n\n    const make = (song_rowLen: number) => {\n      const createNote = (note: number) => {\n        const OSC1_WAVEFORM = channelIndex < 2 ? osc_saw : osc_sin;\n        const OSC2_WAVEFORM = channelIndex < 2 ? (channelIndex < 1 ? osc_square : osc_tri) : osc_sin;\n\n        // Local variables.\n        let o1t: number;\n        let o2t: number;\n\n        // Re-trig oscillators\n        let c1 = 0;\n        let c2 = 0;\n\n        const noteBuf = new Int32Array(ENV_ATTACK + ENV_SUSTAIN + ENV_RELEASE);\n\n        // Generate one note (attack + sustain + release)\n        for (let j1 = 0, j2 = 0; j1 < ENV_ATTACK + ENV_SUSTAIN + ENV_RELEASE; ++j1, ++j2) {\n          let e = 1;\n          // Envelope\n          if (j1 < ENV_ATTACK) {\n            e = j1 / ENV_ATTACK;\n          } else if (j1 >= ENV_ATTACK + ENV_SUSTAIN) {\n            e = (j1 - ENV_ATTACK - ENV_SUSTAIN) / ENV_RELEASE;\n            e = (1 - e) * 3 ** ((ENV_EXP_DECAY / -16) * e);\n          }\n\n          if (j2 >= 0) {\n            // Calculate note frequencies for the oscillators\n            o1t = getnotefreq(note + OSC1_SEMI);\n            o2t = getnotefreq(note + OSC2_SEMI) * (channelIndex ? 1 : 1.0072);\n\n            // Switch arpeggio note.\n            j2 -= song_rowLen * 4;\n          }\n\n          // Add to (mono) channel buffer\n          noteBuf[j1] =\n            80 * // Oscillator 1\n            (OSC1_WAVEFORM((c1 += o1t! * e ** (OSC1_XENV / 32))) * OSC1_VOL +\n              // Oscillator 2\n              OSC2_WAVEFORM((c2 += o2t! * e ** (OSC2_XENV / 32))) * OSC2_VOL +\n              // Noise oscillator\n              (NOISE_VOL ? (Math.random() * 2 - 1) * NOISE_VOL : 0)) *\n            e;\n        }\n        return noteBuf;\n      };\n\n      // Local variables\n      let n;\n      let t;\n      let f;\n\n      const chnBuf = new Int32Array(song_rowLen * SEGMENT_NUM_WORDS);\n\n      // Clear effect state\n      let low = 0;\n      let band = 0;\n      let high;\n      let filterActive: boolean | undefined;\n\n      // Clear note cache.\n      const noteCache = [];\n\n      // Put performance critical instrument properties in local variables\n      const lfoFreq = 2 ** (LFO_FREQ - 9) / song_rowLen;\n      const panFreq = (Math.PI * 2 ** (FX_PAN_FREQ - 8)) / song_rowLen;\n      const dly = (FX_DELAY_TIME * song_rowLen) & ~1; // Must be an even number\n\n      // Patterns\n      for (let p = 0; p <= song_endPattern; ++p) {\n        // Pattern rows\n        for (\n          let row = 0,\n            cp = +song_patterns[channelIndex * 12 + p]!,\n            // Calculate start sample number for this row in the pattern\n            rowStartSample = (p * song_patternLen + row) * song_rowLen;\n          row < song_patternLen;\n          ++row\n        ) {\n          // Generate notes for this pattern row\n          for (let col = 0; col < 4; ++col) {\n            n = 0;\n            if (cp) {\n              n = COLUMNS[cp - 1]!.charCodeAt(row + col * song_patternLen) - 40;\n              n += n > 0 ? 106 : 0;\n            }\n            if (n) {\n              const noteBuf = noteCache[n] || (noteCache[n] = createNote(n));\n              for (let j = 0, i = rowStartSample * 2; j < noteBuf.length; ++j, i += 2) {\n                chnBuf[i] += noteBuf[j]!;\n              }\n            }\n          }\n\n          // Perform effects for this pattern row\n          for (let j = 0, lsample, rsample, k; j < song_rowLen; ++j) {\n            // Dry mono-sample\n            k = (rowStartSample + j) * 2;\n            lsample = 0;\n            rsample = chnBuf[k]!;\n\n            // We only do effects if we have some sound input\n            if (rsample || filterActive) {\n              // State variable filter\n              f = FX_FREQ * ((43.23529 * 3.141592) / 44100);\n              if (channelIndex === 1 || channelIndex === 4) {\n                f *= (osc_sin(lfoFreq * k) * LFO_AMT) / 512 + 0.5;\n              }\n              f = 1.5 * Math.sin(f);\n              low += f * band;\n              high = (1 - FX_RESONANCE / 255) * (rsample - band) - low;\n              band += f * high;\n              rsample = channelIndex === 4 ? band : channelIndex === 3 ? high : low;\n\n              // Distortion\n              if (!channelIndex) {\n                rsample *= 22 * 1e-5;\n                rsample = rsample < 1 ? (rsample > -1 ? osc_sin(rsample / 4) : -1) : 1;\n                rsample /= 22 * 1e-5;\n              }\n\n              // Drive\n              rsample *= FX_DRIVE / 32;\n\n              // Is the filter active (i.e. still audiable)?\n              filterActive = rsample * rsample > 1e-5;\n\n              // Panning\n              t = (Math.sin(panFreq * k) * FX_PAN_AMT) / 512 + 0.5;\n              lsample = rsample * (1 - t);\n              rsample *= t;\n            }\n\n            // Delay is always done, since it does not need sound input\n            if (k >= dly) {\n              // Left channel = left + right[-p] * t\n              lsample += (chnBuf[k - dly + 1]! * FX_DELAY_AMT) / 255;\n\n              // Right channel = right + left[-p] * t\n              rsample += (chnBuf[k - dly]! * FX_DELAY_AMT) / 255;\n            }\n\n            mixBuffer[mixIndex + k] += chnBuf[k] = lsample;\n            ++k;\n            mixBuffer[mixIndex + k] += chnBuf[k] = rsample;\n          }\n        }\n      }\n\n      mixIndex += song_rowLen * SEGMENT_NUM_WORDS;\n    };\n\n    make(song_rowLen0);\n    make(song_rowLen1);\n    make(song_rowLen2);\n\n    loadStep(++channelIndex < song_numChannels ? next : finish);\n  };\n\n  loadStep(next);\n};\n","import \"./index.css\";\n\nimport \"./dev-tools/dev-main\";\n\nif (DEBUG) {\n  console.time(\"boot\");\n}\n\nimport groundTextureSvg from \"./groundTexture.svg\";\n\nimport { build_life_the_universe_and_everything } from \"./game/level\";\nimport { startMainLoop } from \"./main-loop\";\nimport { loadGame } from \"./game/world-state\";\nimport { initTriangleBuffers } from \"./game/triangle-buffers\";\nimport { loadSong } from \"./music/music-player\";\nimport { loadStep } from \"./load-step\";\n\nloadStep(() => {\n  let loadStatus = 0;\n  const image = new Image();\n\n  if (DEBUG) {\n    console.time(\"load\");\n  }\n\n  const end = () => {\n    if (++loadStatus === 2) {\n      if (DEBUG) {\n        console.timeEnd(\"load\");\n      }\n\n      if (DEBUG) {\n        console.time(\"startMainLoop\");\n      }\n\n      startMainLoop(image);\n\n      if (DEBUG) {\n        console.timeEnd(\"startMainLoop\");\n      }\n    }\n  };\n\n  image.onload = image.onerror = end;\n  image.src = groundTextureSvg;\n\n  const songLoaded = () => {\n    loadStep(() => {\n      initTriangleBuffers();\n      loadStep(end);\n      loadGame();\n    });\n    build_life_the_universe_and_everything();\n  };\n\n  if (DEBUG && DEBUG_FLAG1) {\n    songLoaded();\n  } else {\n    NO_INLINE(loadSong)(songLoaded);\n  }\n\n  if (DEBUG) {\n    console.timeEnd(\"boot\");\n  }\n});\n"],"names":["code","CSM_TEXTURE_SIZE","CSM_PLANE_DISTANCE","main_vsSource","csm_vsSource","void_fsSource","sky_vsSource","sky_fsSource","collider_fsSource","main_fsSource"],"mappings":"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"}