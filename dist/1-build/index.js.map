{"version":3,"file":"index.js","sources":["../../app/groundTexture.svg","../../app/math.ts","../../app/geometry/geometry.ts","../../app/geometry/csg.ts","../../app/game/models.ts","../../app/game/world-state.ts","../../app/game/models-factory.ts","../../app/game/level.ts","../../app/camera.ts","../../app/csm.ts","../../app/music/audio-context.ts","../../app/page.ts","../../app/gl.ts","../../app/player.ts","../../app/utils/keycodes.ts","../../app/shaders-utils.ts","../../app/game/models-render.ts","../../app/main-loop.ts","../../app/shaders/main-vertex.vert","../../app/shaders/main-fragment.frag","../../app/shaders/sky-fragment.frag","../../app/shaders/csm-vertex.vert","../../app/shaders/void-fragment.frag","../../app/shaders/sky-vertex.vert","../../app/shaders/collider-fragment.frag","../../app/load-step.ts","../../app/music/song.ts","../../app/music/music-player.ts","../../app/index.ts","../../app/game/triangle-buffers.ts"],"sourcesContent":["export default \"__VITE_ASSET__b9f78ae4__\"","export const integers_map = <T>(n: number, fn: (i: number) => T) => Array.from(Array(n), (_, i) => fn(i));\n\n/** Amount to be multiplied to an angle in degrees to obtain an angle in radians, approximately 0.017453292519943295 */\nexport const DEG_TO_RAD = Math.PI / 180;\n\nexport const min = /* @__PURE__ */ (a: number, b: number) => (a < b ? a : b);\n\nexport const max = /* @__PURE__ */ (a: number, b: number) => (a > b ? a : b);\n\nexport const abs = /* @__PURE__ */ (n: number) => (n < 0 ? -n : n);\n\nexport const clamp01 = /* @__PURE__ */ (t: number) => (t < 0 ? 0 : t > 1 ? 1 : t);\n\n/** Linear interpolation */\nexport const lerp = /* @__PURE__ */ (a: number, b: number, t: number) => a + (b - a) * clamp01(t);\n\nexport const lerpneg = /* @__PURE__ */ (v: number, t: number) => {\n  v = clamp01(v);\n  return lerp(v, 1 - v, t);\n};\n\n/**\n * Trigonometry - Wrap an angle so it is always between -PI and PI\n * @param radians The angle in radians to wrap between -PI and PI\n * @returns The angle in radians wrapped so it is always between -PI and PI\n */\nexport const angle_wrap_radians = /* @__PURE__ */ (radians: number): number =>\n  Math.atan2(Math.sin(radians), Math.cos(radians));\n\nexport const angle_wrap_degrees = /* @__PURE__ */ (degrees: number): number =>\n  angle_wrap_radians(degrees * DEG_TO_RAD) / DEG_TO_RAD;\n\nexport const angle_lerp = /* @__PURE__ */ (a0: number, a1: number, t: number) => {\n  const da = (a1 - a0) % (Math.PI * 2);\n  return a0 + (((2 * da) % (Math.PI * 2)) - da) * clamp01(t);\n};\n\nexport const angle_lerp_degrees = /* @__PURE__ */ (a0: number, a1: number, t: number) =>\n  angle_lerp(a0 * DEG_TO_RAD, a1 * DEG_TO_RAD, t) / DEG_TO_RAD;\n\nexport interface Vec2 {\n  x: number;\n  y: number;\n}\n\nexport interface Vec3 {\n  x: number;\n  y: number;\n  z: number;\n}\n\nexport interface Vec4 {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n}\n\nexport interface Vec3Optional {\n  x?: number | undefined;\n  y?: number | undefined;\n  z?: number | undefined;\n}\n\nexport interface Plane {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n}\n\nexport type Vec2In = Readonly<Vec2>;\n\nexport type Vec3In = Readonly<Vec3>;\n\nexport type Vec4In = Readonly<Vec4>;\n\nexport const vec3_distance = /* @__PURE__ */ ({ x, y, z }: Vec3In, b: Vec3In): number =>\n  Math.hypot(x - b.x, y - b.y, z - b.z);\n\nexport const vec3_dot = /* @__PURE__ */ ({ x, y, z }: Vec3In, b: Vec3In): number => x * b.x + y * b.y + z * b.z;\n\n/**\n * Computes a polygon plane using the Newell's method.\n * We are not using plane from 3 points algorithm,\n * because this can handle coplanar points and has precision problems.\n */\nexport const plane_fromPolygon = /* @__PURE__ */ (polygon: readonly Vec3In[]): Plane => {\n  // Newell's method\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = polygon.at(-1)!;\n  let b: Vec3In | number;\n  for (b of polygon) {\n    x += (a.y - b.y) * (a.z + b.z);\n    y += (a.z - b.z) * (a.x + b.x);\n    z += (a.x - b.x) * (a.y + b.y);\n    a = b;\n  }\n  b = Math.hypot(x, y, z);\n  x /= b;\n  y /= b;\n  z /= b;\n  return { x, y, z, w: x * a.x + y * a.y + z * a.z };\n};\n\n/** The identity matrix */\nexport const identity: DOMMatrixReadOnly = /* @__PURE__ */ new DOMMatrix();\n\nexport const float32Array16Temp = new Float32Array(16);\n\nexport const matrixToArray = (\n  $matrix: DOMMatrixReadOnly,\n  output: Float32Array | number[] = float32Array16Temp,\n  index: number = 0,\n) => {\n  index *= 16;\n  output[index++] = $matrix.m11;\n  output[index++] = $matrix.m12;\n  output[index++] = $matrix.m13;\n  output[index++] = $matrix.m14;\n  output[index++] = $matrix.m21;\n  output[index++] = $matrix.m22;\n  output[index++] = $matrix.m23;\n  output[index++] = $matrix.m24;\n  output[index++] = $matrix.m31;\n  output[index++] = $matrix.m32;\n  output[index++] = $matrix.m33;\n  output[index++] = $matrix.m34;\n  output[index++] = $matrix.m41;\n  output[index++] = $matrix.m42;\n  output[index++] = $matrix.m43;\n  output[index] = $matrix.m44;\n  return output;\n};\n\nexport const mat_perspectiveXY = /* @__PURE__ */ (mx: number, my: number, near: number, far: number) => [\n  mx,\n  0,\n  0,\n  0,\n  0,\n  my,\n  0,\n  0,\n  0,\n  0,\n  (far + near) / (near - far),\n  -1,\n  0,\n  0,\n  (2 * far * near) / (near - far),\n  0,\n];\n","import { abs, integers_map, identity, type Vec3, type Vec3Optional } from \"../math\";\n\nexport const GQuad = /* @__PURE__ */ [\n  { x: -1, z: 1 },\n  { x: 1, z: 1 },\n  { x: 1, z: -1 },\n  { x: -1, z: -1 },\n];\n\nexport interface Polygon<TVec3 = Vec3> extends Array<TVec3> {\n  /** Polygon material */\n  $color?: number | undefined;\n\n  /** Smooth normals? */\n  $smooth?: 0 | 1 | undefined;\n}\n\nexport const polygon_color = (polygon: Polygon, color: number | undefined, smooth?: 0 | 1 | undefined): Polygon => {\n  polygon.$smooth = smooth;\n  polygon.$color = color;\n  return polygon;\n};\n\nexport const vec3_transform = /* @__PURE__ */ ({ x, y, z }: Readonly<Vec3Optional>, m: DOMMatrixReadOnly): Vec3 => {\n  ({ x, y, z } = m.transformPoint({ x, y, z }));\n  return { x, y, z };\n};\n\nexport const polygon_transform = /* @__PURE__ */ (\n  polygon: Polygon<Readonly<Vec3Optional>>,\n  m: DOMMatrixReadOnly,\n  color: number | undefined = polygon.$color,\n): Polygon =>\n  polygon_color(\n    polygon.map((p) => vec3_transform(p, m)),\n    color,\n    polygon.$smooth,\n  );\n\nexport const polygons_transform = /* @__PURE__ */ (\n  polygons: Polygon<Readonly<Vec3Optional>>[],\n  m: DOMMatrixReadOnly,\n  color?: number | undefined,\n) => polygons.map((polygon) => polygon_transform(polygon, m, color));\n\n/**\n * Creates a regular polygon\n * The polygon will face up (normal 0, -1, 0).\n */\nexport const polygon_regular = /* @__PURE__ */ (segments: number, elongate: number = 0): Polygon =>\n  integers_map(segments, (i) => {\n    const z = Math.cos(Math.PI * 2 * (i / segments));\n    return {\n      x: Math.sin(Math.PI * 2 * (i / segments)),\n      y: 0,\n      z: abs(z) < 0.01 ? z : z < 0 ? z - elongate : z + elongate,\n    };\n  });\n\n/**\n * Connects a top and a bottom polygon with side polygons.\n * Top and bottom polygons must have the same length.\n * Top polygon is supposed to be flipped.\n */\nexport const cylinder_sides = /* @__PURE__ */ (btm: Polygon, top: Polygon, smooth?: 0 | 1 | undefined): Polygon[] =>\n  btm.map((btmi, i, { length }) =>\n    polygon_color(\n      [btmi, top[length - i - 1]!, top[length - ((i + 1) % length) - 1]!, btm[(i + 1) % length]!],\n      btm.$color,\n      smooth,\n    ),\n  );\n\n/** Simplest composition of polygon functions. */\nexport const cylinder = /* @__PURE__ */ (\n  segments?: number,\n  smooth?: 0 | 1,\n  topSize: number = 0,\n  elongate?: number,\n): Polygon[] => {\n  const points = segments ? polygon_regular(segments, elongate) : GQuad;\n  const top = polygon_transform(points, identity.translate(0, 1).scale3d(topSize > 0 ? topSize : 1));\n  const bottom = polygon_transform(points, identity.translate(0, -1).scale3d(topSize < 0 ? -topSize : 1)).reverse();\n  return [...cylinder_sides(bottom as Polygon, top, smooth), top, bottom];\n};\n\nexport const sphere = /* @__PURE__ */ (\n  slices: number,\n  stacks = slices,\n  vertexFunc: (slice: number, stack: number, polygon: Polygon) => Vec3 = (x: number, y: number) => {\n    y *= Math.PI / stacks;\n    x *= (Math.PI * 2) / slices;\n    return { x: Math.cos(x) * Math.sin(y), y: Math.cos(y), z: Math.sin(x) * Math.sin(y) };\n  },\n): Polygon[] => {\n  const polygons: Polygon[] = [];\n  for (let i = 0; i < slices; i++) {\n    for (let j = 0; j < stacks; j++) {\n      const polygon = polygon_color([], 0, 1);\n      const vertex = (x: number, y: number) => polygon.push(vertexFunc(x, y, polygon));\n      polygons.push(polygon);\n      vertex(i, j);\n      if (j) {\n        vertex((i + 1) % slices, j);\n      }\n      if (j < stacks - 1) {\n        vertex((i + 1) % slices, j + (1 % stacks));\n      }\n      vertex(i, j + (1 % stacks));\n    }\n  }\n  return polygons;\n};\n","import { plane_fromPolygon, type Vec3, type Vec3In, type Plane, vec3_dot } from \"../math\";\nimport { polygon_color, type Polygon } from \"./geometry\";\n\nexport const PLANE_EPSILON = 0.00008;\n\nexport interface CSGPolygon {\n  $polygon: Polygon;\n\n  $flipped: 0 | boolean;\n\n  /**\n   * When a polygon is splitted, this will contain the polygon from which this polygon was splitted.\n   * This is then used by csg_polygons to merge back splitted polygons if they are both present,\n   * to reduce the number of vertices and triangles.\n   */\n  $parent: CSGPolygon | 0;\n}\n\nexport interface CSGNode extends Plane {\n  /** Coplanar polygons */\n  $polygons: CSGPolygon[];\n  /** Front child */\n  $front: CSGNode | 0;\n  /** Back child */\n  $back: CSGNode | 0;\n}\n\nexport type CSGInput = CSGNode | readonly Polygon[];\n\ninterface SplitPolygonResult {\n  $front: CSGPolygon | undefined | false;\n  $back: CSGPolygon | undefined | false;\n}\n\nconst CSGPolygon_splitSpanning = /* @__PURE__ */ (plane: Plane, polygon: CSGPolygon): SplitPolygonResult => {\n  const fpoints: Vec3[] = [];\n  const bpoints: Vec3[] = [];\n  const { $polygon, $flipped } = polygon;\n  let jd: number;\n  let iv: Vec3In = $polygon.at(-1)!;\n  let id: number = vec3_dot(plane, iv) - plane.w;\n  for (const jv of $polygon) {\n    jd = vec3_dot(plane, jv) - plane.w;\n    if (id < PLANE_EPSILON) {\n      bpoints.push(iv);\n    }\n    if (id > -PLANE_EPSILON) {\n      fpoints.push(iv);\n    }\n    if ((id > PLANE_EPSILON && jd < -PLANE_EPSILON) || (id < -PLANE_EPSILON && jd > PLANE_EPSILON)) {\n      id /= jd - id;\n      iv = {\n        x: iv.x + (iv.x - jv.x) * id,\n        y: iv.y + (iv.y - jv.y) * id,\n        z: iv.z + (iv.z - jv.z) * id,\n      };\n      fpoints.push(iv);\n      bpoints.push(iv);\n    }\n    iv = jv;\n    id = jd;\n  }\n  return {\n    $front: fpoints.length > 2 && {\n      $polygon: polygon_color(fpoints, $polygon.$color, $polygon.$smooth),\n      $flipped,\n      $parent: polygon,\n    },\n    $back: bpoints.length > 2 && {\n      $polygon: polygon_color(bpoints, $polygon.$color, $polygon.$smooth),\n      $flipped,\n      $parent: polygon,\n    },\n  };\n};\n\nconst CSGPolygon_split = /* @__PURE__ */ (plane: Plane, polygon: CSGPolygon): SplitPolygonResult => {\n  const { $polygon } = polygon;\n  let $front: CSGPolygon | undefined;\n  let $back: CSGPolygon | undefined;\n  let d: number;\n  for (let i = 0; i < $polygon.length; ++i) {\n    d = vec3_dot(plane, $polygon[i]!) - plane.w;\n    if (d < -PLANE_EPSILON) {\n      $back = polygon;\n    } else if (d > PLANE_EPSILON) {\n      $front = polygon;\n    }\n    if ($back && $front) {\n      return CSGPolygon_splitSpanning(plane, polygon);\n    }\n  }\n  return { $front, $back };\n};\n\nconst csg_tree_addPolygon = /* @__PURE__ */ (\n  node: CSGNode | 0 | undefined,\n  polygon: CSGPolygon,\n  plane: Plane = plane_fromPolygon(polygon.$polygon),\n): CSGNode => {\n  if (node) {\n    const { $front, $back } = CSGPolygon_split(node, polygon);\n    if (!$front && !$back) {\n      node.$polygons.push(polygon); // Coplanar\n    }\n    if ($front) {\n      node.$front = csg_tree_addPolygon(node.$front, $front, plane);\n    }\n    if ($back) {\n      node.$back = csg_tree_addPolygon(node.$back, $back, plane);\n    }\n  } else {\n    const { x, y, z, w } = plane;\n    node = { x, y, z, w, $polygons: [polygon], $front: 0, $back: 0 };\n  }\n  return node;\n};\n\nconst csg_tree_clipNode = /* @__PURE__ */ (\n  anode: CSGNode,\n  bnode: CSGNode,\n  polygonPlaneFlipped: -1 | 1,\n): CSGPolygon[] => {\n  const result: CSGPolygon[] = [];\n  const recursion = (node: CSGNode, polygon: CSGPolygon) => {\n    let { $front, $back } = CSGPolygon_split(node, polygon);\n    if (!$front && !$back) {\n      if (polygonPlaneFlipped * vec3_dot(node, bnode) > 0) {\n        $front = polygon; // Coplanar front\n      } else {\n        $back = polygon; // Coplanar back\n      }\n    }\n    if ($front) {\n      if (node.$front) {\n        recursion(node.$front, $front);\n      } else {\n        result.push($front);\n      }\n    }\n    if ($back && node.$back) {\n      recursion(node.$back, $back);\n    }\n  };\n\n  for (const polygon of bnode.$polygons) {\n    recursion(anode, polygon);\n  }\n  return result;\n};\n\n/** Loop through all nodes in a tree */\nconst csg_tree_each = (node: CSGNode | 0 | undefined, fn: (node: CSGNode) => void): unknown =>\n  node && (fn(node), csg_tree_each(node.$front, fn), csg_tree_each(node.$back, fn));\n\n/**\n * If the given argument is a list of polygons, a new BSP tree built from the list of polygons is returned.\n * If the given argument is already a BSP tree, return it as is.\n * Note that array cannot be empty.\n */\nexport const csg_tree = /* @__PURE__ */ (n: CSGInput): CSGNode =>\n  (n as Polygon[]).length\n    ? // Build a BSP tree from a list of polygons\n      ((n as Polygon[]).reduce<CSGNode | 0>(\n        (prev, $polygon) => csg_tree_addPolygon(prev, { $polygon, $flipped: 0, $parent: 0 }),\n        0,\n      ) as CSGNode)\n    : // An object? We assume is a BSP tree.\n      (n as CSGNode);\n\n/** Convert solid space to empty space and empty space to solid space. */\nexport const csg_tree_flip = <T extends CSGNode | 0 | undefined>(root: T): T => {\n  csg_tree_each(root, (node) => {\n    const { $front, $back } = node;\n    node.$back = $front;\n    node.$front = $back;\n    node.x *= -1;\n    node.y *= -1;\n    node.z *= -1;\n    node.w *= -1;\n    for (const polygon of node.$polygons) {\n      polygon.$flipped = !polygon.$flipped;\n    }\n  });\n  return root;\n};\n\n/**\n * Union a[0] = a[0] U a[1] U a[2] U ...\n */\nexport const csg_union = /* @__PURE__ */ (...inputs: CSGInput[]): CSGNode =>\n  inputs.reduce((a: CSGInput, b: CSGInput | undefined): CSGNode => {\n    const polygonsToAdd: [Plane, CSGPolygon[]][] = [];\n    a = csg_tree(a);\n    if (b) {\n      b = csg_tree(b);\n\n      // clip to a, b\n      csg_tree_each(a, (node) => (node.$polygons = csg_tree_clipNode(b as CSGNode, node, 1)));\n\n      // get the list of polygons to be added from b clipped to a\n      csg_tree_each(b, (node) => polygonsToAdd.push([node, csg_tree_clipNode(a as CSGNode, node, -1)]));\n\n      // add the polygons to a\n      for (const [plane, polygons] of polygonsToAdd) {\n        for (const pp of polygons) {\n          csg_tree_addPolygon(a, pp, plane);\n        }\n      }\n    }\n    return a;\n  }) as CSGNode;\n\n/**\n * Subtraction a = a - (b[0] U b[1] U ...)\n * Note that a will be modified if is a tree.\n */\nexport const csg_subtract = /* @__PURE__ */ (a: CSGInput, ...b: CSGInput[]): CSGNode =>\n  csg_tree_flip(csg_union(csg_tree_flip(csg_tree(a)), ...b));\n\n/**\n * Extracts all the polygons from a BSP tree.\n * Some polygons will be merged, to reduce the number of triangles.\n */\nexport const csg_polygons = /* @__PURE__ */ (tree: CSGNode): Polygon[] => {\n  const byParent = new Map<CSGPolygon, CSGPolygon>();\n  const allPolygons = new Map<CSGPolygon, 0 | boolean>();\n\n  /** Adds a polygon, and replaces two splitted polygons that have the same parent with the parent */\n  const add = (polygon: CSGPolygon): CSGPolygon => {\n    if (polygon.$parent) {\n      const found = byParent.get(polygon.$parent);\n      if (found) {\n        allPolygons.delete(found);\n        polygon = add(polygon.$parent);\n      } else {\n        byParent.set(polygon.$parent, polygon);\n      }\n    }\n    return polygon;\n  };\n\n  csg_tree_each(tree, (node) => {\n    for (const polygon of node.$polygons) {\n      allPolygons.set(add(polygon), polygon.$flipped);\n    }\n  });\n\n  return Array.from(allPolygons, ([{ $polygon }, flipped]) => {\n    const polygon = $polygon.map(({ x, y, z }) => ({ x, y, z }));\n    return polygon_color(flipped ? polygon.reverse() : polygon, $polygon.$color, $polygon.$smooth);\n  });\n};\n\nexport const csg_polygons_subtract = (...input: CSGInput[]) => csg_polygons((csg_subtract as any)(...input));\n\nexport const csg_polygons_union = (...input: CSGInput[]) => csg_polygons(csg_union(...input));\n","import type { Vec3 } from \"../math\";\nimport type { Polygon } from \"../geometry/geometry\";\n\nexport interface Model {\n  $matrix: DOMMatrixReadOnly;\n  $modelId: number;\n  $kind: MODEL_KIND;\n  $polygons: Polygon[] | null;\n  _update?: () => DOMMatrixReadOnly;\n  $vertexBegin?: number;\n  $vertexEnd?: number;\n}\n\nexport interface Lever {\n  $value: 0 | 1;\n  $lerpValue: number;\n  $lerpValue2: number;\n  $parent: Model;\n  _update: () => void;\n  $matrix?: DOMMatrixReadOnly;\n  $locMatrix?: DOMMatrixReadOnly;\n}\n\nexport interface Soul {\n  $value: 0 | 1;\n  _update: () => void;\n  $matrix?: DOMMatrixReadOnly;\n}\n\nexport type Circle = [number, number, number];\n\nexport const allModels: Model[] = [];\n\n/** Fixed number of levers */\n\nexport const levers: Lever[] = [];\n\n/** Fixed number of souls */\nexport const SOULS_COUNT = 13;\n\nexport const souls: Soul[] = [];\n\nexport const player_position_final: Vec3 = {\n  x: 0,\n  y: 0,\n  z: 0,\n};\n\nexport const MODEL_KIND_MESH = 0;\n\nexport const MODEL_KIND_GAME = 1;\n\nexport const MODEL_KIND_GAME_NO_ATTACH_PLAYER = 2;\n\nexport type MODEL_KIND = typeof MODEL_KIND_MESH | typeof MODEL_KIND_GAME | typeof MODEL_KIND_GAME_NO_ATTACH_PLAYER;\n\nexport const MODEL_ID_STATIC_WORLD = 1;\n\nexport const MODEL_ID_FIRST_BOAT = 2;\n\nexport const MODEL_ID_PLAYER_BODY = 37;\n\nexport const MODEL_ID_PLAYER_LEG0 = 38;\n\nexport const MODEL_ID_PLAYER_LEG1 = 39;\n\nexport const MODEL_ID_LEVER = 40;\n\nexport const MODEL_ID_SOUL_COLLISION = 41;\n\nexport const MODEL_ID_SOUL = 42;\n","import { lerp, angle_wrap_degrees, lerpneg, abs, clamp01, min } from \"../math\";\nimport { allModels, levers, souls, SOULS_COUNT } from \"./models\";\n\nexport const KEY_LEFT = 0;\n\nexport const KEY_FRONT = 1;\n\nexport const KEY_RIGHT = 2;\n\nexport const KEY_BACK = 3;\n\nexport const KEY_INTERACT = 5;\n\nexport const keyboard_downKeys: (boolean | 0 | 1 | undefined)[] = [];\n\nexport let souls_collected_count = 0;\n\n/** Minimum 15.3 frames per second */\nexport const GAME_TIME_MAX_DELTA_TIME = 0.066;\n\nexport let absoluteTime = 0;\n\nexport let gameTime = 0;\n\nexport let gameTimeDelta: number = GAME_TIME_MAX_DELTA_TIME;\n\nexport let mainMenuVisible: boolean | undefined;\n\nexport const setMainMenuVisible = (visible: boolean) => {\n  mainMenuVisible = visible;\n};\n\nlet _globalTime: number | undefined;\n\nlet _messageEndTime = 1;\n\nexport const lerpDamp = /* @__PURE__ */ (from: number, to: number, speed: number) =>\n  lerp(from, to, 1 - Math.exp(-speed * gameTimeDelta));\n\nexport const gameTimeUpdate = (time: number) => {\n  const dt = (time - (_globalTime || time)) / 1000;\n  if (mainMenuVisible) {\n    gameTimeDelta = 0;\n    keyboard_downKeys[KEY_INTERACT] = 0;\n  } else {\n    gameTimeDelta = min(GAME_TIME_MAX_DELTA_TIME, dt);\n  }\n  gameTime += gameTimeDelta;\n  absoluteTime += dt;\n  _globalTime = time;\n};\n\n// export const gameTimeUpdate = (time: number) => {\n//   if (mainMenuVisible) {\n//     keyboard_downKeys[KEY_INTERACT] = 0;\n//   }\n//   const delta = (time - (_globalTime || time)) / 1000;\n//   if (delta >= 0.06) {\n//     gameTimeDelta = mainMenuVisible ? 0 : Math.min(GAME_TIME_MAX_DELTA_TIME, (time - (_globalTime || time)) / 1000);\n//     gameTime += gameTimeDelta;\n//     _globalTime = time;\n//   } else {\n//     gameTimeDelta = 0;\n//   }\n//   absoluteTime += delta;\n//   if (!_globalTime) {\n//     _globalTime = time;\n//   }\n// };\n\nexport const LOCAL_STORAGE_SAVED_GAME_KEY = \"DanteSP22\";\n\nexport let player_last_pulled_lever = 0;\n\nexport let rotatingPlatform1Rotation = 0;\n\nexport let rotatingPlatform2Rotation = 0;\n\nexport let rotatingHexCorridorRotation = 0;\n\nexport let game_completed: 0 | 1 = 0;\n\nexport let firstBoatLerp = 0;\n\nexport let secondBoatLerp = 0;\n\nconst showMessage = (message: string, duration: number) => {\n  if (_messageEndTime < Infinity) {\n    _messageEndTime = gameTime + duration;\n    h4.innerHTML = message;\n  }\n};\n\nexport const worldStateUpdate = () => {\n  const shouldRotatePlatforms = lerpneg(levers[12]!.$lerpValue, levers[13]!.$lerpValue);\n\n  rotatingHexCorridorRotation = lerp(\n    lerpDamp(rotatingHexCorridorRotation, 0, 1),\n    angle_wrap_degrees(rotatingHexCorridorRotation + gameTimeDelta * 60),\n    levers[5]!.$lerpValue - levers[6]!.$lerpValue2,\n  );\n\n  rotatingPlatform1Rotation = lerp(\n    lerpDamp(rotatingPlatform1Rotation, 0, 5),\n    angle_wrap_degrees(rotatingPlatform1Rotation + gameTimeDelta * 56),\n    shouldRotatePlatforms,\n  );\n\n  rotatingPlatform2Rotation = lerp(\n    lerpDamp(rotatingPlatform2Rotation, 0, 4),\n    angle_wrap_degrees(rotatingPlatform2Rotation + gameTimeDelta * 48),\n    shouldRotatePlatforms,\n  );\n\n  secondBoatLerp = lerpDamp(secondBoatLerp, levers[9]!.$lerpValue2, 0.2 + 0.3 * abs(levers[9]!.$lerpValue2 * 2 - 1));\n\n  firstBoatLerp = lerpDamp(\n    firstBoatLerp,\n    game_completed ? lerp(firstBoatLerp, -9, gameTimeDelta * 1.5) : clamp01(gameTime / 3),\n    1,\n  );\n\n  if (_messageEndTime && gameTime > _messageEndTime) {\n    _messageEndTime = 0;\n    h4.innerHTML = \"\";\n  }\n\n  if (levers[0]!.$value && levers[0]!.$lerpValue > 0.8) {\n    if (souls_collected_count < SOULS_COUNT) {\n      showMessage(\"Not leaving now, there are souls to catch!\", 3);\n      levers[0]!.$value = 0;\n    } else if (!game_completed) {\n      showMessage(\"Well done. They will be punished.<br>Thanks for playing\", Infinity);\n      game_completed = 1;\n    }\n  }\n\n  for (const model of allModels) {\n    if (model._update) {\n      model.$matrix = model._update();\n    }\n  }\n\n  for (const lever of levers) {\n    lever._update();\n  }\n\n  for (const soul of souls) {\n    soul._update();\n  }\n};\n\nexport const updateCollectedSoulsCounter = () =>\n  (h3.innerHTML = [\"0\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"XIII\"][\n    (souls_collected_count = souls.reduce((acc, { $value }) => acc + $value, 0))\n  ]!);\n\nexport const loadGame = () => {\n  try {\n    const [savedLevers, savedSouls, savedLastPulledLever, savedGameTime, savedSecondBoatLerp] = JSON.parse(\n      localStorage[LOCAL_STORAGE_SAVED_GAME_KEY]!,\n    );\n    levers.map(\n      (lever, index) =>\n        (lever.$lerpValue = lever.$lerpValue2 = lever.$value = index ? ((savedLevers[index] | 0) as 0 | 1) : 0),\n    );\n    souls.map((soul, index) => (soul.$value = (savedSouls[index] | 0) as 0 | 1));\n    player_last_pulled_lever = savedLastPulledLever;\n    gameTime = savedGameTime;\n    secondBoatLerp = savedSecondBoatLerp;\n  } catch (e) {\n    if (DEBUG) {\n      console.log(e);\n    }\n  }\n  firstBoatLerp = clamp01(player_last_pulled_lever);\n};\n\nexport const saveGame = () => {\n  localStorage[LOCAL_STORAGE_SAVED_GAME_KEY] = JSON.stringify([\n    levers.map(({ $value }) => $value),\n    souls.map(({ $value }) => $value),\n    player_last_pulled_lever,\n    gameTime,\n    secondBoatLerp,\n  ]);\n};\n\nexport const onSoulCollected = () => {\n  showMessage(\n    [\n      ,\n      \"Mark Zuckemberg<br>made the world worse\",\n      ,\n      \"Andrzej Mazur<br>for the js13k competition\",\n      \"Donald Trump<br>lies\",\n      \"Kim Jong-un<br>Dictator, liked pineapple on pizza\",\n      \"Maxime Euziere<br>forced me to finish this game\",\n      \"She traded NFTs apes\",\n      ,\n      \"Vladimir Putin<br>evil war\",\n      \"He was not a good person\",\n      ,\n      \"Salvatore Previti<br>made this evil game<br><br>Done. Go back to the boat\",\n    ][souls_collected_count] || 'Catched a \"crypto bro\".<br>\"Web3\" is all scam, lies and grift',\n    souls_collected_count && souls_collected_count < 12 ? 5 : 7,\n  );\n\n  updateCollectedSoulsCounter();\n  saveGame();\n};\n\nexport const onPlayerPullLever = (leverIndex: number) => {\n  if (DEBUG) {\n    console.log(\"switch lever \" + leverIndex + \" = \" + levers[leverIndex]?.$value);\n  }\n\n  if (leverIndex) {\n    showMessage(\"* click *\", 1);\n  }\n  player_last_pulled_lever = leverIndex;\n  saveGame();\n};\n","import { min, max, angle_lerp_degrees, DEG_TO_RAD, abs, identity, type Vec3Optional, vec3_distance } from \"../math\";\nimport { cylinder, polygons_transform, type Polygon } from \"../geometry/geometry\";\nimport {\n  levers,\n  souls,\n  allModels,\n  MODEL_ID_FIRST_BOAT,\n  MODEL_KIND_GAME,\n  type Circle,\n  type Lever,\n  type Model,\n  type Soul,\n  type MODEL_KIND,\n  player_position_final,\n} from \"./models\";\nimport {\n  keyboard_downKeys,\n  KEY_INTERACT,\n  onPlayerPullLever,\n  lerpDamp,\n  gameTimeDelta,\n  gameTime,\n  onSoulCollected,\n} from \"./world-state\";\n\nconst LEVER_SENSITIVITY_RADIUS = 3;\nconst SOUL_SENSITIVITY_RADIUS = 1.55;\n\nexport const material = NO_INLINE(\n  (r: number, g: number, b: number, a: number = 0): number =>\n    ((a * 255) << 24) | ((b * 255) << 16) | ((g * 255) << 8) | (r * 255),\n);\n\nexport let currentEditModel: Model;\n\nexport const newModel = (fn: (model: Model) => void, $kind: MODEL_KIND = MODEL_KIND_GAME) => {\n  const previousModel = currentEditModel;\n  const model: Model = {\n    $matrix: identity,\n    $modelId: allModels.length,\n    $kind,\n    $polygons: [],\n  };\n  allModels.push((currentEditModel = model));\n  fn(model);\n  currentEditModel = previousModel;\n  return model;\n};\n\nexport const meshAdd = (\n  polygons: Polygon<Readonly<Vec3Optional>>[],\n  transform: DOMMatrixReadOnly = identity,\n  color?: number | undefined,\n) => currentEditModel.$polygons!.push(...polygons_transform(polygons, transform, color));\n\nexport const newLever = (transform: DOMMatrixReadOnly): void => {\n  const $parent = currentEditModel;\n  const index = levers.length;\n  const lever: Lever = {\n    $value: 0,\n    $lerpValue: 0,\n    $lerpValue2: 0,\n    $parent,\n    _update: () => {\n      const { $value, $lerpValue, $lerpValue2 } = lever;\n      const locMatrix = $parent.$matrix.multiply(transform);\n      lever.$locMatrix = locMatrix;\n\n      if (\n        vec3_distance(locMatrix.transformPoint(), player_position_final) < LEVER_SENSITIVITY_RADIUS &&\n        keyboard_downKeys[KEY_INTERACT]\n      ) {\n        if ($lerpValue < 0.3 || $lerpValue > 0.7) {\n          lever.$value = $value ? 0 : 1;\n          onPlayerPullLever(index);\n        }\n      }\n\n      lever.$lerpValue = lerpDamp($lerpValue, $value, 4);\n      lever.$lerpValue2 = lerpDamp($lerpValue2, $value, 1);\n      lever.$matrix = locMatrix.rotate(lever.$lerpValue * 60 - 30, 0).translateSelf(0, 1);\n    },\n  };\n  levers.push(lever);\n\n  meshAdd(cylinder(5), transform.translate(-0.2).rotate(90, 90).scale(0.4, 0.1, 0.5), material(0.4, 0.5, 0.5));\n  meshAdd(cylinder(5), transform.translate(0.2).rotate(90, 90).scale(0.4, 0.1, 0.5), material(0.4, 0.5, 0.5));\n  meshAdd(cylinder(), transform.translate(0, -0.4).scale(0.5, 0.1, 0.5), material(0.5, 0.5, 0.4));\n};\n\nexport const newSoul = (transform: DOMMatrixReadOnly, ...walkingPath: number[][]) => {\n  const parentModel = currentEditModel;\n  const index = souls.length;\n  const circles = (walkingPath as Circle[]).map(([x, z, w]) => ({ x, z, w }));\n  let circle = circles[0]!;\n  let { x: targetX, z: targetZ } = circle;\n  let soulX = targetX;\n  let soulZ = targetZ;\n  let dirX = -1;\n  let dirZ = 0;\n  let randAngle = 0;\n  let lookAngle = 0;\n  let prevX = 0;\n  let prevZ = 0;\n  let velocity = 3;\n  let wasInside: boolean | undefined | 1 = 1;\n\n  const soul: Soul = {\n    $value: 0,\n    _update: () => {\n      if (!soul.$value) {\n        let isInside: boolean | undefined;\n        let contextualVelocity = 1;\n        let mindist = Infinity;\n\n        for (const c of circles) {\n          const { x, z, w } = c;\n          const distance = Math.hypot(targetX - x, targetZ - z);\n          const circleSDF = distance - w;\n          isInside ||= distance < w;\n          if (circleSDF > 0 && circleSDF < mindist) {\n            mindist = circleSDF;\n            circle = c;\n          }\n          contextualVelocity = min(contextualVelocity, distance / w);\n        }\n\n        if (!isInside) {\n          const { x, z, w } = circle;\n          const ax = targetX - x;\n          const az = targetZ - z;\n          let magnitude = Math.hypot(ax, az);\n          let angle = Math.atan2(-az, ax);\n          if (wasInside) {\n            randAngle = ((Math.random() - 0.5) * Math.PI) / 2;\n            velocity = max(1, velocity / (1 + Math.random()));\n          }\n          angle += randAngle;\n          dirX = -Math.cos(angle);\n          dirZ = Math.sin(angle);\n          if (magnitude > 0.1) {\n            // limit the vector length to the circle radius, as a security measure\n            magnitude = min(magnitude, w) / (magnitude || 1);\n            targetX = ax * magnitude + x;\n            targetZ = az * magnitude + z;\n          }\n        }\n\n        wasInside = isInside;\n\n        velocity = lerpDamp(velocity, 3 + (1 - contextualVelocity) * 6, 3 + contextualVelocity);\n        soulX = lerpDamp(soulX, (targetX = lerpDamp(targetX, targetX + dirX, velocity)), velocity);\n        soulZ = lerpDamp(soulZ, (targetZ = lerpDamp(targetZ, targetZ + dirZ, velocity)), velocity);\n\n        lookAngle = angle_lerp_degrees(\n          lookAngle,\n          Math.atan2(soulX - prevX, soulZ - prevZ) / DEG_TO_RAD - 180,\n          3 * gameTimeDelta,\n        );\n\n        prevX = soulX;\n        prevZ = soulZ;\n\n        const soulPos = (soul.$matrix = parentModel.$matrix.multiply(\n          transform.translate(soulX, 0, soulZ).rotateSelf(0, lookAngle, Math.sin(gameTime * 1.7) * 7),\n        )).transformPoint();\n\n        if (vec3_distance(soulPos, player_position_final) < SOUL_SENSITIVITY_RADIUS) {\n          soul.$value = 1;\n          onSoulCollected();\n        }\n      }\n\n      if (soul.$value) {\n        soul.$matrix = allModels[MODEL_ID_FIRST_BOAT]!.$matrix.translate(\n          (index % 4) * 1.2 - 1.7 + Math.sin(gameTime + index) / 7,\n          -2,\n          -5.5 + ((index / 4) | 0) * 1.7 + abs((index % 4) - 2) + Math.cos(gameTime / 1.5 + index) / 6,\n        );\n      }\n    },\n  };\n\n  if (DEBUG_FLAG0) {\n    for (const c of circles) {\n      meshAdd(cylinder(12), transform.translate(c.x, -1.7, c.z).scale(c.w, 0.01, c.w), material(0.3, 0.3, 0.38));\n    }\n  }\n\n  souls.push(soul);\n};\n","import { abs, clamp01, integers_map, lerpneg, max, min, identity } from \"../math\";\nimport {\n  GQuad,\n  cylinder,\n  polygons_transform,\n  polygon_regular,\n  sphere,\n  cylinder_sides,\n  polygon_transform,\n  type Polygon,\n} from \"../geometry/geometry\";\nimport { csg_union, csg_polygons_subtract } from \"../geometry/csg\";\nimport {\n  levers,\n  MODEL_KIND_MESH,\n  MODEL_KIND_GAME_NO_ATTACH_PLAYER,\n  MODEL_ID_FIRST_BOAT,\n  MODEL_ID_PLAYER_BODY,\n  MODEL_ID_PLAYER_LEG0,\n  MODEL_ID_PLAYER_LEG1,\n  MODEL_ID_LEVER,\n  MODEL_ID_SOUL_COLLISION,\n  MODEL_ID_SOUL,\n  souls,\n} from \"./models\";\nimport {\n  gameTime,\n  firstBoatLerp,\n  secondBoatLerp,\n  rotatingHexCorridorRotation,\n  rotatingPlatform1Rotation,\n  rotatingPlatform2Rotation,\n} from \"./world-state\";\nimport { currentEditModel, material, meshAdd, newLever, newModel, newSoul } from \"./models-factory\";\n\nconst checkModelId = DEBUG\n  ? (name: string, expectedId: number) => {\n      console.log(`model ${name} id: ${currentEditModel.$modelId}`);\n      if (currentEditModel.$modelId !== expectedId) {\n        throw new Error(`Model ${name} id should be ${expectedId} but is ${currentEditModel.$modelId}`);\n      }\n    }\n  : () => {};\n\nexport const build_life_the_universe_and_everything = () => {\n  if (DEBUG) {\n    console.time(\"build_life_the_universe_and_everything\");\n  }\n  const HORN_STACKS = 10;\n\n  const hornsMatrices = integers_map(HORN_STACKS + 1, (i: number) =>\n    identity\n      .translate(Math.sin((i / HORN_STACKS) * Math.PI), i / HORN_STACKS)\n      .rotate(10 * (i / HORN_STACKS))\n      .scale(1.0001 - i / HORN_STACKS, 0, 1 - i / HORN_STACKS),\n  );\n\n  const hornPolygons = integers_map(HORN_STACKS, (i) =>\n    cylinder_sides(\n      polygon_transform(polygon_regular(18), hornsMatrices[i]!).reverse(),\n      polygon_transform(polygon_regular(18), hornsMatrices[i + 1]!),\n      1,\n    ),\n  ).flat();\n\n  // Initialize the full screen triangle for the sky. Must be the first model.\n\n  newModel(() => meshAdd([GQuad.slice(1)], identity.translate(-2).scale3d(3).rotate(90, 0)), MODEL_KIND_MESH);\n\n  newModel(() => {\n    const getBoatAnimationMatrix = (x: number, y: number, z: number) =>\n      identity\n        .translate(x + Math.sin(gameTime + 2) / 5, y + Math.sin(gameTime * 0.8) / 3, z)\n        .rotateSelf(Math.sin(gameTime) * 2, Math.sin(gameTime * 0.7), Math.sin(gameTime * 0.9));\n\n    const makeBigArcPolygons = (height: number) =>\n      csg_polygons_subtract(\n        polygons_transform(cylinder(), identity.translate(0, -height / 2).scale(6, height - 1, 2.2)),\n        polygons_transform(cylinder(), identity.translate(0, -height / 2 - 6).scale(4, height - 3, 4)),\n        polygons_transform(\n          cylinder(32, 1),\n          identity\n            .translate(0, height / 2 - 9)\n            .rotate(90, 0, 90)\n            .scale3d(4),\n        ),\n      );\n\n    const boatPolygons = csg_polygons_subtract(\n      polygons_transform(\n        cylinder(20, 1, 1.15, 1),\n        identity.translate(0, -3).scale(3.5, 1, 3.5),\n        material(0.7, 0.4, 0.25, 0.7),\n      ),\n      polygons_transform(\n        cylinder(20, 1, 1.3, 1),\n        identity.translate(0, -2.5).scale(2.6, 1, 3),\n        material(0.7, 0.4, 0.25, 0.2),\n      ),\n      polygons_transform(cylinder(), identity.translate(4, -1.2).scale3d(2), material(0.7, 0.4, 0.25, 0.3)),\n    );\n\n    const gateBarsPolygons = integers_map(7, (i) =>\n      polygons_transform(\n        cylinder(6, 1),\n        identity.translate(4 * (i / 6 - 0.5), 3).scale(0.2, 3, 0.2),\n        material(0.3, 0.3, 0.38),\n      ),\n    ).flat();\n\n    // ========= FIRST BOAT (modelId:2) ========= //\n\n    newModel((model) => {\n      checkModelId(\"FIRST_BOAT\", MODEL_ID_FIRST_BOAT);\n      model._update = () => getBoatAnimationMatrix(-12, 4.2, -66 + firstBoatLerp * 40);\n      meshAdd(boatPolygons);\n\n      // LEVER 0 - lever over the first boat\n      newLever(identity.translate(0, -3, 4));\n    });\n\n    // LEVER 1 - lever for the first gate, after the first boat\n    newLever(identity.translate(-5.4, 1.5, -19).rotate(0, -90));\n\n    // ========= WORLD! ========= //\n\n    // SOUL 0 - soul after first boat\n    newSoul(identity.translate(-0.5, 2.8, -20), [0, 0, 2.5], [0, -3, 2.5]);\n\n    // SOUL 1 - soul after first gate\n    newSoul(\n      identity.translate(0, 2.8),\n      [5, 10, 3],\n      [-5, 10, 3],\n      ...polygon_regular(18).map(({ x, z }) => [x * 7, z * 10, 4.5 - abs(x) * 2]),\n    );\n\n    // first boat attachment\n\n    meshAdd(cylinder(), identity.translate(-5, -0.2, -26).scale(3.2, 1, 2.5).skewX(3), material(0.8, 0.8, 0.8, 0.2));\n\n    // gate columns\n    GQuad.map(({ x, z }) =>\n      meshAdd(cylinder(6), identity.translate(x * 3, 3, z * 15).scale(0.7, 4, 0.7), material(0.6, 0.3, 0.3, 0.4)),\n    );\n\n    // in and out\n    [-23, 22].map((z) => meshAdd(cylinder(), identity.translate(0, 0, z).scale(3, 1, 8), material(0.9, 0.9, 0.9, 0.2)));\n\n    [-15, 15].map((z, i) => {\n      //  gate top\n      meshAdd(cylinder(), identity.translate(0, 6.3, z).scale(4, 0.3, 1), material(0.3, 0.3, 0.3, 0.4));\n      //  gate bottom\n      meshAdd(cylinder(), identity.translate(0, 1, z).scale(3, 0.2, 0.35), material(0.5, 0.5, 0.5, 0.3));\n      // in and out gate bars\n      newModel((model) => {\n        model._update = () => identity.translate(0, 0, z).scale(1, clamp01(1.22 - levers[i + 1]!.$lerpValue), 1);\n        meshAdd(gateBarsPolygons);\n      });\n    });\n\n    // horns\n\n    integers_map(5, (i) =>\n      integers_map(2, (j) =>\n        meshAdd(\n          hornPolygons,\n          identity\n            .translate((j - 0.5) * 18.5, 0, i * 4.8 - 9.5)\n            .rotate(0, 180 - j * 180)\n            .scale(1.2, 10, 1.2),\n          material(1, 1, 0.8, 0.2),\n        ),\n      ),\n    );\n\n    meshAdd(cylinder(), identity.translate(3, 1.5, -20).scale(0.5, 2, 5), material(0.7, 0.7, 0.7, 0.2));\n\n    // first lever pad\n    meshAdd(\n      cylinder(),\n      identity.translate(-3.4, -0.2, -19).scale(2, 1, 1.5).rotate(0, -90),\n      material(0.75, 0.75, 0.75, 0.2),\n    );\n    meshAdd(cylinder(5), identity.translate(-5.4, 0, -19).scale(2, 1, 2).rotate(0, -90), material(0.6, 0.3, 0.3, 0.4));\n\n    // descent\n\n    meshAdd(\n      cylinder(),\n      identity.rotate(0, 60).translate(14.8, -1.46, -1).rotate(-30).scale(4, 0.6, 4.5),\n      material(0.8, 0.2, 0.2, 0.5),\n    );\n\n    // base\n\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          // lower base\n          polygons_transform(\n            cylinder(6, 0, 0, 0.3),\n            identity.translate(8, -3, -4).scale(13, 1, 13),\n            material(0.7, 0.7, 0.7, 0.2),\n          ),\n\n          // hole extension\n          polygons_transform(cylinder(6), identity.translate(0, -8).scale(9, 8, 8), material(0.4, 0.2, 0.5, 0.5)),\n\n          // middle base\n          polygons_transform(\n            cylinder(6, 0, 0, 0.3),\n            identity.translate(0, -0.92).scale(13, 2, 13),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n        ),\n        // hole\n        polygons_transform(cylinder(5), identity.scale(5, 30, 5), material(0.4, 0.2, 0.6, 0.5)),\n\n        // smooth hole\n        polygons_transform(\n          cylinder(5, 0, 1.5),\n          identity.translate(0, 1).scale(4.5, 0.3, 4.5),\n          material(0.7, 0.5, 0.9, 0.2),\n        ),\n\n        // descent cut\n        polygons_transform(\n          cylinder(),\n          identity.rotate(0, 60).translate(14, 0.7, -1).rotate(-35).scale(2, 2, 2),\n          material(0.5, 0.5, 0.5, 0.5),\n        ),\n\n        // lower lever pad\n        polygons_transform(\n          cylinder(6),\n          identity.translate(15, -1.5, 4).scale(3.5, 1, 3.5),\n          material(0.5, 0.5, 0.5, 0.5),\n        ),\n      ),\n    );\n\n    // moving central platform in the first level\n\n    newModel((model) => {\n      model._update = () =>\n        identity.translate(\n          0,\n          levers[3]!.$lerpValue > 0.01\n            ? (Math.cos(gameTime * 1.5) * 5 + 2) * levers[3]!.$lerpValue2 * (1 - levers[2]!.$lerpValue) +\n                (1 - levers[3]!.$lerpValue) * -15\n            : // invisible\n              -500,\n          0,\n        );\n      meshAdd(cylinder(5), identity.translate(0, -0.2).scale(5, 1, 5), material(0.6, 0.65, 0.7, 0.3));\n\n      // LEVER 2 - lever over the central moving platform\n      newLever(identity.translate(0, 1.2));\n    });\n\n    // LEVER 3, lever in the descent of the first level\n    newLever(identity.translate(15, -2, 4));\n\n    // ******** LEVEL 2 ********\n\n    const level2Oscillation = () => min(levers[2]!.$lerpValue2, 1 - levers[4]!.$lerpValue2);\n\n    const blackPlatform = (freq: number, amplitude: number, pz: number) =>\n      newModel((model) => {\n        model._update = () =>\n          identity.translate(level2Oscillation() * Math.sin(freq * 3 + gameTime * freq) * amplitude);\n        GQuad.map(({ x, z }) => {\n          // column body\n          meshAdd(\n            cylinder(11, 1),\n            identity.translate(x * 4, 4, pz + z * 4).scale(0.8, 3, 0.8),\n            material(0.5, 0.3, 0.7, 0.6),\n          );\n          // column top\n          meshAdd(cylinder(), identity.translate(x * 4, 7, pz + z * 4).scale(1, 0.3), material(0.5, 0.5, 0.5, 0.3));\n        });\n\n        meshAdd(\n          csg_polygons_subtract(\n            polygons_transform(cylinder(), identity.translate(0, 0, pz).scale(5, 1, 5), material(0.8, 0.8, 0.8, 0.3)),\n            ...[-1, 1].map((i) =>\n              polygons_transform(\n                cylinder(),\n                identity\n                  .translate(5 * i, 0.2, pz)\n                  .rotate(i * -30)\n                  .scale(4, 1, 2),\n                material(0.8, 0.8, 0.8, 0.3),\n              ),\n            ),\n          ),\n        );\n        // bottom\n        meshAdd(cylinder(), identity.translate(0, -3, pz).scale(8, 2, 8), material(0.4, 0.4, 0.4, 0.3));\n      });\n\n    blackPlatform(0.7, 12, 35);\n    blackPlatform(1, 8.2, 55);\n\n    // central oscillating platform\n    newModel((model) => {\n      model._update = () => identity.translate(level2Oscillation() * Math.sin(gameTime / 1.5 + 2) * 12);\n      meshAdd(\n        csg_polygons_subtract(\n          csg_union(\n            polygons_transform(cylinder(), identity.scale(1.5, 1, 5), material(0.9, 0.9, 0.9, 0.2)),\n            polygons_transform(cylinder(6), identity.scale(4, 1, 5), material(0.9, 0.9, 0.9, 0.2)),\n            polygons_transform(cylinder(), identity.translate(0, -2).scale(2, 3.2, 1.9), material(0.3, 0.8, 0.5, 0.5)),\n            polygons_transform(\n              cylinder(16, 1, 0, 4),\n              identity.scale(1, 1, 1.5).rotate(0, 90),\n              material(0.9, 0.9, 0.9, 0.2),\n            ),\n          ),\n          polygons_transform(cylinder(), identity.scale(1.3, 10, 1.3), material(0.2, 0.7, 0.4, 0.6)),\n        ),\n        identity.translate(0, 0, 45),\n      );\n\n      // SOUL 2 - soul over the central oscillating platform in the second level\n      newSoul(identity.translate(0, 2.8, 45), [0, 0, 4.5]);\n    });\n\n    const level3Oscillation = () =>\n      clamp01(1 - level2Oscillation() * 5) * lerpneg(levers[4]!.$lerpValue, levers[5]!.$lerpValue);\n\n    // ******** LEVEL 3 ********\n\n    meshAdd(cylinder(), identity.translate(-21.1 + 2.45, -3, 55).scale(2.45, 1.4, 2.7), material(0.9, 0.9, 0.9, 0.2));\n\n    // triangle platform\n\n    newModel((model) => {\n      model._update = () => identity.translate((1 - level2Oscillation()) * 9.8);\n\n      meshAdd(cylinder(3), identity.translate(-23, -1.7, 55.8).scale(5, 0.7, 8.3), material(0.3, 0.6, 0.6, 0.2));\n      meshAdd(cylinder(8), identity.translate(-23, -2.2, 66.5).scale(1.5, 1.2, 1.5), material(0.8, 0.8, 0.8, 0.2));\n      meshAdd(cylinder(), identity.translate(-23, -3, 55).scale(5.2, 1.7, 3), material(0.5, 0.5, 0.5, 0.3));\n      meshAdd(cylinder(), identity.translate(-23, -2.2, 62).scale(3, 1, 4), material(0.5, 0.5, 0.5, 0.3));\n\n      newLever(identity.translate(-23, -0.5, 66.5));\n    });\n\n    // vertically oscillating mini platforms\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, level3Oscillation() * Math.sin(gameTime * (1.5 * 0.9)) * 4);\n\n      meshAdd(cylinder(), identity.translate(-21.1 - 1.45, -3, 55).scale(1.45, 1.4, 2.7), material(0.7, 0.7, 0.7, 0.2));\n\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(cylinder(), identity.scale(3, 1.4, 2.7)),\n          polygons_transform(cylinder(), identity.scale(1.2, 8, 1.2)),\n        ),\n        identity.translate(-33, -3, 55),\n        material(0.7, 0.7, 0.7, 0.2),\n      );\n    });\n\n    // horizontaly oscillating mini platforms\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, 0, level3Oscillation() * Math.sin(gameTime * 0.9) * 8);\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(\n            cylinder(),\n            identity.translate(-27, -3, 55).scale(3, 1.4, 2.7),\n            material(0.9, 0.9, 0.9, 0.2),\n          ),\n          polygons_transform(cylinder(), identity.translate(-27, -3, 55).scale(1, 3), material(0.9, 0.9, 0.9, 0.2)),\n        ),\n      );\n\n      meshAdd(cylinder(), identity.translate(-39, -3, 55).scale(3, 1.4, 2.7), material(0.9, 0.9, 0.9, 0.2));\n    });\n\n    // hex corridor door\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, levers[4]!.$lerpValue2 * -6.5);\n      meshAdd(\n        cylinder(6),\n        identity.translate(-44.5, 0, 55).rotate(90, 90).rotate(0, 90).scale(5.9, 0.5, 5.9),\n        material(0.7, 0.7, 0.7, 0.4),\n      );\n    });\n\n    newLever(identity.translate(-55, -1.1, 46).rotate(0, 90));\n\n    meshAdd(cylinder(6), identity.translate(-61.3, -2.4, 49).scale(3, 1, 5), material(0.4, 0.6, 0.6, 0.3));\n    meshAdd(cylinder(7), identity.translate(-57, -2.6, 46).scale(4, 1, 4), material(0.8, 0.8, 0.8, 0.3));\n\n    // hex corridor\n\n    const hexCorridorPolygons = [\n      ...polygons_transform(cylinder(), identity.translate(0, -3).scale(11, 1.4, 3), material(0.9, 0.9, 0.9, 0.2)),\n      ...csg_polygons_subtract(\n        polygons_transform(cylinder(6), identity.rotate(90).scale(6, 8, 6), material(0.3, 0.6, 0.6, 0.3)),\n        polygons_transform(\n          cylinder(4, 0, 0.01),\n          identity.translate(0, 6).scale(12, 2, 0.75).rotate(0, 45),\n          material(0.3, 0.6, 0.6, 0.3),\n        ),\n        polygons_transform(cylinder(6), identity.rotate(90).scale(5, 12, 5), material(0.3, 0.6, 0.6, 0.3)),\n        ...[5, 0, -5].map((x) =>\n          polygons_transform(\n            cylinder(5),\n            identity.translate(x, 2.5).rotate(90, 0, 36).scale(1.8, 10, 1.8),\n            material(0.3, 0.6, 0.6, 0.3),\n          ),\n        ),\n      ),\n    ];\n\n    meshAdd(hexCorridorPolygons, identity.translate(-53, 0, 55));\n\n    // rotating hex corridor\n\n    newModel((model) => {\n      model._update = () => {\n        return identity\n          .translate(-75, (1 - levers[5]!.$lerpValue2) * (1 - levers[6]!.$lerpValue) * 3, 55)\n          .rotate(180 * (1 - levers[5]!.$lerpValue2) + rotatingHexCorridorRotation, 0);\n      };\n      meshAdd(hexCorridorPolygons);\n    }, MODEL_KIND_GAME_NO_ATTACH_PLAYER);\n\n    // connection from rotating hex corridor to platforms\n\n    meshAdd(\n      cylinder(),\n      identity.translate(-88.3, -5.1, 55).rotate(-30).scale(5, 1.25, 4.5),\n      material(0.7, 0.7, 0.7, 0.2),\n    );\n\n    meshAdd(\n      cylinder(3, 0, -0.5),\n      identity.translate(-88.4, -3.9, 55).rotate(0, -90, 17).scale(3, 1.45, 5.9),\n      material(0.8, 0.8, 0.8, 0.2),\n    );\n\n    // platform after the rotating hex corridor\n\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          // base\n          polygons_transform(\n            cylinder(),\n            identity.translate(-100, -2.5, 55).scale(8, 1, 8),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n          // right path to the boat\n          polygons_transform(\n            cylinder(),\n            identity.translate(-113, -2.6, 55).scale(6.2, 1.1, 3).skewX(3),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n          // straiht line\n          polygons_transform(\n            cylinder(),\n            identity.translate(-100, -2.6, 70).scale(3, 1.1, 7),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n          // 45 degrees detour\n          polygons_transform(\n            cylinder(),\n            identity.translate(-96, -2.6, 73).rotate(0, 45).scale(3, 1.1, 5),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n          // 45 degrees detour hexagon\n          polygons_transform(\n            cylinder(6),\n            identity.translate(-88.79, -2.6, 80.21).scale(6, 1.1, 6).rotate(0, 15),\n            material(0.6, 0.6, 0.6, 0.3),\n          ),\n\n          // ascension\n          polygons_transform(\n            cylinder(),\n            identity.translate(-100, -1.1, 82.39).rotate(-15, 0).scale(3, 1.1, 6),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n          // ascension continuation\n          polygons_transform(\n            cylinder(),\n            identity.translate(-100, 0.42, 92).scale(3, 1.1, 4.1),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n        ),\n\n        // decorative octagon\n        polygons_transform(\n          cylinder(8),\n          identity.translate(-100, -1, 55).scale(7, 0.9, 7),\n          material(0.3, 0.3, 0.3, 0.4),\n        ),\n        polygons_transform(\n          cylinder(8),\n          identity.translate(-100, -2, 55).scale(4, 0.3, 4),\n          material(0.4, 0.4, 0.4, 0.5),\n        ),\n        polygons_transform(\n          cylinder(8),\n          identity.translate(-100, -3, 55).scale(0.6, 1, 0.6),\n          material(0.4, 0.4, 0.4, 0.5),\n        ),\n      ),\n    );\n\n    // SOUL 3 - soul in the central area, after the rotating hex corridor\n    newSoul(identity.translate(-100, 0.2, 55), [0, 0, 7.5], [-8, 0, 3.5], [-12, 0, 3.5], [-15, 0, 3.5]);\n\n    // SOUL 4 - soul after the central gate\n    newSoul(identity.translate(-89, 0.2, 80), [0, 0, 6]);\n\n    // first arc door\n\n    meshAdd(\n      csg_polygons_subtract(\n        polygons_transform(cylinder(), identity.translate(-100, 1, 63).scale(7.5, 4), material(0.5, 0.5, 0.5, 0.4)),\n        polygons_transform(cylinder(), identity.translate(-100, 0, 70).scale(2, 2, 10), material(0.5, 0.5, 0.5, 0.4)),\n        polygons_transform(\n          cylinder(20, 1),\n          identity.translate(-100, 2, 70).scale(2, 2, 10).rotate(90, 0),\n          material(0.5, 0.5, 0.5, 0.4),\n        ),\n      ),\n    );\n\n    // gate bars\n    newModel((model) => {\n      model._update = () => identity.translate(-99.7, -1.9, 63.5).scale(1, clamp01(1.1 - levers[6]!.$lerpValue), 1);\n      meshAdd(gateBarsPolygons);\n    });\n\n    // hex columns\n\n    GQuad.map(({ x, z }) => {\n      meshAdd(\n        cylinder(6),\n        identity.translate(-100 + x * 7, -3, z * 7 + 55).scale(1, 8.1),\n        material(0.6, 0.15, 0.15, 0.8),\n      );\n      [4, -0.4].map((i) =>\n        meshAdd(\n          cylinder(6),\n          identity.translate(-100 + x * 7, i, z * 7 + 55).scale(1.3, 0.5, 1.3),\n          material(0.4, 0.2, 0.2, 0.8),\n        ),\n      );\n    });\n\n    // crystals\n\n    integers_map(7, (i) => {\n      meshAdd(\n        cylinder(((i * 23 + 1) % 5) + 5, 0, 0.55),\n        identity\n          .translate(-101 + Math.sin(i) * 5 + i, -2.3 - i, 44.9 - i * 2.8)\n          .scaleSelf(5 + i / 2, 1 + i / 6, 5 + i / 3),\n        material(0.5 - i / 17, 0.5 - (i & 1) / 9, 0.6, 0.3),\n      );\n    });\n\n    // crystals continuation pad\n\n    meshAdd(cylinder(), identity.translate(-87, -9.5, 24).scale(7, 1, 3), material(0.4, 0.5, 0.6, 0.4));\n\n    // lever pad\n\n    meshAdd(cylinder(4), identity.translate(-86, -9.2, 27).scale(5, 1, 5), material(0.5, 0.6, 0.7, 0.3));\n\n    meshAdd(cylinder(12, 1), identity.translate(-86, -9, 31).scale(1.5, 1, 1.5), material(0.3, 0.3, 0.4, 0.1));\n\n    newLever(identity.translate(-86, -7.5, 31));\n\n    // elevators\n\n    const shouldOscillate = () => lerpneg(levers[7]!.$lerpValue2, levers[6]!.$lerpValue2);\n\n    newModel((model) => {\n      model._update = () =>\n        identity.translate(\n          0,\n          (1 - max(levers[6]!.$lerpValue, levers[7]!.$lerpValue)) * 3.5 + shouldOscillate() * Math.sin(gameTime) * 5,\n        );\n      [0, 12, 24].map((x) =>\n        meshAdd(\n          cylinder(),\n          identity.translate(x - 76.9, x / -13 - 10, 24).scale(2.8, 1.5, 3),\n          material(0.2, 0.5, 0.6, 0.2),\n        ),\n      );\n    });\n\n    newModel((model) => {\n      model._update = () =>\n        identity.translate(\n          0,\n          shouldOscillate() * Math.sin(gameTime + 3) * 6,\n          Math.sin(gameTime * 0.6 + 1) * 6 * shouldOscillate(),\n        );\n      [6, 18].map((x) =>\n        meshAdd(\n          cylinder(),\n          identity.translate(x - 76.9, x / -13 - 10, 24).scale(2.8, 1.5, 3),\n          material(0.1, 0.4, 0.5, 0.2),\n        ),\n      );\n    });\n\n    // pad after elevators\n\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          polygons_transform(cylinder(), identity.scale(11, 1, 13), material(0.3, 0.4, 0.6, 0.3)),\n          // lever pad\n          polygons_transform(cylinder(5), identity.translate(0, 0, -7).scale(2, 1.2, 2), material(0.2, 0.4, 0.7, 0.3)),\n          // blue pentagon\n          polygons_transform(cylinder(5), identity.scale(9, 1.2, 9), material(0, 0.2, 0.3, 0.5)),\n        ),\n        polygons_transform(cylinder(5), identity.scale(5.4, 5, 5.4), material(0, 0.2, 0.3, 0.5)),\n      ),\n      identity.translate(-38.9, -11.3, 17),\n    );\n\n    newLever(identity.translate(-38.9, -9.6, 10));\n\n    // central sculpture/monument\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, levers[7]!.$lerpValue2 * -7.3);\n\n      meshAdd(\n        csg_polygons_subtract(\n          csg_union(\n            polygons_transform(\n              cylinder(5),\n              identity.translate(0, 2).scale(5, 7, 5).skewY(8),\n              material(0.2, 0.4, 0.5, 0.5),\n            ),\n            polygons_transform(\n              cylinder(5),\n              identity.translate(0, 6).scale(1.1, 7, 1.1).skewY(-8),\n              material(0.25, 0.35, 0.5, 0.5),\n            ),\n            polygons_transform(\n              cylinder(5),\n              identity.translate(0, 9).scale(0.6, 7, 0.6).skewY(8),\n              material(0.35, 0.3, 0.5, 0.5),\n            ),\n          ),\n          polygons_transform(\n            cylinder(5),\n            identity.translate(0, 5).scale(1.5, 1.5, 8).rotate(90, 0, 35),\n            material(0.2, 0.4, 0.5, 0.5),\n          ),\n        ),\n        identity.translate(-38.9, -11.3, 17),\n      );\n\n      // SOUL 5 - soul over the central sculpture/monument\n      newSoul(\n        identity.translate(-39.1, -0.6, 17).rotate(11),\n        ...polygon_regular(15).map(({ x, z }) => [x * 3, z * 3, 1.2]),\n      );\n    });\n\n    // columns\n\n    GQuad.map(({ x, z }) => {\n      meshAdd(\n        cylinder(14, 1),\n        identity.translate(x * 9 - 38.9, -7.3, z * 11 + 17).scale(1, 4),\n        material(0.25, 0.25, 0.25, 1),\n      );\n      [1.5, 8].map((y) =>\n        meshAdd(\n          cylinder(17, 1),\n          identity\n            .translate(x * 9 - 38.9, -7.3, z * 11 + 17)\n            .translate(0, y - 4)\n            .scale(1.5, 0.5, 1.5),\n          material(0.6, 0.6, 0.6, 0.3),\n        ),\n      );\n    });\n\n    // Grid with holes\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          // holed base\n          polygons_transform(\n            cylinder(6),\n            identity.translate(0, 0, -36).scale(15, 1.2, 15),\n            material(0.7, 0.7, 0.7, 0.3),\n          ),\n          // after monument continuation\n          polygons_transform(cylinder(), identity.translate(0, 0, -18).scale(4, 1.2, 6), material(0.45, 0.4, 0.6, 0.3)),\n        ),\n        ...integers_map(6, (z) =>\n          integers_map(6, (x) =>\n            polygons_transform(\n              cylinder(6),\n              identity.translate(x * 4.6 - 12 + 2 * (z & 1), 0, z * 4.6 - 50 + Math.sin(x * 4) * 2).scale(2, 5, 2),\n              material(0.7, 0.7, 0.7, 0.3),\n            ),\n          ),\n        ).flat(),\n      ),\n      identity.translate(-38.9, -11.3, 17),\n    );\n\n    // SOUL 6 - soul over the grid with hex holes\n    newSoul(identity.translate(-38.9, -8.4, -21), [-7, -2.5, 6], [6, -3, 6], [0, -5, 7]);\n\n    // Detour lever pad\n    meshAdd(cylinder(5), identity.translate(-84, -2, 85).scale(4, 0.8, 4).rotate(0, 10), material(0.8, 0.1, 0.25, 0.4));\n\n    // Detour lever\n    newLever(identity.translate(-84, -0.5, 85).rotate(0, 45));\n\n    // ******** SECOND BOAT ********\n\n    newModel((model) => {\n      model._update = () => getBoatAnimationMatrix(-123, 1.4, 55 + secondBoatLerp * -65);\n      meshAdd(boatPolygons);\n      newLever(identity.translate(0, -3, -4).rotate(0, 180));\n    });\n\n    // ******** LEVEL AFTER SECOND BOAT ********\n\n    // SOUL 7 - soul after the second boat\n    newSoul(identity.translate(8 - 123, 0.2, -12), [0, 0, 3.5]);\n\n    const pushingRod = csg_polygons_subtract(\n      polygons_transform(\n        cylinder(),\n        identity.translate(0, -0.5, 1).scale(1.15, 1.2, 6.5),\n        material(0.25, 0.25, 0.35, 0.3),\n      ),\n      polygons_transform(cylinder(3), identity.translate(0, 0, -5.5).scale(3, 2), material(0.6, 0.3, 0.4, 0.3)),\n      ...[-1.2, 1.2].map((i) =>\n        polygons_transform(\n          cylinder(),\n          identity.translate(i, -0.5, 1).scale(0.14, 0.3, 6.5),\n          material(0.7, 0.2, 0, 0.3),\n        ),\n      ),\n    );\n\n    // pushing rods\n\n    const shouldPushRods = () => lerpneg(levers[10]!.$lerpValue, levers[11]!.$lerpValue);\n    const shouldBlockRods = () => (1 - levers[10]!.$lerpValue) * (1 - shouldPushRods());\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, -2, shouldPushRods() * abs(Math.sin(gameTime * 1.1)) * -8.5 + 10);\n      integers_map(2, (x) => meshAdd(pushingRod, identity.translate(-110 + x * 9 + (x & 1), 1.7, -12)));\n    });\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, -2, shouldPushRods() * abs(Math.sin(gameTime * 2.1)) * -8.5 + 10);\n      integers_map(2, (x) => meshAdd(pushingRod, identity.translate(-110 + (x + 2) * 9 + (x & 1), 1.7, -12)));\n    });\n\n    newModel((model) => {\n      model._update = () =>\n        identity.translate(0, -2, max(shouldBlockRods(), shouldPushRods() * abs(Math.sin(gameTime * 1.5))) * -8.5 + 10);\n      integers_map(3, (x) => meshAdd(pushingRod, identity.translate(-106 + x * 9, 1.7, -12)));\n    });\n\n    // pushing rods container\n\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          polygons_transform(cylinder(), identity.translate(26.5, -1.6, 10).scale(20, 2.08, 3)),\n          polygons_transform(cylinder(), identity.translate(26.5, -0.6, 10).scale(19, 2, 0.5)),\n        ),\n        ...integers_map(4, (x) =>\n          polygons_transform(cylinder(), identity.translate(13 + x * 9 + (x & 1), -0.8, 9).scale(1.35, 1.35, 9)),\n        ),\n        ...integers_map(3, (x) =>\n          polygons_transform(cylinder(), identity.translate(17 + x * 9, -0.8, 9).scale(1.35, 1.35, 9)),\n        ),\n      ),\n      identity.translate(-123, 0, -12),\n      material(0.5, 0.5, 0.6, 0.2),\n    );\n\n    // boat attachment\n\n    newLever(identity.translate(-116, -1.4, -18).rotate(0, 180));\n\n    meshAdd(cylinder(), identity.translate(-116, -2.6, -12).scale(3.2, 1.1, 4).skewX(3), material(0.8, 0.8, 0.8, 0.2));\n    meshAdd(cylinder(6), identity.translate(-116, -2.6, -16.5).scale(3.2, 0.8, 3), material(0.6, 0.5, 0.7, 0.2));\n\n    meshAdd(cylinder(), identity.translate(-115.5, -17, -12).scale(0.5, 15, 2.2), material(0.6, 0.6, 0.6, 0.3));\n\n    meshAdd(cylinder(8), identity.translate(-114, -17, -2).scale(2, 15, 2), material(0.6, 0.6, 0.6, 0.3));\n    meshAdd(cylinder(8), identity.translate(-79, -17, -2).scale(2, 15, 2), material(1, 1, 1, 0.3));\n\n    meshAdd(cylinder(), identity.translate(-77, -17, -50.5).scale(2.2, 15, 0.5), material(0.6, 0.6, 0.6, 0.3));\n\n    // arcs\n\n    integers_map(3, (i) => {\n      meshAdd(makeBigArcPolygons(16), identity.translate(i * 12 - 109, -9, -12), material(0.6, 0.6, 0.6, 0.3));\n\n      meshAdd(\n        makeBigArcPolygons(16),\n        identity.translate(-77, -9, i * -12 - 8 - 12).rotate(0, 90),\n        material(0.6, 0.6, 0.6, 0.3),\n      );\n    });\n\n    // tower\n\n    meshAdd(\n      csg_polygons_subtract(\n        polygons_transform(\n          cylinder(12),\n          identity.translate(-77, -14.5, -12).scale(4, 17.5, 4),\n          material(0.7, 0.7, 0.7, 0.2),\n        ),\n        polygons_transform(\n          cylinder(),\n          identity.translate(-79, 0.1, -12).scale(3.5, 2, 1.3),\n          material(0.4, 0.5, 0.6, 0.2),\n        ),\n        polygons_transform(\n          cylinder(),\n          identity.translate(-77, 0.1, -14).scale(1.5, 2, 2),\n          material(0.4, 0.5, 0.6, 0.2),\n        ),\n        polygons_transform(\n          cylinder(12),\n          identity.translate(-77, 3.1, -12).scale(3, 5, 3),\n          material(0.4, 0.5, 0.6, 0.2),\n        ),\n      ),\n    );\n\n    // internal pad\n\n    meshAdd(cylinder(), identity.translate(-84.9, -4.3, -40).rotate(12).scale(6, 1, 3), material(0.6, 0.6, 0.6, 0.3));\n    meshAdd(cylinder(9), identity.translate(-98, -18.4, -40).scale(2.5, 13.5, 2.5), material(0.5, 0.5, 0.5, 0.3));\n\n    meshAdd(\n      csg_polygons_subtract(\n        polygons_transform(cylinder(), identity.translate(-93, -5.8, -40).scale(9, 1, 5), material(0.8, 0.8, 0.8, 0.1)),\n        polygons_transform(\n          cylinder(9),\n          identity.translate(-98, -5.8, -40).scale(3, 8, 3),\n          material(0.7, 0.7, 0.7, 0.2),\n        ),\n      ),\n    );\n\n    newLever(identity.translate(-98, -4.4, -40).rotate(0, 90));\n\n    // SOUL 8 - soul in the internal pad after the pushing rods\n    newSoul(identity.translate(30 - 123, -3, -28 - 12).rotate(4), [0, -2, 3.5], [0, 2, 3.5]);\n\n    // ******** LEVEL AFTER CENTRAL GATE ********\n\n    // base\n\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          polygons_transform(\n            cylinder(6, 0, 0, 0.6),\n            identity.translate(-100, 0.7, 105.5).scale(8, 1, 11),\n            material(0.7, 0.7, 0.7, 0.2),\n          ),\n          polygons_transform(\n            cylinder(),\n            identity.translate(-101.5, 0.7, 93.5).scale(10.5, 1, 2),\n            material(0.7, 0.7, 0.7, 0.2),\n          ),\n        ),\n        polygons_transform(\n          cylinder(5),\n          identity.translate(-100, 0.7, 113).scale(4, 3, 4),\n          material(0.7, 0.7, 0.7, 0.2),\n        ),\n      ),\n    );\n\n    // oscillating hex pads\n\n    const hexPadShouldOscillate = () => lerpneg(levers[8]!.$lerpValue2, levers[12]!.$lerpValue2);\n\n    integers_map(4, (i) =>\n      newModel((model) => {\n        model._update = () => {\n          const osc = hexPadShouldOscillate();\n          return identity.translate(\n            (i > 2 ? (1 - osc) * 2 + osc : 0) - 100,\n            osc * Math.sin(gameTime * 1.3 + i * 1.7) * (3 + i / 3) + 0.7,\n            (i & 1 ? -1 : 1) * (1 - levers[8]!.$lerpValue2) * (1 - levers[12]!.$lerpValue2) * -7 +\n              max(0.05, osc) * Math.cos(gameTime * 1.3 + i * 7) * (4 - 2 * (1 - i / 3)) +\n              115,\n          );\n        };\n        meshAdd(\n          cylinder(6),\n          identity.translate(-14.6 - i * 4.8 - (i > 2 ? 2 : 0), -i / 2.3, -21.5).scale(2.6, 1, 2.5),\n          material(0.5 - i / 8, i / 12 + 0.5, 0.7, 0.3),\n        );\n      }),\n    );\n\n    // after the hex pads\n\n    // donut pad\n    newModel((model) => {\n      model._update = () => {\n        const osc = hexPadShouldOscillate();\n        return identity\n          .translate(\n            (1 - osc) * 2.5 - 139.7,\n            (1 - levers[8]!.$lerpValue) * -3 + osc * Math.sin(gameTime * 0.8) * -1 - 1.8,\n            93.5,\n          )\n          .rotateSelf(Math.cos(gameTime * 1.3) * (osc * 3 + 3), 0);\n      };\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(cylinder(10), identity.scale(6, 2, 6), material(0.1, 0.6, 0.5, 0.3)),\n          polygons_transform(cylinder(10), identity.scale(3.3, 6, 3.3), material(0.1, 0.6, 0.5, 0.5)),\n        ),\n      );\n\n      // second pad\n      meshAdd(cylinder(15, 1), identity.translate(-7.5).rotate(0, 90).scale(3, 2.3, 3), material(0.4, 0.4, 0.4, 0.3));\n      meshAdd(cylinder(10), identity.translate(-7.5).rotate(0, 90).scale(2, 2.5, 2), material(0.3, 0.8, 0.7, 0.3));\n      meshAdd(cylinder(5), identity.translate(-7.5).rotate(0, 90).scale(1, 3), material(0.5, 0.5, 0.5, 0.5));\n      newLever(identity.translate(-7.5).rotate(0, 90).translate(0, 3.4).rotate(0, 180));\n\n      // lateral horns\n      [-1, 1].map((i) =>\n        meshAdd(\n          hornPolygons,\n          identity\n            .rotate(-i * 90, 180, 90) //\n            .translate(0, 5)\n            .rotate(40) //\n            .scale(1.3, 10, 1.3), //\n          material(1, 1, 0.8, 0.2),\n        ),\n      );\n\n      // SOUL 9 - soul after the hex pads, in the hex donut with horns\n      newSoul(identity.translate(-5, 4), [0, -1.2, 1.7], [0, 1.2, 1.7]);\n    });\n\n    // far arc gate\n    [-1, 1].map((x) => {\n      meshAdd(\n        cylinder(12, 1),\n        identity.translate(-7.5 * x - 100, 3.7, 96).scale(0.8, 4, 0.8),\n        material(0.6, 0.24, 0.2, 0.5),\n      );\n\n      [7.2, 1.5].map((y) =>\n        meshAdd(\n          cylinder(15, 1),\n          identity.translate(-7.5 * x - 100, y + 0.7, 96).scale(1.1, 0.5, 1.1),\n          material(0.5, 0.24, 0.2, 0.4),\n        ),\n      );\n\n      meshAdd(\n        hornPolygons,\n        identity\n          .translate(x * -5 - 100, 1.7, 114.5)\n          .scale(1.2, 10, 1.2)\n          .rotate(0, 90 * x - 90),\n        material(1, 1, 0.8),\n      );\n\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(\n            cylinder(),\n            identity.translate(x * -4, 3.5, -0.5).scale(4, 4, 0.7),\n            material(0.5, 0.5, 0.5, 0.4),\n          ),\n          polygons_transform(cylinder(), identity.scale(3, 3, 10), material(0.6, 0.24, 0.2, 0.5)),\n          polygons_transform(\n            cylinder(28, 1),\n            identity.translate(0, 3, -5).scale(3, 4, 10).rotate(90, 0),\n            material(0.6, 0.24, 0.2, 0.5),\n          ),\n          polygons_transform(\n            cylinder(5),\n            identity\n              .translate(x * -5.3, 7)\n              .rotate(90, 0)\n              .scale(1.7, 5, 1.7),\n            material(0.6, 0.24, 0.2, 0.5),\n          ),\n          polygons_transform(\n            cylinder(5),\n            identity\n              .translate(x * -5.3, 3.8)\n              .rotate(90, 0, 35)\n              .scale(0.75, 5, 0.75),\n            material(0.6, 0.24, 0.2, 0.5),\n          ),\n        ),\n        identity.translate(x - 100, 0.7, 97),\n      );\n    });\n\n    // far arc gate door\n\n    // model._update = () => identity.translate(-99.7, -1.9, 63.5).scale(1, clamp01(1.1 - levers[6]!.$lerpValue), 1);\n\n    newModel((model) => {\n      model._update = () => identity.translate(-100, 0.6, 96.5).scale(0.88, 1.2 - levers[12]!.$lerpValue);\n      meshAdd(gateBarsPolygons);\n    });\n\n    // left continuation with hole for rotating corridor\n    meshAdd(\n      csg_polygons_subtract(\n        polygons_transform(\n          cylinder(),\n          identity.translate(-82.07, 0.8, 106).scale(11, 0.9, 2.2),\n          material(0.7, 0.7, 0.7, 0.1),\n        ),\n        polygons_transform(\n          cylinder(45, 1),\n          identity.translate(-81, 0.7, 106).scale3d(7.7),\n          material(0.7, 0.7, 0.7, 0.1),\n        ),\n      ),\n    );\n\n    // rotating platforms\n\n    // First rotating platform (with hole)\n    newModel((model) => {\n      model._update = () => identity.translate(-81, 0.6, 106).rotate(0, 40 + rotatingPlatform1Rotation);\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(cylinder(45, 1), identity.scale(7.5, 1, 7.5), material(0.45, 0.45, 0.45, 0.2)),\n          polygons_transform(\n            cylinder(),\n            identity.translate(0, 0, -5.5).scale(1.5, 3, 2.7),\n            material(0.45, 0.45, 0.45, 0.2),\n          ),\n        ),\n      );\n      meshAdd(cylinder(8), identity.translate(0, 2).scale(3, 1.5, 3).rotate(0, 22), material(0.7, 0.7, 0.7, 0.1));\n      meshAdd(cylinder(5), identity.translate(0, 2).scale(1, 2), material(0.3, 0.3, 0.3, 0.2));\n\n      // SOUL 10 - soul over the first rotating platform\n      newSoul(identity.translate(0, 3), ...polygon_regular(14).map(({ x, z }) => [x * 5.6, z * 5.6, 2]));\n    });\n\n    // Second rotating platform\n    newModel((model) => {\n      model._update = () => identity.translate(-65.8, 0.8, 106).rotate(0, rotatingPlatform2Rotation);\n\n      // rotating platform horns\n      [-1, 1].map((x) =>\n        meshAdd(\n          hornPolygons,\n          identity\n            .rotate(0, 90)\n            .translate(x * -5, 1, -0.5)\n            .scale(1.2, 10, 1.2)\n            .rotate(0, 90 * x + 90),\n          material(1, 1, 0.8),\n        ),\n      );\n\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(cylinder(28, 1), identity.translate(0, 2).scale(7.5, 1, 7.5), material(0.35, 0, 0, 0.3)),\n          polygons_transform(cylinder(), identity.scale(9, 5, 2), material(0.3, 0, 0, 0.3)),\n        ),\n      );\n\n      meshAdd(polygons_transform(cylinder(28, 1), identity.scale(7.5, 1, 7.5), material(0.45, 0.45, 0.45, 0.2)));\n      meshAdd(polygons_transform(cylinder(5), identity.translate(0, 1).scale(1, 0.2), material(0.3, 0.3, 0.3, 0.2)));\n    });\n\n    // Third rotating platform\n    newModel((model) => {\n      model._update = () => identity.translate(-50.7, 0.8, 106).rotate(0, 180 - rotatingPlatform2Rotation);\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(cylinder(28, 1), identity.translate(0, 2).scale(7.5, 1, 7.5), material(0.35, 0, 0, 0.3)),\n          polygons_transform(cylinder(), identity.translate(7).scale(9, 5, 2), material(0.3, 0, 0, 0.3)),\n          polygons_transform(cylinder(), identity.translate(0, 0, 7).scale(2, 5, 9), material(0.3, 0, 0, 0.3)),\n        ),\n      );\n      meshAdd(polygons_transform(cylinder(28, 1), identity.scale(7.5, 1, 7.5), material(0.45, 0.45, 0.45, 0.2)));\n      meshAdd(polygons_transform(cylinder(5), identity.translate(0, 1).scale(1, 0.2), material(0.3, 0.3, 0.3, 0.2)));\n    });\n\n    // Fourth rotating platform\n    newModel((model) => {\n      model._update = () => identity.translate(-50.7, 0.8, 91).rotate(0, 270 + rotatingPlatform2Rotation);\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(cylinder(28, 1), identity.translate(0, 2).scale(7.5, 1, 7.5), material(0.35, 0, 0, 0.3)),\n          polygons_transform(cylinder(), identity.translate(7).scale(9, 5, 2), material(0.3, 0, 0, 0.3)),\n          polygons_transform(cylinder(), identity.translate(0, 0, -7).scale(2, 5, 9), material(0.3, 0, 0, 0.3)),\n        ),\n      );\n      meshAdd(polygons_transform(cylinder(28, 1), identity.scale(7.5, 1, 7.5), material(0.45, 0.45, 0.45, 0.2)));\n      meshAdd(polygons_transform(cylinder(5), identity.translate(0, 1).scale(1, 0.2), material(0.3, 0.3, 0.3, 0.2)));\n    });\n\n    // rotating platforms connecting pads\n    meshAdd(cylinder(), identity.translate(-58, 1, 106).scale(2, 0.65, 2), material(0.7, 0.7, 0.7, 0.2));\n    meshAdd(cylinder(), identity.translate(-50.7, 1, 99).scale(2, 0.65, 1), material(0.7, 0.7, 0.7, 0.2));\n\n    // exit from the rotating platforms\n    meshAdd(cylinder(), identity.translate(-42, 0.4, 91).scale(5, 1, 2.5), material(0.7, 0.7, 0.7, 0.3));\n    meshAdd(cylinder(), identity.translate(-34.2, 0.4, 91).scale(3, 1, 3), material(0.7, 0.7, 0.7, 0.3));\n\n    newLever(identity.translate(-34, 2.7, 96).rotate(-12, 0));\n\n    // lever pad\n    meshAdd(cylinder(5), identity.translate(-34, 0.2, 96).scale(3, 2, 4).rotate(-20, 0), material(0.2, 0.5, 0.5, 0.6));\n\n    // ******** LEVEL AFTER THE ROTATING PLATFORMS ********\n\n    // jumping pads\n\n    [material(0.1, 0.55, 0.45, 0.2), material(0.2, 0.5, 0.5, 0.3), material(0.3, 0.45, 0.55, 0.4)].map((m, i) =>\n      newModel((model) => {\n        model._update = () => {\n          const v = lerpneg(levers[13]!.$lerpValue2, levers[14]!.$lerpValue2);\n          return identity.translate(\n            0,\n            (1 - levers[13]!.$lerpValue2) * (1 - levers[14]!.$lerpValue2) * (i ? 0 : 3) +\n              v * Math.sin(gameTime * 1.5 + i * 1.5) * 4,\n          );\n        };\n        meshAdd(cylinder(), identity.translate(-23.5, 0.5, 91 + 6.8 * i).scale(i === 1 ? 2 : 3.3, 1, 3.3), m);\n        if (i === 2) {\n          // in connection\n          meshAdd(cylinder(), identity.translate(-29.1, 0.4, 91).scale(2.1, 1, 3), material(0.7, 0.7, 0.7, 0.3));\n        }\n        if (i === 1) {\n          // out connections\n          meshAdd(\n            cylinder(),\n            identity.translate(-16.1, 0.5, 103.5).rotate(-3.5).scale(3.9, 0.8, 2).skewX(-1),\n            material(0.6, 0.6, 0.7, 0.3),\n          );\n        }\n      }),\n    );\n\n    // horns\n    [-1, 1].map((x) =>\n      meshAdd(\n        hornPolygons,\n        identity\n          .translate(x * -8, 1, 85)\n          .scale(1.2, 10, 1.2)\n          .rotate(0, 90 * x + 90),\n        material(1, 1, 0.8),\n      ),\n    );\n\n    integers_map(3, (i) =>\n      meshAdd(\n        makeBigArcPolygons(16 + 8.7 - (i & 1) * 0.7),\n        identity.translate(i * 6 - 6, 4 - (i & 1), 111 - 0.2 * (i & 1)),\n        i & 1 ? material(0.5, 0.5, 0.5, 0.3) : material(0.35, 0.35, 0.35, 0.5),\n      ),\n    );\n\n    // middle base\n    meshAdd(\n      csg_polygons_subtract(\n        polygons_transform(\n          cylinder(6, 0, 0, 0.3),\n          identity.translate(0, -0.92, 95).scale(14, 2, 14),\n          material(0.8, 0.8, 0.8, 0.2),\n        ),\n        polygons_transform(cylinder(5), identity.translate(0, 0, 95).scale3d(6), material(0.3, 0.3, 0.3, 0.5)),\n      ),\n    );\n\n    newLever(identity.translate(0, 1.7, 82).rotate(0, 180));\n\n    // lever pad\n\n    meshAdd(\n      cylinder(5),\n      identity.translate(0, -15.7, 82).scale(2.5, 17, 2.5).rotate(0, 35),\n      material(0.5, 0.3, 0.3, 0.4),\n    );\n\n    meshAdd(cylinder(6), identity.translate(0, 16, 121).scale(2.5, 1, 2.1).rotate(0, 90), material(0.5, 0.6, 0.7, 0.3));\n    meshAdd(cylinder(), identity.translate(0, 16, 129).scale(1.5, 1, 2), material(0.5, 0.6, 0.7, 0.3));\n    meshAdd(cylinder(7), identity.translate(0, 16.2, 133).scale(5, 1, 5), material(0.4, 0.5, 0.6, 0.4));\n\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          polygons_transform(\n            cylinder(),\n            identity.translate(0, 16, 110.5).scale(12, 1, 3),\n            material(0.5, 0.3, 0.3, 0.4),\n          ),\n          polygons_transform(cylinder(), identity.translate(0, 16, 111).scale(3, 1, 3.8), material(0.5, 0.3, 0.3, 0.4)),\n        ),\n\n        polygons_transform(\n          cylinder(5),\n          identity.translate(0, 16, 103.5).scale(5.5, 5, 5.5),\n          material(0.5, 0.3, 0.3, 0.4),\n        ),\n      ),\n    );\n\n    newModel((model) => {\n      model._update = () => {\n        const k = Math.sin(gameTime);\n        return identity.translate(k * -2).rotate(k * 25);\n      };\n      meshAdd(\n        cylinder(3),\n        identity.translate(0, -3, 118.8).scale(0.8, 0.8, 18).rotate(90, 0, 60),\n        material(0.5, 0.3, 0.3, 0.4),\n      );\n      [22, 30].map((z) => {\n        meshAdd(\n          cylinder(6),\n          identity\n            .translate(0, 16, z + 95)\n            .scale(3, 1, 2.3)\n            .rotate(0, 90),\n          material(0.7, 0.7, 0.7, 0.4),\n        );\n        meshAdd(cylinder(), identity.translate(0, 6.2, z + 95).scale(0.5, 11, 0.5), material(0.5, 0.3, 0.3, 0.4));\n      });\n    });\n\n    // floating elevator pad\n    newModel((model) => {\n      model._update = () => {\n        const v = lerpneg(\n          lerpneg((levers[14]!.$lerpValue + levers[14]!.$lerpValue2) / 2, levers[13]!.$lerpValue2),\n          (levers[15]!.$lerpValue + levers[15]!.$lerpValue2) / 2,\n        );\n        return identity.translate(0, v * 16, clamp01(v * 2 - 1) * 8.5 + 95);\n      };\n      meshAdd(cylinder(5), identity.scale(5, 1.1, 5), material(0.5, 0.3, 0.3, 0.4));\n      meshAdd(cylinder(5), identity.scale(5.5, 0.9, 5.5), material(0.25, 0.25, 0.25, 0.4));\n\n      newLever(identity.translate(0, 1.5, -1).rotate(0, 180));\n    });\n\n    // SOUL 11 - soul in the last platform\n    newSoul(identity.translate(0, 3, 95), ...polygon_regular(9).map(({ x, z }) => [x * 9, z * 9, 4]));\n\n    // SOUL 12 - soul after the pendulums\n    newSoul(identity.translate(0, 19, 134), [0, 0, 3.5]);\n  });\n\n  // ------ End of game models ------\n\n  // ------ player model and legs, must be declared just after level model ------\n\n  newModel(() => {\n    checkModelId(\"PLAYER_BODY\", MODEL_ID_PLAYER_BODY);\n    // horns\n    [0, 180].map((r) =>\n      meshAdd(\n        hornPolygons,\n        identity.rotate(0, r).translate(0.2, 1.32).rotate(-30).scale(0.2, 0.6, 0.2),\n        material(1, 1, 0.8),\n      ),\n    );\n\n    // head\n    meshAdd(sphere(20), identity.translate(0, 1).scale(0.5, 0.5, 0.5), material(1, 0.3, 0.4));\n\n    const eye = polygons_transform(\n      csg_polygons_subtract(\n        cylinder(15, 1),\n        polygons_transform(cylinder(), identity.translate(0, 0, 1).scale(2, 2, 0.5)),\n      ),\n      identity.rotate(-90, 0).scale(0.1, 0.05, 0.1),\n      material(0.3, 0.3, 0.3),\n    );\n\n    [-1, 1].map((i) => meshAdd(eye, identity.translate(i * 0.2, 1.2, 0.4).rotate(0, i * 20, i * 20)));\n\n    // mouth\n    meshAdd(cylinder(), identity.translate(0, 0.9, 0.45).scale(0.15, 0.02, 0.06), material(0.3, 0.3, 0.3));\n\n    // body\n    meshAdd(sphere(20), identity.scale(0.7, 0.8, 0.55), material(1, 0.3, 0.4));\n  });\n\n  [-1, 1].map((x) =>\n    newModel(() => {\n      checkModelId(\"PLAYER_LEG\" + (x + 1), x === -1 ? MODEL_ID_PLAYER_LEG0 : MODEL_ID_PLAYER_LEG1);\n      meshAdd(cylinder(10, 1), identity.translate(x * 0.3, -0.8).scale(0.2, 0.7, 0.24), material(1, 0.3, 0.4));\n    }),\n  );\n\n  newModel(() => {\n    checkModelId(\"LEVER\", MODEL_ID_LEVER);\n    meshAdd(cylinder(6, 1), identity.scale(0.13, 1.4, 0.13), material(0.3, 0.3, 0.5, 0.1));\n    meshAdd(cylinder(8, 1), identity.translate(0, 1).scale(0.21, 0.3, 0.21), material(1, 0.5, 0.2));\n    meshAdd(cylinder(3), identity.translate(0, -1).rotate(90, 90).scale(0.3, 0.4, 0.3), material(0.2, 0.2, 0.2, 0.1));\n  }, MODEL_KIND_MESH);\n\n  newModel(() => {\n    checkModelId(\"SOUL_COLLISION\", MODEL_ID_SOUL_COLLISION);\n    meshAdd(cylinder(6).slice(0, -1), identity.scale(0.77, 1, 0.77), material(1, 0.3, 0.5));\n  }, MODEL_KIND_MESH);\n\n  newModel(() => {\n    checkModelId(\"SOUL\", MODEL_ID_SOUL);\n    const GHOST_SLICES = 30;\n    const GHOST_STACKS = 24;\n\n    // body\n    meshAdd(\n      sphere(GHOST_SLICES, GHOST_STACKS, (a: number, b: number, polygon: Polygon) => {\n        const bm = b / GHOST_STACKS;\n        const theta = a * (Math.PI * (2 / GHOST_SLICES));\n        const phixz = (bm ** 0.6 * Math.PI) / 2;\n        const osc = (bm * bm * Math.sin(a * Math.PI * (14 / GHOST_SLICES))) / 4;\n        if (b === GHOST_STACKS - 1) {\n          polygon.$smooth = 0;\n          return { x: 0, y: -0.5, z: 0 };\n        }\n        return {\n          x: Math.cos(theta) * Math.sin(phixz),\n          y: Math.cos(bm * Math.PI) - bm - osc,\n          z: Math.sin(theta) * Math.sin(phixz) + Math.sin(osc * Math.PI * 2) / 4,\n        };\n      }),\n      identity.scale3d(0.7),\n      material(1, 1, 1),\n    );\n\n    // eyes\n    [-1, 1].map((x) => meshAdd(sphere(12), identity.translate(x * 0.16, 0.4, -0.36).scale3d(0.09)));\n  }, MODEL_KIND_MESH);\n\n  if (DEBUG) {\n    console.timeEnd(\"build_life_the_universe_and_everything\");\n    console.log(souls.length + \" souls, \" + levers.length + \" levers\");\n  }\n};\n","import { constDef_zNear, constDef_zFar } from \"./shaders/main-fragment.frag\";\n\nimport { DEG_TO_RAD, mat_perspectiveXY, type Vec3 } from \"./math\";\n\nexport const zNear = constDef_zNear;\n\nexport const zFar = constDef_zFar;\n\nexport const fieldOfViewDegrees = 60;\n\nexport const fieldOfViewRadians = /* @__PURE__ */ fieldOfViewDegrees * DEG_TO_RAD; // in radians\n\nconst fieldOfViewAmount = 1 / Math.tan(fieldOfViewRadians / 2);\n\nexport const camera_position: Vec3 = { x: 0, y: 0, z: 0 };\n\nexport const camera_rotation: Vec3 = { x: 0, y: 0, z: 0 };\n\nexport const mat_perspective = (near: number, far: number) =>\n  mat_perspectiveXY((hC.clientHeight / hC.clientWidth) * fieldOfViewAmount, fieldOfViewAmount, near, far);\n\nif (DEBUG) {\n  console.log(\"fieldOfViewAmount:\", fieldOfViewAmount);\n}\n","import { integers_map, max, min, identity } from \"./math\";\nimport { polygon_transform } from \"./geometry/geometry\";\nimport { mat_perspective } from \"./camera\";\n\nconst LIGHT_ROT_X = 298;\nconst LIGHT_ROT_Y = 139;\n\nif (DEBUG) {\n  const lightMatrix = /* @__PURE__ */ identity.rotate(LIGHT_ROT_X, LIGHT_ROT_Y);\n  console.log(\"light direction: \", lightMatrix.m13, lightMatrix.m23, lightMatrix.m33);\n}\n\nexport const csm_buildMatrix = /* @__PURE__ */ (\n  camera_view: DOMMatrixReadOnly,\n  nearPlane: number,\n  farPlane: number,\n  zMultiplier: number,\n) => {\n  const roundingRadius = (farPlane - nearPlane) * 1.1;\n\n  const projViewInverse = new DOMMatrix(mat_perspective(nearPlane, farPlane)).multiplySelf(camera_view).invertSelf();\n\n  let tx = 0;\n  let ty = 0;\n  let tz = 0;\n\n  const frustumCorners = integers_map(8, (i) => {\n    const v = projViewInverse.transformPoint({\n      x: 4 & i ? 1 : -1,\n      y: 2 & i ? 1 : -1,\n      z: 1 & i ? 1 : -1,\n    });\n    // Round to reduce shimmering\n    tx -= v.x = ((roundingRadius * v.x) | 0) / (roundingRadius * v.w);\n    ty -= v.y = ((roundingRadius * v.y) | 0) / (roundingRadius * v.w);\n    tz -= v.z = ((roundingRadius * v.z) | 0) / (roundingRadius * v.w);\n    return v;\n  });\n\n  const lightViewTranslated = identity.rotate(LIGHT_ROT_X, LIGHT_ROT_Y).translateSelf(tx / 8, ty / 8, tz / 8);\n\n  let left = Infinity;\n  let right = -Infinity;\n  let bottom = Infinity;\n  let top = -Infinity;\n  let near = Infinity;\n  let far = -Infinity;\n\n  // Compute the frustum bouding box\n  polygon_transform(frustumCorners, lightViewTranslated).map(({ x, y, z }) => {\n    left = min(left, x);\n    right = max(right, x);\n    bottom = min(bottom, y);\n    top = max(top, y);\n    near = min(near, z);\n    far = max(far, z);\n  });\n\n  near *= near < 0 ? zMultiplier : 1 / zMultiplier;\n  far *= far > 0 ? zMultiplier : 1 / zMultiplier;\n\n  // Build the ortographic matrix, multiply it with the light space view matrix.\n  return identity\n    .scale(2 / (right - left), 2 / (top - bottom), 2 / (near - far))\n    .translateSelf((right + left) / -2, (top + bottom) / -2, (near + far) / 2)\n    .multiplySelf(lightViewTranslated);\n};\n","export const audioContext = new AudioContext();\n\nexport const songAudioSource = audioContext.createBufferSource();\n","import type { KEY_CODE } from \"./utils/keycodes\";\nimport { camera_rotation } from \"./camera\";\nimport {\n  absoluteTime,\n  keyboard_downKeys,\n  KEY_BACK,\n  KEY_FRONT,\n  KEY_INTERACT,\n  KEY_LEFT,\n  KEY_RIGHT,\n  LOCAL_STORAGE_SAVED_GAME_KEY,\n  mainMenuVisible,\n  setMainMenuVisible,\n  updateCollectedSoulsCounter,\n} from \"./game/world-state\";\nimport { songAudioSource, audioContext } from \"./music/audio-context\";\nimport { abs, clamp01 } from \"./math\";\n\nexport let player_first_person: 0 | 1 | undefined;\n\nexport let touch_movementX = 0;\n\nexport let touch_movementY = 0;\n\nexport const initPage = () => {\n  let touchStartTime: number | undefined;\n\n  let touchPosStartX: number | undefined;\n  let touchPosStartY: number | undefined;\n  let touchPosIdentifier: number | undefined;\n  let touchPosMoved: number | undefined;\n\n  let touchRotX: number | undefined;\n  let touchRotY: number | undefined;\n  let touchRotIdentifier: number | undefined;\n  let touchRotMoved: number | undefined;\n  let touchStartCameraRotX: number | undefined;\n  let touchStartCameraRotY: number | undefined;\n\n  let pageClicked: undefined | 1;\n\n  let music_on = !DEBUG;\n\n  const updateMusicOnState = () => {\n    if (mainMenuVisible || !music_on) {\n      songAudioSource.disconnect();\n    } else {\n      // connect the AudioBufferSourceNode to the  destination so we can hear the sound\n      songAudioSource.connect(audioContext.destination);\n    }\n    b4.innerHTML = \"Music: \" + music_on;\n  };\n\n  const toggleMusic = () => {\n    music_on = !music_on;\n    updateMusicOnState();\n  };\n\n  const mainMenu = (value: boolean = false) => {\n    if (mainMenuVisible !== value) {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      setMainMenuVisible(value);\n      try {\n        if (value) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          document.exitFullscreen().catch(() => {});\n          document.exitPointerLock();\n        } else {\n          songAudioSource.start();\n        }\n      } catch {}\n      player_first_person = 0;\n      document.body.className = value ? \"l m\" : \"l\";\n      updateMusicOnState();\n      updateCollectedSoulsCounter();\n    }\n  };\n\n  const handleResize = () => {\n    hC.width = innerWidth;\n    hC.height = innerHeight;\n    keyboard_downKeys.length = touch_movementX = touch_movementY = 0;\n    touchPosIdentifier = touchRotIdentifier = undefined;\n    if (document.hidden) {\n      mainMenu(true);\n    }\n  };\n\n  if (!DEBUG) {\n    oncontextmenu = () => false;\n  }\n\n  // \"Restart\" button\n  b3.onclick = () => {\n    // eslint-disable-next-line no-alert\n    if (confirm(\"Restart game?\")) {\n      localStorage[LOCAL_STORAGE_SAVED_GAME_KEY] = \"\";\n      location.reload();\n    }\n  };\n\n  // \"Play\" button\n  b1.onclick = () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    document.body.requestFullscreen();\n    mainMenu();\n  };\n\n  // \"Play first person\" button\n  b2.onclick = () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    document.body.requestFullscreen();\n    mainMenu();\n    player_first_person = 1;\n  };\n\n  // \"Music\" button\n  b4.onclick = toggleMusic;\n\n  // Menu hamburger button\n  b5.onclick = () => mainMenu(true);\n\n  onclick = (e) => {\n    pageClicked = 1;\n    if (!mainMenuVisible) {\n      if (e.target === hC) {\n        keyboard_downKeys[KEY_INTERACT] = true;\n      }\n      if (player_first_person) {\n        hC.requestPointerLock();\n      }\n    }\n  };\n\n  onkeyup = onkeydown = ({ code, target, type, repeat }) => {\n    if (!repeat) {\n      const pressed = !!type[5] && target === document.body;\n\n      if (pressed && (code === \"Escape\" || (code === \"Enter\" && mainMenuVisible))) {\n        if (!mainMenuVisible || pageClicked) {\n          mainMenu(!mainMenuVisible);\n        }\n      } else {\n        const mapped = (\n          {\n            [\"KeyA\"]: KEY_LEFT,\n            [\"ArrowLeft\"]: KEY_LEFT,\n\n            [\"KeyW\"]: KEY_FRONT,\n            [\"ArrowUp\"]: KEY_FRONT,\n\n            [\"KeyD\"]: KEY_RIGHT,\n            [\"ArrowRight\"]: KEY_RIGHT,\n\n            [\"KeyS\"]: KEY_BACK,\n            [\"ArrowDown\"]: KEY_BACK,\n\n            [\"KeyE\"]: KEY_INTERACT,\n            [\"Space\"]: KEY_INTERACT,\n            [\"Enter\"]: KEY_INTERACT,\n          } as Partial<Record<KEY_CODE, number>>\n        )[code as KEY_CODE]!;\n        if (mapped === KEY_INTERACT) {\n          if (pressed) {\n            keyboard_downKeys[mapped] = 1;\n          }\n        } else {\n          keyboard_downKeys[mapped] = pressed;\n        }\n      }\n    }\n  };\n\n  onmousemove = ({ movementX, movementY }) => {\n    if (player_first_person && (movementX || movementY)) {\n      camera_rotation.y += movementX * 0.1;\n      camera_rotation.x += movementY * 0.1;\n    }\n  };\n\n  hC.ontouchstart = (e) => {\n    if (!mainMenuVisible) {\n      for (const { pageX, pageY, identifier } of e.changedTouches) {\n        if (player_first_person && pageX > hC.clientWidth / 2) {\n          if (touchRotIdentifier === undefined) {\n            touchRotMoved = 0;\n            touchRotX = pageX;\n            touchRotY = pageY;\n            touchRotIdentifier = identifier;\n            touchStartCameraRotX = camera_rotation.y;\n            touchStartCameraRotY = camera_rotation.x;\n          }\n        } else if (touchPosIdentifier === undefined) {\n          touchPosMoved = 0;\n          touchPosStartX = pageX;\n          touchPosStartY = pageY;\n          touchPosIdentifier = identifier;\n        }\n      }\n      touchStartTime = absoluteTime;\n    }\n  };\n\n  const TOUCH_SIZE = 20;\n  const TOUCH_MOVE_THRESHOLD = 0.5;\n  const TOUCH_MOVE_SNAP = 0.2;\n\n  hC.ontouchmove = (e) => {\n    if (!mainMenuVisible) {\n      for (const { pageX, pageY, identifier } of e.changedTouches) {\n        if (touchRotIdentifier === identifier) {\n          camera_rotation.y = touchStartCameraRotX! + (pageX - touchRotX!) / 2.3;\n          camera_rotation.x = touchStartCameraRotY! + (pageY - touchRotY!) / 2.3;\n          touchRotMoved = 1;\n        }\n        if (touchPosIdentifier === identifier) {\n          const deltaX = (touchPosStartX! - pageX) / TOUCH_SIZE;\n          const deltaY = (touchPosStartY! - pageY) / TOUCH_SIZE;\n          const absDeltaX = abs(deltaX);\n          const absDeltaY = abs(deltaY);\n\n          const angle = Math.atan2(deltaY, deltaX);\n          const speed = clamp01(Math.hypot(deltaY, deltaX) - TOUCH_MOVE_THRESHOLD);\n\n          touch_movementX = absDeltaX > TOUCH_MOVE_SNAP ? Math.cos(angle) * speed : 0;\n          touch_movementY = absDeltaY > TOUCH_MOVE_SNAP ? Math.sin(angle) * speed : 0;\n\n          if (touch_movementX || touch_movementY) {\n            // Moved, disable the click\n            touchPosMoved = 1;\n          }\n\n          // Move the invisible joysticks\n          if (absDeltaX > 2) {\n            touchPosStartX = pageX + Math.sign(deltaX) * TOUCH_SIZE;\n          }\n          if (absDeltaY > 2) {\n            touchPosStartY = pageY + Math.sign(deltaY) * TOUCH_SIZE;\n          }\n        }\n      }\n    }\n  };\n\n  hC.ontouchend = (e) => {\n    e.preventDefault();\n\n    let click: 1 | undefined;\n    for (const touch of e.changedTouches) {\n      if (touch.identifier === touchRotIdentifier) {\n        touchRotIdentifier = undefined;\n        if (!touchRotMoved) {\n          click = 1;\n        }\n        touchRotMoved = 0;\n      } else if (touch.identifier === touchPosIdentifier) {\n        touchPosIdentifier = undefined;\n        touch_movementY = touch_movementX = 0;\n        if (!touchPosMoved) {\n          click = 1;\n        }\n        touchPosMoved = 0;\n      } else {\n        click = 1;\n      }\n    }\n\n    if (click && e.target === hC && touchStartTime) {\n      const diff = absoluteTime - touchStartTime;\n      if (diff > 0.02 && diff < 0.7) {\n        keyboard_downKeys[KEY_INTERACT] = true;\n      }\n    }\n  };\n\n  document.onvisibilitychange = onblur = onresize = handleResize;\n\n  handleResize();\n  mainMenu(!DEBUG);\n};\n","export const gl: WebGL2RenderingContext = hC.getContext(\"webgl2\", { powerPreference: \"high-performance\" })!;\n\nfor (const s in gl) {\n  (gl as any)[s[0] + [...s].reduce((p, c, i) => (p * i + c.charCodeAt(0)) % 434, 0).toString(36)] = (gl as any)[s];\n}\n","import { abs, max, clamp01, DEG_TO_RAD, identity, angle_lerp_degrees, lerp, min, angle_wrap_degrees } from \"./math\";\nimport {\n  levers,\n  player_position_final,\n  allModels,\n  MODEL_KIND_GAME,\n  MODEL_ID_PLAYER_BODY,\n  MODEL_ID_PLAYER_LEG0,\n  MODEL_ID_PLAYER_LEG1,\n} from \"./game/models\";\nimport {\n  player_last_pulled_lever,\n  lerpDamp,\n  gameTimeDelta,\n  keyboard_downKeys,\n  KEY_LEFT,\n  KEY_RIGHT,\n  KEY_FRONT,\n  KEY_BACK,\n  KEY_INTERACT,\n  gameTime,\n} from \"./game/world-state\";\nimport { camera_rotation, camera_position } from \"./camera\";\nimport {\n  GAMEPAD_BUTTON_A,\n  GAMEPAD_BUTTON_X,\n  GAMEPAD_BUTTON_Y,\n  GAMEPAD_BUTTON_B,\n  GAMEPAD_BUTTON_LEFT,\n  GAMEPAD_BUTTON_RIGHT,\n  GAMEPAD_BUTTON_UP,\n  GAMEPAD_BUTTON_DOWN,\n} from \"./utils/keycodes\";\nimport { touch_movementX, touch_movementY, player_first_person } from \"./page\";\nimport { gl } from \"./gl\";\n\nexport let player_update: () => void;\n\nexport const CAMERA_PLAYER_Y_DIST = 13;\n\nexport const CAMERA_PLAYER_Z_DIST = -18;\n\nexport const PLAYER_LEGS_VELOCITY = 7 * 1.3;\n\nexport const COLLISION_TEXTURE_SIZE = 128;\n\nexport const player_init = () => {\n  let oldModelId: number | undefined;\n\n  let currentModelIdTMinus1 = 0;\n\n  let currentModelId = 0;\n\n  let player_has_ground: 0 | 1 | undefined;\n  let player_respawned: 0 | 1 | 2 = 2;\n  let player_look_angle_target = 0;\n\n  let player_look_angle = 0;\n\n  let player_legs_speed = 0;\n\n  let player_gravity: number;\n  let player_speed: number;\n  let player_collision_velocity_x: number;\n  let player_collision_velocity_z: number;\n\n  let player_model_y: number;\n\n  let player_collision_x: number;\n  let player_collision_z: number;\n  const player_position_global = { x: 0, y: 0, z: 0 };\n\n  // let _gamepadStartPressed = false;\n  let _gamepadInteractPressed = false;\n\n  let camera_lookat_x: number;\n  let camera_lookat_y: number;\n  let camera_lookat_z: number;\n\n  const player_collision_modelIdCounter = new Int32Array(256);\n  const collision_buffer = new Uint8Array(COLLISION_TEXTURE_SIZE * COLLISION_TEXTURE_SIZE * 4);\n\n  const player_respawn = () => {\n    currentModelIdTMinus1 = currentModelId = levers[player_last_pulled_lever]!.$parent.$modelId || 1;\n    player_speed = 0;\n    player_gravity = 0;\n    player_collision_velocity_x = 0;\n    player_collision_velocity_z = 0;\n    player_has_ground = 0;\n    player_respawned = 2;\n  };\n\n  const doHorizontalCollisions = () => {\n    for (let y = 32; y < COLLISION_TEXTURE_SIZE; y += 2) {\n      let front = 0;\n      let back = 0;\n      let left = 0;\n      let right = 0;\n      const yindex = y * (COLLISION_TEXTURE_SIZE * 4);\n      for (let x = y & 1; x < COLLISION_TEXTURE_SIZE; x += 2) {\n        const i1 = yindex + x * 4;\n        const i2 = yindex + (COLLISION_TEXTURE_SIZE - 1 - x) * 4;\n        const dist1 = collision_buffer[i1]! / 255;\n        const dist2 = collision_buffer[i2 + 1]! / 255;\n        const t = 1 - abs(2 * (x / (COLLISION_TEXTURE_SIZE - 1)) - 1);\n\n        if (x > 10 && x < COLLISION_TEXTURE_SIZE - 10) {\n          front = max(front, max(dist1 * t, (dist1 * collision_buffer[i2]!) / 255));\n          back = max(back, max(dist2 * t, (dist2 * collision_buffer[i1 + 1]!) / 255));\n        }\n\n        if (x < COLLISION_TEXTURE_SIZE / 2 - 10 || x > COLLISION_TEXTURE_SIZE / 2 + 10) {\n          const xdist = ((1 - t) * max(dist1, dist2)) / 3;\n          if (xdist > 0.001) {\n            if (x < COLLISION_TEXTURE_SIZE / 2 && left < xdist) {\n              left = xdist;\n            } else if (x > COLLISION_TEXTURE_SIZE / 2 && right < xdist) {\n              right = xdist;\n            }\n          }\n        }\n      }\n\n      if (abs(right - left) > abs(player_collision_x)) {\n        player_collision_x = right - left;\n      }\n      if (abs(back - front) > abs(player_collision_z)) {\n        player_collision_z = back - front;\n      }\n    }\n  };\n\n  const doVerticalCollisions = () => {\n    let maxModelIdCount = 0;\n    let nextModelId = 0;\n    let lines = 0;\n    let grav = 0;\n    player_collision_modelIdCounter.fill(0);\n    for (let y = 0; y < 31; ++y) {\n      let up = 0;\n      const yindex = y * (COLLISION_TEXTURE_SIZE * 4);\n      for (let x = 0; x < COLLISION_TEXTURE_SIZE - 0; x++) {\n        let i = yindex + x * 4;\n        const a = (collision_buffer[i]! + collision_buffer[i + 1]!) / 255;\n        i = collision_buffer[i + 2]!;\n        if (x > 14 && x < COLLISION_TEXTURE_SIZE - 14) {\n          up += a;\n        }\n        if (i && a) {\n          const count = player_collision_modelIdCounter[i]! + 1;\n          player_collision_modelIdCounter[i] = count;\n          if (count >= maxModelIdCount) {\n            maxModelIdCount = count;\n            nextModelId = i;\n          }\n        }\n      }\n      if (up < 3 && y > 5) {\n        grav += y / 32;\n      }\n      if (up > 3) {\n        if (y > 7) {\n          lines += y / 15;\n        }\n        player_has_ground = 1;\n      }\n    }\n\n    if (nextModelId) {\n      player_has_ground = 1;\n    }\n\n    if (player_respawned) {\n      // keep the previous modelId until the player touch ground\n      if (nextModelId) {\n        player_respawned = 0;\n        currentModelId = nextModelId;\n      }\n    } else {\n      currentModelId = nextModelId || currentModelIdTMinus1;\n    }\n    currentModelIdTMinus1 = nextModelId;\n\n    player_gravity = lerpDamp(player_gravity, player_has_ground ? 6.5 : 8, 4);\n\n    // push up and gravity\n    player_position_global.y +=\n      lines / 41 - (player_has_ground ? 1 : player_gravity) * (grav / 41) * player_gravity * gameTimeDelta;\n  };\n\n  const interpolate_with_hysteresis = /* @__PURE__ */ (previous: number, desired: number, hysteresis: number) => {\n    return lerpDamp(previous, desired, min(4, max(0.4, abs(previous - desired) - hysteresis)));\n  };\n\n  player_update = () => {\n    let strafe = touch_movementX + (keyboard_downKeys[KEY_LEFT] ? 1 : 0) + (keyboard_downKeys[KEY_RIGHT] ? -1 : 0);\n    let forward = touch_movementY + (keyboard_downKeys[KEY_FRONT] ? 1 : 0) + (keyboard_downKeys[KEY_BACK] ? -1 : 0);\n\n    const gamepad = navigator.getGamepads()[0];\n    if (gamepad) {\n      const { buttons, axes } = gamepad;\n      const getGamepadButtonState = (index: number) => buttons[index]?.pressed || (buttons[index]?.value as any) > 0;\n\n      const interactButtonPressed =\n        getGamepadButtonState(GAMEPAD_BUTTON_A) ||\n        getGamepadButtonState(GAMEPAD_BUTTON_X) ||\n        getGamepadButtonState(GAMEPAD_BUTTON_Y) ||\n        getGamepadButtonState(GAMEPAD_BUTTON_B);\n      if (interactButtonPressed !== _gamepadInteractPressed) {\n        _gamepadInteractPressed = interactButtonPressed;\n        if (_gamepadInteractPressed) {\n          keyboard_downKeys[KEY_INTERACT] = 1;\n        }\n      }\n\n      strafe +=\n        (abs(-axes[0]!) > 0.2 ? -axes[0]! : 0) +\n        (getGamepadButtonState(GAMEPAD_BUTTON_LEFT) ? 1 : 0) +\n        (getGamepadButtonState(GAMEPAD_BUTTON_RIGHT) ? -1 : 0);\n\n      forward +=\n        (abs(-axes[1]!) > 0.2 ? -axes[1]! : 0) +\n        (getGamepadButtonState(GAMEPAD_BUTTON_UP) ? 1 : 0) +\n        (getGamepadButtonState(GAMEPAD_BUTTON_DOWN) ? -1 : 0);\n\n      // const startPressed = getGamepadButtonState(GAMEPAD_BUTTON_START);\n      // if (_gamepadStartPressed !== startPressed && startPressed && game_play_clicked_once) {\n      //   setMainMenuVisible(!mainMenuVisible);\n      // }\n      // _gamepadStartPressed = startPressed;\n\n      if (player_first_person) {\n        if (abs(axes[2]!) > 0.3) {\n          camera_rotation.y += axes[2]! * 80 * gameTimeDelta;\n        }\n        if (abs(axes[3]!) > 0.3) {\n          camera_rotation.x += axes[3]! * 80 * gameTimeDelta;\n        }\n      }\n    }\n\n    // if (abs(forward) < 0.05) {\n    //   forward = 0;\n    // }\n    // if (abs(strafe) < 0.05) {\n    //   strafe = 0;\n    // }\n\n    const angle = Math.atan2(forward, strafe);\n    let amount = clamp01(Math.hypot(forward, strafe));\n\n    if (amount < 0.05) {\n      amount = 0;\n    }\n\n    strafe = amount * Math.cos(angle);\n    forward = amount * Math.sin(angle);\n\n    player_collision_x = 0;\n    player_collision_z = 0;\n    player_has_ground = 0;\n\n    gl.finish();\n    gl.readPixels(0, 0, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE, gl.RGBA, gl.UNSIGNED_BYTE, collision_buffer);\n    gl.invalidateFramebuffer(gl.READ_FRAMEBUFFER, [gl.COLOR_ATTACHMENT0, gl.DEPTH_ATTACHMENT]);\n    gl.invalidateFramebuffer(gl.DRAW_FRAMEBUFFER, [gl.COLOR_ATTACHMENT0, gl.DEPTH_ATTACHMENT]);\n\n    NO_INLINE(doHorizontalCollisions)();\n    NO_INLINE(doVerticalCollisions)();\n\n    const playerSpeedCollision = clamp01(1 - max(abs(player_collision_x), abs(player_collision_z)) * 5);\n\n    if (!currentModelId) {\n      player_collision_x += player_collision_velocity_x * playerSpeedCollision * gameTimeDelta;\n      player_collision_z += player_collision_velocity_z * playerSpeedCollision * gameTimeDelta;\n    }\n    player_collision_velocity_x = lerpDamp(player_collision_velocity_x, 0, player_has_ground ? 8 : 4);\n    player_collision_velocity_z = lerpDamp(player_collision_velocity_z, 0, player_has_ground ? 8 : 4);\n\n    player_speed = lerpDamp(\n      player_speed,\n      player_has_ground ? (strafe || forward ? (player_has_ground ? 7 : 4) : 0) * playerSpeedCollision : 0,\n      player_has_ground ? (playerSpeedCollision > 0.1 ? 10 : strafe || forward ? 5 : 7) : 1,\n    );\n\n    // TODO - first person\n    // const movementRadians = player_first_person ? camera_rotation.y * DEG_TO_RAD : Math.PI;\n    // const s = Math.sin(movementRadians) ;\n    // const c = Math.cos(movementRadians) * player_speed * gameTimeDelta;\n    // player_collision_x -= strafe * c - forward * s;\n    // player_collision_z -= strafe * s + forward * c;\n\n    player_collision_x += strafe * player_speed * gameTimeDelta;\n    player_collision_z += forward * player_speed * gameTimeDelta;\n\n    const referenceMatrix =\n      (allModels[currentModelId]!.$kind === MODEL_KIND_GAME && allModels[currentModelId]!.$matrix) || identity;\n    const inverseReferenceRotationMatrix = referenceMatrix.inverse();\n    inverseReferenceRotationMatrix.m41 = 0;\n    inverseReferenceRotationMatrix.m42 = 0;\n    inverseReferenceRotationMatrix.m43 = 0;\n    ({ x: player_collision_x, z: player_collision_z } = inverseReferenceRotationMatrix.transformPoint({\n      x: player_collision_x,\n      z: player_collision_z,\n      w: 0,\n    }));\n\n    player_position_global.x += player_collision_x;\n    player_position_global.z += player_collision_z;\n\n    if (player_respawned) {\n      const { $locMatrix } = levers[player_last_pulled_lever]!;\n      const { x: tx, y: ty, z: tz } = $locMatrix!.transformPoint({ x: 0, y: 12, z: -2.5 });\n      if (player_respawned > 1) {\n        player_respawned = 1;\n        player_model_y = player_position_final.y = ty;\n      }\n      player_position_final.x = tx;\n      player_position_final.z = tz;\n    }\n\n    if (currentModelId !== oldModelId) {\n      if (DEBUG) {\n        console.log(\"modelId: \" + oldModelId + \" -> \" + currentModelId);\n      }\n\n      oldModelId = currentModelId;\n\n      const { x, y, z } = referenceMatrix.inverse().transformPoint(player_position_final);\n      player_position_global.x = x;\n      player_position_global.y = y;\n      player_position_global.z = z;\n    }\n\n    const oldx = player_position_final.x;\n    const oldz = player_position_final.z;\n\n    const { x, y, z } = referenceMatrix.transformPoint(player_position_global);\n\n    player_position_final.x = x;\n    player_position_final.y = y;\n    player_position_final.z = z;\n\n    if (currentModelId) {\n      player_collision_velocity_x = (x - oldx) / gameTimeDelta;\n      player_collision_velocity_z = (z - oldz) / gameTimeDelta;\n    }\n\n    if (amount) {\n      player_look_angle_target = 90 - angle / DEG_TO_RAD;\n    }\n    player_look_angle = angle_lerp_degrees(player_look_angle, player_look_angle_target, gameTimeDelta * 8);\n    player_legs_speed = lerp(player_legs_speed, amount, gameTimeDelta * 10);\n\n    player_model_y = lerp(lerpDamp(player_model_y, y, 2), y, abs(player_model_y - y) * 8);\n\n    if (!DEBUG_CAMERA) {\n      if (camera_lookat_x === undefined) {\n        camera_position.x = camera_lookat_x = x;\n        camera_position.y = (camera_lookat_y = player_model_y = y) + CAMERA_PLAYER_Y_DIST;\n        camera_position.z = (camera_lookat_z = z) + CAMERA_PLAYER_Z_DIST * 2;\n      }\n\n      camera_lookat_x = interpolate_with_hysteresis(camera_lookat_x, x, 1.5);\n      camera_lookat_y = interpolate_with_hysteresis(camera_lookat_y, y, 2.2);\n      camera_lookat_z = interpolate_with_hysteresis(camera_lookat_z, z, 1.5);\n\n      if (player_first_person) {\n        camera_position.x = lerpDamp(camera_position.x, x, player_respawned * 666 + 18);\n        camera_position.y = lerpDamp(camera_position.y, player_model_y + 1.5, player_respawned * 666 + 18);\n        camera_position.z = lerpDamp(camera_position.z, z, player_respawned * 666 + 18);\n      } else {\n        camera_position.x = lerpDamp(camera_position.x, camera_lookat_x, 2);\n        camera_position.y = lerpDamp(camera_position.y, max(camera_lookat_y + CAMERA_PLAYER_Y_DIST, 6), 2);\n        camera_position.z = lerpDamp(camera_position.z, camera_lookat_z + CAMERA_PLAYER_Z_DIST, 2);\n\n        const viewDirDiffz = camera_position.z - camera_lookat_z;\n        if (abs(viewDirDiffz) > 1) {\n          const viewDirDiffx = camera_position.x - camera_lookat_x;\n          camera_rotation.y = 270 + Math.atan2(viewDirDiffz, viewDirDiffx) / DEG_TO_RAD;\n          camera_rotation.x =\n            90 - Math.atan2(Math.hypot(viewDirDiffz, viewDirDiffx), camera_position.y - camera_lookat_y) / DEG_TO_RAD;\n        }\n      }\n\n      camera_rotation.x = max(min(camera_rotation.x, 87), -87);\n      camera_rotation.y = angle_wrap_degrees(camera_rotation.y);\n    }\n\n    // Special handling for the second boat (lever 7) - the boat must be on the side of the map the player is\n    if (currentModelId === 1) {\n      levers[9]!.$value = player_position_final.x < -15 && player_position_final.z < 0 ? 1 : 0;\n    }\n\n    if (player_position_final.y < (player_position_final.x < -25 || player_position_final.z < 109 ? -25 : -9)) {\n      // Player fell in lava\n      player_respawn();\n    }\n\n    allModels[MODEL_ID_PLAYER_BODY]!.$matrix = identity\n      .translate(player_position_final.x, player_model_y, player_position_final.z)\n      .rotateSelf(0, player_look_angle);\n\n    [MODEL_ID_PLAYER_LEG0, MODEL_ID_PLAYER_LEG1].map((modelId, i) => {\n      allModels[modelId]!.$matrix = allModels[MODEL_ID_PLAYER_BODY]!.$matrix.translate(\n        0,\n        player_legs_speed * clamp01(Math.sin(gameTime * PLAYER_LEGS_VELOCITY + Math.PI * (i - 1) - Math.PI / 2) * 0.45),\n      ).rotateSelf(\n        player_legs_speed * Math.sin(gameTime * PLAYER_LEGS_VELOCITY + Math.PI * (i - 1)) * (0.25 / DEG_TO_RAD),\n        0,\n      );\n    });\n  };\n\n  player_respawn();\n};\n","export const GAMEPAD_BUTTON_UP = 12;\n\nexport const GAMEPAD_BUTTON_DOWN = 13;\n\nexport const GAMEPAD_BUTTON_LEFT = 14;\n\nexport const GAMEPAD_BUTTON_RIGHT = 15;\n\nexport const GAMEPAD_BUTTON_START = 9;\n\nexport const GAMEPAD_BUTTON_A = 1;\n\nexport const GAMEPAD_BUTTON_B = 0;\n\nexport const GAMEPAD_BUTTON_X = 3;\n\nexport const GAMEPAD_BUTTON_Y = 2;\n\nexport const GAMEPAD_BUTTON_LB = 4;\n\nexport const GAMEPAD_BUTTON_RB = 5;\n\nexport const KEY_CODE_EMPTY = \"\";\n\nexport const KEY_CODE_AGAIN = \"Again\";\n\nexport const KEY_CODE_ALT_LEFT = \"AltLeft\";\n\nexport const KEY_CODE_ALT_RIGHT = \"AltRight\";\n\nexport const KEY_CODE_ARROW_DOWN = \"ArrowDown\";\n\nexport const KEY_CODE_ARROW_LEFT = \"ArrowLeft\";\n\nexport const KEY_CODE_ARROW_RIGHT = \"ArrowRight\";\n\nexport const KEY_CODE_ARROW_UP = \"ArrowUp\";\n\nexport const KEY_CODE_AUDIO_VOLUME_DOWN = \"AudioVolumeDown\";\n\nexport const KEY_CODE_AUDIO_VOLUME_MUTE = \"AudioVolumeMute\";\n\nexport const KEY_CODE_AUDIO_VOLUME_UP = \"AudioVolumeUp\";\n\nexport const KEY_CODE_BACKQUOTE = \"Backquote\";\n\nexport const KEY_CODE_BACKSLASH = \"Backslash\";\n\nexport const KEY_CODE_BACKSPACE = \"Backspace\";\n\nexport const KEY_CODE_BRACKET_LEFT = \"BracketLeft\";\n\nexport const KEY_CODE_BRACKET_RIGHT = \"BracketRight\";\n\nexport const KEY_CODE_BROWSER_BACK = \"BrowserBack\";\n\nexport const KEY_CODE_BROWSER_FAVORITES = \"BrowserFavorites\";\n\nexport const KEY_CODE_BROWSER_FORWARD = \"BrowserForward\";\n\nexport const KEY_CODE_BROWSER_HOME = \"BrowserHome\";\n\nexport const KEY_CODE_BROWSER_REFRESH = \"BrowserRefresh\";\n\nexport const KEY_CODE_BROWSER_SEARCH = \"BrowserSearch\";\n\nexport const KEY_CODE_BROWSER_STOP = \"BrowserStop\";\n\nexport const KEY_CODE_CANCEL = \"Cancel\";\n\nexport const KEY_CODE_CAPS_LOCK = \"CapsLock\";\n\nexport const KEY_CODE_COMMA = \"Comma\";\n\nexport const KEY_CODE_CONTEXT_MENU = \"ContextMenu\";\n\nexport const KEY_CODE_CONTROL_LEFT = \"ControlLeft\";\n\nexport const KEY_CODE_CONTROL_RIGHT = \"ControlRight\";\n\nexport const KEY_CODE_CONVERT = \"Convert\";\n\nexport const KEY_CODE_COPY = \"Copy\";\n\nexport const KEY_CODE_CUT = \"Cut\";\n\nexport const KEY_CODE_DELETE = \"Delete\";\n\nexport const KEY_CODE_DIGIT_0 = \"Digit0\";\n\nexport const KEY_CODE_DIGIT_1 = \"Digit1\";\n\nexport const KEY_CODE_DIGIT_2 = \"Digit2\";\n\nexport const KEY_CODE_DIGIT_3 = \"Digit3\";\n\nexport const KEY_CODE_DIGIT_4 = \"Digit4\";\n\nexport const KEY_CODE_DIGIT_5 = \"Digit5\";\n\nexport const KEY_CODE_DIGIT_6 = \"Digit6\";\n\nexport const KEY_CODE_DIGIT_7 = \"Digit7\";\n\nexport const KEY_CODE_DIGIT_8 = \"Digit8\";\n\nexport const KEY_CODE_DIGIT_9 = \"Digit9\";\n\nexport const KEY_CODE_EJECT = \"Eject\";\n\nexport const KEY_CODE_END = \"End\";\n\nexport const KEY_CODE_ENTER = \"Enter\";\n\nexport const KEY_CODE_EQUAL = \"Equal\";\n\nexport const KEY_CODE_ESCAPE = \"Escape\";\n\nexport const KEY_CODE_F1 = \"F1\";\n\nexport const KEY_CODE_F2 = \"F2\";\n\nexport const KEY_CODE_F3 = \"F3\";\n\nexport const KEY_CODE_F4 = \"F4\";\n\nexport const KEY_CODE_F5 = \"F5\";\n\nexport const KEY_CODE_F6 = \"F6\";\n\nexport const KEY_CODE_F7 = \"F7\";\n\nexport const KEY_CODE_F8 = \"F8\";\n\nexport const KEY_CODE_F9 = \"F9\";\n\nexport const KEY_CODE_F10 = \"F10\";\n\nexport const KEY_CODE_F11 = \"F11\";\n\nexport const KEY_CODE_F12 = \"F12\";\n\nexport const KEY_CODE_F13 = \"F13\";\n\nexport const KEY_CODE_F14 = \"F14\";\n\nexport const KEY_CODE_F15 = \"F15\";\n\nexport const KEY_CODE_F16 = \"F16\";\n\nexport const KEY_CODE_F17 = \"F17\";\n\nexport const KEY_CODE_F18 = \"F18\";\n\nexport const KEY_CODE_F19 = \"F19\";\n\nexport const KEY_CODE_F20 = \"F20\";\n\nexport const KEY_CODE_F21 = \"F21\";\n\nexport const KEY_CODE_F22 = \"F22\";\n\nexport const KEY_CODE_F23 = \"F23\";\n\nexport const KEY_CODE_F24 = \"F24\";\n\nexport const KEY_CODE_FIND = \"Find\";\n\nexport const KEY_CODE_FN = \"Fn\";\n\nexport const KEY_CODE_HANGUL_MODE = \"HangulMode\";\n\nexport const KEY_CODE_HANJA = \"Hanja\";\n\nexport const KEY_CODE_HELP = \"Help\";\n\nexport const KEY_CODE_HOME = \"Home\";\n\nexport const KEY_CODE_INSERT = \"Insert\";\n\nexport const KEY_CODE_INTL_BACKSLASH = \"IntlBackslash\";\n\nexport const KEY_CODE_INTL_RO = \"IntlRo\";\n\nexport const KEY_CODE_INTL_YEN = \"IntlYen\";\n\nexport const KEY_CODE_KANA_MODE = \"KanaMode\";\n\nexport const KEY_CODE_KEY_A = \"KeyA\";\n\nexport const KEY_CODE_KEY_B = \"KeyB\";\n\nexport const KEY_CODE_KEY_C = \"KeyC\";\n\nexport const KEY_CODE_KEY_D = \"KeyD\";\n\nexport const KEY_CODE_KEY_E = \"KeyE\";\n\nexport const KEY_CODE_KEY_F = \"KeyF\";\n\nexport const KEY_CODE_KEY_G = \"KeyG\";\n\nexport const KEY_CODE_KEY_H = \"KeyH\";\n\nexport const KEY_CODE_KEY_I = \"KeyI\";\n\nexport const KEY_CODE_KEY_J = \"KeyJ\";\n\nexport const KEY_CODE_KEY_K = \"KeyK\";\n\nexport const KEY_CODE_KEY_L = \"KeyL\";\n\nexport const KEY_CODE_KEY_M = \"KeyM\";\n\nexport const KEY_CODE_KEY_N = \"KeyN\";\n\nexport const KEY_CODE_KEY_O = \"KeyO\";\n\nexport const KEY_CODE_KEY_P = \"KeyP\";\n\nexport const KEY_CODE_KEY_Q = \"KeyQ\";\n\nexport const KEY_CODE_KEY_R = \"KeyR\";\n\nexport const KEY_CODE_KEY_S = \"KeyS\";\n\nexport const KEY_CODE_KEY_T = \"KeyT\";\n\nexport const KEY_CODE_KEY_U = \"KeyU\";\n\nexport const KEY_CODE_KEY_V = \"KeyV\";\n\nexport const KEY_CODE_KEY_W = \"KeyW\";\n\nexport const KEY_CODE_KEY_X = \"KeyX\";\n\nexport const KEY_CODE_KEY_Y = \"KeyY\";\n\nexport const KEY_CODE_KEY_Z = \"KeyZ\";\n\nexport const KEY_CODE_LANG_1 = \"Lang1\";\n\nexport const KEY_CODE_LANG_2 = \"Lang2\";\n\nexport const KEY_CODE_LAUNCH_APP_1 = \"LaunchApp1\";\n\nexport const KEY_CODE_LAUNCH_APP_2 = \"LaunchApp2\";\n\nexport const KEY_CODE_LAUNCH_MAIL = \"LaunchMail\";\n\nexport const KEY_CODE_LAUNCH_MEDIA_PLAYER = \"LaunchMediaPlayer\";\n\nexport const KEY_CODE_MEDIA_PLAY_PAUSE = \"MediaPlayPause\";\n\nexport const KEY_CODE_MEDIA_SELECT = \"MediaSelect\";\n\nexport const KEY_CODE_MEDIA_STOP = \"MediaStop\";\n\nexport const KEY_CODE_MEDIA_TRACK_NEXT = \"MediaTrackNext\";\n\nexport const KEY_CODE_MEDIA_TRACK_PREVIOUS = \"MediaTrackPrevious\";\n\nexport const KEY_CODE_META_LEFT = \"MetaLeft\";\n\nexport const KEY_CODE_META_RIGHT = \"MetaRight\";\n\nexport const KEY_CODE_MINUS = \"Minus\";\n\nexport const KEY_CODE_NON_CONVERT = \"NonConvert\";\n\nexport const KEY_CODE_NUM_LOCK = \"NumLock\";\n\nexport const KEY_CODE_NUMPAD_0 = \"Numpad0\";\n\nexport const KEY_CODE_NUMPAD_1 = \"Numpad1\";\n\nexport const KEY_CODE_NUMPAD_2 = \"Numpad2\";\n\nexport const KEY_CODE_NUMPAD_3 = \"Numpad3\";\n\nexport const KEY_CODE_NUMPAD_4 = \"Numpad4\";\n\nexport const KEY_CODE_NUMPAD_5 = \"Numpad5\";\n\nexport const KEY_CODE_NUMPAD_6 = \"Numpad6\";\n\nexport const KEY_CODE_NUMPAD_7 = \"Numpad7\";\n\nexport const KEY_CODE_NUMPAD_8 = \"Numpad8\";\n\nexport const KEY_CODE_NUMPAD_9 = \"Numpad9\";\n\nexport const KEY_CODE_NUMPAD_ADD = \"NumpadAdd\";\n\nexport const KEY_CODE_NUMPAD_CHANGE_SIGN = \"NumpadChangeSign\";\n\nexport const KEY_CODE_NUMPAD_COMMA = \"NumpadComma\";\n\nexport const KEY_CODE_NUMPAD_DECIMAL = \"NumpadDecimal\";\n\nexport const KEY_CODE_NUMPAD_DIVIDE = \"NumpadDivide\";\n\nexport const KEY_CODE_NUMPAD_ENTER = \"NumpadEnter\";\n\nexport const KEY_CODE_NUMPAD_EQUAL = \"NumpadEqual\";\n\nexport const KEY_CODE_NUMPAD_MULTIPLY = \"NumpadMultiply\";\n\nexport const KEY_CODE_NUMPAD_PAREN_LEFT = \"NumpadParenLeft\";\n\nexport const KEY_CODE_NUMPAD_PAREN_RIGHT = \"NumpadParenRight\";\n\nexport const KEY_CODE_NUMPAD_SUBTRACT = \"NumpadSubtract\";\n\nexport const KEY_CODE_OPEN = \"Open\";\n\nexport const KEY_CODE_OSLEFT = \"OSLeft\";\n\nexport const KEY_CODE_OSRIGHT = \"OSRight\";\n\nexport const KEY_CODE_PAGE_DOWN = \"PageDown\";\n\nexport const KEY_CODE_PAGE_UP = \"PageUp\";\n\nexport const KEY_CODE_PASTE = \"Paste\";\n\nexport const KEY_CODE_PAUSE = \"Pause\";\n\nexport const KEY_CODE_PERIOD = \"Period\";\n\nexport const KEY_CODE_POWER = \"Power\";\n\nexport const KEY_CODE_PRINT_SCREEN = \"PrintScreen\";\n\nexport const KEY_CODE_PROPS = \"Props\";\n\nexport const KEY_CODE_QUOTE = \"Quote\";\n\nexport const KEY_CODE_SCROLL_LOCK = \"ScrollLock\";\n\nexport const KEY_CODE_SELECT = \"Select\";\n\nexport const KEY_CODE_SEMICOLON = \"Semicolon\";\n\nexport const KEY_CODE_SHIFT_LEFT = \"ShiftLeft\";\n\nexport const KEY_CODE_SHIFT_RIGHT = \"ShiftRight\";\n\nexport const KEY_CODE_SLASH = \"Slash\";\n\nexport const KEY_CODE_SLEEP = \"Sleep\";\n\nexport const KEY_CODE_SPACE = \"Space\";\n\nexport const KEY_CODE_TAB = \"Tab\";\n\nexport const KEY_CODE_UNDO = \"Undo\";\n\nexport const KEY_CODE_UNIDENTIFIED = \"Unidentified\";\n\nexport const KEY_CODE_VOLUME_DOWN = \"VolumeDown\";\n\nexport const KEY_CODE_VOLUME_MUTE = \"VolumeMute\";\n\nexport const KEY_CODE_VOLUME_UP = \"VolumeUp\";\n\nexport const KEY_CODE_WAKE_UP = \"WakeUp\";\n\nexport type KEY_CODE =\n  | \"\"\n  | \"Again\"\n  | \"AltLeft\"\n  | \"AltRight\"\n  | \"ArrowDown\"\n  | \"ArrowLeft\"\n  | \"ArrowRight\"\n  | \"ArrowUp\"\n  | \"AudioVolumeDown\"\n  | \"AudioVolumeMute\"\n  | \"AudioVolumeUp\"\n  | \"Backquote\"\n  | \"Backslash\"\n  | \"Backspace\"\n  | \"BracketLeft\"\n  | \"BracketRight\"\n  | \"BrowserBack\"\n  | \"BrowserFavorites\"\n  | \"BrowserForward\"\n  | \"BrowserHome\"\n  | \"BrowserRefresh\"\n  | \"BrowserSearch\"\n  | \"BrowserStop\"\n  | \"Cancel\"\n  | \"CapsLock\"\n  | \"Comma\"\n  | \"ContextMenu\"\n  | \"ControlLeft\"\n  | \"ControlRight\"\n  | \"Convert\"\n  | \"Copy\"\n  | \"Cut\"\n  | \"Delete\"\n  | \"Digit0\"\n  | \"Digit1\"\n  | \"Digit2\"\n  | \"Digit3\"\n  | \"Digit4\"\n  | \"Digit5\"\n  | \"Digit6\"\n  | \"Digit7\"\n  | \"Digit8\"\n  | \"Digit9\"\n  | \"Eject\"\n  | \"End\"\n  | \"Enter\"\n  | \"Equal\"\n  | \"Escape\"\n  | \"F1\"\n  | \"F2\"\n  | \"F3\"\n  | \"F4\"\n  | \"F5\"\n  | \"F6\"\n  | \"F7\"\n  | \"F8\"\n  | \"F9\"\n  | \"F10\"\n  | \"F11\"\n  | \"F12\"\n  | \"F13\"\n  | \"F14\"\n  | \"F15\"\n  | \"F16\"\n  | \"F17\"\n  | \"F18\"\n  | \"F19\"\n  | \"F20\"\n  | \"F21\"\n  | \"F22\"\n  | \"F23\"\n  | \"F24\"\n  | \"Find\"\n  | \"Fn\"\n  | \"HangulMode\"\n  | \"Hanja\"\n  | \"Help\"\n  | \"Home\"\n  | \"Insert\"\n  | \"IntlBackslash\"\n  | \"IntlRo\"\n  | \"IntlYen\"\n  | \"KanaMode\"\n  | \"KeyA\"\n  | \"KeyB\"\n  | \"KeyC\"\n  | \"KeyD\"\n  | \"KeyE\"\n  | \"KeyF\"\n  | \"KeyG\"\n  | \"KeyH\"\n  | \"KeyI\"\n  | \"KeyJ\"\n  | \"KeyK\"\n  | \"KeyL\"\n  | \"KeyM\"\n  | \"KeyN\"\n  | \"KeyO\"\n  | \"KeyP\"\n  | \"KeyQ\"\n  | \"KeyR\"\n  | \"KeyS\"\n  | \"KeyT\"\n  | \"KeyU\"\n  | \"KeyV\"\n  | \"KeyW\"\n  | \"KeyX\"\n  | \"KeyY\"\n  | \"KeyZ\"\n  | \"Lang1\"\n  | \"Lang2\"\n  | \"LaunchApp1\"\n  | \"LaunchApp2\"\n  | \"LaunchMail\"\n  | \"LaunchMediaPlayer\"\n  | \"MediaPlayPause\"\n  | \"MediaSelect\"\n  | \"MediaStop\"\n  | \"MediaTrackNext\"\n  | \"MediaTrackPrevious\"\n  | \"MetaLeft\"\n  | \"MetaRight\"\n  | \"Minus\"\n  | \"NonConvert\"\n  | \"NumLock\"\n  | \"Numpad0\"\n  | \"Numpad1\"\n  | \"Numpad2\"\n  | \"Numpad3\"\n  | \"Numpad4\"\n  | \"Numpad5\"\n  | \"Numpad6\"\n  | \"Numpad7\"\n  | \"Numpad8\"\n  | \"Numpad9\"\n  | \"NumpadAdd\"\n  | \"NumpadChangeSign\"\n  | \"NumpadComma\"\n  | \"NumpadDecimal\"\n  | \"NumpadDivide\"\n  | \"NumpadEnter\"\n  | \"NumpadEqual\"\n  | \"NumpadMultiply\"\n  | \"NumpadParenLeft\"\n  | \"NumpadParenRight\"\n  | \"NumpadSubtract\"\n  | \"Open\"\n  | \"OSLeft\"\n  | \"OSRight\"\n  | \"PageDown\"\n  | \"PageUp\"\n  | \"Paste\"\n  | \"Pause\"\n  | \"Period\"\n  | \"Power\"\n  | \"PrintScreen\"\n  | \"Props\"\n  | \"Quote\"\n  | \"ScrollLock\"\n  | \"Select\"\n  | \"Semicolon\"\n  | \"ShiftLeft\"\n  | \"ShiftRight\"\n  | \"Slash\"\n  | \"Sleep\"\n  | \"Space\"\n  | \"Tab\"\n  | \"Undo\"\n  | \"Unidentified\"\n  | \"VolumeDown\"\n  | \"VolumeMute\"\n  | \"VolumeUp\"\n  | \"WakeUp\";\n","import { gl } from \"./gl\";\n\nexport interface WebglProgramAbstraction {\n  (name: string): WebGLUniformLocation;\n  (): void;\n}\n\nexport const loadShader = (source: string, type: number = gl.VERTEX_SHADER): WebGLShader => {\n  const shader = gl.createShader(type)!;\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (DEBUG && !gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    throw new Error(\"An error occurred compiling the shaders: \" + gl.getShaderInfoLog(shader));\n  }\n\n  return shader;\n};\n\nexport const initShaderProgram = (vertexShader: WebGLShader, sfsSource: string): WebglProgramAbstraction => {\n  const uniforms: Record<string, WebGLUniformLocation> = {};\n  const program = gl.createProgram()!;\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, loadShader(sfsSource, gl.FRAGMENT_SHADER));\n  gl.linkProgram(program);\n\n  if (DEBUG && !gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    throw new Error(\"Unable to initialize the shader program: \" + gl.getProgramInfoLog(program));\n  }\n\n  return (name?: string): any =>\n    name ? uniforms[name] || (uniforms[name] = gl.getUniformLocation(program, name)!) : gl.useProgram(program);\n};\n","import { identity, matrixToArray } from \"../math\";\nimport { absoluteTime, mainMenuVisible } from \"./world-state\";\nimport {\n  allModels,\n  levers,\n  MODEL_ID_LEVER,\n  MODEL_ID_PLAYER_BODY,\n  MODEL_ID_PLAYER_LEG0,\n  MODEL_ID_PLAYER_LEG1,\n  MODEL_ID_SOUL,\n  souls,\n  SOULS_COUNT,\n  type MODEL_ID_SOUL_COLLISION,\n} from \"./models\";\nimport { gl } from \"../gl\";\n\nconst worldMatricesBuffer = new Float32Array(39 * 16);\n\nexport const renderModels = (\n  worldMatrixLoc: WebGLUniformLocation,\n  renderPlayer: 0 | 1 | boolean,\n  soulModelId: typeof MODEL_ID_SOUL | typeof MODEL_ID_SOUL_COLLISION = MODEL_ID_SOUL,\n) => {\n  if (mainMenuVisible) {\n    const matrix = identity.rotate(0, Math.sin(absoluteTime) * 40 - 70);\n    for (const modelId of [MODEL_ID_PLAYER_BODY, MODEL_ID_PLAYER_LEG0, MODEL_ID_PLAYER_LEG1]) {\n      matrixToArray(matrix, worldMatricesBuffer, modelId - 1);\n    }\n\n    gl.uniformMatrix4fv(worldMatrixLoc, false, worldMatricesBuffer);\n    gl.drawElements(\n      gl.TRIANGLES,\n      allModels[MODEL_ID_PLAYER_LEG1]!.$vertexEnd! - allModels[MODEL_ID_PLAYER_BODY]!.$vertexBegin!,\n      gl.UNSIGNED_SHORT,\n      allModels[MODEL_ID_PLAYER_BODY]!.$vertexBegin! * 2,\n    );\n    return;\n  }\n\n  // Setup world matrices\n\n  for (let i = 0; i < allModels.length; ++i) {\n    if (allModels[i]!.$kind) {\n      matrixToArray(allModels[i]!.$matrix, worldMatricesBuffer, i - 1);\n    }\n  }\n  gl.uniformMatrix4fv(worldMatrixLoc, false, worldMatricesBuffer);\n\n  // Render world\n\n  gl.drawElements(\n    gl.TRIANGLES,\n    (renderPlayer ? allModels[MODEL_ID_PLAYER_LEG1]!.$vertexEnd! : allModels[MODEL_ID_PLAYER_BODY]!.$vertexBegin!) - 3,\n    gl.UNSIGNED_SHORT,\n    3 * 2,\n  );\n\n  // Setup souls and levers matrices\n\n  for (let i = 0; i < SOULS_COUNT; ++i) {\n    matrixToArray(souls[i]!.$matrix!, worldMatricesBuffer, i);\n  }\n\n  for (let i = 0; i < levers.length; ++i) {\n    matrixToArray(levers[i]!.$matrix!, worldMatricesBuffer, i + SOULS_COUNT);\n    // Encode lerp value in matrix m44 so fragmemt shader can change the lever handle color\n    worldMatricesBuffer[(i + SOULS_COUNT) * 16 + 15] = 1 - levers[i]!.$lerpValue;\n  }\n\n  gl.uniformMatrix4fv(worldMatrixLoc, false, worldMatricesBuffer);\n\n  // Render souls\n\n  gl.drawElementsInstanced(\n    gl.TRIANGLES,\n    allModels[soulModelId]!.$vertexEnd! - allModels[soulModelId]!.$vertexBegin!,\n    gl.UNSIGNED_SHORT,\n    allModels[soulModelId]!.$vertexBegin! * 2,\n    13,\n  );\n\n  // Render levers\n\n  gl.drawElementsInstanced(\n    gl.TRIANGLES,\n    allModels[MODEL_ID_LEVER]!.$vertexEnd! - allModels[MODEL_ID_LEVER]!.$vertexBegin!,\n    gl.UNSIGNED_SHORT,\n    allModels[MODEL_ID_LEVER]!.$vertexBegin! * 2,\n    levers.length,\n  );\n};\n","// shaders\nimport csm_vsSource from \"./shaders/csm-vertex.vert\";\nimport main_vsSource, {\n  uniformName_projectionMatrix,\n  uniformName_viewMatrix,\n  uniformName_worldMatrices,\n} from \"./shaders/main-vertex.vert\";\nimport main_fsSource, {\n  uniformName_viewPos,\n  uniformName_csm_matrix0,\n  uniformName_csm_matrix1,\n  uniformName_csm_texture0,\n  uniformName_csm_texture1,\n  uniformName_groundTexture,\n  constDef_CSM_TEXTURE_SIZE as CSM_TEXTURE_SIZE,\n  constDef_CSM_PLANE_DISTANCE as CSM_PLANE_DISTANCE,\n} from \"./shaders/main-fragment.frag\";\nimport collider_fsSource from \"./shaders/collider-fragment.frag\";\nimport void_fsSource from \"./shaders/void-fragment.frag\";\nimport sky_vsSource from \"./shaders/sky-vertex.vert\";\nimport sky_fsSource, { uniformName_iResolution } from \"./shaders/sky-fragment.frag\";\n\nimport { clamp01, integers_map, identity, mat_perspectiveXY, matrixToArray } from \"./math\";\nimport {\n  absoluteTime,\n  gameTimeDelta,\n  gameTimeUpdate,\n  keyboard_downKeys,\n  KEY_INTERACT,\n  loadGame,\n  mainMenuVisible,\n  worldStateUpdate,\n} from \"./game/world-state\";\nimport { MODEL_ID_SOUL_COLLISION, player_position_final } from \"./game/models\";\nimport { mat_perspective, zFar, zNear, camera_position, camera_rotation } from \"./camera\";\nimport { csm_buildMatrix } from \"./csm\";\nimport { player_first_person } from \"./page\";\nimport { gl } from \"./gl\";\nimport { player_update, COLLISION_TEXTURE_SIZE, player_init } from \"./player\";\nimport { loadShader, initShaderProgram } from \"./shaders-utils\";\nimport { renderModels } from \"./game/models-render\";\n\nexport const startMainLoop = (groundTextureImage: HTMLImageElement) => {\n  const csm_framebuffer = gl.createFramebuffer();\n  const collision_frameBuffer = gl.createFramebuffer()!;\n  const collision_renderBuffer = gl.createRenderbuffer();\n  const collision_texture = gl.createTexture()!;\n\n  const mainVertexShader = loadShader(main_vsSource);\n  const csmShader = initShaderProgram(loadShader(csm_vsSource), void_fsSource);\n  const skyShader = initShaderProgram(loadShader(sky_vsSource), sky_fsSource);\n  const collisionShader = initShaderProgram(mainVertexShader, collider_fsSource);\n  const mainShader = initShaderProgram(mainVertexShader, main_fsSource);\n\n  collisionShader();\n  gl.uniformMatrix4fv(collisionShader(uniformName_projectionMatrix), false, mat_perspectiveXY(1.4, 0.59, 0.0001, 1));\n\n  skyShader();\n  gl.uniform1i(skyShader(uniformName_groundTexture), 3); // TEXTURE3\n\n  mainShader();\n  gl.uniform1i(mainShader(uniformName_groundTexture), 3); // TEXTURE3\n\n  const csm_render = integers_map(2, (csmSplit: number) => {\n    const texture = gl.createTexture()!;\n    const lightSpaceMatrix: Float32Array = new Float32Array(16);\n    const lightSpaceMatrixLoc = mainShader(csmSplit ? uniformName_csm_matrix1 : uniformName_csm_matrix0);\n    gl.uniform1i(mainShader(csmSplit ? uniformName_csm_texture1 : uniformName_csm_texture0), csmSplit);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, csm_framebuffer);\n\n    // Disable rendering to the csm color buffer, we just need the depth buffer\n    gl.drawBuffers([gl.NONE]);\n    gl.readBuffer(gl.NONE);\n\n    gl.activeTexture(gl.TEXTURE0 + csmSplit);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.DEPTH_COMPONENT24,\n      CSM_TEXTURE_SIZE,\n      CSM_TEXTURE_SIZE,\n      0,\n      gl.DEPTH_COMPONENT,\n      gl.UNSIGNED_INT,\n      null,\n    );\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, gl.LEQUAL); // Can be LESS or LEQUAL\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\n    return (matrix?: DOMMatrix) => {\n      if (matrix) {\n        matrixToArray(matrix, lightSpaceMatrix);\n        gl.uniformMatrix4fv(csmShader(uniformName_viewMatrix), false, lightSpaceMatrix);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, texture, 0);\n        gl.clear(gl.DEPTH_BUFFER_BIT);\n        renderModels(csmShader(uniformName_worldMatrices), !player_first_person);\n      } else {\n        gl.uniformMatrix4fv(lightSpaceMatrixLoc, false, lightSpaceMatrix);\n      }\n    };\n  });\n\n  gl.enable(gl.DEPTH_TEST); // Enable depth testing\n  gl.enable(gl.CULL_FACE); // Don't render triangle backs\n\n  gl.clearDepth(1); // Clear everything. Default value is 1\n  gl.cullFace(gl.BACK); // Default value is already BACK\n  gl.depthFunc(gl.LEQUAL); // LEQUAL to make sky works\n  gl.clearColor(0, 0, 0, 1);\n\n  // Collision framebuffer\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n  gl.bindRenderbuffer(gl.RENDERBUFFER, collision_renderBuffer);\n\n  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE);\n  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, collision_renderBuffer);\n\n  gl.activeTexture(gl.TEXTURE3);\n  gl.bindTexture(gl.TEXTURE_2D, collision_texture);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, collision_texture, 0);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    gl.RGB,\n    COLLISION_TEXTURE_SIZE,\n    COLLISION_TEXTURE_SIZE,\n    0,\n    gl.RGB,\n    gl.UNSIGNED_BYTE,\n    null,\n  );\n\n  // Ground texture\n\n  gl.activeTexture(gl.TEXTURE3);\n  gl.bindTexture(gl.TEXTURE_2D, gl.createTexture());\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1024, 1024, 0, gl.RGBA, gl.UNSIGNED_BYTE, groundTextureImage);\n  gl.generateMipmap(gl.TEXTURE_2D);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\n  const mainLoop = (globalTime: number) => {\n    gl.flush();\n\n    requestAnimationFrame(mainLoop);\n\n    gameTimeUpdate(globalTime);\n\n    if (gameTimeDelta > 0) {\n      // read collision shader output\n\n      worldStateUpdate();\n\n      player_update();\n\n      keyboard_downKeys[KEY_INTERACT] = 0;\n    }\n\n    const camera_view = mainMenuVisible\n      ? identity\n          .rotate(-20, -90)\n          .invertSelf()\n          .translateSelf(4.5, -2, -3.2 + clamp01(hC.clientWidth / 1000))\n      : identity\n          .rotate(-camera_rotation.x, -camera_rotation.y, -camera_rotation.z)\n          .invertSelf()\n          .translateSelf(-camera_position.x, -camera_position.y, -camera_position.z);\n\n    if (gameTimeDelta > 0) {\n      // *** COLLISION RENDERER ***\n\n      collisionShader();\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n      gl.viewport(0, 0, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE);\n\n      // first collision render\n\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      gl.colorMask(true, false, true, false);\n      gl.uniformMatrix4fv(\n        collisionShader(uniformName_viewMatrix),\n        false,\n        matrixToArray(\n          identity\n            .rotate(0, 180)\n            .invertSelf()\n            .translateSelf(-player_position_final.x, -player_position_final.y, 0.3 - player_position_final.z),\n        ),\n      );\n      renderModels(collisionShader(uniformName_worldMatrices), 0, MODEL_ID_SOUL_COLLISION);\n\n      // second collision render\n\n      gl.clear(gl.DEPTH_BUFFER_BIT);\n      gl.colorMask(false, true, true, false);\n      gl.uniformMatrix4fv(\n        collisionShader(uniformName_viewMatrix),\n        false,\n        matrixToArray(\n          identity.translate(-player_position_final.x, -player_position_final.y, -player_position_final.z - 0.3),\n        ),\n      );\n      renderModels(collisionShader(uniformName_worldMatrices), 0, MODEL_ID_SOUL_COLLISION);\n\n      gl.flush();\n    }\n\n    // *** CASCADED SHADOWMAPS ***\n\n    csmShader();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, csm_framebuffer);\n    gl.viewport(0, 0, CSM_TEXTURE_SIZE, CSM_TEXTURE_SIZE);\n\n    csm_render[0]!(csm_buildMatrix(camera_view, zNear, CSM_PLANE_DISTANCE, 10));\n    csm_render[1]!(csm_buildMatrix(camera_view, CSM_PLANE_DISTANCE, zFar, 11));\n\n    // *** MAIN RENDER ***\n\n    mainShader();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    gl.colorMask(true, true, true, true);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    csm_render[0]!();\n    csm_render[1]!();\n\n    gl.uniformMatrix4fv(mainShader(uniformName_projectionMatrix), false, mat_perspective(zNear, zFar));\n    gl.uniformMatrix4fv(mainShader(uniformName_viewMatrix), false, matrixToArray(camera_view));\n    gl.uniform3f(mainShader(uniformName_viewPos), camera_position.x, camera_position.y, camera_position.z);\n\n    renderModels(mainShader(uniformName_worldMatrices), !player_first_person);\n\n    // *** SKY RENDER ***\n\n    skyShader();\n\n    gl.uniform3f(skyShader(uniformName_iResolution), gl.drawingBufferWidth, gl.drawingBufferHeight, absoluteTime);\n    if (mainMenuVisible) {\n      gl.uniform3f(skyShader(uniformName_viewPos), 0, 0, 0);\n    } else {\n      gl.uniform3f(skyShader(uniformName_viewPos), camera_position.x, camera_position.y, camera_position.z);\n    }\n    gl.uniformMatrix4fv(skyShader(uniformName_viewMatrix), false, matrixToArray(camera_view.inverse()));\n\n    gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 0);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n    gl.flush();\n  };\n\n  loadGame();\n\n  worldStateUpdate();\n\n  NO_INLINE(player_init)();\n\n  // gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n  requestAnimationFrame(mainLoop);\n};\n","#version 300 es\n\nlayout(location = 0) in vec4 aPosition;\nlayout(location = 1) in vec3 aNormal;\nlayout(location = 2) in vec4 aColor;\n\nout vec4 VNormal;\nout vec4 FragPos;\nout vec4 UntransformedFragPos;\nout lowp vec4 Color;\n\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 worldMatrices[39];\n\n#define modelId aPosition.w\n\nvoid main() {\n  mat4 worldMatrix = worldMatrices[max(0, abs(int(modelId)) - 1) + gl_InstanceID];\n  // trick - use worldMatrix[3][3] that normally is 1 as a way to color the handle of pulled levers\n  Color = mix(aColor, vec4(0.7, 1, 0.2, 0), aColor.w > 0. ? 0. : 1. - worldMatrix[3][3]);\n  worldMatrix[3][3] = 1.;\n  UntransformedFragPos = aPosition;\n  FragPos = worldMatrix * vec4(aPosition.xyz, 1);\n  gl_Position = projectionMatrix * (viewMatrix * FragPos);\n  FragPos.w = modelId;\n  VNormal = (worldMatrix * vec4(aNormal, 0));\n}\n","#version 300 es\nprecision highp float;\n\n// as printed by the console.log on csm.ts\nconst vec3 lightDir = vec3(-0.6560590289905073, 0.6663690071652679, -0.3543146860766681);\n\n#define CSM_TEXTURE_SIZE 2048.\n\n#define zNear 0.3\n#define CSM_PLANE_DISTANCE 55.\n#define zFar 177.\n\nin highp vec4 VNormal;\nin highp vec4 FragPos;\nin highp vec4 UntransformedFragPos;\nin lowp vec4 Color;\n\nuniform vec3 viewPos;\nuniform mat4 viewMatrix;\nuniform mat4 csm_matrix0;\nuniform mat4 csm_matrix1;\n\nuniform highp sampler2DShadow csm_texture0;\nuniform highp sampler2DShadow csm_texture1;\nuniform highp sampler2D groundTexture;\n\nout vec4 O;\n\nvoid main() {\n  vec4 fragPosVec4 = vec4(FragPos.xyz, 1);\n  vec3 normal = normalize(VNormal.xyz);\n\n  vec3 tex = Color.w *\n    (texture(groundTexture, UntransformedFragPos.yz * .035) * normal.x +\n     texture(groundTexture, UntransformedFragPos.xz * .035) * normal.y +\n     texture(groundTexture, UntransformedFragPos.xy * .035) * normal.z)\n      .xyz;\n\n  // Displacement map\n  normal = normalize(normal.xyz + tex * .5);\n\n  float lambert = dot(normal, lightDir);\n  float shadow = 1.;\n  float depthValue = abs((viewMatrix * fragPosVec4).z);\n\n  // Gets the fragment position in light space\n  vec4 csmCoords = (depthValue < CSM_PLANE_DISTANCE ? csm_matrix0 : csm_matrix1) * fragPosVec4;\n\n  // perform perspective divide and transform to [0,1] range\n  csmCoords = (csmCoords / csmCoords.w) * .5 + .5;\n\n  if (csmCoords.z < 1.) { // Only if inside far plane\n    shadow = 0.;\n\n    // Shadow bias could be computed based on normal and light, something like\n    // 0.0003 * (1. - clamp(dot(normal, lightDir), 0., 1.))\n\n    for (float x = -1.; x <= 1.; ++x) {\n      for (float y = -1.; y <= 1.; ++y) {\n        vec3 c = vec3(\n          csmCoords.xy + vec2(x, y) / CSM_TEXTURE_SIZE,\n          csmCoords.z -\n            // shadow bias\n            (1. / CSM_TEXTURE_SIZE / 2.8)\n        );\n        shadow += depthValue < CSM_PLANE_DISTANCE ? texture(csm_texture0, c) : texture(csm_texture1, c);\n      }\n    }\n    shadow /= 9.;\n  }\n\n  vec3 rgbColor = Color.xyz * (1. - tex.x);\n\n  float lavaLight = max(max(abs(normal.x), abs(normal.z)) * .3 - normal.y, 0.) * pow(max(0., (8. - FragPos.y) / 45.), 1.7);\n\n  O = vec4(\n    // lava light\n    vec3(lavaLight, lavaLight * lavaLight * .5, 0) +\n      // ambient\n      vec3(.09, .05, .11) * rgbColor +\n      // diffuse\n      (rgbColor * (max(0., lambert) * .5 + (rgbColor * lambert * lambert * vec3(.5, .45, .3))) * (shadow * .75 + .25)) +\n      // specular\n      vec3(.6, .6, .5) * pow(max(0., dot(normalize(FragPos.xyz - viewPos), reflect(lightDir, normal))), 35.) * shadow,\n    1\n  );\n\n  // O = vec4(vec3(attenuation), 1);\n}\n","#version 300 es\nprecision highp float;\n\nuniform vec3 iResolution;\nuniform vec3 viewPos;\nuniform mat4 viewMatrix;\n\nuniform highp sampler2D groundTexture;\n\nout vec4 O;\n\n#define gameTime iResolution.z\n\n/* 1 / Math.tan(fieldOfViewRadians / 2) */\nconst float fieldOfViewAmount = 1.73205;\n\nvoid main() {\n  vec2 fragCoord = (gl_FragCoord.xy / iResolution.xy) * 2. - 1.;\n  vec3 ray =\n    normalize(viewMatrix * vec4(fragCoord.x * -(iResolution.x / iResolution.y), -fragCoord.y, fieldOfViewAmount, 0.)).xyz;\n  float rayTracedLavalDistance = (-32. - viewPos.y) / ray.y;\n  float multiplier = (1. - clamp(abs(rayTracedLavalDistance / 9999.), 0., 1.));\n\n  O = vec4(0, 0, 0, 1);\n\n  if (multiplier > 0.01) {\n    if (rayTracedLavalDistance > 0.) {\n      // Render sky\n      float c = cos(gameTime / 30.), s = sin(gameTime / 30.);\n      ray.xz *= mat2(c, s, -s, c);\n      vec3 absRay = abs(ray);\n      O.xyz = vec3(dot(vec2(texture(groundTexture, ray.xy).z, texture(groundTexture, ray.yz * 2.).z), absRay.zx) * absRay.y);\n\n    } else {\n      // Render raytraced lava\n      ray = viewPos + ray * rayTracedLavalDistance;\n      O.x = multiplier *=\n        0.9 - texture(groundTexture, ray.xz / 150. + vec2(sin(ray.z / 35. + gameTime), cos(ray.x / 25. + gameTime)) / 80.).y;\n      O.y = multiplier * multiplier * multiplier;\n    }\n  }\n}\n","#version 300 es\n\nin vec4 aPosition;\n\nuniform mat4 viewMatrix;\nuniform mat4 worldMatrices[39];\n\n#define modelId aPosition.w\n\nvoid main() {\n  mat4 worldMatrix = worldMatrices[max(0, abs(int(modelId)) - 1) + gl_InstanceID];\n  worldMatrix[3][3] = 1.;\n  gl_Position = viewMatrix * (worldMatrix * vec4(aPosition.xyz, 1));\n}\n","#version 300 es\n// Do nothing.\nvoid main() {}\n","#version 300 es\n\nin vec4 aPosition;\n\nvoid main() { gl_Position = vec4(aPosition.xy, 1, 1); }\n","#version 300 es\nprecision highp float;\n\nin highp vec4 VNormal;\nin highp vec4 FragPos;\n\nuniform mat4 viewMatrix;\n\nout vec4 O;\n\n#define modelId FragPos.w\n\nvoid main() {\n  vec4 v = viewMatrix * vec4(FragPos.xyz, 1);\n  float z = 1. - min(abs(v.z / v.w), 1.);\n  O = vec4(vec2(z * (gl_FragCoord.y > 31. ? 1. : abs(VNormal.y))), z > 0. ? modelId / 255. : 0., 1);\n}\n","export const loadStep = (fn: () => void) => {\n  // loading dots ...\n  h4.innerHTML += \".\";\n  setTimeout(fn);\n};\n","// This music has been exported by SoundBox and modified manually to minify better.\n\n// Beethoven's Piano Sonata No. 14, 3rd movement, readapted by Ryan Malm for this game\n\nexport const song_patterns = '000001234556112341234556011111111112011111111112000001111112'\n\nexport const song_instruments = [\n  [ // instrument 0\n    69, // OSC1_VOL\n    128, // OSC1_SEMI\n    0, // OSC1_XENV\n    143, // OSC2_VOL\n    128, // OSC2_SEMI\n    0, // OSC2_XENV\n    0, // NOISE_VOL\n    196, // ENV_ATTACK ** 2 * 4\n    100, // ENV_SUSTAIN ** 2 * 4\n    36, // ENV_RELEASE\n    0, // ENV_EXP_DECAY\n    0, // LFO_FREQ\n    149, // FX_FREQ\n    110, // FX_RESONANCE\n    31, // FX_DRIVE\n    47, // FX_PAN_AMT\n    3, // FX_PAN_FREQ\n    56, // FX_DELAY_AMT\n    2, // FX_DELAY_TIME\n    0, // LFO_AMT\n    [ // Columns 0\n      \"(.15:15:=5:=A:=AF=AFIFIMRMRUY(Y(((((((((((((((((((((((((((((M(M(((((((((((((((((((((((((((((R(R(((((((((((((((((((((((((((((U(U\",\n      \"(059<59<A9<AE<AEHAEHMEHMQMQTY(Y\",\n      \"(5:>A:>AF>AFJAFJMFJMRJMRVMRVY(Y\",\n      \"(:?BFFKNRRWZ^(^((:=@FFILRRUX^(^\",\n      \"Q(M(M(O(Q(R(T(Q(T(R(W(U(T(R(Q(N(W((Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(X]\",\n      \"QN(M(N(M(N(M(N(M((((((((((((((((W(Y(Y(Y(Y(Y(Y(Y(Y(((((((((((((((]\",\n    ]\n  ],\n  [ // Instrument 1\n    100, // OSC1_VOL\n    128, // OSC1_SEMI\n    0, // OSC1_XENV\n    201, // OSC2_VOL\n    128, // OSC2_SEMI\n    0, // OSC2_XENV\n    0, // NOISE_VOL\n    100, // ENV_ATTACK ** 2 * 4\n    144, // ENV_SUSTAIN ** 2 * 4\n    35, // ENV_RELEASE\n    0, // ENV_EXP_DECAY\n    6, // LFO_FREQ\n    135, // FX_FREQ\n    0, // FX_RESONANCE\n    32, // FX_DRIVE\n    147, // FX_PAN_AMT\n    6, // FX_PAN_FREQ\n    0, // FX_DELAY_AMT\n    6, // FX_DELAY_TIME\n    195, // LFO_AMT\n    [ // Columns 1\n      \".(5(.(5(.(5(.(5(.(5(.(5(.(5(.(5\",\n      \"-(5(-(5(-(5(-(5(-(5(-(5(-(5(-(5\",\n      \",(5(,(5(,(5(,(5(,(5(,(5(,(5(,(5\",\n      \"*(6(*(6(*(6(*(6(*(6(*(6(*(6(*(6\",\n      \"5(E(E(F(H(I(K(H(K(I(N(M(K(I(H(F(A(((((((((((((((((((((((((((((((5(((5(((5(((5(((5(((5(((5(((5\",\n      \"5(6(5(6(5(6(5(6(5((()(((((((((((A(B(A(B(A(B(A(B(A(((5\",\n    ]\n  ],\n  [ // Instrument 2\n    255, // OSC1_VOL\n    116, // OSC1_SEMI\n    85, // OSC1_XENV\n    255, // OSC2_VOL\n    116, // OSC2_SEMI\n    37, // OSC2_XENV\n    14, // NOISE_VOL\n    64, // ENV_ATTACK ** 2 * 4\n    144, // ENV_SUSTAIN ** 2 * 4\n    73, // ENV_RELEASE\n    99, // ENV_EXP_DECAY\n    0, // LFO_FREQ\n    136, // FX_FREQ\n    15, // FX_RESONANCE\n    32, // FX_DRIVE\n    0, // FX_PAN_AMT\n    0, // FX_PAN_FREQ\n    66, // FX_DELAY_AMT\n    6, // FX_DELAY_TIME\n    0, // LFO_AMT\n    [ // Columns 2\n      \"9(((9(((9(((9(((9(((9(((9(((9\",\n      \"9(((Q(((Q(((Q\",\n    ]\n  ],\n  [ // Instrument 3\n    0, // OSC1_VOL\n    140, // OSC1_SEMI\n    0, // OSC1_XENV\n    0, // OSC2_VOL\n    140, // OSC2_SEMI\n    0, // OSC2_XENV\n    81, // NOISE_VOL\n    64, // ENV_ATTACK ** 2 * 4\n    400, // ENV_SUSTAIN ** 2 * 4\n    47, // ENV_RELEASE\n    55, // ENV_EXP_DECAY\n    5, // LFO_FREQ\n    239, // FX_FREQ\n    135, // FX_RESONANCE\n    13, // FX_DRIVE\n    176, // FX_PAN_AMT\n    5, // FX_PAN_FREQ\n    16, // FX_DELAY_AMT\n    4, // FX_DELAY_TIME\n    187, // LFO_AMT\n    [ // Columns 3\n      \"9(9(9(9(9(9(9(999(9(9(9(999(9(9\",\n      \"9(9(9(9(9(999(9(((((Q\",\n    ]\n  ],\n  [ // Instrument 4\n    221, // OSC1_VOL\n    128, // OSC1_SEMI\n    64, // OSC1_XENV\n    210, // OSC2_VOL\n    128, // OSC2_SEMI\n    64, // OSC2_XENV\n    255, // NOISE_VOL\n    64, // ENV_ATTACK ** 2 * 4\n    144, // ENV_SUSTAIN ** 2 * 4\n    73, // ENV_RELEASE\n    79, // ENV_EXP_DECAY\n    7, // LFO_FREQ\n    195, // FX_FREQ\n    15, // FX_RESONANCE\n    21, // FX_DRIVE\n    20, // FX_PAN_AMT\n    0, // FX_PAN_FREQ\n    9, // FX_DELAY_AMT\n    3, // FX_DELAY_TIME\n    64, // LFO_AMT\n    [ // Columns 4\n      \"((((Q(((((((Q(((((((Q(((((((Q\",\n      \"Q((Q((Q((Q((Q((Q((((Q\",\n    ]\n  ],\n] as const\n\nexport const song_rowLen0 = 5513\n\nexport const song_rowLen1 = 4562\n\nexport const song_rowLen2 = 3891\n\n// Rows per pattern\nexport const song_patternLen = 32\n\n// End pattern\nexport const song_endPattern = 11\n\n// Number of channels\nexport const song_numChannels = 5\n\n","/* -*- mode: javascript; tab-width: 4; indent-tabs-mode: nil; -*-\n *\n * Copyright (c) 2011-2013 Marcus Geelnard\n *\n * This software is provided 'as-is', without any express or implied\n * warranty. In no event will the authors be held liable for any damages\n * arising from the use of this software.\n *\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n *\n * 1. The origin of this software must not be misrepresented; you must not\n *    claim that you wrote the original software. If you use this software\n *    in a product, an acknowledgment in the product documentation would be\n *    appreciated but is not required.\n *\n * 2. Altered source versions must be plainly marked as such, and must not be\n *    misrepresented as being the original software.\n *\n * 3. This notice may not be removed or altered from any source\n *    distribution.\n *\n */\n\n// WARNING: Source code of the original player was heavily manually modified to reduce bundle size.\n// This player plays only the game song and is modified.\n// This makes this version not compatible with default soundbox songs.\n\nimport { audioContext, songAudioSource } from \"./audio-context\";\nimport {\n  song_endPattern,\n  song_patternLen,\n  song_patterns,\n  song_instruments,\n  song_rowLen0,\n  song_rowLen1,\n  song_rowLen2,\n  song_numChannels,\n} from \"./song\";\nimport { loadStep } from \"../load-step\";\n\nconst getnotefreq = (n: number) => 0.003959503758 * 2 ** ((n - 256) / 12);\n\n/** oscillator 0 */\nconst osc_sin = (value: number) => Math.sin(value * Math.PI * 2);\n\n/** oscillator 1 */\nconst osc_square = (value: number) => (value % 1 < 0.5 ? 1 : -1);\n\n/** oscillator 2 */\nconst osc_saw = (value: number) => 2 * (value % 1) - 1;\n\n/** oscillator 3 */\nconst osc_tri = (value: number) => {\n  const v2 = (value % 1) * 4;\n  return v2 < 2 ? v2 - 1 : 3 - v2;\n};\n\nconst getSegmentNumWords = (song_rowLen: number) => song_rowLen * song_patternLen * (song_endPattern + 1) * 2;\n\nexport const loadSong = (done: () => void) => {\n  let channelIndex = 0;\n\n  const song_numWords =\n    getSegmentNumWords(song_rowLen0) + getSegmentNumWords(song_rowLen1) + getSegmentNumWords(song_rowLen2);\n\n  const mixBuffer = new Int32Array(song_numWords);\n\n  const finish = () => {\n    const audioBuffer = audioContext.createBuffer(2, song_numWords / 2, 44100);\n    for (let i = 0; i < 2; i++) {\n      for (let j = i, data = audioBuffer.getChannelData(i); j < song_numWords; j += 2) {\n        data[j >> 1] = mixBuffer[j]! / 65536;\n      }\n    }\n\n    // Load the buffer into the audio source\n    songAudioSource.buffer = audioBuffer;\n\n    // Loop forever\n    songAudioSource.loop = true;\n\n    loadStep(done);\n  };\n\n  const next = () => {\n    // Generate audio data for a single track/channel.\n    let mixIndex = 0;\n    let [\n      OSC1_VOL,\n      OSC1_SEMI,\n      OSC1_XENV,\n      OSC2_VOL,\n      OSC2_SEMI,\n      OSC2_XENV,\n      NOISE_VOL,\n      ENV_ATTACK,\n      ENV_SUSTAIN,\n      ENV_RELEASE,\n      ENV_EXP_DECAY,\n      LFO_FREQ,\n      FX_FREQ,\n      FX_RESONANCE,\n      FX_DRIVE,\n      FX_PAN_AMT,\n      FX_PAN_FREQ,\n      FX_DELAY_AMT,\n      FX_DELAY_TIME,\n      LFO_AMT,\n      COLUMNS,\n    ] = song_instruments[channelIndex]!;\n\n    ENV_RELEASE = (ENV_RELEASE * ENV_RELEASE * 4) as any;\n\n    const createNote = (song_rowLen: number, note: number) => {\n      const OSC1_WAVEFORM = channelIndex < 2 ? osc_saw : osc_sin;\n      const OSC2_WAVEFORM = channelIndex < 2 ? (channelIndex < 1 ? osc_square : osc_tri) : osc_sin;\n\n      // Re-trig oscillators\n      let c1 = 0;\n      let c2 = 0;\n\n      // Local variables.\n      let o1t: number;\n      let o2t: number;\n\n      const noteBuf = new Int32Array(ENV_ATTACK + ENV_SUSTAIN + ENV_RELEASE);\n\n      // Generate one note (attack + sustain + release)\n      for (let j1 = 0, j2 = 0; j1 < ENV_ATTACK + ENV_SUSTAIN + ENV_RELEASE; ++j1, ++j2) {\n        let e = 1;\n        // Envelope\n        if (j1 < ENV_ATTACK) {\n          e = j1 / ENV_ATTACK;\n        } else if (j1 >= ENV_ATTACK + ENV_SUSTAIN) {\n          e = (j1 - ENV_ATTACK - ENV_SUSTAIN) / ENV_RELEASE;\n          e = (1 - e) * 3 ** ((-ENV_EXP_DECAY / 16) * e);\n        }\n\n        if (j2 >= 0) {\n          // Switch arpeggio note.\n          j2 -= song_rowLen * 4;\n\n          // Calculate note frequencies for the oscillators\n          o1t = getnotefreq(note + OSC1_SEMI);\n          o2t = getnotefreq(note + OSC2_SEMI) * (1 + (channelIndex ? 0 : 0.0008 * 9));\n        }\n\n        // Add to (mono) channel buffer\n        noteBuf[j1] =\n          (80 * // Oscillator 1\n            (OSC1_WAVEFORM((c1 += o1t! * e ** (OSC1_XENV / 32))) * OSC1_VOL +\n              // Oscillator 2\n              OSC2_WAVEFORM((c2 += o2t! * e ** (OSC2_XENV / 32))) * OSC2_VOL +\n              // Noise oscillator\n              (NOISE_VOL ? (Math.random() * 2 - 1) * NOISE_VOL : 0)) *\n            e) |\n          0;\n      }\n      return noteBuf;\n    };\n\n    for (const song_rowLen of [song_rowLen0, song_rowLen1, song_rowLen2]) {\n      // Local variables\n      let n;\n      let t;\n      let f;\n\n      const chnBuf = new Int32Array(getSegmentNumWords(song_rowLen));\n\n      // Clear effect state\n      let low = 0;\n      let band = 0;\n      let high;\n      let filterActive: boolean | undefined;\n\n      // Clear note cache.\n      const noteCache = [];\n\n      // Put performance critical instrument properties in local variables\n      const lfoFreq = 2 ** (LFO_FREQ - 9) / song_rowLen;\n      const panFreq = (Math.PI * 2 ** (FX_PAN_FREQ - 8)) / song_rowLen;\n      const dly = (FX_DELAY_TIME * song_rowLen) & ~1; // Must be an even number\n\n      // Patterns\n      for (let p = 0; p <= song_endPattern; ++p) {\n        // Pattern rows\n        for (let row = 0, cp = +song_patterns[channelIndex * 12 + p]!; row < song_patternLen; ++row) {\n          // Calculate start sample number for this row in the pattern\n          const rowStartSample = (p * song_patternLen + row) * song_rowLen;\n\n          // Generate notes for this pattern row\n          for (let col = 0; col < 4; ++col) {\n            n = 0;\n            if (cp) {\n              n = COLUMNS[cp - 1]!.charCodeAt(row + col * song_patternLen) - 40;\n              n += n > 0 ? 106 : 0;\n            }\n            if (n) {\n              const noteBuf = noteCache[n] || (noteCache[n] = createNote(song_rowLen, n));\n              for (let j = 0, i = rowStartSample * 2; j < noteBuf.length; ++j, i += 2) {\n                chnBuf[i] += noteBuf[j]!;\n              }\n            }\n          }\n\n          // Perform effects for this pattern row\n          for (let j = 0, rsample; j < song_rowLen; ++j) {\n            // Dry mono-sample\n            let k = (rowStartSample + j) * 2;\n            let lsample = 0;\n            rsample = chnBuf[k]!;\n\n            // We only do effects if we have some sound input\n            if (rsample || filterActive) {\n              // State variable filter\n              f = FX_FREQ * ((43.23529 * 3.141592) / 44100);\n              if (channelIndex === 1 || channelIndex === 4) {\n                f *= (osc_sin(lfoFreq * k) * LFO_AMT) / 512 + 0.5;\n              }\n              f = 1.5 * Math.sin(f);\n              low += f * band;\n              high = (1 - FX_RESONANCE / 255) * (rsample - band) - low;\n              band += f * high;\n              rsample = channelIndex === 4 ? band : channelIndex === 3 ? high : low;\n\n              // Distortion\n              if (!channelIndex) {\n                rsample *= 22 * 1e-5;\n                rsample = rsample < 1 ? (rsample > -1 ? osc_sin(rsample / 4) : -1) : 1;\n                rsample /= 22 * 1e-5;\n              }\n\n              // Drive\n              rsample *= FX_DRIVE / 32;\n\n              // Is the filter active (i.e. still audiable)?\n              filterActive = rsample * rsample > 1e-5;\n\n              // Panning\n              t = (Math.sin(panFreq * k) * FX_PAN_AMT) / 512 + 0.5;\n              lsample = rsample * (1 - t);\n              rsample *= t;\n            }\n\n            // Delay is always done, since it does not need sound input\n            if (k >= dly) {\n              // Left channel = left + right[-p] * t\n              lsample += (chnBuf[k - dly + 1]! * FX_DELAY_AMT) / 255;\n\n              // Right channel = right + left[-p] * t\n              rsample += (chnBuf[k - dly]! * FX_DELAY_AMT) / 255;\n            }\n\n            mixBuffer[mixIndex + k] += chnBuf[k] = lsample;\n            ++k;\n            mixBuffer[mixIndex + k] += chnBuf[k] = rsample;\n          }\n        }\n      }\n\n      mixIndex += chnBuf.length;\n    }\n\n    loadStep(++channelIndex < song_numChannels ? next : finish);\n  };\n\n  loadStep(next);\n};\n","import \"./index.css\";\n\nimport \"./dev-tools/dev-main\";\n\nif (DEBUG) {\n  console.time(\"boot\");\n}\n\nimport groundTextureSvg from \"./groundTexture.svg\";\n\nimport { build_life_the_universe_and_everything } from \"./game/level\";\nimport { startMainLoop } from \"./main-loop\";\nimport { initTriangleBuffers } from \"./game/triangle-buffers\";\nimport { loadStep } from \"./load-step\";\nimport { loadSong } from \"./music/music-player\";\nimport { initPage } from \"./page\";\n\nloadStep(() => {\n  let loadStatus = 0;\n  const image = new Image();\n\n  if (DEBUG) {\n    console.time(\"load\");\n  }\n\n  const end = () => {\n    if (++loadStatus === 2) {\n      if (DEBUG) {\n        console.timeEnd(\"load\");\n      }\n\n      if (DEBUG) {\n        console.time(\"startMainLoop\");\n      }\n\n      startMainLoop(image);\n\n      if (DEBUG) {\n        console.timeEnd(\"startMainLoop\");\n      }\n\n      NO_INLINE(initPage)();\n    }\n  };\n\n  image.onload = image.onerror = end;\n  image.src = groundTextureSvg;\n\n  const songLoaded = () => {\n    loadStep(() => {\n      initTriangleBuffers();\n      loadStep(end);\n    });\n    build_life_the_universe_and_everything();\n  };\n\n  if (DEBUG && DEBUG_FLAG1) {\n    songLoaded();\n  } else {\n    NO_INLINE(loadSong)(songLoaded);\n  }\n\n  if (DEBUG) {\n    console.timeEnd(\"boot\");\n  }\n});\n","import { plane_fromPolygon } from \"../math\";\nimport type { Polygon } from \"../geometry/geometry\";\nimport { allModels, MODEL_ID_LEVER, souls, SOULS_COUNT } from \"./models\";\nimport { gl } from \"../gl\";\n\nexport const initTriangleBuffers = () => {\n  if (DEBUG) {\n    console.time(\"initTriangleBuffers\");\n  }\n\n  const _vertexMap = new Map<string, number>();\n  const _vertexInts = new Int32Array(8);\n  const _vertexIntsSmooth = new Int32Array(_vertexInts.buffer, 0, 5);\n  const _vertexFloats = new Float32Array(_vertexInts.buffer);\n\n  const _triangleIndices: number[] = [];\n  const _vertexPositions: number[] = [];\n  const _vertexColors: number[] = [];\n  const _vertexNormals: number[] = [];\n\n  let polygon: Polygon | undefined;\n  let meshFirstIndex: number = 0;\n\n  const getVertex = (i: number): number => {\n    let { x, y, z } = polygon![i]!;\n    _vertexFloats[0] = x;\n    _vertexFloats[1] = y;\n    _vertexFloats[2] = z;\n    const key = \"\" + (polygon!.$smooth ? _vertexIntsSmooth : _vertexInts);\n    let index = _vertexMap.get(key);\n    if (index !== undefined) {\n      x = index * 3;\n      _vertexNormals[x] = (_vertexNormals[x++]! + _vertexInts[5]!) / 2;\n      _vertexNormals[x] = (_vertexNormals[x++]! + _vertexInts[6]!) / 2;\n      _vertexNormals[x] = (_vertexNormals[x]! + _vertexInts[7]!) / 2;\n    } else {\n      _vertexMap.set(key, (index = _vertexMap.size));\n      _vertexPositions.push(x, y, z, _vertexFloats[3]!);\n      _vertexColors.push(_vertexInts[4]!);\n      _vertexNormals.push(_vertexInts[5]!, _vertexInts[6]!, _vertexInts[7]!);\n    }\n    return index;\n  };\n\n  for (const model of allModels) {\n    _vertexFloats[3] = model.$modelId === MODEL_ID_LEVER ? -SOULS_COUNT - 1 : model.$kind && model.$modelId;\n    for (polygon of model.$polygons!) {\n      const { x, y, z } = plane_fromPolygon(polygon);\n      _vertexInts[4] = polygon.$color! | 0;\n      _vertexInts[5] = x * 32767;\n      _vertexInts[6] = y * 32767;\n      _vertexInts[7] = z * 32767;\n      for (let i = 2, a = getVertex(0), b = getVertex(1); i < polygon.length; ++i) {\n        _triangleIndices.push(a, b, (b = getVertex(i)));\n      }\n    }\n\n    // free memory\n    model.$polygons = null;\n\n    // write the indices offset and count\n    model.$vertexBegin = meshFirstIndex;\n    model.$vertexEnd = meshFirstIndex = _triangleIndices.length;\n  }\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(_vertexPositions), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ARRAY_BUFFER, new Int16Array(_vertexNormals), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(1, 3, gl.SHORT, true, 0, 0);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ARRAY_BUFFER, new Uint32Array(_vertexColors), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(2, 4, gl.UNSIGNED_BYTE, true, 0, 0);\n\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(_triangleIndices), gl.STATIC_DRAW);\n\n  gl.enableVertexAttribArray(0);\n  gl.enableVertexAttribArray(1);\n  gl.enableVertexAttribArray(2);\n\n  if (DEBUG) {\n    console.timeEnd(\"initTriangleBuffers\");\n    console.table({\n      \"game models\": allModels.filter((m) => !!m.$kind).length,\n      \"all models\": allModels.length,\n      \"vertices\": _vertexMap.size,\n      \"triangles\": _triangleIndices.length / 3,\n      \"indices\": _triangleIndices.length,\n    });\n\n    if (souls.length !== SOULS_COUNT) {\n      throw new Error(\"Souls must be \" + SOULS_COUNT + \" but is \" + souls.length);\n    }\n  }\n};\n"],"names":["groundTextureSvg","btoa","DEG_TO_RAD","Math","PI","identity","float32Array16Temp","Float32Array","integers_map","n","fn","Array","from","_","i","min","a","b","max","abs","clamp01","t","lerp","lerpneg","v","angle_wrap_degrees","degrees","angle_wrap_radians","radians","atan2","sin","cos","angle_lerp_degrees","a0","a1","da","angle_lerp","vec3_distance","x","y","z","hypot","vec3_dot","plane_fromPolygon","polygon","at","w","matrixToArray","$matrix","output","index","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","mat_perspectiveXY","mx","my","near","far","GQuad","polygon_color","color","smooth","$smooth","$color","polygon_transform","m","map","p","transformPoint","vec3_transform","polygons_transform","polygons","polygon_regular","segments","elongate","cylinder_sides","btm","top","btmi","length","cylinder","topSize","points","translate","scale3d","bottom","reverse","sphere","slices","stacks","vertexFunc","CSGPolygon_splitSpanning","plane","jd","fpoints","$flipped","iv","$polygon","id","jv","bpoints","push","$front","$parent","$back","CSGPolygon_split","d","csg_tree_addPolygon","node","$polygons","csg_tree_clipNode","anode","bnode","polygonPlaneFlipped","result","recursion","csg_tree_each","csg_tree","reduce","prev","csg_tree_flip","root","csg_union","inputs","polygonsToAdd","pp","csg_polygons_subtract","input","tree","Map","add","found","byParent","get","allPolygons","delete","set","flipped","csg_polygons","csg_subtract","MODEL_ID_PLAYER_LEG0","MODEL_ID_PLAYER_LEG1","allModels","levers","souls","player_position_final","souls_collected_count","absoluteTime","gameTime","player_last_pulled_lever","rotatingPlatform1Rotation","rotatingPlatform2Rotation","rotatingHexCorridorRotation","game_completed","firstBoatLerp","secondBoatLerp","_messageEndTime","mainMenuVisible","_globalTime","keyboard_downKeys","lerpDamp","to","speed","exp","gameTimeDelta","showMessage","message","duration","Infinity","h4","innerHTML","worldStateUpdate","shouldRotatePlatforms","$lerpValue","$lerpValue2","$value","model","_update","lever","soul","updateCollectedSoulsCounter","h3","acc","saveGame","localStorage","JSON","stringify","currentEditModel","newModel","$kind","previousModel","$modelId","meshAdd","transform","newLever","locMatrix","multiply","$locMatrix","leverIndex","onPlayerPullLever","rotate","translateSelf","scale","material","newSoul","walkingPath","dirX","randAngle","lookAngle","prevX","prevZ","wasInside","velocity","contextualVelocity","isInside","mindist","c","circles","distance","targetX","targetZ","circleSDF","circle","x1","z1","w1","ax","az","magnitude","angle","random","dirZ","soulX","soulZ","soulPos","parentModel","rotateSelf","NO_INLINE","r","g","build_life_the_universe_and_everything","hornsMatrices","HORN_STACKS","hornPolygons","flat","slice","getBoatAnimationMatrix","makeBigArcPolygons","height","blackPlatform","freq","amplitude","pz","level2Oscillation","level3Oscillation","shouldOscillate","shouldPushRods","hexPadShouldOscillate","boatPolygons","gateBarsPolygons","skewX","j","hexCorridorPolygons","scaleSelf","skewY","pushingRod","osc","k","eye","bm","theta","GHOST_STACKS","phixz","camera_position","camera_rotation","mat_perspective","hC","clientHeight","clientWidth","fieldOfViewAmount","csm_buildMatrix","camera_view","nearPlane","farPlane","zMultiplier","tx","ty","tz","roundingRadius","projViewInverse","DOMMatrix","invertSelf","frustumCorners","lightViewTranslated","left","right","multiplySelf","audioContext","AudioContext","songAudioSource","createBufferSource","touch_movementX","touch_movementY","player_first_person","initPage","music_on","touchStartTime","touchPosStartX","touchPosStartY","touchPosIdentifier","touchPosMoved","touchRotX","touchRotY","touchRotIdentifier","touchRotMoved","touchStartCameraRotX","touchStartCameraRotY","pageClicked","updateMusicOnState","disconnect","connect","destination","b4","mainMenu","value","visible","document","exitFullscreen","catch","exitPointerLock","start","body","className","handleResize","width","innerWidth","hidden","oncontextmenu","b3","onclick","confirm","location","reload","b1","requestFullscreen","b2","b5","e","target","requestPointerLock","code","type","repeat","pressed","mapped","onmousemove","movementX","movementY","ontouchstart","pageX","pageY","identifier","changedTouches","ontouchmove","deltaX","deltaY","absDeltaX","absDeltaY","sign","ontouchend","click","preventDefault","touch","diff","onvisibilitychange","onblur","onresize","gl","getContext","powerPreference","s","player_update","player_init","currentModelIdTMinus1","currentModelId","player_look_angle_target","player_look_angle","player_legs_speed","player_respawned","_gamepadInteractPressed","oldModelId","player_has_ground","player_gravity","player_speed","player_collision_velocity_x","player_collision_velocity_z","player_model_y","player_collision_x","player_collision_z","camera_lookat_x","camera_lookat_y","camera_lookat_z","player_position_global","player_collision_modelIdCounter","Int32Array","player_respawn","front","back","yindex","i1","i2","COLLISION_TEXTURE_SIZE","dist1","collision_buffer","dist2","xdist","doVerticalCollisions","maxModelIdCount","nextModelId","grav","fill","up","count","lines","interpolate_with_hysteresis","previous","desired","hysteresis","Uint8Array","strafe","forward","gamepad","getGamepads","buttons","axes","getGamepadButtonState","interactButtonPressed","amount","doHorizontalCollisions","playerSpeedCollision","referenceMatrix","inverseReferenceRotationMatrix","inverse","x2","y2","z2","oldx","oldz","viewDirDiffz","viewDirDiffx","modelId","loadShader","source","shader","initShaderProgram","vertexShader","sfsSource","uniforms","program","name","worldMatricesBuffer","renderModels","renderPlayer","soulModelId","matrix","worldMatrixLoc","$vertexEnd","$vertexBegin","startMainLoop","groundTextureImage","mainLoop","globalTime","requestAnimationFrame","time","dt","gameTimeUpdate","collision_frameBuffer","collisionShader","csm_framebuffer","csm_render","drawingBufferWidth","drawingBufferHeight","mainShader","skyShader","collision_renderBuffer","collision_texture","mainVertexShader","csmShader","csmSplit","lightSpaceMatrix","texture","lightSpaceMatrixLoc","savedLevers","savedSouls","savedLastPulledLever","savedGameTime","savedSecondBoatLerp","parse","loadStep","setTimeout","song_instruments","getnotefreq","osc_sin","osc_square","osc_saw","osc_tri","v2","getSegmentNumWords","song_rowLen","loadSong","done","channelIndex","finish","createBuffer","song_numWords","audioBuffer","data","mixBuffer","buffer","loop","next","mixIndex","note","c1","c2","o1t","o2t","OSC1_WAVEFORM","noteBuf","ENV_ATTACK","ENV_SUSTAIN","ENV_RELEASE","j1","j2","ENV_EXP_DECAY","OSC1_SEMI","OSC2_SEMI","OSC1_XENV","OSC1_VOL","OSC2_WAVEFORM","OSC2_XENV","OSC2_VOL","NOISE_VOL","LFO_FREQ","FX_FREQ","FX_RESONANCE","FX_DRIVE","FX_PAN_AMT","FX_PAN_FREQ","FX_DELAY_AMT","FX_DELAY_TIME","LFO_AMT","COLUMNS","low","band","f","high","filterActive","noteCache","chnBuf","lfoFreq","panFreq","dly","row","cp","col","charCodeAt","createNote","rowStartSample","lsample","rsample","loadStatus","end","image","Image","onload","onerror","src","meshFirstIndex","_vertexPositions","_vertexColors","_vertexNormals","_vertexMap","_vertexInts","_vertexFloats","_vertexIntsSmooth","key","size","getVertex","_triangleIndices","Int16Array","Uint32Array","Uint16Array"],"mappings":"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YAAAC,sBAAAC,eAAAC,uBAAAvT,KAAAwT,MAAAzT;YACXzC,OAAA7E,KAAA,CAAAgH,kBAAwBA,MAAAL,aAAAK,MAAAJ,cAAAI,MAAAH,SAAA3I,SAAA,IAAAwc,YAAAxc,UAAA;YAChC4G,MAAA9E,KAAA,CAAAiH,MAAA/I,WAAA+I,KAAAJ,SAAA,IAAA8T,WAAAzc;YACFiH,2BAAAyV;;YAGgBnV,iBAAAqV;AAChB,iBAAArJ,IAAA;QAEAjM,wBAA0BL;AAAA;;IYXxBwF,UAAAiJ,YAAAjJ;IACF2O,sBAAAF;AAAA;;AQzIK,MAAM4B,WAAYtf;IAEvB6K,GAAgBC,aAAA;IAChByU,WAAavf;AAAA;;ACQX,MACAwf,mBAAA,EACA,EACA,IACA,KACA,GACA,KACA,KACA,GACA,GACA,KACA,KACA,IACA,GACA,GACA,KACA,KACA,IACE,IACA,GACA,IACA,GACA,GACA,EACF,mIACF,mCACA,mCACE,mCACA,qEACA,yEAGA,EACA,KACA,KACA,GACA,KACA,KACA,GACA,GACA,KACA,KACA,IACA,GACA,GACA,KACA,GACA,IACE,KACA,GACA,GACA,GACA,KACA,EACF,mCACF,mCACA,mCACE,mCACA,iGACA,6DAGA,EACA,KACA,KACA,IACA,KACA,KACA,IACA,IACA,IACA,KACA,IACA,IACA,GACA,KACA,IACA,IACE,GACA,GACF,IACF,GACA,GACE,EACA,iCACA,qBAGA,EACA,GACA,KACA,GACA,GACA,KACA,GACA,IACA,IACA,KACA,IACA,IACA,GACA,KACA,KACA,IACE,KACA,GACF,IACF,GACA,KACE,EACA,mCACA,6BAGA,EACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,IACA,KACA,IACA,IACA,GACA,KACA,IACA,IACE,IACA,GACF,GACF,GACF,IAE4B,EAEA,iCAEA;;AC1H5B,MAAAC,mBAA8C,gBAAA,OAAA1f,IAAA,OAAA;;AAC9C,MAAA2f,UAAAlL,yBAAA/U,KAAA2B,IAAAoT,QAAA/U,KAAAC,KAAA;;AAAA,MACEigB,aAAAnL,SAAA,KAAAA,QAAA,IAAA,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"}