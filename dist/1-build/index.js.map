{"version":3,"file":"index.js","sources":["../../app/groundTexture.svg","../../app/math.ts","../../app/geometry/geometry.ts","../../app/geometry/csg.ts","../../app/geometry/solids.ts","../../app/game/scene.ts","../../app/camera.ts","../../app/music/song.ts","../../app/music/music-player.ts","../../app/music/audio-context.ts","../../app/page.ts","../../app/game/world-state.ts","../../app/game/player-position.ts","../../app/game/objects.ts","../../app/game/level.ts","../../app/game/init-souls.ts","../../app/csm.ts","../../app/gl.ts","../../app/game/render-models.ts","../../app/main-loop.ts","../../app/utils/keycodes.ts","../../app/shaders/main-vertex.vert","../../app/shaders/collider-fragment.frag","../../app/shaders/main-fragment.frag","../../app/shaders/sky-fragment.frag","../../app/shaders/csm-vertex.vert","../../app/shaders/void-fragment.frag","../../app/shaders/sky-vertex.vert","../../app/game/triangle-buffers.ts","../../app/index.ts"],"sourcesContent":["export default \"__VITE_ASSET__b9f78ae4__\"","/** Amount to be multiplied to an angle in degrees to obtain an angle in radians, approximately 0.017453292519943295 */\nexport const DEG_TO_RAD = Math.PI / 180;\n\n/** The identity matrix */\nexport const identity: DOMMatrixReadOnly = /* @__PURE__ */ new DOMMatrix();\n\nexport const min = /* @__PURE__ */ (a: number, b: number) => (a < b ? a : b);\n\nexport const max = /* @__PURE__ */ (a: number, b: number) => (a > b ? a : b);\n\nexport const abs = /* @__PURE__ */ (n: number) => (n < 0 ? -n : n);\n\nexport const clamp01 = /* @__PURE__ */ (t: number) => (t < 0 ? 0 : t > 1 ? 1 : t);\n\n/** Linear interpolation */\nexport const lerp = /* @__PURE__ */ (from: number, to: number, t: number) => from + (to - from) * clamp01(t);\n\nexport const lerpneg = /* @__PURE__ */ (v: number, t: number) => {\n  v = clamp01(v);\n  return lerp(v, 1 - v, t);\n};\n\n/**\n * Trigonometry - Wrap an angle so it is always between -PI and PI\n * @param radians The angle in radians to wrap between -PI and PI\n * @returns The angle in radians wrapped so it is always between -PI and PI\n */\nexport const angle_wrap_radians = /* @__PURE__ */ (radians: number): number =>\n  Math.atan2(Math.sin(radians), Math.cos(radians));\n\nexport const angle_wrap_degrees = /* @__PURE__ */ (degrees: number): number =>\n  angle_wrap_radians(degrees * DEG_TO_RAD) / DEG_TO_RAD;\n\nexport const angle_lerp = /* @__PURE__ */ (a0: number, a1: number, t: number) => {\n  const da = (a1 - a0) % (Math.PI * 2);\n  return a0 + (((2 * da) % (Math.PI * 2)) - da) * clamp01(t);\n};\n\nexport const angle_lerp_degrees = /* @__PURE__ */ (a0: number, a1: number, t: number) =>\n  angle_lerp(a0 * DEG_TO_RAD, a1 * DEG_TO_RAD, t) / DEG_TO_RAD;\n\nexport const interpolate_with_hysteresis = /* @__PURE__ */ (\n  previous: number,\n  desired: number,\n  hysteresis: number,\n  t: number,\n) =>\n  lerp(\n    previous + Math.sign(desired - previous) * max(0, abs(desired - previous) ** 0.9 - hysteresis) * t * 2,\n    desired,\n    t / 7,\n  );\n\nexport const integers_map = <T>(n: number, fn: (i: number) => T) => Array.from(Array(n), (_, i) => fn(i));\n\nexport const mat_perspectiveXY = /* @__PURE__ */ (mx: number, my: number, near: number, far: number) => [\n  mx,\n  0,\n  0,\n  0,\n  0,\n  my,\n  0,\n  0,\n  0,\n  0,\n  (far + near) / (near - far),\n  -1,\n  0,\n  0,\n  (2 * far * near) / (near - far),\n  0,\n];\n\nexport interface Vec2 {\n  x: number;\n  y: number;\n}\n\nexport interface Vec3 {\n  x: number;\n  y: number;\n  z: number;\n}\n\nexport interface Vec4 {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n}\n\nexport interface Vec3Optional {\n  x?: number | undefined;\n  y?: number | undefined;\n  z?: number | undefined;\n}\n\nexport interface Plane {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n}\n\nexport type Vec2In = Readonly<Vec2>;\n\nexport type Vec3In = Readonly<Vec3>;\n\nexport type Vec4In = Readonly<Vec4>;\n\nexport const sqr = (n: number) => n * n;\n\nexport const vec3_dot = /* @__PURE__ */ ({ x, y, z }: Vec3In, v: Vec3In): number => x * v.x + y * v.y + z * v.z;\n\nexport const vec3_distance = /* @__PURE__ */ ({ x, y, z }: Vec3In, b: Vec3In): number =>\n  Math.hypot(x - b.x, y - b.y, z - b.z) || 0;\n\n/**\n * Computes a polygon plane using the Newell's method.\n * We are not using plane from 3 points algorithm,\n * because this can handle coplanar points and has precision problems.\n */\nexport const plane_fromPolygon = /* @__PURE__ */ (polygon: readonly Vec3In[]): Plane => {\n  // Newell's method\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = polygon.at(-1)!;\n  let b: Vec3In | number;\n  for (b of polygon) {\n    x += (a.y - b.y) * (a.z + b.z);\n    y += (a.z - b.z) * (a.x + b.x);\n    z += (a.x - b.x) * (a.y + b.y);\n    a = b;\n  }\n  b = Math.hypot(x, y, z);\n  x /= b;\n  y /= b;\n  z /= b;\n  return { x, y, z, w: x * a.x + y * a.y + z * a.z };\n};\n","import { abs, integers_map, identity, type Vec3, type Vec3Optional } from \"../math\";\n\nexport const material = /* @__PURE__ */ (r: number, g: number, b: number, a: number = 0): number =>\n  ((a * 255) << 24) | ((b * 255) << 16) | ((g * 255) << 8) | (r * 255);\n\nexport interface Polygon<TVec3 = Vec3> extends Array<TVec3> {\n  /** Polygon material */\n  $color?: number | undefined;\n\n  /** Smooth normals? */\n  $smooth?: 0 | 1 | undefined;\n}\n\nexport const polygon_color = /* @__PURE__ */ (\n  polygon: Polygon,\n  color: number | undefined,\n  smooth?: 0 | 1 | undefined,\n): Polygon => {\n  polygon.$smooth = smooth;\n  polygon.$color = color;\n  return polygon;\n};\n\nexport const vec3_transform = /* @__PURE__ */ ({ x, y, z }: Readonly<Vec3Optional>, m: DOMMatrixReadOnly): Vec3 => {\n  ({ x, y, z } = m.transformPoint({ x, y, z }));\n  return { x, y, z };\n};\n\nexport const polygon_transform = /* @__PURE__ */ (\n  polygon: Polygon<Readonly<Vec3Optional>>,\n  m: DOMMatrixReadOnly,\n  color: number | undefined = polygon.$color,\n): Polygon =>\n  polygon_color(\n    polygon.map((p) => vec3_transform(p, m)),\n    color,\n    polygon.$smooth,\n  );\n\nexport const polygons_transform = /* @__PURE__ */ (\n  polygons: Polygon<Readonly<Vec3Optional>>[],\n  m: DOMMatrixReadOnly,\n  color?: number | undefined,\n) => polygons.map((polygon) => polygon_transform(polygon, m, color));\n\n/**\n * Creates a regular polygon\n * The polygon will face up (normal 0, -1, 0).\n */\nexport const polygon_regular = /* @__PURE__ */ (segments: number, elongate: number = 0): Polygon =>\n  integers_map(segments, (i) => {\n    const z = Math.cos(Math.PI * 2 * (i / segments));\n    return {\n      x: Math.sin(Math.PI * 2 * (i / segments)),\n      y: 0,\n      z: abs(z) < 0.01 ? z : z < 0 ? z - elongate : z + elongate,\n    };\n  });\n\n/**\n * Connects a top and a bottom polygon with side polygons.\n * Top and bottom polygons must have the same length.\n * Top polygon is supposed to be flipped.\n */\nexport const cylinder_sides = /* @__PURE__ */ (btm: Polygon, top: Polygon, smooth?: 0 | 1 | undefined): Polygon[] =>\n  btm.map((btmi, i, { length }) =>\n    polygon_color(\n      [btmi, top[length - i - 1]!, top[length - ((i + 1) % length) - 1]!, btm[(i + 1) % length]!],\n      btm.$color,\n      smooth,\n    ),\n  );\n\n/** Simplest composition of polygon functions. */\nexport const cylinder = /* @__PURE__ */ (\n  segments: number | Vec3Optional[],\n  smooth?: 0 | 1,\n  topSize: number = 0,\n  elongate?: number,\n): Polygon[] => {\n  const points = (segments as Vec3Optional[]).length\n    ? (segments as Vec3Optional[])\n    : polygon_regular(segments as number, elongate);\n  const top = polygon_transform(points, identity.translate(0, 1).scale3d(topSize > 0 ? topSize : 1));\n  const bottom = polygon_transform(points, identity.translate(0, -1).scale3d(topSize < 0 ? -topSize : 1)).reverse();\n  return [...cylinder_sides(bottom as Polygon, top, smooth), bottom, top];\n};\n\nexport const sphere = /* @__PURE__ */ (\n  slices: number,\n  stacks = slices,\n  vertexFunc: (slice: number, stack: number, polygon: Polygon) => Vec3 = (x: number, y: number) => {\n    y *= Math.PI / stacks;\n    x *= (Math.PI * 2) / slices;\n    return { x: Math.cos(x) * Math.sin(y), y: Math.cos(y), z: Math.sin(x) * Math.sin(y) };\n  },\n): Polygon[] => {\n  const polygons: Polygon[] = [];\n  for (let i = 0; i < slices; i++) {\n    for (let j = 0; j < stacks; j++) {\n      const polygon = polygon_color([], 0, 1);\n      polygons.push(polygon);\n      const vertex = (x: number, y: number) => polygon.push(vertexFunc(x, y, polygon));\n      vertex(i, j);\n      if (j) {\n        vertex((i + 1) % slices, j);\n      }\n      if (j < stacks - 1) {\n        vertex((i + 1) % slices, j + (1 % stacks));\n      }\n      vertex(i, j + (1 % stacks));\n    }\n  }\n  return polygons;\n};\n","import { plane_fromPolygon, type Vec3, type Vec3In, type Plane, vec3_dot } from \"../math\";\nimport { polygon_color, type Polygon } from \"./geometry\";\n\nexport const PLANE_EPSILON = 0.00008;\n\nexport interface CSGPolygon {\n  $polygon: Polygon;\n\n  $flipped: 0 | boolean;\n\n  /**\n   * When a polygon is splitted, this will contain the polygon from which this polygon was splitted.\n   * This is then used by csg_polygons to merge back splitted polygons if they are both present,\n   * to reduce the number of vertices and triangles.\n   */\n  $parent: CSGPolygon | 0;\n}\n\nexport interface CSGNode extends Plane {\n  /** Coplanar polygons */\n  $polygons: CSGPolygon[];\n  /** Front child */\n  $front: CSGNode | 0;\n  /** Back child */\n  $back: CSGNode | 0;\n}\n\nexport type CSGInput = CSGNode | readonly Polygon[];\n\ninterface SplitPolygonResult {\n  $front: CSGPolygon | undefined | false;\n  $back: CSGPolygon | undefined | false;\n}\n\nconst CSGPolygon_splitSpanning = /* @__PURE__ */ (plane: Plane, polygon: CSGPolygon): SplitPolygonResult => {\n  const fpoints: Vec3[] = [];\n  const bpoints: Vec3[] = [];\n  const { $polygon, $flipped } = polygon;\n  let jd: number;\n  let iv: Vec3In = $polygon.at(-1)!;\n  let id: number = vec3_dot(plane, iv) - plane.w;\n  for (const jv of $polygon) {\n    jd = vec3_dot(plane, jv) - plane.w;\n    if (id < PLANE_EPSILON) {\n      bpoints.push(iv);\n    }\n    if (id > -PLANE_EPSILON) {\n      fpoints.push(iv);\n    }\n    if ((id > PLANE_EPSILON && jd < -PLANE_EPSILON) || (id < -PLANE_EPSILON && jd > PLANE_EPSILON)) {\n      id /= jd - id;\n      iv = {\n        x: iv.x + (iv.x - jv.x) * id,\n        y: iv.y + (iv.y - jv.y) * id,\n        z: iv.z + (iv.z - jv.z) * id,\n      };\n      fpoints.push(iv);\n      bpoints.push(iv);\n    }\n    iv = jv;\n    id = jd;\n  }\n  return {\n    $front: fpoints.length > 2 && {\n      $polygon: polygon_color(fpoints, $polygon.$color, $polygon.$smooth),\n      $flipped,\n      $parent: polygon,\n    },\n    $back: bpoints.length > 2 && {\n      $polygon: polygon_color(bpoints, $polygon.$color, $polygon.$smooth),\n      $flipped,\n      $parent: polygon,\n    },\n  };\n};\n\nconst CSGPolygon_split = /* @__PURE__ */ (plane: Plane, polygon: CSGPolygon): SplitPolygonResult => {\n  const { $polygon } = polygon;\n  let $front: CSGPolygon | undefined;\n  let $back: CSGPolygon | undefined;\n  let d: number;\n  for (let i = 0; i < $polygon.length; ++i) {\n    d = vec3_dot(plane, $polygon[i]!) - plane.w;\n    if (d < -PLANE_EPSILON) {\n      $back = polygon;\n    } else if (d > PLANE_EPSILON) {\n      $front = polygon;\n    }\n    if ($back && $front) {\n      return CSGPolygon_splitSpanning(plane, polygon);\n    }\n  }\n  return { $front, $back };\n};\n\nconst csg_tree_addPolygon = /* @__PURE__ */ (\n  node: CSGNode | 0 | undefined,\n  polygon: CSGPolygon,\n  plane: Plane = plane_fromPolygon(polygon.$polygon),\n): CSGNode => {\n  if (node) {\n    const { $front, $back } = CSGPolygon_split(node, polygon);\n    if (!$front && !$back) {\n      node.$polygons.push(polygon); // Coplanar\n    }\n    if ($front) {\n      node.$front = csg_tree_addPolygon(node.$front, $front, plane);\n    }\n    if ($back) {\n      node.$back = csg_tree_addPolygon(node.$back, $back, plane);\n    }\n  } else {\n    const { x, y, z, w } = plane;\n    node = { x, y, z, w, $polygons: [polygon], $front: 0, $back: 0 };\n  }\n  return node;\n};\n\nconst csg_tree_clipNode = /* @__PURE__ */ (\n  anode: CSGNode,\n  bnode: CSGNode,\n  polygonPlaneFlipped: -1 | 1,\n): CSGPolygon[] => {\n  const result: CSGPolygon[] = [];\n  const recursion = (node: CSGNode, polygon: CSGPolygon) => {\n    let { $front, $back } = CSGPolygon_split(node, polygon);\n    if (!$front && !$back) {\n      if (polygonPlaneFlipped * vec3_dot(node, bnode) > 0) {\n        $front = polygon; // Coplanar front\n      } else {\n        $back = polygon; // Coplanar back\n      }\n    }\n    if ($front) {\n      if (node.$front) {\n        recursion(node.$front, $front);\n      } else {\n        result.push($front);\n      }\n    }\n    if ($back && node.$back) {\n      recursion(node.$back, $back);\n    }\n  };\n\n  for (const polygon of bnode.$polygons) {\n    recursion(anode, polygon);\n  }\n  return result;\n};\n\n/** Loop through all nodes in a tree */\nconst csg_tree_each = (node: CSGNode | 0 | undefined, fn: (node: CSGNode) => void): unknown =>\n  node && (fn(node), csg_tree_each(node.$front, fn), csg_tree_each(node.$back, fn));\n\n/**\n * If the given argument is a list of polygons, a new BSP tree built from the list of polygons is returned.\n * If the given argument is already a BSP tree, return it as is.\n * Note that array cannot be empty.\n */\nexport const csg_tree = /* @__PURE__ */ (n: CSGInput): CSGNode =>\n  (n as Polygon[]).length\n    ? // Build a BSP tree from a list of polygons\n      ((n as Polygon[]).reduce<CSGNode | 0>(\n        (prev, $polygon) => csg_tree_addPolygon(prev, { $polygon, $flipped: 0, $parent: 0 }),\n        0,\n      ) as CSGNode)\n    : // An object? We assume is a BSP tree.\n      (n as CSGNode);\n\n/** Convert solid space to empty space and empty space to solid space. */\nexport const csg_tree_flip = <T extends CSGNode | 0 | undefined>(root: T): T => {\n  csg_tree_each(root, (node) => {\n    const { $front, $back } = node;\n    node.$back = $front;\n    node.$front = $back;\n    node.x *= -1;\n    node.y *= -1;\n    node.z *= -1;\n    node.w *= -1;\n    for (const polygon of node.$polygons) {\n      polygon.$flipped = !polygon.$flipped;\n    }\n  });\n  return root;\n};\n\n/**\n * Union a[0] = a[0] U a[1] U a[2] U ...\n */\nexport const csg_union = /* @__PURE__ */ (...inputs: CSGInput[]): CSGNode =>\n  inputs.reduce((a: CSGInput, b: CSGInput | undefined): CSGNode => {\n    const polygonsToAdd: [Plane, CSGPolygon[]][] = [];\n    a = csg_tree(a);\n    if (b) {\n      b = csg_tree(b);\n\n      // clip to a, b\n      csg_tree_each(a, (node) => (node.$polygons = csg_tree_clipNode(b as CSGNode, node, 1)));\n\n      // get the list of polygons to be added from b clipped to a\n      csg_tree_each(b, (node) => polygonsToAdd.push([node, csg_tree_clipNode(a as CSGNode, node, -1)]));\n\n      // add the polygons to a\n      for (const [plane, polygons] of polygonsToAdd) {\n        for (const pp of polygons) {\n          csg_tree_addPolygon(a, pp, plane);\n        }\n      }\n    }\n    return a;\n  }) as CSGNode;\n\n/**\n * Subtraction a = a - (b[0] U b[1] U ...)\n * Note that a will be modified if is a tree.\n */\nexport const csg_subtract = /* @__PURE__ */ (a: CSGInput, ...b: CSGInput[]): CSGNode =>\n  csg_tree_flip(csg_union(csg_tree_flip(csg_tree(a)), ...b));\n\n/**\n * Extracts all the polygons from a BSP tree.\n * Some polygons will be merged, to reduce the number of triangles.\n */\nexport const csg_polygons = /* @__PURE__ */ (tree: CSGNode): Polygon[] => {\n  const byParent = new Map<CSGPolygon, CSGPolygon>();\n  const allPolygons = new Map<CSGPolygon, 0 | boolean>();\n\n  /** Adds a polygon, and replaces two splitted polygons that have the same parent with the parent */\n  const add = (polygon: CSGPolygon): CSGPolygon => {\n    if (polygon.$parent) {\n      const found = byParent.get(polygon.$parent);\n      if (found) {\n        allPolygons.delete(found);\n        polygon = add(polygon.$parent);\n      } else {\n        byParent.set(polygon.$parent, polygon);\n      }\n    }\n    return polygon;\n  };\n\n  csg_tree_each(tree, (node) => {\n    for (const polygon of node.$polygons) {\n      allPolygons.set(add(polygon), polygon.$flipped);\n    }\n  });\n\n  return Array.from(allPolygons, ([{ $polygon }, flipped]) => {\n    const polygon = $polygon.map(({ x, y, z }) => ({ x, y, z }));\n    return polygon_color(flipped ? polygon.reverse() : polygon, $polygon.$color, $polygon.$smooth);\n  });\n};\n\nexport const csg_polygons_subtract = (...input: CSGInput[]) => csg_polygons((csg_subtract as any)(...input));\n","import { identity, integers_map } from \"../math\";\nimport { csg_polygons, csg_subtract } from \"./csg\";\nimport {\n  cylinder,\n  cylinder_sides,\n  material,\n  polygons_transform,\n  polygon_regular,\n  polygon_transform,\n  type Polygon,\n} from \"./geometry\";\n\nexport const GQuad = /* @__PURE__ */ [\n  { x: -1, z: 1 },\n  { x: 1, z: 1 },\n  { x: 1, z: -1 },\n  { x: -1, z: -1 },\n];\n\nconst HORN_STACKS = 10;\n\nexport const GHorn = ((): Polygon[] => {\n  const matrices = integers_map(HORN_STACKS + 1, (i: number) =>\n    identity\n      .translate(Math.sin((i / HORN_STACKS) * Math.PI), i / HORN_STACKS)\n      .rotate(10 * (i / HORN_STACKS))\n      .scale(1.0001 - i / HORN_STACKS, 0, 1 - i / HORN_STACKS),\n  );\n\n  const p = polygon_regular(18);\n  return integers_map(HORN_STACKS, (i) =>\n    cylinder_sides(polygon_transform(p, matrices[i]!).reverse(), polygon_transform(p, matrices[i + 1]!), 1),\n  ).flat();\n})();\n\nexport const boatPolygons = csg_polygons(\n  csg_subtract(\n    polygons_transform(\n      cylinder(20, 1, 1.15, 1),\n      identity.translate(0, -3).scale(3.5, 1, 3.5),\n      material(0.7, 0.4, 0.25, 0.7),\n    ),\n    polygons_transform(\n      cylinder(20, 1, 1.3, 1),\n      identity.translate(0, -2.5).scale(2.6, 1, 3),\n      material(0.7, 0.4, 0.25, 0.2),\n    ),\n    polygons_transform(cylinder(GQuad), identity.translate(4, -1.2).scale3d(2), material(0.7, 0.4, 0.25, 0.3)),\n  ),\n);\n\nexport const bigArc = csg_polygons(\n  csg_subtract(\n    polygons_transform(cylinder(GQuad), identity.translate(0, -8).scale(6, 15, 2.2)),\n    polygons_transform(cylinder(GQuad), identity.translate(0, -14.1).scale(4, 13, 4)),\n    polygons_transform(cylinder(20, 1), identity.translate(0, -1).rotate(90, 0, 90).scale3d(4)),\n  ),\n);\n","import { identity, plane_fromPolygon, type Vec3Optional } from \"../math\";\nimport { polygons_transform, type Polygon } from \"../geometry/geometry\";\n\nexport interface Model {\n  $parent?: Model | undefined;\n  $initialMatrix: DOMMatrixReadOnly;\n  $finalMatrix: DOMMatrixReadOnly;\n  $mesh?: Mesh;\n  $modelId: number;\n  $attachPlayer: 0 | 1;\n  _update?: ModelUpdateCallback | undefined;\n}\n\nexport let currentEditModel: Model;\n\nexport const allModels: Model[] = [];\n\nexport const editMatrixStack: DOMMatrixReadOnly[] = [identity];\n\nexport const withEditMatrix = <T>(matrix: DOMMatrixReadOnly, fn: () => T) => {\n  editMatrixStack.push(editMatrixStack.at(-1)!.multiply(matrix));\n  const result = fn();\n  editMatrixStack.pop();\n  return result;\n};\n\nexport const _triangleIndices: number[] = [];\n\nexport const _vertexPositions: number[] = [];\n\nexport const _vertexNormals: number[] = [];\n\nexport const _vertexColors: number[] = [];\n\nconst _pendingPolygonsStack: Polygon[][] = [[]];\n\nconst _vertexMap = new Map<string, number>();\nconst _vertexInts = new Int32Array(7);\nconst _vertexIntsSmooth = new Int32Array(_vertexInts.buffer, 0, 4);\nconst _vertexFloats = new Float32Array(_vertexInts.buffer);\n\nlet _polygon: Polygon | undefined;\nlet _meshFirstIndex: number = 0;\n\nexport interface Mesh {\n  $vertexOffset: number;\n  $vertexCount: number;\n}\n\nexport type ModelUpdateCallback = (model: Model) => void | DOMMatrixReadOnly;\n\nconst getVertex = (i: number): number => {\n  let { x, y, z } = _polygon![i]! as any;\n  _vertexFloats[0] = x;\n  _vertexFloats[1] = y;\n  _vertexFloats[2] = z;\n  const key = \"\" + (_polygon!.$smooth ? _vertexIntsSmooth : _vertexInts);\n  let index = _vertexMap.get(key);\n  if (index !== undefined) {\n    x = index * 3;\n    _vertexNormals[x] = (_vertexNormals[x++]! + _vertexInts[4]!) / 2;\n    _vertexNormals[x] = (_vertexNormals[x++]! + _vertexInts[5]!) / 2;\n    _vertexNormals[x] = (_vertexNormals[x]! + _vertexInts[6]!) / 2;\n  } else {\n    _vertexMap.set(key, (index = _vertexMap.size));\n    _vertexPositions.push(x, y, z);\n    _vertexNormals.push(_vertexInts[4]!, _vertexInts[5]!, _vertexInts[6]!);\n    _vertexColors.push(_vertexInts[3]!);\n  }\n  return index;\n};\n\nexport const meshAdd = (\n  polygons: Polygon<Readonly<Vec3Optional>>[],\n  transform: DOMMatrixReadOnly = identity,\n  color?: number | undefined,\n) =>\n  _pendingPolygonsStack\n    .at(-1)!\n    .push(...polygons_transform(polygons, editMatrixStack.at(-1)!.multiply(transform), color));\n\nexport const meshEnd = (): Mesh => {\n  const pendingPolygons = _pendingPolygonsStack.at(-1)!;\n  for (_polygon of pendingPolygons) {\n    const { x, y, z } = plane_fromPolygon(_polygon);\n    _vertexInts[3] = _polygon.$color! | 0;\n    _vertexInts[4] = x * 32767;\n    _vertexInts[5] = y * 32767;\n    _vertexInts[6] = z * 32767;\n    for (let i = 2, a = getVertex(0), b = getVertex(1); i < _polygon.length; ++i) {\n      _triangleIndices.push(a, b, (b = getVertex(i)));\n    }\n  }\n  pendingPolygons.length = 0;\n  const $vertexOffset = _meshFirstIndex;\n  return {\n    $vertexOffset,\n    $vertexCount: (_meshFirstIndex = _triangleIndices.length) - $vertexOffset,\n  };\n};\n\nexport const newModel = (fn: (model: Model) => void | Mesh | undefined) => {\n  const previousModel = currentEditModel;\n  const model: Model = {\n    $initialMatrix: editMatrixStack.at(-1)!,\n    $finalMatrix: identity,\n    $modelId: allModels.length + 1,\n    $attachPlayer: 1,\n    $parent: previousModel === allModels[0] ? undefined : previousModel,\n  };\n  currentEditModel = model;\n  allModels.push(model);\n  editMatrixStack.push(identity);\n  _pendingPolygonsStack.push([]);\n\n  const modelMesh = fn(model) || meshEnd();\n  model.$mesh = modelMesh;\n  editMatrixStack.pop();\n  _pendingPolygonsStack.pop();\n  currentEditModel = previousModel;\n  return model;\n};\n\nexport const updateModels = () => {\n  for (const model of allModels) {\n    const update = model._update;\n    model.$finalMatrix = model.$parent\n      ? model.$parent.$finalMatrix.multiply(model.$initialMatrix)\n      : model.$initialMatrix;\n    if (update) {\n      const updateResult = update(model);\n      if (updateResult) {\n        model.$finalMatrix = model.$finalMatrix.multiply(updateResult);\n      }\n    }\n  }\n};\n","import { DEG_TO_RAD, mat_perspectiveXY } from \"./math\";\n\nimport { constDef_zNear, constDef_zFar } from \"./shaders/main-fragment.frag\";\n\nexport const zNear = constDef_zNear;\n\nexport const zFar = constDef_zFar;\n\nexport const fieldOfViewDegrees = 60;\n\nexport const fieldOfViewRadians = /* @__PURE__ */ fieldOfViewDegrees * DEG_TO_RAD; // in radians\n\nconst fieldOfViewAmount = 1 / Math.tan(fieldOfViewRadians / 2);\n\nif (DEBUG) {\n  console.log(\"fieldOfViewAmount:\", fieldOfViewAmount);\n}\n\nexport const camera_position = {\n  x: -11,\n  y: 17,\n  z: -90,\n};\n\nexport const camera_rotation = {\n  x: 0,\n  y: 0,\n  z: 0,\n};\n\nexport const mat_perspective = (near: number, far: number) =>\n  mat_perspectiveXY((hC.clientHeight / hC.clientWidth) * fieldOfViewAmount, fieldOfViewAmount, near, far);\n","// This music has been exported by SoundBox and modified manually to minify better.\n\n// Beethoven's Piano Sonata No. 14, 3rd movement, readapted by Ryan Malm for this game\n\nexport const song_patterns = '000001234556112341234556011111111112011111111112000001111112'\n\nexport const song_instruments = [\n  [ // instrument 0\n    69, // OSC1_VOL\n    128, // OSC1_SEMI\n    0, // OSC1_XENV\n    143, // OSC2_VOL\n    128, // OSC2_SEMI\n    0, // OSC2_XENV\n    0, // NOISE_VOL\n    196, // ENV_ATTACK ** 2 * 4\n    100, // ENV_SUSTAIN ** 2 * 4\n    36, // ENV_RELEASE\n    0, // ENV_EXP_DECAY\n    0, // LFO_FREQ\n    149, // FX_FREQ\n    110, // FX_RESONANCE\n    31, // FX_DRIVE\n    47, // FX_PAN_AMT\n    3, // FX_PAN_FREQ\n    56, // FX_DELAY_AMT\n    2, // FX_DELAY_TIME\n    0, // LFO_AMT\n    [ // Columns 0\n      \"(.15:15:=5:=A:=AF=AFIFIMRMRUY(Y(((((((((((((((((((((((((((((M(M(((((((((((((((((((((((((((((R(R(((((((((((((((((((((((((((((U(U\",\n      \"(059<59<A9<AE<AEHAEHMEHMQMQTY(Y\",\n      \"(5:>A:>AF>AFJAFJMFJMRJMRVMRVY(Y\",\n      \"(:?BFFKNRRWZ^(^((:=@FFILRRUX^(^\",\n      \"Q(M(M(O(Q(R(T(Q(T(R(W(U(T(R(Q(N(W((Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(X]\",\n      \"QN(M(N(M(N(M(N(M((((((((((((((((W(Y(Y(Y(Y(Y(Y(Y(Y(((((((((((((((]\",\n    ]\n  ],\n  [ // Instrument 1\n    100, // OSC1_VOL\n    128, // OSC1_SEMI\n    0, // OSC1_XENV\n    201, // OSC2_VOL\n    128, // OSC2_SEMI\n    0, // OSC2_XENV\n    0, // NOISE_VOL\n    100, // ENV_ATTACK ** 2 * 4\n    144, // ENV_SUSTAIN ** 2 * 4\n    35, // ENV_RELEASE\n    0, // ENV_EXP_DECAY\n    6, // LFO_FREQ\n    135, // FX_FREQ\n    0, // FX_RESONANCE\n    32, // FX_DRIVE\n    147, // FX_PAN_AMT\n    6, // FX_PAN_FREQ\n    0, // FX_DELAY_AMT\n    6, // FX_DELAY_TIME\n    195, // LFO_AMT\n    [ // Columns 1\n      \".(5(.(5(.(5(.(5(.(5(.(5(.(5(.(5\",\n      \"-(5(-(5(-(5(-(5(-(5(-(5(-(5(-(5\",\n      \",(5(,(5(,(5(,(5(,(5(,(5(,(5(,(5\",\n      \"*(6(*(6(*(6(*(6(*(6(*(6(*(6(*(6\",\n      \"5(E(E(F(H(I(K(H(K(I(N(M(K(I(H(F(A(((((((((((((((((((((((((((((((5(((5(((5(((5(((5(((5(((5(((5\",\n      \"5(6(5(6(5(6(5(6(5((()(((((((((((A(B(A(B(A(B(A(B(A(((5\",\n    ]\n  ],\n  [ // Instrument 2\n    255, // OSC1_VOL\n    116, // OSC1_SEMI\n    85, // OSC1_XENV\n    255, // OSC2_VOL\n    116, // OSC2_SEMI\n    37, // OSC2_XENV\n    14, // NOISE_VOL\n    64, // ENV_ATTACK ** 2 * 4\n    144, // ENV_SUSTAIN ** 2 * 4\n    73, // ENV_RELEASE\n    99, // ENV_EXP_DECAY\n    0, // LFO_FREQ\n    136, // FX_FREQ\n    15, // FX_RESONANCE\n    32, // FX_DRIVE\n    0, // FX_PAN_AMT\n    0, // FX_PAN_FREQ\n    66, // FX_DELAY_AMT\n    6, // FX_DELAY_TIME\n    0, // LFO_AMT\n    [ // Columns 2\n      \"9(((9(((9(((9(((9(((9(((9(((9\",\n      \"9(((Q(((Q(((Q\",\n    ]\n  ],\n  [ // Instrument 3\n    0, // OSC1_VOL\n    140, // OSC1_SEMI\n    0, // OSC1_XENV\n    0, // OSC2_VOL\n    140, // OSC2_SEMI\n    0, // OSC2_XENV\n    81, // NOISE_VOL\n    64, // ENV_ATTACK ** 2 * 4\n    400, // ENV_SUSTAIN ** 2 * 4\n    47, // ENV_RELEASE\n    55, // ENV_EXP_DECAY\n    5, // LFO_FREQ\n    239, // FX_FREQ\n    135, // FX_RESONANCE\n    13, // FX_DRIVE\n    176, // FX_PAN_AMT\n    5, // FX_PAN_FREQ\n    16, // FX_DELAY_AMT\n    4, // FX_DELAY_TIME\n    187, // LFO_AMT\n    [ // Columns 3\n      \"9(9(9(9(9(9(9(999(9(9(9(999(9(9\",\n      \"9(9(9(9(9(999(9(((((Q\",\n    ]\n  ],\n  [ // Instrument 4\n    221, // OSC1_VOL\n    128, // OSC1_SEMI\n    64, // OSC1_XENV\n    210, // OSC2_VOL\n    128, // OSC2_SEMI\n    64, // OSC2_XENV\n    255, // NOISE_VOL\n    64, // ENV_ATTACK ** 2 * 4\n    144, // ENV_SUSTAIN ** 2 * 4\n    73, // ENV_RELEASE\n    79, // ENV_EXP_DECAY\n    7, // LFO_FREQ\n    195, // FX_FREQ\n    15, // FX_RESONANCE\n    21, // FX_DRIVE\n    20, // FX_PAN_AMT\n    0, // FX_PAN_FREQ\n    9, // FX_DELAY_AMT\n    3, // FX_DELAY_TIME\n    64, // LFO_AMT\n    [ // Columns 4\n      \"((((Q(((((((Q(((((((Q(((((((Q\",\n      \"Q((Q((Q((Q((Q((Q((((Q\",\n    ]\n  ],\n] as const\n\nexport const song_rowLen0 = 5513\n\nexport const song_rowLen1 = 4562\n\nexport const song_rowLen2 = 3891\n\n// Rows per pattern\nexport const song_patternLen = 32\n\n// End pattern\nexport const song_endPattern = 11\n\n// Number of channels\nexport const song_numChannels = 5\n\nexport const getSegmentNumWords = (song_rowLen: number) => song_rowLen * song_patternLen * (song_endPattern + 1) * 2;\n\nexport const song_numWords =\n  getSegmentNumWords(song_rowLen0) + getSegmentNumWords(song_rowLen1) + getSegmentNumWords(song_rowLen2);\n","/* -*- mode: javascript; tab-width: 4; indent-tabs-mode: nil; -*-\n *\n * Copyright (c) 2011-2013 Marcus Geelnard\n *\n * This software is provided 'as-is', without any express or implied\n * warranty. In no event will the authors be held liable for any damages\n * arising from the use of this software.\n *\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n *\n * 1. The origin of this software must not be misrepresented; you must not\n *    claim that you wrote the original software. If you use this software\n *    in a product, an acknowledgment in the product documentation would be\n *    appreciated but is not required.\n *\n * 2. Altered source versions must be plainly marked as such, and must not be\n *    misrepresented as being the original software.\n *\n * 3. This notice may not be removed or altered from any source\n *    distribution.\n *\n */\n\n// WARNING: Source code of the original player was heavily manually modified to reduce bundle size.\n// This player plays only the game song and is modified.\n// This makes this version not compatible with default soundbox songs.\n\nimport {\n  song_endPattern,\n  song_patternLen,\n  song_patterns,\n  song_instruments,\n  song_numWords,\n  getSegmentNumWords,\n  song_rowLen0,\n  song_rowLen1,\n  song_rowLen2,\n} from \"./song\";\n\nconst getnotefreq = (n: number) => 0.003959503758 * 2 ** ((n - 256) / 12);\n\n/** oscillator 0 */\nconst osc_sin = (value: number) => Math.sin(value * Math.PI * 2);\n\n/** oscillator 1 */\nconst osc_square = (value: number) => (value % 1 < 0.5 ? 1 : -1);\n\n/** oscillator 2 */\nconst osc_saw = (value: number) => 2 * (value % 1) - 1;\n\n/** oscillator 3 */\nconst osc_tri = (value: number) => {\n  const v2 = (value % 1) * 4;\n  return v2 < 2 ? v2 - 1 : 3 - v2;\n};\n\n// Work buffer\nexport const soundbox_mixbuffer = new Int32Array(song_numWords);\n\n/**\n * Generate audio data for a single track/channel.\n * Have to be repeated from 0 to song_numChannels-1\n * @returns\n */\nexport const soundbox_generate = (channelIndex: number) => {\n  let mixIndex = 0;\n  let [\n    OSC1_VOL,\n    OSC1_SEMI,\n    OSC1_XENV,\n    OSC2_VOL,\n    OSC2_SEMI,\n    OSC2_XENV,\n    NOISE_VOL,\n    ENV_ATTACK,\n    ENV_SUSTAIN,\n    ENV_RELEASE,\n    ENV_EXP_DECAY,\n    LFO_FREQ,\n    FX_FREQ,\n    FX_RESONANCE,\n    FX_DRIVE,\n    FX_PAN_AMT,\n    FX_PAN_FREQ,\n    FX_DELAY_AMT,\n    FX_DELAY_TIME,\n    LFO_AMT,\n    COLUMNS,\n  ] = song_instruments[channelIndex]!;\n\n  ENV_RELEASE = (ENV_RELEASE * ENV_RELEASE * 4) as any;\n\n  for (const song_rowLen of [song_rowLen0, song_rowLen1, song_rowLen2]) {\n    // Local variables\n    let n;\n    let t;\n    let f;\n\n    const chnBuf = new Int32Array(getSegmentNumWords(song_rowLen));\n\n    // Clear effect state\n    let low = 0;\n    let band = 0;\n    let high;\n    let filterActive: boolean | undefined;\n\n    // Clear note cache.\n    const noteCache = [];\n\n    // Put performance critical instrument properties in local variables\n    const lfoFreq = 2 ** (LFO_FREQ - 9) / song_rowLen;\n    const panFreq = (Math.PI * 2 ** (FX_PAN_FREQ - 8)) / song_rowLen;\n    const dly = (FX_DELAY_TIME * song_rowLen) & ~1; // Must be an even number\n\n    const createNote = (note: number) => {\n      const OSC1_WAVEFORM = channelIndex < 2 ? osc_saw : osc_sin; // mOscillators[0|2]\n      const OSC2_WAVEFORM = channelIndex < 2 ? (channelIndex < 1 ? osc_square : osc_tri) : osc_sin;\n\n      const noteBuf = new Int32Array(ENV_ATTACK + ENV_SUSTAIN + ENV_RELEASE);\n\n      // Re-trig oscillators\n      let c1 = 0;\n      let c2 = 0;\n\n      // Local variables.\n      let o1t: number;\n      let o2t: number;\n\n      // Generate one note (attack + sustain + release)\n      for (let j1 = 0, j2 = 0; j1 < ENV_ATTACK + ENV_SUSTAIN + ENV_RELEASE; ++j1, ++j2) {\n        let e = 1;\n        // Envelope\n        if (j1 < ENV_ATTACK) {\n          e = j1 / ENV_ATTACK;\n        } else if (j1 >= ENV_ATTACK + ENV_SUSTAIN) {\n          e = (j1 - ENV_ATTACK - ENV_SUSTAIN) / ENV_RELEASE;\n          e = (1 - e) * 3 ** ((-ENV_EXP_DECAY / 16) * e);\n        }\n\n        if (j2 >= 0) {\n          // Switch arpeggio note.\n          j2 -= song_rowLen * 4;\n\n          // Calculate note frequencies for the oscillators\n          o1t = getnotefreq(note + OSC1_SEMI);\n          o2t = getnotefreq(note + OSC2_SEMI) * (1 + (channelIndex ? 0 : 0.0008 * 9));\n        }\n\n        // Add to (mono) channel buffer\n        noteBuf[j1] =\n          (80 * // Oscillator 1\n            (OSC1_WAVEFORM((c1 += o1t! * e ** (OSC1_XENV / 32))) * OSC1_VOL +\n              // Oscillator 2\n              OSC2_WAVEFORM((c2 += o2t! * e ** (OSC2_XENV / 32))) * OSC2_VOL +\n              // Noise oscillator\n              (NOISE_VOL ? (Math.random() * 2 - 1) * NOISE_VOL : 0)) *\n            e) |\n          0;\n      }\n      return noteBuf;\n    };\n\n    // Patterns\n    for (let p = 0; p <= song_endPattern; ++p) {\n      // Pattern rows\n      for (let row = 0, cp = +song_patterns[channelIndex * 12 + p]!; row < song_patternLen; ++row) {\n        // Calculate start sample number for this row in the pattern\n        const rowStartSample = (p * song_patternLen + row) * song_rowLen;\n\n        // Generate notes for this pattern row\n        for (let col = 0; col < 4; ++col) {\n          n = 0;\n          if (cp) {\n            n = COLUMNS[cp - 1]!.charCodeAt(row + col * song_patternLen) - 40;\n            n += n > 0 ? 106 : 0;\n          }\n          if (n) {\n            const noteBuf = noteCache[n] || (noteCache[n] = createNote(n));\n            for (let j = 0, i = rowStartSample * 2; j < noteBuf.length; ++j, i += 2) {\n              chnBuf[i] += noteBuf[j]!;\n            }\n          }\n        }\n\n        // Perform effects for this pattern row\n        for (let j = 0, rsample; j < song_rowLen; ++j) {\n          // Dry mono-sample\n          let k = (rowStartSample + j) * 2;\n          let lsample = 0;\n          rsample = chnBuf[k]!;\n\n          // We only do effects if we have some sound input\n          if (rsample || filterActive) {\n            // State variable filter\n            f = FX_FREQ * ((43.23529 * 3.141592) / 44100);\n            if (channelIndex === 1 || channelIndex === 4) {\n              f *= (osc_sin(lfoFreq * k) * LFO_AMT) / 512 + 0.5;\n            }\n            f = 1.5 * Math.sin(f);\n            low += f * band;\n            high = (1 - FX_RESONANCE / 255) * (rsample - band) - low;\n            band += f * high;\n            rsample = channelIndex === 4 ? band : channelIndex === 3 ? high : low;\n\n            // Distortion\n            if (!channelIndex) {\n              rsample *= 22 * 1e-5;\n              rsample = rsample < 1 ? (rsample > -1 ? osc_sin(rsample / 4) : -1) : 1;\n              rsample /= 22 * 1e-5;\n            }\n\n            // Drive\n            rsample *= FX_DRIVE / 32;\n\n            // Is the filter active (i.e. still audiable)?\n            filterActive = rsample * rsample > 1e-5;\n\n            // Panning\n            t = (Math.sin(panFreq * k) * FX_PAN_AMT) / 512 + 0.5;\n            lsample = rsample * (1 - t);\n            rsample *= t;\n          }\n\n          // Delay is always done, since it does not need sound input\n          if (k >= dly) {\n            // Left channel = left + right[-p] * t\n            lsample += (chnBuf[k - dly + 1]! * FX_DELAY_AMT) / 255;\n\n            // Right channel = right + left[-p] * t\n            rsample += (chnBuf[k - dly]! * FX_DELAY_AMT) / 255;\n          }\n\n          soundbox_mixbuffer[mixIndex + k] += chnBuf[k] = lsample;\n          ++k;\n          soundbox_mixbuffer[mixIndex + k] += chnBuf[k] = rsample;\n        }\n      }\n    }\n\n    mixIndex += chnBuf.length;\n  }\n};\n","import { soundbox_mixbuffer } from \"./music-player\";\nimport { song_numWords } from \"./song\";\n\nexport const audioContext = new AudioContext();\n\nexport const songAudioSource = audioContext.createBufferSource();\n\nexport const loadSong = () => {\n  // set the buffer in the AudioBufferSourceNode\n  // Create a new AudioBuffer\n  const buffer = audioContext.createBuffer(2, song_numWords / 2, 44100);\n\n  for (let i = 0; i < 2; i++) {\n    for (let j = i, data = buffer.getChannelData(i); j < song_numWords; j += 2) {\n      data[j >> 1] = soundbox_mixbuffer[j]! / 65536;\n    }\n  }\n\n  // Load the buffer into the audio source\n  songAudioSource.buffer = buffer;\n\n  // Loop forever\n  songAudioSource.loop = true;\n};\n","export let mainMenuVisible: boolean | undefined;\n\nimport type { KEY_CODE } from \"./utils/keycodes\";\nimport { camera_rotation } from \"./camera\";\nimport { absoluteTime, LOCAL_STORAGE_SAVED_GAME_KEY } from \"./game/world-state\";\nimport { audioContext, songAudioSource } from \"./music/audio-context\";\nimport { abs } from \"./math\";\n\nexport const KEY_LEFT = 0;\n\nexport const KEY_FRONT = 1;\n\nexport const KEY_RIGHT = 2;\n\nexport const KEY_BACK = 3;\n\nexport const KEY_INTERACT = 5;\n\nexport const keyboard_downKeys: (boolean | 0 | 1 | undefined)[] = [];\n\nlet music_on = !DEBUG;\n\nexport let player_first_person: 0 | 1 | undefined;\n\nexport let touch_movementX = 0;\n\nexport let touch_movementY = 0;\n\nconst updateMusicOnState = () => {\n  if (mainMenuVisible || !music_on) {\n    songAudioSource.disconnect();\n  } else {\n    // connect the AudioBufferSourceNode to the  destination so we can hear the sound\n    songAudioSource.connect(audioContext.destination);\n  }\n  b4.innerHTML = \"Music: \" + music_on;\n};\n\nexport const setMainMenuVisible = (value: boolean = false) => {\n  if (mainMenuVisible !== value) {\n    mainMenuVisible = value;\n    player_first_person = 0;\n    try {\n      if (value) {\n        document.exitPointerLock();\n      } else {\n        songAudioSource.start();\n      }\n    } catch {}\n\n    document.body.className = value ? \"l m\" : \"l\";\n    updateMusicOnState();\n  }\n};\n\nexport const initPage = () => {\n  let cameraRotTouch: Touch | undefined;\n  let cameraPosTouch: Touch | undefined;\n  let pageClicked: undefined | 1;\n  let touchStartCameraRotX = 0;\n  let touchStartCameraRotY = 0;\n  let touchStartTime = 0;\n\n  const handleResize = () => {\n    hC.width = innerWidth;\n    hC.height = innerHeight;\n    keyboard_downKeys.length = touch_movementX = touch_movementY = 0;\n    cameraRotTouch = cameraPosTouch = undefined;\n    if (document.hidden) {\n      setMainMenuVisible(true);\n    }\n  };\n\n  b1.onclick = () => setMainMenuVisible();\n\n  // b2.ontouchend = () => (touch_first_person = 1);\n\n  b2.onclick = () => {\n    setMainMenuVisible();\n    player_first_person = 1;\n  };\n\n  b3.onclick = () => {\n    // eslint-disable-next-line no-alert\n    if (confirm(\"Restart game?\")) {\n      localStorage[LOCAL_STORAGE_SAVED_GAME_KEY] = \"\";\n      location.reload();\n    }\n  };\n\n  b4.onclick = () => {\n    music_on = !music_on;\n    updateMusicOnState();\n  };\n\n  // touch controls\n\n  b5.onclick = () => setMainMenuVisible(true);\n\n  onclick = () => {\n    pageClicked = 1;\n    if (!mainMenuVisible) {\n      keyboard_downKeys[KEY_INTERACT] = true;\n      if (player_first_person) {\n        hC.requestPointerLock();\n      }\n    }\n  };\n\n  document.onvisibilitychange = onresize = onblur = handleResize;\n\n  onkeydown = onkeyup = ({ code, target, type, repeat }) => {\n    if (!repeat) {\n      const pressed = !!type[5] && target === document.body;\n\n      if (pressed && (code === \"Escape\" || (code === \"Enter\" && mainMenuVisible))) {\n        if (!mainMenuVisible || pageClicked) {\n          setMainMenuVisible(!mainMenuVisible);\n        }\n      } else {\n        const mapped = (\n          {\n            [\"KeyA\"]: KEY_LEFT,\n            [\"ArrowLeft\"]: KEY_LEFT,\n\n            [\"KeyW\"]: KEY_FRONT,\n            [\"ArrowUp\"]: KEY_FRONT,\n\n            [\"KeyD\"]: KEY_RIGHT,\n            [\"ArrowRight\"]: KEY_RIGHT,\n\n            [\"KeyS\"]: KEY_BACK,\n            [\"ArrowDown\"]: KEY_BACK,\n\n            [\"KeyE\"]: KEY_INTERACT,\n            [\"Space\"]: KEY_INTERACT,\n            [\"Enter\"]: KEY_INTERACT,\n          } as Partial<Record<KEY_CODE, number>>\n        )[code as KEY_CODE]!;\n        if (mapped === KEY_INTERACT) {\n          if (pressed) {\n            keyboard_downKeys[mapped] = 1;\n          }\n        } else {\n          keyboard_downKeys[mapped] = pressed;\n        }\n      }\n    }\n  };\n\n  onmousemove = ({ movementX, movementY }) => {\n    if (player_first_person && (movementX || movementY)) {\n      camera_rotation.y += movementX * 0.1;\n      camera_rotation.x += movementY * 0.1;\n    }\n  };\n\n  hC.ontouchstart = (e) => {\n    if (!mainMenuVisible) {\n      for (const touch of e.changedTouches) {\n        if (player_first_person && touch.pageX > hC.clientWidth / 2) {\n          if (!cameraRotTouch) {\n            cameraRotTouch = touch;\n            touchStartCameraRotX = camera_rotation.y;\n            touchStartCameraRotY = camera_rotation.x;\n          }\n        } else if (!cameraPosTouch) {\n          cameraPosTouch = touch;\n        }\n      }\n      touchStartTime = absoluteTime;\n    }\n  };\n\n  hC.ontouchmove = ({ changedTouches }) => {\n    if (!mainMenuVisible) {\n      for (const { pageX, pageY, identifier } of changedTouches) {\n        if (cameraRotTouch?.identifier === identifier) {\n          camera_rotation.y = touchStartCameraRotX + (pageX - cameraRotTouch.pageX) / 3;\n          camera_rotation.x = touchStartCameraRotY + (pageY - cameraRotTouch.pageY) / 3;\n        }\n        if (cameraPosTouch?.identifier === identifier) {\n          touch_movementX = -(pageX - cameraPosTouch.pageX) / 18;\n          touch_movementY = -(pageY - cameraPosTouch.pageY) / 18;\n          touch_movementX = abs(touch_movementX) < 0.35 ? 0 : touch_movementX * 0.8;\n          touch_movementY = abs(touch_movementY) < 0.35 ? 0 : touch_movementY * 0.8;\n        }\n      }\n    }\n  };\n\n  hC.ontouchend = (e) => {\n    for (const touch of e.changedTouches) {\n      if (touch.identifier === cameraRotTouch?.identifier) {\n        cameraRotTouch = undefined;\n      }\n      if (touch.identifier === cameraPosTouch?.identifier) {\n        cameraPosTouch = undefined;\n        touch_movementY = touch_movementX = 0;\n      }\n    }\n    e.preventDefault();\n    const diff = absoluteTime - touchStartTime;\n    if (!touchStartTime || (diff > 0.02 && diff < 0.4)) {\n      keyboard_downKeys[KEY_INTERACT] = true;\n    }\n  };\n\n  if (!DEBUG) {\n    oncontextmenu = () => false;\n  }\n\n  handleResize();\n  setMainMenuVisible(!DEBUG);\n};\n","import type { Model } from \"./scene\";\nimport { lerp, min, angle_wrap_degrees, lerpneg, abs, clamp01 } from \"../math\";\nimport { keyboard_downKeys, KEY_INTERACT, mainMenuVisible } from \"../page\";\n\nexport let absoluteTime = 0;\n\nexport let gameTime = 0;\n\nexport let souls_collected_count = 0;\n\n/** Minimum 15.3 frames per second */\nexport const GAME_TIME_MAX_DELTA_TIME = 0.066;\n\nexport let gameTimeDelta: number = GAME_TIME_MAX_DELTA_TIME;\n\nlet _globalTime: number | undefined;\n\nlet _messageEndTime = 0;\n\nexport const lerpDamp = /* @__PURE__ */ (from: number, to: number, speed: number) =>\n  lerp(from, to, 1 - Math.exp(-speed * gameTimeDelta));\n\nexport const gameTimeUpdate = (time: number) => {\n  const dt = (time - (_globalTime || time)) / 1000;\n  if (mainMenuVisible) {\n    keyboard_downKeys[KEY_INTERACT] = 0;\n    gameTimeDelta = 0;\n  } else {\n    gameTimeDelta = min(GAME_TIME_MAX_DELTA_TIME, dt);\n  }\n  gameTime += gameTimeDelta;\n  absoluteTime += dt;\n  _globalTime = time;\n};\n\n// export const gameTimeUpdate = (time: number) => {\n//   if (mainMenuVisible) {\n//     keyboard_downKeys[KEY_INTERACT] = 0;\n//   }\n//   const delta = (time - (_globalTime || time)) / 1000;\n//   if (delta >= 0.06) {\n//     gameTimeDelta = mainMenuVisible ? 0 : Math.min(GAME_TIME_MAX_DELTA_TIME, (time - (_globalTime || time)) / 1000);\n//     gameTime += gameTimeDelta;\n//     _globalTime = time;\n//   } else {\n//     gameTimeDelta = 0;\n//   }\n//   absoluteTime += delta;\n//   if (!_globalTime) {\n//     _globalTime = time;\n//   }\n// };\n\nexport const LOCAL_STORAGE_SAVED_GAME_KEY = \"DanteSP22\";\n\nexport interface Lever {\n  $value: 0 | 1;\n  $lerpValue: number;\n  $lerpValue2: number;\n  $parent: Model | undefined;\n  $matrix?: DOMMatrixReadOnly;\n}\n\nexport interface Soul {\n  $value: 0 | 1;\n}\n\nconst getItemValue = <T>({ $value }: { readonly $value: T }) => $value;\n\nexport const levers: Lever[] = [];\n\nexport const souls: Soul[] = [];\n\nexport let player_last_pulled_lever = 0;\n\nexport let rotatingPlatform1Rotation = 0;\n\nexport let rotatingPlatform2Rotation = 0;\n\nexport let rotatingHexCorridorRotation = 0;\n\nexport let game_completed: 0 | 1 = 0;\n\nexport let firstBoatLerp = 0;\n\nexport let secondBoatLerp = 0;\n\nexport const showMessage = (message: string, duration: number) => {\n  if (!game_completed) {\n    h4.innerHTML = message;\n    _messageEndTime = gameTime + duration;\n  }\n};\n\nconst clearMessage = () => {\n  h4.innerHTML = \"\";\n  _messageEndTime = 0;\n};\n\nexport const worldStateUpdate = () => {\n  const shouldRotatePlatforms = lerpneg(levers[12]!.$lerpValue, levers[13]!.$lerpValue);\n\n  if (gameTime > _messageEndTime) {\n    clearMessage();\n  }\n\n  rotatingHexCorridorRotation = lerp(\n    lerpDamp(rotatingHexCorridorRotation, 0, 1),\n    angle_wrap_degrees(rotatingHexCorridorRotation + gameTimeDelta * 60),\n    levers[5]!.$lerpValue - levers[6]!.$lerpValue2,\n  );\n\n  rotatingPlatform1Rotation = lerp(\n    lerpDamp(rotatingPlatform1Rotation, 0, 5),\n    angle_wrap_degrees(rotatingPlatform1Rotation + gameTimeDelta * 56),\n    shouldRotatePlatforms,\n  );\n\n  rotatingPlatform2Rotation = lerp(\n    lerpDamp(rotatingPlatform2Rotation, 0, 4),\n    angle_wrap_degrees(rotatingPlatform2Rotation + gameTimeDelta * 48),\n    shouldRotatePlatforms,\n  );\n\n  secondBoatLerp = lerpDamp(secondBoatLerp, levers[9]!.$lerpValue2, 0.2 + 0.3 * abs(levers[9]!.$lerpValue2 * 2 - 1));\n\n  firstBoatLerp = lerpDamp(\n    firstBoatLerp,\n    game_completed ? lerp(firstBoatLerp, -9, gameTimeDelta * 1.5) : clamp01(gameTime / 3),\n    1,\n  );\n\n  if (levers[0]!.$value === 1 && levers[0]!.$lerpValue > 0.8) {\n    if (souls_collected_count < 13) {\n      levers[0]!.$value = 0;\n      showMessage(\"Not leaving now, there are souls to catch!\", 3);\n    } else if (!game_completed) {\n      showMessage(\"Well done. They will be punished.<br>Thanks for playing\", Infinity);\n      game_completed = 1;\n    }\n  }\n};\n\nconst updateCollectedSoulsCounter = () => {\n  souls_collected_count = souls.reduce((acc, cur) => acc + cur.$value, 0);\n  h3.innerHTML =\n    \" \" +\n    [\"0\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"XIII\"][souls_collected_count]!;\n};\n\nexport const saveGame = () => {\n  updateCollectedSoulsCounter();\n  localStorage[LOCAL_STORAGE_SAVED_GAME_KEY] = JSON.stringify([\n    levers.map(getItemValue),\n    souls.map(getItemValue),\n    player_last_pulled_lever,\n    gameTime,\n    secondBoatLerp,\n  ]);\n};\n\nexport const loadGame = () => {\n  try {\n    const [savedLevers, savedSouls, savedLastPulledLever, savedGameTime, savedSecondBoatLerp] = JSON.parse(\n      localStorage[LOCAL_STORAGE_SAVED_GAME_KEY]!,\n    );\n    levers.map(\n      (lever, index) =>\n        (lever.$lerpValue = lever.$lerpValue2 = lever.$value = index ? ((savedLevers[index] | 0) as 0 | 1) : 0),\n    );\n    souls.map((soul, index) => (soul.$value = (savedSouls[index] | 0) as 0 | 1));\n    player_last_pulled_lever = savedLastPulledLever;\n    gameTime = savedGameTime;\n    secondBoatLerp = savedSecondBoatLerp;\n  } catch (e) {\n    if (DEBUG) {\n      console.log(e);\n    }\n  }\n  firstBoatLerp = clamp01(player_last_pulled_lever);\n  clearMessage();\n  updateCollectedSoulsCounter();\n};\n\nexport const onPlayerPullLever = (leverIndex: number) => {\n  if (DEBUG) {\n    console.log(\"switch lever \" + leverIndex + \" = \" + levers[leverIndex]?.$value);\n  }\n\n  if (leverIndex) {\n    showMessage(\"* click *\", 1);\n  }\n  player_last_pulled_lever = leverIndex;\n  saveGame();\n};\n\nexport const onSoulCollected = () => {\n  showMessage(\n    [\n      ,\n      \"Mark Zuckemberg<br>made the world worse\",\n      ,\n      \"Andrzej Mazur<br>for the js13k competition\",\n      \"Donald Trump<br>lies\",\n      \"Kim Jong-un<br>Dictator, liked pineapple on pizza\",\n      \"Maxime Euziere<br>forced me to finish this game\",\n      \"She traded NFTs apes\",\n      ,\n      \"Vladimir Putin<br>evil war\",\n      \"He was not a good person\",\n      ,\n      \"Salvatore Previti<br>made this evil game<br><br>Done. Go back to the boat\",\n    ][souls_collected_count] || 'Catched a \"crypto bro\".<br>\"Web3\" is all scam, lies and grift',\n    souls_collected_count && souls_collected_count < 12 ? 5 : 7,\n  );\n\n  saveGame();\n};\n","import type { Vec3 } from \"../math\";\n\nexport const player_position_final: Vec3 = {\n  x: 0,\n  y: 0,\n  z: 0,\n};\n","import { abs, angle_lerp_degrees, DEG_TO_RAD, identity, max, min, vec3_distance } from \"../math\";\nimport type { Polygon } from \"../geometry/geometry\";\nimport { cylinder, material, polygons_transform, sphere } from \"../geometry/geometry\";\nimport { csg_polygons, csg_subtract } from \"../geometry/csg\";\nimport { GQuad, GHorn, boatPolygons } from \"../geometry/solids\";\nimport { meshAdd, meshEnd, newModel, withEditMatrix, type Model } from \"./scene\";\nimport {\n  levers,\n  souls,\n  onPlayerPullLever,\n  onSoulCollected,\n  lerpDamp,\n  type Lever,\n  type Soul,\n  gameTimeDelta,\n  gameTime,\n  firstBoatLerp,\n} from \"./world-state\";\nimport { player_position_final } from \"./player-position\";\nimport { keyboard_downKeys, KEY_INTERACT } from \"../page\";\n\nconst LEVER_SENSITIVITY_RADIUS = 2.9;\nconst SOUL_SENSITIVITY_RADIUS = 1.5;\n\n// ========= Sky mesh ========= //\n\n// Initialize the full screen triangle for the sky. Must be the first mesh!\n\nmeshAdd([GQuad.slice(1)], identity.translate(-2).scale3d(3).rotate(90, 0));\nmeshEnd();\n\n// ========= Lever mesh ========= //\n\nconst leverMeshes = [material(1, 0.5, 0.2), material(0.7, 1, 0.2)].map((handleMaterial) => {\n  meshAdd(cylinder(6, 1), identity.scale(0.13, 1.4, 0.13), material(0.3, 0.3, 0.5));\n  meshAdd(cylinder(8), identity.translate(0, 1).scale(0.21, 0.3, 0.21), handleMaterial);\n  meshAdd(cylinder(3), identity.translate(0, -1).rotate(90, 90).scale(0.3, 0.4, 0.3), material(0.2, 0.2, 0.2));\n  return meshEnd();\n});\n\nexport const newLever = (transform: DOMMatrixReadOnly): void => {\n  withEditMatrix(transform, () => {\n    newModel(($model) => {\n      const $parent = $model.$parent!;\n      const lever: Lever = { $value: 0, $lerpValue: 0, $lerpValue2: 0, $parent };\n      const index = levers.push(lever) - 1;\n      $model._update = () => {\n        const { $value, $lerpValue, $lerpValue2 } = lever;\n        const point = (lever.$matrix = $model.$finalMatrix).transformPoint();\n\n        if (vec3_distance(point, player_position_final) < LEVER_SENSITIVITY_RADIUS && keyboard_downKeys[KEY_INTERACT]) {\n          if ($lerpValue < 0.3 || $lerpValue > 0.7) {\n            lever.$value = $value ? 0 : 1;\n            onPlayerPullLever(index);\n          }\n        }\n\n        lever.$lerpValue = lerpDamp($lerpValue, $value, 4);\n        lever.$lerpValue2 = lerpDamp($lerpValue2, $value, 1);\n        $model.$mesh = leverMeshes[$lerpValue > 0.5 ? 1 : 0]!;\n        return identity.rotate(lever.$lerpValue * 60 - 30, 0).translateSelf(0, 1);\n      };\n    });\n\n    meshAdd(cylinder(5), identity.translate(-0.2).rotate(90, 90).scale(0.4, 0.1, 0.5), material(0.4, 0.5, 0.5));\n    meshAdd(cylinder(5), identity.translate(0.2).rotate(90, 90).scale(0.4, 0.1, 0.5), material(0.4, 0.5, 0.5));\n    meshAdd(cylinder(GQuad), identity.translate(0, -0.4).scale(0.5, 0.1, 0.5), material(0.5, 0.5, 0.4));\n  });\n};\n\n// ========= Player ========= //\n\nexport let playerLegsModels: [Model, Model];\n\nexport let playerModel: Model;\n\nexport const initPlayerModel = () => {\n  playerModel = newModel(() => {\n    // Player legs\n\n    playerLegsModels = [-1, 1].map((x) =>\n      newModel(() => {\n        meshAdd(cylinder(10, 1), identity.translate(x * 0.3, -0.8).scale(0.2, 0.7, 0.24), material(1, 0.3, 0.4));\n      }),\n    ) as [Model, Model];\n\n    // Player body\n\n    // horns\n    [0, 180].map((r) =>\n      meshAdd(\n        GHorn,\n        identity.rotate(0, r).translate(0.2, 1.32).rotate(0, 0, -30).scale(0.2, 0.6, 0.2),\n        material(1, 1, 0.8),\n      ),\n    );\n\n    // head\n    meshAdd(sphere(20), identity.translate(0, 1).scale(0.5, 0.5, 0.5), material(1, 0.3, 0.4));\n\n    const eye = polygons_transform(\n      csg_polygons(\n        csg_subtract(\n          cylinder(15, 1),\n          polygons_transform(cylinder(GQuad), identity.translate(0, 0, 1).scale(2, 2, 0.5)),\n        ),\n      ),\n      identity.rotate(-90, 0).scale(0.1, 0.05, 0.1),\n      material(0.3, 0.3, 0.3),\n    );\n\n    [-1, 1].map((i) => meshAdd(eye, identity.translate(i * 0.2, 1.2, 0.4).rotate(0, i * 20, i * 20)));\n\n    // mouth\n    meshAdd(cylinder(GQuad), identity.translate(0, 0.9, 0.45).scale(0.15, 0.02, 0.06), material(0.3, 0.3, 0.3));\n\n    // body\n    meshAdd(sphere(20), identity.scale(0.7, 0.8, 0.55), material(1, 0.3, 0.4));\n  });\n};\n\n// ========= BOAT ========= //\n\nexport const getBoatAnimationMatrix = (z: number) =>\n  identity\n    .translate(Math.sin(gameTime + 2) / 5, Math.sin(gameTime * 0.8) / 3, z)\n    .rotateSelf(Math.sin(gameTime) * 2, Math.sin(gameTime * 0.7), Math.sin(gameTime * 0.9));\n\n// ========= FIRST BOAT! ========= //\n\nexport let firstBoatModel: Model;\n\nexport const initFirstBoatModel = () => {\n  firstBoatModel = withEditMatrix(identity.translate(-12, 4.2, -26 - 40), () =>\n    newModel((model) => {\n      if (DEBUG) {\n        console.log(\"firstBoat modelId:\" + model.$modelId);\n      }\n      model._update = () => getBoatAnimationMatrix(firstBoatLerp * 40);\n      newLever(identity.translate(0, -3, 4));\n      meshAdd(boatPolygons);\n    }),\n  );\n};\n\n// ========= Soul mesh ========= //\n\n// meshAdd(cylinder(6), identity, material(1, 0.3, 0.5));\n\nconst GHOST_SLICES = 40;\nconst GHOST_STACKS = 30;\n\nmeshAdd(\n  sphere(GHOST_SLICES, GHOST_STACKS, (a: number, b: number, polygon: Polygon) => {\n    const bm = b / GHOST_STACKS;\n    const theta = a * (Math.PI * (2 / GHOST_SLICES));\n    const phixz = (bm ** 0.6 * Math.PI) / 2;\n    const osc = (bm * bm * Math.sin(a * Math.PI * (14 / GHOST_SLICES))) / 4;\n    if (b === GHOST_STACKS - 1) {\n      polygon.$smooth = 0;\n      return { x: 0, y: -0.5, z: 0 };\n    }\n    return {\n      x: Math.cos(theta) * Math.sin(phixz),\n      y: Math.cos(bm * Math.PI) - bm - osc,\n      z: Math.sin(theta) * Math.sin(phixz) + Math.sin(osc * Math.PI * 2) / 4,\n    };\n  }),\n  identity.scale3d(0.7),\n  material(1, 1, 1),\n);\n\n[-1, 1].map((x) => meshAdd(sphere(15), identity.translate(x * 0.16, 0.4, -0.36).scale3d(0.09)));\n\nexport const soulMesh = meshEnd();\n\nexport type Circle = [number, number, number];\n\nexport const newSoul = (transform: DOMMatrixReadOnly, ...walkingPath: number[][]) =>\n  withEditMatrix(transform, () => {\n    const soul: Soul = { $value: 0 };\n\n    const circles = (walkingPath as Circle[]).map(([x, z, w]) => ({ x, z, w }));\n\n    let circle = circles[0]!;\n    let { x: targetX, z: targetZ } = circle;\n    let dirX = -1;\n    let dirZ = 0;\n    let wasInside: boolean | undefined | 1 = 1;\n    let randAngle = 0;\n    let lookAngle = 0;\n    let soulX = targetX;\n    let soulZ = targetZ;\n    let velocity = 3;\n    let prevX = 0;\n    let prevZ = 0;\n\n    if (DEBUG_FLAG0) {\n      for (const c of circles) {\n        meshAdd(cylinder(12), identity.translate(c.x, -1.7, c.z).scale(c.w, 0.01, c.w), material(0.3, 0.3, 0.38));\n      }\n    }\n\n    const index = souls.push(soul) - 1;\n\n    return newModel((model) => {\n      model._update = () => {\n        let animationMatrix: DOMMatrixReadOnly;\n\n        if (!soul.$value) {\n          let contextualVelocity = 1;\n          let mindist = Infinity;\n          let isInside: boolean | undefined;\n          for (const c of circles) {\n            const { x, z, w } = c;\n            const distance = Math.hypot(targetX - x, targetZ - z);\n            const circleSDF = distance - w;\n            isInside ||= distance < w;\n            if (circleSDF > 0 && circleSDF < mindist) {\n              mindist = circleSDF;\n              circle = c;\n            }\n            contextualVelocity = min(contextualVelocity, distance / w);\n          }\n\n          if (!isInside) {\n            const { x, z, w } = circle;\n            const ax = targetX - x;\n            const az = targetZ - z;\n            let magnitude = Math.hypot(ax, az);\n            let angle = Math.atan2(-az, ax);\n            if (wasInside) {\n              randAngle = ((Math.random() - 0.5) * Math.PI) / 2;\n              velocity = max(1, velocity / (1 + Math.random()));\n            }\n            angle += randAngle;\n            dirX = -Math.cos(angle);\n            dirZ = Math.sin(angle);\n            if (magnitude > 0.1) {\n              // limit the vector length to the circle radius, as a security measure\n              magnitude = min(magnitude, w) / (magnitude || 1);\n              targetX = ax * magnitude + x;\n              targetZ = az * magnitude + z;\n            }\n          }\n\n          wasInside = isInside;\n\n          velocity = lerpDamp(velocity, 3 + (1 - contextualVelocity) * 6, 3 + contextualVelocity);\n\n          targetX = lerpDamp(targetX, targetX + dirX, velocity);\n          targetZ = lerpDamp(targetZ, targetZ + dirZ, velocity);\n\n          soulX = lerpDamp(soulX, targetX, velocity);\n          soulZ = lerpDamp(soulZ, targetZ, velocity);\n\n          lookAngle = angle_lerp_degrees(\n            lookAngle,\n            Math.atan2(soulX - prevX, soulZ - prevZ) / DEG_TO_RAD - 180,\n            3 * gameTimeDelta,\n          );\n\n          prevX = soulX;\n          prevZ = soulZ;\n\n          animationMatrix = identity\n            .translate(soulX, 0, soulZ)\n            .rotateSelf(0, lookAngle)\n            .skewXSelf(Math.sin(gameTime * 2) * 7)\n            .skewYSelf(Math.sin(gameTime * 1.4) * 7);\n\n          const soulPos = model.$finalMatrix.multiply(animationMatrix).transformPoint();\n\n          if (vec3_distance(soulPos, player_position_final) < SOUL_SENSITIVITY_RADIUS) {\n            soul.$value = 1;\n            onSoulCollected();\n          }\n        }\n\n        if (soul.$value) {\n          // Captured.\n          model.$parent = firstBoatModel;\n          model.$initialMatrix = identity;\n\n          animationMatrix = identity.translate(\n            (index % 4) * 1.2 - 1.7 + Math.sin(gameTime + index) / 6,\n            -2,\n            -5.5 + ((index / 4) | 0) * 1.7 + abs((index % 4) - 2) + Math.cos(gameTime / 1.5 + index) / 6,\n          );\n        }\n\n        return animationMatrix!;\n      };\n      return soulMesh;\n    });\n  });\n","import { abs, clamp01, integers_map, lerpneg, max, min, identity } from \"../math\";\nimport { material, cylinder, polygons_transform } from \"../geometry/geometry\";\nimport { csg_subtract, csg_polygons, csg_union } from \"../geometry/csg\";\nimport { GQuad, GHorn, boatPolygons, bigArc } from \"../geometry/solids\";\nimport type { Model } from \"./scene\";\nimport { meshAdd, meshEnd, withEditMatrix, newModel } from \"./scene\";\nimport {\n  secondBoatLerp,\n  gameTime,\n  levers,\n  rotatingHexCorridorRotation,\n  rotatingPlatform1Rotation,\n  rotatingPlatform2Rotation,\n} from \"./world-state\";\nimport { getBoatAnimationMatrix, initFirstBoatModel, newLever } from \"./objects\";\nimport { initSouls } from \"./init-souls\";\n\nexport let centralOscillatingPlatformModel: Model;\n\nexport let centralSculptureMonumentModel: Model;\n\nexport let donutWithHornsModel: Model;\n\nexport let firstRotatingPlatformModel: Model;\n\nexport const buildWorld = () => {\n  newModel(() => {\n    initFirstBoatModel();\n\n    // ========= entranceBarsMesh ========= //\n\n    integers_map(7, (i) =>\n      meshAdd(cylinder(6, 1), identity.translate(4 * (i / 6 - 0.5), 3).scale(0.2, 3, 0.2), material(0.3, 0.3, 0.38)),\n    );\n    const entranceBarsMesh = meshEnd();\n\n    // ========= WORLD! ========= //\n\n    // first boat attachment\n\n    meshAdd(\n      cylinder(GQuad),\n      identity.translate(-5, -0.2, -26).scale(3.2, 1, 2.5).skewX(3),\n      material(0.8, 0.8, 0.8, 0.2),\n    );\n\n    // gate columns\n\n    GQuad.map(({ x, z }) =>\n      meshAdd(cylinder(6), identity.translate(x * 3, 3, z * 15).scale(0.7, 4, 0.7), material(0.6, 0.3, 0.3, 0.4)),\n    );\n\n    // in and out\n    [-23, 22].map((z) =>\n      meshAdd(cylinder(GQuad), identity.translate(0, 0, z).scale(3, 1, 8), material(0.9, 0.9, 0.9, 0.2)),\n    );\n\n    [-15, 15].map((z, i) => {\n      //  gate top\n      meshAdd(cylinder(GQuad), identity.translate(0, 6.3, z).scale(4, 0.3, 1), material(0.3, 0.3, 0.3, 0.4));\n      //  gate bottom\n      meshAdd(cylinder(GQuad), identity.translate(0, 1, z).scale(3, 0.2, 0.35), material(0.5, 0.5, 0.5, 0.3));\n      // in and out gate bars\n      newModel((model) => {\n        model._update = () => identity.translate(0, -levers[i + 1]!.$lerpValue * 4.7, z);\n        return entranceBarsMesh;\n      });\n    });\n\n    // horns\n\n    integers_map(5, (i) =>\n      integers_map(2, (j) =>\n        meshAdd(\n          GHorn,\n          identity\n            .translate((j - 0.5) * 18.5, 0, i * 4.8 - 9.5)\n            .rotate(0, 180 - j * 180)\n            .scale(1.2, 10, 1.2),\n          material(1, 1, 0.8, 0.2),\n        ),\n      ),\n    );\n\n    meshAdd(cylinder(GQuad), identity.translate(3, 1.5, -20).scale(0.5, 2, 5), material(0.7, 0.7, 0.7, 0.2));\n\n    // first lever pad\n    meshAdd(\n      cylinder(GQuad),\n      identity.translate(-3.4, -0.2, -19).scale(2, 1, 1.5).rotate(0, -90),\n      material(0.75, 0.75, 0.75, 0.2),\n    );\n    meshAdd(cylinder(5), identity.translate(-5.4, 0, -19).scale(2, 1, 2).rotate(0, -90), material(0.6, 0.3, 0.3, 0.4));\n\n    newLever(identity.translate(-5.4, 1.5, -19).rotate(0, -90));\n\n    // descent\n\n    meshAdd(\n      cylinder(GQuad),\n      identity.rotate(0, 60).translate(14.8, -1.46, -1).rotate(0, 0, -30).scale(4, 0.6, 4.5),\n      material(0.8, 0.2, 0.2, 0.5),\n    );\n\n    // base\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          csg_union(\n            // lower base\n            polygons_transform(\n              cylinder(6, 0, 0, 0.3),\n              identity.translate(8, -3, -4).scale(13, 1, 13),\n              material(0.7, 0.7, 0.7, 0.2),\n            ),\n\n            // hole extension\n            polygons_transform(cylinder(6), identity.translate(0, -8).scale(9, 8, 8), material(0.4, 0.2, 0.5, 0.5)),\n\n            // middle base\n            polygons_transform(\n              cylinder(6, 0, 0, 0.3),\n              identity.translate(0, -0.92).scale(13, 2, 13),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n          ),\n          // hole\n          polygons_transform(cylinder(5), identity.scale(5, 30, 5), material(0.4, 0.2, 0.6, 0.5)),\n\n          // smooth hole\n          polygons_transform(\n            cylinder(5, 0, 1.5),\n            identity.translate(0, 1).scale(4.5, 0.3, 4.5),\n            material(0.7, 0.5, 0.9, 0.2),\n          ),\n\n          // descent cut\n          polygons_transform(\n            cylinder(GQuad),\n            identity.rotate(0, 60).translate(14, 0.7, -1).rotate(0, 0, -35).scale(2, 2, 2),\n            material(0.5, 0.5, 0.5, 0.5),\n          ),\n\n          // lower lever pad\n          polygons_transform(\n            cylinder(6),\n            identity.translate(15, -1.5, 4).scale(3.5, 1, 3.5),\n            material(0.5, 0.5, 0.5, 0.5),\n          ),\n        ),\n      ),\n    );\n\n    // moving central platform\n\n    newModel((model) => {\n      model._update = () => {\n        return identity.translate(\n          0,\n          levers[3]!.$lerpValue > 0.01\n            ? (Math.cos(gameTime * 1.5) * 5 + 2) * levers[3]!.$lerpValue2 * (1 - levers[2]!.$lerpValue) +\n                (1 - levers[3]!.$lerpValue) * -15\n            : // invisible\n              -500,\n          0,\n        );\n      };\n\n      newLever(identity.translate(0, 1.2));\n\n      meshAdd(cylinder(5), identity.translate(0, -0.2).scale(5, 1, 5), material(0.6, 0.65, 0.7, 0.3));\n    });\n\n    newLever(identity.translate(15, -2, 4));\n\n    // ******** LEVEL 2 ********\n\n    const getOscillationAmount = () => min(levers[2]!.$lerpValue2, 1 - levers[4]!.$lerpValue2);\n\n    const blackPlatform = (freq: number, amplitude: number, pz: number) =>\n      newModel((model) => {\n        model._update = () =>\n          identity.translate(getOscillationAmount() * Math.sin(freq * 3 + gameTime * freq) * amplitude);\n        GQuad.map(({ x, z }) => {\n          // column body\n          meshAdd(\n            cylinder(11, 1),\n            identity.translate(x * 4, 4, pz + z * 4).scale(0.8, 3, 0.8),\n            material(0.5, 0.3, 0.7, 0.6),\n          );\n          // column top\n          meshAdd(\n            cylinder(GQuad),\n            identity.translate(x * 4, 7, pz + z * 4).scale(1, 0.3),\n            material(0.5, 0.5, 0.5, 0.3),\n          );\n        });\n\n        meshAdd(\n          csg_polygons(\n            csg_subtract(\n              polygons_transform(\n                cylinder(GQuad),\n                identity.translate(0, 0, pz).scale(5, 1, 5),\n                material(0.8, 0.8, 0.8, 0.3),\n              ),\n              ...[-1, 1].map((i) =>\n                polygons_transform(\n                  cylinder(GQuad),\n                  identity\n                    .translate(5 * i, 0.2, pz)\n                    .rotate(0, 0, i * -30)\n                    .scale(4, 1, 2),\n                  material(0.8, 0.8, 0.8, 0.3),\n                ),\n              ),\n            ),\n          ),\n        );\n        // bottom\n        meshAdd(cylinder(GQuad), identity.translate(0, -3, pz).scale(8, 2, 8), material(0.4, 0.4, 0.4, 0.3));\n      });\n\n    blackPlatform(0.7, 12, 35);\n    blackPlatform(1, 8.2, 55);\n\n    // central oscillating platform\n    centralOscillatingPlatformModel = newModel((model) => {\n      model._update = () => identity.translate(getOscillationAmount() * Math.sin(gameTime / 1.5 + 2) * 12);\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            csg_union(\n              polygons_transform(cylinder(GQuad), identity.scale(1.5, 1, 5), material(0.9, 0.9, 0.9, 0.2)),\n              polygons_transform(cylinder(6), identity.scale(4, 1, 5), material(0.9, 0.9, 0.9, 0.2)),\n              polygons_transform(\n                cylinder(GQuad),\n                identity.translate(0, -2).scale(2, 3.2, 1.9),\n                material(0.3, 0.8, 0.5, 0.5),\n              ),\n              polygons_transform(\n                cylinder(16, 1, 0, 4),\n                identity.scale(1, 1, 1.5).rotate(0, 90),\n                material(0.9, 0.9, 0.9, 0.2),\n              ),\n            ),\n            polygons_transform(cylinder(GQuad), identity.scale(1.3, 10, 1.3), material(0.2, 0.7, 0.4, 0.6)),\n          ),\n        ),\n        identity.translate(0, 0, 45),\n      );\n    });\n\n    const level3Oscillation = () =>\n      clamp01(1 - getOscillationAmount() * 5) * lerpneg(levers[4]!.$lerpValue, levers[5]!.$lerpValue);\n\n    // ******** LEVEL 3 ********\n\n    // triangle platform\n\n    newModel((model) => {\n      model._update = () => identity.translate((1 - getOscillationAmount()) * 9.8);\n\n      meshAdd(cylinder(3), identity.translate(-23, -1.7, 55.8).scale(5, 0.7, 8.3), material(0.3, 0.6, 0.6, 0.2));\n      meshAdd(cylinder(8), identity.translate(-23, -2.2, 66.5).scale(1.5, 1.2, 1.5), material(0.8, 0.8, 0.8, 0.2));\n      meshAdd(cylinder(GQuad), identity.translate(-23, -3, 55).scale(5.2, 1.7, 3), material(0.5, 0.5, 0.5, 0.3));\n      meshAdd(cylinder(GQuad), identity.translate(-23, -2.2, 62).scale(3, 1, 4), material(0.5, 0.5, 0.5, 0.3));\n\n      newLever(identity.translate(-23, -0.5, 66.5));\n    });\n\n    meshAdd(\n      cylinder(GQuad),\n      identity.translate(-21.1 + 2.45, -3, 55).scale(2.45, 1.4, 2.7),\n      material(0.9, 0.9, 0.9, 0.2),\n    );\n\n    // vertically oscillating mini platforms\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, level3Oscillation() * Math.sin(gameTime * (1.5 * 0.9)) * 4);\n\n      meshAdd(\n        cylinder(GQuad),\n        identity.translate(-21.1 - 1.45, -3, 55).scale(1.45, 1.4, 2.7),\n        material(0.7, 0.7, 0.7, 0.2),\n      );\n\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(cylinder(GQuad), identity.scale(3, 1.4, 2.7)),\n            polygons_transform(cylinder(GQuad), identity.scale(1.2, 8, 1.2)),\n          ),\n        ),\n        identity.translate(-33, -3, 55),\n        material(0.7, 0.7, 0.7, 0.2),\n      );\n    });\n\n    // horizontaly oscillating mini platforms\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, 0, level3Oscillation() * Math.sin(gameTime * 0.9) * 8);\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-27, -3, 55).scale(3, 1.4, 2.7),\n              material(0.9, 0.9, 0.9, 0.2),\n            ),\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-27, -3, 55).scale(1, 3),\n              material(0.9, 0.9, 0.9, 0.2),\n            ),\n          ),\n        ),\n      );\n\n      meshAdd(cylinder(GQuad), identity.translate(-39, -3, 55).scale(3, 1.4, 2.7), material(0.9, 0.9, 0.9, 0.2));\n    });\n\n    // hex corridor door\n\n    newModel((model) => {\n      model._update = () => identity.translate(0, levers[4]!.$lerpValue2 * -6.5);\n      meshAdd(\n        cylinder(6),\n        identity.translate(-44.5, 0, 55).rotate(90, 90).rotate(0, 90).scale(5.9, 0.5, 5.9),\n        material(0.7, 0.7, 0.7, 0.4),\n      );\n    });\n\n    // hex corridor\n\n    const hexCorridorPolygons = [\n      ...polygons_transform(\n        csg_polygons(\n          csg_union(\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(0, -3).scale(11, 1.4, 3),\n              material(0.9, 0.9, 0.9, 0.2),\n            ),\n            csg_subtract(\n              polygons_transform(cylinder(6), identity.rotate(0, 0, 90).scale(6, 8, 6), material(0.3, 0.6, 0.6, 0.3)),\n              polygons_transform(\n                cylinder(4, 0, 0.01),\n                identity.translate(0, 6).scale(12, 2, 0.75).rotate(0, 45),\n                material(0.3, 0.6, 0.6, 0.3),\n              ),\n              polygons_transform(cylinder(6), identity.rotate(0, 0, 90).scale(5, 12, 5), material(0.3, 0.6, 0.6, 0.3)),\n              ...[5, 0, -5].map((x) =>\n                polygons_transform(\n                  cylinder(5),\n                  identity.translate(x, 2.5).rotate(90, 0, 36).scale(1.8, 10, 1.8),\n                  material(0.3, 0.6, 0.6, 0.3),\n                ),\n              ),\n            ),\n          ),\n        ),\n        identity,\n      ),\n    ];\n\n    meshAdd(hexCorridorPolygons, identity.translate(-53, 0, 55));\n\n    meshAdd(cylinder(6), identity.translate(-61.3, -2.4, 49).scale(3, 1, 5), material(0.4, 0.6, 0.6, 0.3));\n\n    meshAdd(cylinder(7), identity.translate(-57, -2.6, 46).scale(4, 1, 4), material(0.8, 0.8, 0.8, 0.3));\n\n    newLever(identity.translate(-55, -1.1, 46).rotate(0, 90));\n\n    // rotating hex corridor\n\n    withEditMatrix(identity.translate(-75, 0, 55), () =>\n      newModel((model) => {\n        if (DEBUG) {\n          console.log(\"rotatingHexCorridor modelId:\" + model.$modelId);\n        }\n\n        model.$attachPlayer = 0;\n        model._update = () => {\n          return identity\n            .translate(0, (1 - levers[5]!.$lerpValue2) * (1 - levers[6]!.$lerpValue) * 3)\n            .rotate(180 * (1 - levers[5]!.$lerpValue2) + rotatingHexCorridorRotation, 0);\n        };\n        meshAdd(hexCorridorPolygons);\n      }),\n    );\n\n    // connection from rotating hex corridor to platforms\n\n    meshAdd(\n      cylinder(GQuad),\n      identity.translate(-88.3, -5.1, 55).rotate(0, 0, -30).scale(5, 1.25, 4.5),\n      material(0.7, 0.7, 0.7, 0.2),\n    );\n\n    meshAdd(\n      cylinder(3, 0, -0.5),\n      identity.translate(-88.4, -3.9, 55).rotate(0, -90, 17).scale(3, 1.45, 5.9),\n      material(0.8, 0.8, 0.8, 0.2),\n    );\n\n    // platform after the rotating hex corridor\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          csg_union(\n            // base\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-100, -2.5, 55).scale(8, 1, 8),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n            // right path to the boat\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-113, -2.6, 55).scale(6.2, 1.1, 3).skewX(3),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n            // straiht line\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-100, -2.6, 70).scale(3, 1.1, 7),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n            // 45 degrees detour\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-96, -2.6, 73).rotate(0, 45).scale(3, 1.1, 5),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n            // 45 degrees detour hexagon\n            polygons_transform(\n              cylinder(6),\n              identity.translate(-88.79, -2.6, 80.21).scale(6, 1.1, 6).rotate(0, 15),\n              material(0.6, 0.6, 0.6, 0.3),\n            ),\n\n            // ascension\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-100, -1.1, 82.39).rotate(-15, 0).scale(3, 1.1, 6),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n            // ascension continuation\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(-100, 0.42, 92).scale(3, 1.1, 4.1),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n          ),\n\n          // decorative octagon\n          polygons_transform(\n            cylinder(8),\n            identity.translate(-100, -1, 55).scale(7, 0.9, 7),\n            material(0.3, 0.3, 0.3, 0.4),\n          ),\n          polygons_transform(\n            cylinder(8),\n            identity.translate(-100, -2, 55).scale(4, 0.3, 4),\n            material(0.4, 0.4, 0.4, 0.5),\n          ),\n          polygons_transform(\n            cylinder(8),\n            identity.translate(-100, -3, 55).scale(0.6, 1, 0.6),\n            material(0.4, 0.4, 0.4, 0.5),\n          ),\n        ),\n      ),\n      identity,\n    );\n\n    // first arc door\n\n    meshAdd(\n      csg_polygons(\n        csg_subtract(\n          polygons_transform(\n            cylinder(GQuad),\n            identity.translate(-100, 1, 63).scale(7.5, 4),\n            material(0.5, 0.5, 0.5, 0.4),\n          ),\n          polygons_transform(\n            cylinder(GQuad),\n            identity.translate(-100, 0, 70).scale(2, 2, 10),\n            material(0.5, 0.5, 0.5, 0.4),\n          ),\n          polygons_transform(\n            cylinder(20, 1),\n            identity.translate(-100, 2, 70).scale(2, 2, 10).rotate(90, 0),\n            material(0.5, 0.5, 0.5, 0.4),\n          ),\n        ),\n      ),\n    );\n\n    // gate bars\n\n    withEditMatrix(identity.translate(-99.7, -2, 63.5), () =>\n      newModel((model) => {\n        model._update = () => identity.translate(0, -levers[6]!.$lerpValue * 5.3);\n        return entranceBarsMesh;\n      }),\n    );\n\n    // hex columns\n\n    GQuad.map(({ x, z }) => {\n      meshAdd(\n        cylinder(6),\n        identity.translate(-100 + x * 7, -3, z * 7 + 55).scale(1, 8.1),\n        material(0.6, 0.15, 0.15, 0.8),\n      );\n      [4, -0.4].map((i) =>\n        meshAdd(\n          cylinder(6),\n          identity.translate(-100 + x * 7, i, z * 7 + 55).scale(1.3, 0.5, 1.3),\n          material(0.4, 0.2, 0.2, 0.8),\n        ),\n      );\n    });\n\n    // crystals\n\n    integers_map(7, (i) => {\n      meshAdd(\n        cylinder(((i * 23 + 1) % 5) + 5, 0, 0.55),\n        identity\n          .translate(-101 + Math.sin(i) * 5 + i, -2.3 - i, 44.9 - i * 2.8)\n          .scaleSelf(5 + i / 2, 1 + i / 6, 5 + i / 3),\n        material(0.5 - i / 17, 0.5 - (i & 1) / 9, 0.6, 0.3),\n      );\n    });\n\n    // crystals continuation pad\n\n    meshAdd(cylinder(GQuad), identity.translate(-87, -9.5, 24).scale(7, 1, 3), material(0.4, 0.5, 0.6, 0.4));\n\n    // lever pad\n\n    meshAdd(cylinder(4), identity.translate(-86, -9.2, 27).scale(5, 1, 5), material(0.5, 0.6, 0.7, 0.3));\n\n    meshAdd(cylinder(18, 1), identity.translate(-86, -9, 31).scale(1.5, 1, 1.5), material(0.3, 0.3, 0.4, 0.1));\n\n    newLever(identity.translate(-86, -7.5, 31));\n\n    // elevators\n\n    withEditMatrix(identity.translate(-76.9, -10, 24), () => {\n      const shouldOscillate = () => lerpneg(levers[7]!.$lerpValue2, levers[6]!.$lerpValue2);\n\n      newModel((model) => {\n        model._update = () => {\n          const osc = shouldOscillate();\n          return identity.translate(\n            0,\n            (1 - max(levers[6]!.$lerpValue, levers[7]!.$lerpValue)) * 3.5 + osc * Math.sin(gameTime) * 5,\n          );\n        };\n        [0, 12, 24].map((x) =>\n          meshAdd(cylinder(GQuad), identity.translate(x, x / -13).scale(2.8, 1.5, 3), material(0.2, 0.5, 0.6, 0.2)),\n        );\n      });\n\n      newModel((model) => {\n        model._update = () => {\n          const osc = shouldOscillate();\n          return identity.translate(0, osc * Math.sin(gameTime + 3) * 6, Math.sin(gameTime * 0.6 + osc) * 6 * osc);\n        };\n        [6, 18].map((x) =>\n          meshAdd(cylinder(GQuad), identity.translate(x, x / -13).scale(2.8, 1.5, 3), material(0.1, 0.4, 0.5, 0.2)),\n        );\n      });\n    });\n\n    // pad after elevators\n\n    withEditMatrix(identity.translate(-38.9, -11.3, 17), () => {\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            csg_union(\n              polygons_transform(cylinder(GQuad), identity.scale(11, 1, 13), material(0.3, 0.4, 0.6, 0.3)),\n              // lever pad\n              polygons_transform(\n                cylinder(5),\n                identity.translate(0, 0, -7).scale(2, 1.2, 2),\n                material(0.2, 0.4, 0.7, 0.3),\n              ),\n              // blue pentagon\n              polygons_transform(cylinder(5), identity.scale(9, 1.2, 9), material(0, 0.2, 0.3, 0.5)),\n            ),\n            polygons_transform(cylinder(5), identity.scale(5.4, 5, 5.4), material(0, 0.2, 0.3, 0.5)),\n          ),\n        ),\n      );\n\n      newLever(identity.translate(0, 1.7, -7));\n\n      // central sculpture/monument\n\n      centralSculptureMonumentModel = newModel((model) => {\n        model._update = () => identity.translate(0, levers[7]!.$lerpValue2 * -7.3);\n\n        meshAdd(\n          csg_polygons(\n            csg_subtract(\n              csg_union(\n                polygons_transform(\n                  cylinder(5),\n                  identity.translate(0, 2).scale(5, 7, 5).skewY(8),\n                  material(0.2, 0.4, 0.5, 0.5),\n                ),\n                polygons_transform(\n                  cylinder(5),\n                  identity.translate(0, 6).scale(1.1, 7, 1.1).skewY(-8),\n                  material(0.25, 0.35, 0.5, 0.5),\n                ),\n                polygons_transform(\n                  cylinder(5),\n                  identity.translate(0, 9).scale(0.6, 7, 0.6).skewY(8),\n                  material(0.35, 0.3, 0.5, 0.5),\n                ),\n              ),\n              polygons_transform(\n                cylinder(5),\n                identity.translate(0, 5).scale(1.5, 1.5, 8).rotate(90, 0, 35),\n                material(0.2, 0.4, 0.5, 0.5),\n              ),\n            ),\n          ),\n        );\n      });\n\n      // columns\n\n      GQuad.map(({ x, z }) => {\n        meshAdd(cylinder(18, 1), identity.translate(x * 9, 4, z * 11).scale(1, 4), material(0.25, 0.25, 0.25, 1));\n        [1.5, 8].map((y) =>\n          meshAdd(\n            cylinder(18, 1),\n            identity.translate(x * 9, y, z * 11).scale(1.5, 0.5, 1.5),\n            material(0.6, 0.6, 0.6, 0.3),\n          ),\n        );\n      });\n\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            csg_union(\n              // holed base\n              polygons_transform(\n                cylinder(6),\n                identity.translate(0, 0, -36).scale(15, 1.2, 15),\n                material(0.7, 0.7, 0.7, 0.3),\n              ),\n              // after monument continuation\n              polygons_transform(\n                cylinder(GQuad),\n                identity.translate(0, 0, -18).scale(4, 1.2, 6),\n                material(0.45, 0.4, 0.6, 0.3),\n              ),\n            ),\n            ...integers_map(6, (z) =>\n              integers_map(6, (x) =>\n                polygons_transform(\n                  cylinder(6),\n                  identity.translate(x * 4.6 - 12 + 2 * (z & 1), 0, z * 4.6 - 50 + Math.sin(x * 4) * 2).scale(2, 5, 2),\n                  material(0.7, 0.7, 0.7, 0.3),\n                ),\n              ),\n            ).flat(),\n          ),\n        ),\n      );\n    });\n\n    // Detour lever pad\n    meshAdd(cylinder(5), identity.translate(-84, -2, 85).scale(4, 0.8, 4).rotate(0, 10), material(0.8, 0.1, 0.25, 0.4));\n\n    // Detour lever\n    newLever(identity.translate(-84, -0.5, 85).rotate(0, 45));\n\n    // ******** SECOND BOAT ********\n\n    withEditMatrix(identity.translate(-123, 1.4, 55), () => {\n      newModel((model) => {\n        model._update = () => getBoatAnimationMatrix(secondBoatLerp * -65);\n        newLever(identity.translate(0, -3, -4).rotate(0, 180));\n        meshAdd(boatPolygons);\n      });\n    });\n\n    // ******** LEVEL AFTER BOAT ********\n\n    withEditMatrix(identity.translate(-123, 0, -12), () => {\n      const pushingRod = csg_polygons(\n        csg_subtract(\n          polygons_transform(\n            cylinder(GQuad),\n            identity.translate(0, -0.5, 1).scale(1.15, 1.2, 6.5),\n            material(0.25, 0.25, 0.35, 0.3),\n          ),\n          polygons_transform(cylinder(3), identity.translate(0, 0, -5.5).scale(3, 2), material(0.6, 0.3, 0.4, 0.3)),\n          ...[-1.2, 1.2].map((i) =>\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(i, -0.5, 1).scale(0.14, 0.3, 6.5),\n              material(0.7, 0.2, 0, 0.3),\n            ),\n          ),\n        ),\n      );\n\n      // boat attachment\n\n      meshAdd(cylinder(GQuad), identity.translate(7, -2.6).scale(3.2, 1.1, 4).skewX(3), material(0.8, 0.8, 0.8, 0.2));\n\n      meshAdd(cylinder(6), identity.translate(7, -2.6, -4.5).scale(3.2, 0.8, 3), material(0.6, 0.5, 0.7, 0.2));\n\n      newLever(identity.translate(7, -1.4, -6).rotate(0, 180));\n\n      // arcs\n\n      integers_map(3, (i) => {\n        meshAdd(bigArc, identity.translate(i * 12 + 14, -9), material(0.6, 0.6, 0.6, 0.3));\n        meshAdd(bigArc, identity.translate(46, -9, i * -12 - 8).rotate(0, 90), material(0.6, 0.6, 0.6, 0.3));\n      });\n\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(\n              cylinder(12),\n              identity.translate(46, -13.9).scale(4, 18.2, 4),\n              material(0.7, 0.7, 0.7, 0.2),\n            ),\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(44).scale(3.5, 2.2, 1.3),\n              material(0.4, 0.5, 0.6, 0.2),\n            ),\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(46, 0, -2).scale(1.5, 2.2, 2),\n              material(0.4, 0.5, 0.6, 0.2),\n            ),\n            polygons_transform(cylinder(12), identity.translate(46, 2.8).scale(3, 5, 3), material(0.4, 0.5, 0.6, 0.2)),\n          ),\n        ),\n      );\n\n      meshAdd(cylinder(GQuad), identity.translate(7.5, -17).scale(0.5, 15, 2.2), material(0.6, 0.6, 0.6, 0.3));\n\n      meshAdd(cylinder(GQuad), identity.translate(46, -17, -38.5).scale(2.2, 15, 0.5), material(0.6, 0.6, 0.6, 0.3));\n\n      // pushing rods container\n\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            csg_union(\n              polygons_transform(cylinder(GQuad), identity.translate(26.5, -1.6, 10).scale(17, 2.08, 3)),\n              polygons_transform(cylinder(GQuad), identity.translate(26.5, -0.6, 10).scale(17, 2, 0.5)),\n            ),\n            ...integers_map(4, (x) =>\n              polygons_transform(\n                cylinder(GQuad),\n                identity.translate(13 + x * 9 + (x & 1), -0.8, 9).scale(1.35, 1.35, 9),\n              ),\n            ),\n            ...integers_map(3, (x) =>\n              polygons_transform(cylinder(GQuad), identity.translate(17 + x * 9, -0.8, 9).scale(1.35, 1.35, 9)),\n            ),\n          ),\n        ),\n        identity,\n        material(0.5, 0.5, 0.6, 0.2),\n      );\n\n      meshAdd(\n        cylinder(5),\n        identity.translate(9.4, -1.6, 10).rotate(0, 90, 90).scale(1.5, 0.2, 1.5),\n        material(0.25, 0.25, 0.35, 1),\n      );\n\n      // pushing rods\n\n      const shouldPushRods = () => lerpneg(levers[10]!.$lerpValue, levers[11]!.$lerpValue);\n      const shouldBlockRods = () => (1 - levers[10]!.$lerpValue) * (1 - shouldPushRods());\n\n      newModel((model) => {\n        model._update = () => identity.translate(0, -2, shouldPushRods() * abs(Math.sin(gameTime * 1.1)) * -8.5 + 10);\n        integers_map(2, (x) => meshAdd(pushingRod, identity.translate(13 + x * 9 + (x & 1), 1.7)));\n      });\n\n      newModel((model) => {\n        model._update = () => identity.translate(0, -2, shouldPushRods() * abs(Math.sin(gameTime * 2.1)) * -8.5 + 10);\n        integers_map(2, (x) => meshAdd(pushingRod, identity.translate(13 + (x + 2) * 9 + (x & 1), 1.7)));\n      });\n\n      newModel((model) => {\n        model._update = () =>\n          identity.translate(\n            0,\n            -2,\n            max(shouldBlockRods(), shouldPushRods() * abs(Math.sin(gameTime * 1.5))) * -8.5 + 10,\n          );\n        integers_map(3, (x) => meshAdd(pushingRod, identity.translate(17 + x * 9, 1.7)));\n      });\n\n      // internal pad\n\n      meshAdd(\n        cylinder(GQuad),\n        identity.translate(38.1, -4.3, -28).rotate(0, 0, 12).scale(6, 1, 3),\n        material(0.6, 0.6, 0.6, 0.3),\n      );\n\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(\n              cylinder(GQuad),\n              identity.translate(30, -5.8, -28).scale(9, 1, 5),\n              material(0.8, 0.8, 0.8, 0.1),\n            ),\n            polygons_transform(\n              cylinder(9),\n              identity.translate(25, -5.8, -28).scale(3, 8, 3),\n              material(0.7, 0.7, 0.7, 0.2),\n            ),\n          ),\n        ),\n      );\n\n      meshAdd(cylinder(9), identity.translate(25, -5.8, -28).scale(2.5, 0.9, 2.5), material(0.5, 0.5, 0.5, 0.3));\n\n      newLever(identity.translate(25, -4.4, -28).rotate(0, 90));\n    });\n\n    // ******** LEVEL AFTER CENTRAL GATE ********\n\n    withEditMatrix(identity.translate(-100, 0.7, 115), () => {\n      // base\n\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            csg_union(\n              polygons_transform(\n                cylinder(6, 0, 0, 0.6),\n                identity.translate(0, 0, -9.5).scale(8, 1, 11),\n                material(0.7, 0.7, 0.7, 0.2),\n              ),\n              polygons_transform(\n                cylinder(GQuad),\n                identity.translate(-1.5, 0, -21.5).scale(10.5, 1, 2),\n                material(0.7, 0.7, 0.7, 0.2),\n              ),\n              polygons_transform(\n                cylinder(GQuad),\n                identity.translate(8.8, 0, -8).scale(3, 1, 3.3),\n                material(0.7, 0.7, 0.7, 0.2),\n              ),\n            ),\n            polygons_transform(cylinder(5), identity.translate(0, 0, -2).scale(4, 3, 4), material(0.7, 0.7, 0.7, 0.2)),\n          ),\n        ),\n      );\n\n      // oscillating hex pads\n\n      const hexPadShouldOscillate = () => lerpneg(levers[8]!.$lerpValue2, levers[12]!.$lerpValue2);\n\n      integers_map(4, (i) =>\n        newModel((model) => {\n          model._update = () => {\n            const osc = hexPadShouldOscillate();\n            return identity.translate(\n              i > 2 ? (1 - osc) * 2 + osc : 0,\n              osc * Math.sin(gameTime * 1.3 + i * 1.7) * (3 + i / 3),\n              (i & 1 ? -1 : 1) * (1 - levers[8]!.$lerpValue2) * (1 - levers[12]!.$lerpValue2) * -7 +\n                max(0.05, osc) * Math.cos(gameTime * 1.3 + i * 7) * (4 - 2 * (1 - i / 3)),\n            );\n          };\n          meshAdd(\n            cylinder(6),\n            identity.translate(-14.6 - i * 4.8 - (i > 2 ? 2 : 0), -i / 2.3, -21.5).scale(2.6, 1, 2.5),\n            material(0.5 - i / 8, i / 12 + 0.5, 0.7, 0.3),\n          );\n        }),\n      );\n\n      // after the hex pads\n\n      withEditMatrix(identity.translate(-39.7, -2.5, -21.5), () => {\n        // pad with hole\n        donutWithHornsModel = newModel((model) => {\n          model._update = () => {\n            const osc = hexPadShouldOscillate();\n            return identity\n              .translate((1 - osc) * 2.5, (1 - levers[8]!.$lerpValue) * -3 + osc * Math.sin(gameTime * 0.8) * -1)\n              .rotateSelf(Math.cos(gameTime * 1.3) * (osc * 3 + 3), 0);\n          };\n          meshAdd(\n            csg_polygons(\n              csg_subtract(\n                polygons_transform(cylinder(10), identity.scale(6, 2, 6), material(0.1, 0.6, 0.5, 0.3)),\n                polygons_transform(cylinder(10), identity.scale(3.3, 6, 3.3), material(0.1, 0.6, 0.5, 0.5)),\n              ),\n            ),\n          );\n\n          // second pad\n          withEditMatrix(identity.translate(-7.5).rotate(0, 90), () => {\n            meshAdd(cylinder(15), identity.scale(3, 2.3, 3), material(0.4, 0.4, 0.4, 0.3));\n            meshAdd(cylinder(10), identity.scale(2, 2.5, 2), material(0.3, 0.8, 0.7, 0.3));\n            meshAdd(cylinder(5), identity.scale(1, 3), material(0.5, 0.5, 0.5, 0.5));\n\n            newLever(identity.translate(0, 3.4).rotate(0, 180));\n          });\n\n          // lateral horns\n          [-1, 1].map((i) =>\n            meshAdd(\n              GHorn,\n              identity\n                .rotate(-i * 90, 180, 90) //\n                .translate(0, 5)\n                .rotate(0, 0, 40) //\n                .scale(1.3, 10, 1.3), //\n              material(1, 1, 0.8, 0.2),\n            ),\n          );\n        });\n      });\n\n      // far arc gate\n      [-1, 1].map((x) => {\n        meshAdd(\n          cylinder(15, 1),\n          identity.translate(-7.5 * x, 3, -19).scale(0.8, 4, 0.8),\n          material(0.6, 0.24, 0.2, 0.5),\n        );\n\n        [7.2, 1.5].map((y) =>\n          meshAdd(\n            cylinder(15, 1),\n            identity.translate(-7.5 * x, y, -19).scale(1.1, 0.5, 1.1),\n            material(0.5, 0.24, 0.2, 0.4),\n          ),\n        );\n\n        meshAdd(\n          GHorn,\n          identity\n            .translate(x * -5, 1, -0.5)\n            .scale(1.2, 10, 1.2)\n            .rotate(0, 90 * x - 90),\n          material(1, 1, 0.8),\n        );\n\n        meshAdd(\n          csg_polygons(\n            csg_subtract(\n              polygons_transform(\n                cylinder(GQuad),\n                identity.translate(x * -4, 3.5, -0.5).scale(4, 4, 0.7),\n                material(0.5, 0.5, 0.5, 0.4),\n              ),\n              polygons_transform(cylinder(GQuad), identity.scale(3, 3, 10), material(0.6, 0.24, 0.2, 0.5)),\n              polygons_transform(\n                cylinder(30, 1),\n                identity.translate(0, 3, -5).scale(3, 4, 10).rotate(90, 0),\n                material(0.6, 0.24, 0.2, 0.5),\n              ),\n              polygons_transform(\n                cylinder(5),\n                identity\n                  .translate(x * -5.3, 7)\n                  .rotate(90, 0)\n                  .scale(1.7, 5, 1.7),\n                material(0.6, 0.24, 0.2, 0.5),\n              ),\n              polygons_transform(\n                cylinder(5),\n                identity\n                  .translate(x * -5.3, 3.8)\n                  .rotate(90, 0, 35)\n                  .scale(0.75, 5, 0.75),\n                material(0.6, 0.24, 0.2, 0.5),\n              ),\n            ),\n          ),\n          identity.translate(x, 0, -18),\n        );\n      });\n\n      // far arc gate door\n\n      newModel((model) => {\n        model._update = () => identity.translate(0, -0.1 - levers[12]!.$lerpValue * 6, -18.5).scale(0.88, 1.2);\n        return entranceBarsMesh;\n      });\n\n      const rotPlatformBase = [\n        ...polygons_transform(cylinder(28, 1), identity.scale(8, 1, 8), material(0.45, 0.45, 0.45, 0.2)),\n        ...polygons_transform(cylinder(5), identity.translate(0, 1).scale(1, 0.2), material(0.3, 0.3, 0.3, 0.2)),\n      ];\n\n      // rotating platforms\n\n      const rotPlatform = () => {\n        meshAdd(\n          csg_polygons(\n            csg_subtract(\n              polygons_transform(cylinder(28, 1), identity.translate(0, 2).scale(8, 1, 8), material(0.35, 0, 0, 0.3)),\n              polygons_transform(cylinder(GQuad), identity.scale(9, 5, 2), material(0.3, 0, 0, 0.3)),\n            ),\n          ),\n        );\n        meshAdd(rotPlatformBase);\n      };\n\n      withEditMatrix(identity.translate(20, 0.3, -9), () => {\n        firstRotatingPlatformModel = newModel((model) => {\n          model._update = () => identity.rotate(0, 40 + rotatingPlatform1Rotation);\n          meshAdd(\n            csg_polygons(\n              csg_subtract(\n                polygons_transform(cylinder(28, 1), identity.scale(8, 1, 8), material(0.45, 0.45, 0.45, 0.2)),\n                polygons_transform(\n                  cylinder(GQuad),\n                  identity.translate(0, 0, -5.5).scale(1.5, 3, 2.5),\n                  material(0.45, 0.45, 0.45, 0.2),\n                ),\n              ),\n            ),\n          );\n          meshAdd(cylinder(8), identity.translate(0, 2).scale(3, 1.5, 3), material(0.7, 0.7, 0.7, 0.1));\n          meshAdd(cylinder(5), identity.translate(0, 2).scale(1, 2), material(0.3, 0.3, 0.3, 0.2));\n        });\n      });\n\n      withEditMatrix(identity.translate(36, 0.3, -9), () => {\n        meshAdd(cylinder(GQuad), identity.translate(8).scale(0.7, 0.8, 2.5), material(0.7, 0.7, 0.7, 0.2));\n        newModel((model) => {\n          model._update = () => identity.rotate(0, rotatingPlatform2Rotation);\n          rotPlatform();\n          [-1, 1].map((x) =>\n            meshAdd(\n              GHorn,\n              identity\n                .rotate(0, 90)\n                .translate(x * -5, 1, -0.5)\n                .scale(1.2, 10, 1.2)\n                .rotate(0, 90 * x + 90),\n              material(1, 1, 0.8),\n            ),\n          );\n        });\n      });\n\n      withEditMatrix(identity.translate(52, 0.3, -9), () => {\n        meshAdd(cylinder(GQuad), identity.translate(0, 0, -8).scale(2.5, 0.8, 0.7), material(0.7, 0.7, 0.7, 0.2));\n        newModel((model) => {\n          model._update = () => identity.rotate(0, 180 - rotatingPlatform2Rotation);\n          meshAdd(\n            csg_polygons(\n              csg_subtract(\n                polygons_transform(cylinder(30, 1), identity.translate(0, 2).scale(8, 1, 8), material(0.35, 0, 0, 0.3)),\n                polygons_transform(cylinder(GQuad), identity.translate(7).scale(9, 5, 2), material(0.3, 0, 0, 0.3)),\n                polygons_transform(\n                  cylinder(GQuad),\n                  identity.translate(0, 0, 7).scale(2, 5, 9),\n                  material(0.3, 0, 0, 0.3),\n                ),\n              ),\n            ),\n          );\n          meshAdd(rotPlatformBase);\n        });\n      });\n\n      withEditMatrix(identity.translate(52, 0.3, -25), () => {\n        newModel((model) => {\n          model._update = () => identity.rotate(0, 270 + rotatingPlatform2Rotation);\n          meshAdd(\n            csg_polygons(\n              csg_subtract(\n                polygons_transform(cylinder(30, 1), identity.translate(0, 2).scale(8, 1, 8), material(0.35, 0, 0, 0.3)),\n                polygons_transform(cylinder(GQuad), identity.translate(7).scale(9, 5, 2), material(0.3, 0, 0, 0.3)),\n                polygons_transform(\n                  cylinder(GQuad),\n                  identity.translate(0, 0, -7).scale(2, 5, 9),\n                  material(0.3, 0, 0, 0.3),\n                ),\n              ),\n            ),\n          );\n          meshAdd(rotPlatformBase);\n        });\n      });\n\n      // exit from the rotating platforms\n      meshAdd(cylinder(GQuad), identity.translate(61, -0.3, -25).scale(2, 1, 2), material(0.7, 0.7, 0.7, 0.3));\n      meshAdd(cylinder(GQuad), identity.translate(68, -0.3, -25).scale(5, 1, 3), material(0.7, 0.7, 0.7, 0.3));\n\n      newLever(identity.translate(66, 2, -19).rotate(-12, 0));\n\n      meshAdd(\n        cylinder(5),\n        identity.translate(66, -0.5, -19).scale(3, 2, 4).rotate(-20, 0),\n        material(0.2, 0.5, 0.5, 0.6),\n      );\n\n      // ******** LEVEL AFTER THE ROTATING PLATFORMS ********\n\n      // jumping pads\n\n      [material(0.1, 0.55, 0.45, 0.2), material(0.2, 0.5, 0.5, 0.3), material(0.3, 0.45, 0.55, 0.4)].map((m, i) =>\n        newModel((model) => {\n          model._update = () =>\n            identity.translate(\n              0,\n              (1 - levers[13]!.$lerpValue2) * (1 - levers[14]!.$lerpValue2) * 3 +\n                lerpneg(levers[13]!.$lerpValue2, levers[14]!.$lerpValue2) * Math.sin(gameTime * 1.5 + i * 1.5) * 4,\n            );\n          meshAdd(\n            cylinder(GQuad),\n            identity.translate(76.5, -2.1 + i / 2, -25 + 7.5 * (1 - i / 30) * i).scale(3.3, 3 - i / 2, 3.45 - i / 5),\n            m,\n          );\n        }),\n      );\n    });\n\n    withEditMatrix(identity.translate(0, 0.9, 95), () => {\n      // connection\n      meshAdd(cylinder(GQuad), identity.translate(-9.7, -0.2, 8.9).scale(10, 1, 2.5), material(0.6, 0.6, 0.6, 0.2));\n\n      // middle base\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            polygons_transform(\n              cylinder(6, 0, 0, 0.3),\n              identity.translate(0, -0.92).scale(14, 2, 14),\n              material(0.8, 0.8, 0.8, 0.2),\n            ),\n            polygons_transform(cylinder(5), identity.scale3d(6), material(0.3, 0.3, 0.3, 0.5)),\n          ),\n        ),\n      );\n\n      [8, -6.1].map((y, p) =>\n        integers_map(3, (i) =>\n          meshAdd(\n            bigArc,\n            identity.translate(i * 6 - 6, y - (i & 1), 16 - 0.2 * (i & 1) - p),\n            i & 1 ? material(0.5, 0.5, 0.5, 0.3) : material(0.35, 0.35, 0.35, 0.5),\n          ),\n        ),\n      );\n\n      // horns\n      [-1, 1].map((x) =>\n        meshAdd(\n          GHorn,\n          identity\n            .translate(x * -8, 1, -10)\n            .scale(1.2, 10, 1.2)\n            .rotate(0, 90 * x + 90),\n          material(1, 1, 0.8),\n        ),\n      );\n\n      // lever pad\n\n      meshAdd(\n        cylinder(5),\n        identity.translate(0, -15.7, -13).scale(2.5, 17, 2.5).rotate(0, 35),\n        material(0.5, 0.3, 0.3, 0.4),\n      );\n\n      newLever(identity.translate(0, 1.7, -13).rotate(0, 180));\n\n      meshAdd(\n        csg_polygons(\n          csg_subtract(\n            csg_union(\n              polygons_transform(\n                cylinder(GQuad),\n                identity.translate(0, 16, 15.5).scale(12, 1, 3),\n                material(0.5, 0.3, 0.3, 0.4),\n              ),\n              polygons_transform(\n                cylinder(GQuad),\n                identity.translate(0, 16, 16).scale(3, 1, 3.8),\n                material(0.5, 0.3, 0.3, 0.4),\n              ),\n            ),\n\n            polygons_transform(\n              cylinder(5),\n              identity.translate(0, 16, 8.5).scale(5.5, 5, 5.5),\n              material(0.5, 0.3, 0.3, 0.4),\n            ),\n          ),\n        ),\n      );\n\n      newModel((model) => {\n        model._update = () => {\n          const k = Math.sin(gameTime);\n          return identity.translate(k * -2).rotate(0, 0, k * 25);\n        };\n        meshAdd(\n          cylinder(3),\n          identity.translate(0, -3, 23.8).scale(0.8, 0.8, 18).rotate(90, 0, 60),\n          material(0.5, 0.3, 0.3, 0.4),\n        );\n        [22, 30].map((z) => {\n          meshAdd(\n            cylinder(6),\n            identity.translate(0, 16, z).scale(3, 1, 2.3).rotate(0, 90),\n            material(0.7, 0.7, 0.7, 0.4),\n          );\n          meshAdd(cylinder(GQuad), identity.translate(0, 6.2, z).scale(0.5, 11, 0.5), material(0.5, 0.3, 0.3, 0.4));\n        });\n      });\n\n      meshAdd(\n        cylinder(6),\n        identity.translate(0, 16, 26).scale(2.5, 1, 2.1).rotate(0, 90),\n        material(0.5, 0.6, 0.7, 0.3),\n      );\n\n      meshAdd(cylinder(GQuad), identity.translate(0, 16, 34).scale(1.5, 1, 2), material(0.5, 0.6, 0.7, 0.3));\n      meshAdd(cylinder(7), identity.translate(0, 16.2, 38).scale(5, 1, 5), material(0.4, 0.5, 0.6, 0.4));\n\n      newModel((model) => {\n        model._update = () => {\n          let v = lerpneg((levers[14]!.$lerpValue + levers[14]!.$lerpValue2) / 2, levers[13]!.$lerpValue2);\n          v = lerpneg(v, (levers[15]!.$lerpValue + levers[15]!.$lerpValue2) / 2);\n          return identity.translate(0, v * 16, clamp01(v * 2 - 1) * 8.5);\n        };\n        meshAdd(cylinder(5), identity.scale(5, 1.1, 5), material(0.5, 0.3, 0.3, 0.4));\n        meshAdd(cylinder(5), identity.scale(5.5, 0.9, 5.5), material(0.25, 0.25, 0.25, 0.4));\n\n        newLever(identity.translate(0, 1.5, -1).rotate(0, 180));\n      });\n    });\n  });\n\n  initSouls();\n\n  if (DEBUG) {\n    console.log(levers.length + \" levers\");\n  }\n};\n","import { polygon_regular } from \"../geometry/geometry\";\nimport { identity, abs } from \"../math\";\nimport {\n  centralOscillatingPlatformModel,\n  centralSculptureMonumentModel,\n  donutWithHornsModel,\n  firstRotatingPlatformModel,\n} from \"./level\";\nimport { newSoul } from \"./objects\";\n\nexport const initSouls = () => {\n  // SOUL 0 - soul after first boat\n  newSoul(identity.translate(-0.5, 2.8, -20), [0, 0, 2.5], [0, -3, 2.5]);\n\n  // SOUL 1 - soul after first gate\n  newSoul(\n    identity.translate(0, 2.8),\n    [5, 10, 3],\n    [-5, 10, 3],\n    ...polygon_regular(18).map(({ x, z }) => [x * 7, z * 10, 4.5 - abs(x) * 2]),\n  );\n\n  // SOUL 2 - soul over the central oscillating platform in the second level\n  newSoul(identity.translate(0, 2.8, -30), [0, 0, 4.5]).$parent = centralOscillatingPlatformModel;\n\n  // SOUL 3 - soul in the central area, after the rotating hex corridor\n  newSoul(identity.translate(-100, 0.2, 75 - 20), [0, 0, 7.5], [-8, 0, 3.5], [-12, 0, 3.5], [-15, 0, 3.5]);\n\n  // SOUL 4 - soul after the central gate\n  newSoul(identity.translate(-89, 0.2, 75 + 5), [0, 0, 6]);\n\n  // SOUL 5 - soul over the central sculpture/monument\n  newSoul(\n    identity.translate(0, 11).rotate(0, 0, 10),\n    ...polygon_regular(15).map(({ x, z }) => [x * 3, z * 3, 1.5]),\n  ).$parent = centralSculptureMonumentModel;\n\n  // SOUL 6 - soul over the grid with hex holes\n  newSoul(identity.translate(-38.9, 2.9 - 11.3, 75 - 38 - 58), [0, 0, 12]);\n\n  // SOUL 7 - soul after the second boat\n  newSoul(identity.translate(8 - 123, 0.2, -12), [0, 0, 3.5]);\n\n  // SOUL 8 - soul after the pushing rods\n  newSoul(identity.translate(30 - 123, -3, -28 - 12).rotate(0, 0, 4), [0, -2, 3.5], [0, 2, 3.5]);\n\n  // SOUL 9 - soul after the hex pads, in the hex donut with horns\n  newSoul(identity.translate(-5, 4), [0, -1.2, 1.7], [0, 1.2, 1.7]).$parent = donutWithHornsModel;\n\n  // SOUL 10 - soul over the first rotating platform\n  newSoul(identity.translate(0, 3), ...polygon_regular(10).map(({ x, z }) => [x * 5.6, z * 5.6, 2.5])).$parent =\n    firstRotatingPlatformModel;\n\n  // SOUL 11 - soul in the last platform\n  newSoul(identity.translate(0, 3.9, 95), ...polygon_regular(9).map(({ x, z }) => [x * 9, z * 9, 4]));\n\n  // SOUL 12 - soul after the pendulums\n  newSoul(identity.translate(0, 19.9, 115 + 39 - 20), [0, 0, 3.5]);\n};\n","import { integers_map, max, min, identity } from \"./math\";\nimport { polygon_transform } from \"./geometry/geometry\";\nimport { mat_perspective } from \"./camera\";\n\nconst LIGHT_ROT_X = 298;\nconst LIGHT_ROT_Y = 139;\n\nif (DEBUG) {\n  const lightMatrix = /* @__PURE__ */ identity.rotate(LIGHT_ROT_X, LIGHT_ROT_Y);\n  console.log(\"light direction: \", lightMatrix.m13, lightMatrix.m23, lightMatrix.m33);\n}\n\nexport const csm_buildMatrix = /* @__PURE__ */ (\n  camera_view: DOMMatrixReadOnly,\n  nearPlane: number,\n  farPlane: number,\n  zMultiplier: number,\n): Float32Array => {\n  const roundingRadius = (farPlane - nearPlane) * 1.1;\n\n  const projViewInverse = new DOMMatrix(mat_perspective(nearPlane, farPlane)).multiplySelf(camera_view).invertSelf();\n\n  let tx = 0;\n  let ty = 0;\n  let tz = 0;\n\n  const frustumCorners = integers_map(8, (i) => {\n    const v = projViewInverse.transformPoint({\n      x: 4 & i ? 1 : -1,\n      y: 2 & i ? 1 : -1,\n      z: 1 & i ? 1 : -1,\n    });\n    // Round to reduce shimmering\n    tx -= v.x = ((roundingRadius * v.x) | 0) / (roundingRadius * v.w);\n    ty -= v.y = ((roundingRadius * v.y) | 0) / (roundingRadius * v.w);\n    tz -= v.z = ((roundingRadius * v.z) | 0) / (roundingRadius * v.w);\n    return v;\n  });\n\n  const lightViewTranslated = identity.rotate(LIGHT_ROT_X, LIGHT_ROT_Y).translateSelf(tx / 8, ty / 8, tz / 8);\n\n  let left = Infinity;\n  let right = -Infinity;\n  let bottom = Infinity;\n  let top = -Infinity;\n  let near = Infinity;\n  let far = -Infinity;\n\n  // Compute the frustum bouding box\n  polygon_transform(frustumCorners, lightViewTranslated).map(({ x, y, z }) => {\n    left = min(left, x);\n    right = max(right, x);\n    bottom = min(bottom, y);\n    top = max(top, y);\n    near = min(near, z);\n    far = max(far, z);\n  });\n\n  near *= near < 0 ? zMultiplier : 1 / zMultiplier;\n  far *= far > 0 ? zMultiplier : 1 / zMultiplier;\n\n  // Build the ortographic matrix, multiply it with the light space view matrix.\n  return identity\n    .scale(2 / (right - left), 2 / (top - bottom), 2 / (near - far))\n    .translateSelf((right + left) / -2, (top + bottom) / -2, (near + far) / 2)\n    .multiplySelf(lightViewTranslated)\n    .toFloat32Array();\n};\n","export const gl = hC.getContext(\"webgl2\")!;\n\nfor (const s in gl) {\n  (gl as any)[s[0] + [...s].reduce((p, c, i) => (p * i + c.charCodeAt(0)) % 434, 0).toString(36)] = (gl as any)[s];\n}\n\nexport const loadShader = (source: string, type: number = gl.VERTEX_SHADER): WebGLShader => {\n  const shader = gl.createShader(type)!;\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (DEBUG && !gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    throw new Error(\"An error occurred compiling the shaders: \" + gl.getShaderInfoLog(shader));\n  }\n\n  return shader;\n};\n\nexport interface WebglProgramAbstraction {\n  (name: string): WebGLUniformLocation;\n  (): void;\n}\n\nexport const initShaderProgram = (vertexShader: WebGLShader, sfsSource: string): WebglProgramAbstraction => {\n  const uniforms: Record<string, WebGLUniformLocation> = {};\n  const program = gl.createProgram()!;\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, loadShader(sfsSource, gl.FRAGMENT_SHADER));\n  gl.linkProgram(program);\n\n  if (DEBUG && !gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    throw new Error(\"Unable to initialize the shader program: \" + gl.getProgramInfoLog(program));\n  }\n\n  return (name?: string): any =>\n    name ? uniforms[name] || (uniforms[name] = gl.getUniformLocation(program, name)!) : gl.useProgram(program);\n};\n","import { allModels, type Mesh } from \"./scene\";\nimport { identity } from \"../math\";\nimport { mainMenuVisible } from \"../page\";\nimport { playerModel, playerLegsModels } from \"./objects\";\nimport { absoluteTime } from \"./world-state\";\nimport { gl } from \"../gl\";\n\nexport const renderModels = (\n  worldMatrixLoc: WebGLUniformLocation,\n  renderPlayer: 0 | 1 | boolean,\n  collisionModelIdUniformLocation?: WebGLUniformLocation,\n) => {\n  const drawMesh = ($mesh: Mesh) =>\n    gl.drawElements(gl.TRIANGLES, $mesh.$vertexCount, gl.UNSIGNED_SHORT, $mesh.$vertexOffset * 2);\n\n  if (mainMenuVisible) {\n    gl.uniformMatrix4fv(worldMatrixLoc, false, identity.rotate(0, Math.sin(absoluteTime) * 40 - 70).toFloat32Array());\n    drawMesh(playerModel.$mesh!);\n    playerLegsModels.map((legModel) => legModel.$mesh!).map(drawMesh);\n  } else {\n    for (const model of allModels) {\n      const { $modelId, $mesh } = model;\n      if (!renderPlayer && (model === playerModel || model === playerLegsModels[0] || model === playerLegsModels[1])) {\n        continue;\n      }\n      if ($mesh) {\n        if (collisionModelIdUniformLocation) {\n          gl.uniform1f(collisionModelIdUniformLocation, $modelId / 255);\n        }\n        gl.uniformMatrix4fv(worldMatrixLoc, false, model.$finalMatrix.toFloat32Array());\n        drawMesh($mesh);\n      }\n    }\n    // recursion(allModels[0]!);\n  }\n};\n","// shaders\nimport csm_vsSource from \"./shaders/csm-vertex.vert\";\nimport main_vsSource, {\n  uniformName_projectionMatrix,\n  uniformName_viewMatrix,\n  uniformName_worldMatrix,\n} from \"./shaders/main-vertex.vert\";\nimport main_fsSource, {\n  uniformName_viewPos,\n  uniformName_csm_matrix0,\n  uniformName_csm_matrix1,\n  uniformName_csm_texture0,\n  uniformName_csm_texture1,\n  uniformName_groundTexture,\n  constDef_CSM_TEXTURE_SIZE as CSM_TEXTURE_SIZE,\n  constDef_CSM_PLANE_DISTANCE as CSM_PLANE_DISTANCE,\n} from \"./shaders/main-fragment.frag\";\nimport collider_fsSource, { uniformName_modelId } from \"./shaders/collider-fragment.frag\";\nimport void_fsSource from \"./shaders/void-fragment.frag\";\nimport sky_vsSource from \"./shaders/sky-vertex.vert\";\nimport sky_fsSource, { uniformName_iResolution } from \"./shaders/sky-fragment.frag\";\n\nimport {\n  abs,\n  angle_wrap_degrees,\n  clamp01,\n  DEG_TO_RAD,\n  integers_map,\n  interpolate_with_hysteresis,\n  lerp,\n  max,\n  min,\n  identity,\n  mat_perspectiveXY,\n  angle_lerp_degrees,\n} from \"./math\";\nimport { mat_perspective, zFar, zNear, camera_position, camera_rotation } from \"./camera\";\nimport { csm_buildMatrix } from \"./csm\";\nimport { updateModels, allModels } from \"./game/scene\";\nimport { playerModel, playerLegsModels } from \"./game/objects\";\nimport { gl, initShaderProgram, loadShader } from \"./gl\";\nimport {\n  absoluteTime,\n  gameTime,\n  gameTimeDelta,\n  gameTimeUpdate,\n  lerpDamp,\n  levers,\n  loadGame,\n  player_last_pulled_lever,\n  worldStateUpdate,\n} from \"./game/world-state\";\nimport {\n  mainMenuVisible,\n  initPage,\n  player_first_person,\n  keyboard_downKeys,\n  KEY_BACK,\n  KEY_FRONT,\n  KEY_LEFT,\n  KEY_RIGHT,\n  touch_movementX,\n  touch_movementY,\n  KEY_INTERACT,\n} from \"./page\";\nimport { initTriangleBuffers } from \"./game/triangle-buffers\";\nimport { renderModels } from \"./game/render-models\";\nimport { player_position_final } from \"./game/player-position\";\nimport {\n  GAMEPAD_BUTTON_LEFT,\n  GAMEPAD_BUTTON_RIGHT,\n  GAMEPAD_BUTTON_UP,\n  GAMEPAD_BUTTON_DOWN,\n  GAMEPAD_BUTTON_A,\n  GAMEPAD_BUTTON_X,\n  GAMEPAD_BUTTON_B,\n  GAMEPAD_BUTTON_Y,\n} from \"./utils/keycodes\";\n\nconst CAMERA_PLAYER_Y_DIST = 13;\nconst CAMERA_PLAYER_Z_DIST = -18;\n\nconst PLAYER_LEGS_VELOCITY = 7 * 1.3;\n\nconst COLLISION_TEXTURE_SIZE = 128;\n\n// let debug2dctx: CanvasRenderingContext2D | null | undefined;\n\nexport const startMainLoop = (groundTextureImage: HTMLImageElement) => {\n  let oldModelId: number | undefined;\n  let currentModelIdTMinus1 = 0;\n  let currentModelId = 0;\n\n  let player_has_ground: 0 | 1 | undefined;\n  let player_respawned: 0 | 1 = 1;\n  let player_look_angle_target = 0;\n  let player_look_angle = 0;\n  let player_legs_speed = 0;\n  let player_gravity: number;\n  let player_speed: number;\n  let player_collision_velocity_x: number;\n  let player_collision_velocity_z: number;\n  let player_model_y: number;\n  const player_position_global = { x: 0, y: 0, z: 0 };\n\n  // let _gamepadStartPressed = false;\n  let _gamepadInteractPressed = false;\n\n  let camera_player_dir_x: number;\n  let camera_player_dir_y: number;\n  let camera_player_dir_z: number;\n\n  const player_collision_modelIdCounter = new Int32Array(256);\n  const collision_buffer = new Uint8Array(COLLISION_TEXTURE_SIZE * COLLISION_TEXTURE_SIZE * 4);\n\n  const mainVertexShader = loadShader(main_vsSource);\n  const csmShader = initShaderProgram(loadShader(csm_vsSource), void_fsSource);\n  const skyShader = initShaderProgram(loadShader(sky_vsSource), sky_fsSource);\n  const collisionShader = initShaderProgram(mainVertexShader, collider_fsSource);\n  const mainShader = initShaderProgram(mainVertexShader, main_fsSource);\n\n  skyShader();\n  gl.uniform1i(skyShader(uniformName_groundTexture), 3); // TEXTURE3\n\n  collisionShader();\n  gl.uniformMatrix4fv(collisionShader(uniformName_projectionMatrix), false, mat_perspectiveXY(1.4, 0.59, 0.0001, 1));\n\n  mainShader();\n  gl.uniform1i(mainShader(uniformName_groundTexture), 3); // TEXTURE3\n\n  const collision_frameBuffer = gl.createFramebuffer()!;\n  const collision_renderBuffer = gl.createRenderbuffer();\n  const collision_texture = gl.createTexture()!;\n\n  const csm_render = integers_map(2, (csmSplit: number) => {\n    let lightSpaceMatrix: Float32Array;\n    const texture = gl.createTexture()!;\n    const frameBuffer = gl.createFramebuffer();\n    const lightSpaceMatrixLoc = mainShader(csmSplit ? uniformName_csm_matrix1 : uniformName_csm_matrix0);\n\n    mainShader();\n    gl.uniform1i(mainShader(csmSplit ? uniformName_csm_texture1 : uniformName_csm_texture0), csmSplit);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n\n    // Disable rendering to the color buffer, we just need the depth buffer\n    gl.drawBuffers([gl.NONE]);\n    gl.readBuffer(gl.NONE);\n\n    gl.activeTexture(gl.TEXTURE0 + csmSplit);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, texture, 0);\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.DEPTH_COMPONENT24,\n      CSM_TEXTURE_SIZE,\n      CSM_TEXTURE_SIZE,\n      0,\n      gl.DEPTH_COMPONENT,\n      gl.UNSIGNED_INT,\n      null,\n    );\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, gl.LEQUAL); // Can be LESS or LEQUAL\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\n    return (matrix?: Float32Array) => {\n      if (matrix) {\n        lightSpaceMatrix = matrix;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n        gl.invalidateFramebuffer(gl.FRAMEBUFFER, [gl.DEPTH_ATTACHMENT]);\n        gl.clear(gl.DEPTH_BUFFER_BIT);\n        gl.uniformMatrix4fv(csmShader(uniformName_viewMatrix), false, lightSpaceMatrix);\n        renderModels(csmShader(uniformName_worldMatrix), !player_first_person);\n      } else {\n        gl.uniformMatrix4fv(lightSpaceMatrixLoc, false, lightSpaceMatrix);\n      }\n    };\n  });\n\n  initTriangleBuffers();\n\n  gl.enable(gl.DEPTH_TEST); // Enable depth testing\n  gl.enable(gl.CULL_FACE); // Don't render triangle backs\n\n  gl.clearDepth(1); // Clear everything. Default value is 1\n  gl.cullFace(gl.BACK); // Default value is already BACK\n  gl.depthFunc(gl.LEQUAL); // LEQUAL to make sky works\n  gl.clearColor(0, 0, 0, 1);\n\n  // Collision framebuffer\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n  gl.bindRenderbuffer(gl.RENDERBUFFER, collision_renderBuffer);\n\n  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE);\n  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, collision_renderBuffer);\n\n  gl.activeTexture(gl.TEXTURE3);\n  gl.bindTexture(gl.TEXTURE_2D, collision_texture);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, collision_texture, 0);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    gl.RGB,\n    COLLISION_TEXTURE_SIZE,\n    COLLISION_TEXTURE_SIZE,\n    0,\n    gl.RGB,\n    gl.UNSIGNED_BYTE,\n    null,\n  );\n\n  // Ground texture\n\n  gl.bindTexture(gl.TEXTURE_2D, gl.createTexture());\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1024, 1024, 0, gl.RGBA, gl.UNSIGNED_BYTE, groundTextureImage);\n  gl.generateMipmap(gl.TEXTURE_2D);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\n  const player_respawn = () => {\n    const { $parent, $matrix } = levers[player_last_pulled_lever]!;\n\n    const { x, y, z } = $matrix!.transformPoint({ x: 0, y: 8, z: -3 });\n\n    player_position_final.x = player_position_global.x = x;\n    player_position_final.y = player_position_global.y = player_model_y = y;\n    player_position_final.z = player_position_global.z = z;\n\n    player_speed = 0;\n    player_gravity = 0;\n    player_collision_velocity_x = 0;\n    player_collision_velocity_z = 0;\n    player_has_ground = 0;\n\n    player_respawned = 1;\n    currentModelIdTMinus1 = currentModelId = $parent?.$modelId || 1;\n  };\n\n  const updatePlayer = () => {\n    let player_collision_x = 0;\n    let player_collision_z = 0;\n\n    const doVerticalCollisions = () => {\n      let maxModelIdCount = 0;\n      let nextModelId = 0;\n      player_collision_modelIdCounter.fill(0);\n\n      let lines = 0;\n      let grav = 0;\n      let hasGround: 0 | 1 = 0;\n      for (let y = 0; y < 31; ++y) {\n        let up = 0;\n        const yindex = y * (COLLISION_TEXTURE_SIZE * 4);\n        for (let x = 0; x < COLLISION_TEXTURE_SIZE - 0; x++) {\n          let i = yindex + x * 4;\n          const a = (collision_buffer[i]! + collision_buffer[i + 1]!) / 255;\n          i = collision_buffer[i + 2]!;\n          if (x > 14 && x < COLLISION_TEXTURE_SIZE - 14) {\n            up += a;\n          }\n          if (i && a) {\n            const count = player_collision_modelIdCounter[i]! + 1;\n            player_collision_modelIdCounter[i] = count;\n            if (count >= maxModelIdCount) {\n              maxModelIdCount = count;\n              nextModelId = i;\n            }\n          }\n        }\n        if (up < 3 && y > 5) {\n          grav += y / 32;\n        }\n        if (up > 3) {\n          if (y > 7) {\n            lines += y / 15;\n          }\n          hasGround = 1;\n        }\n      }\n\n      if (nextModelId) {\n        hasGround = 1;\n      }\n\n      if (player_respawned) {\n        // keep the previous modelId until the player touch ground\n        if (nextModelId) {\n          player_respawned = 0;\n          currentModelId = nextModelId;\n        }\n      } else {\n        currentModelId = nextModelId || currentModelIdTMinus1;\n      }\n      currentModelIdTMinus1 = nextModelId;\n\n      player_has_ground = hasGround;\n      player_gravity = lerpDamp(player_gravity, hasGround ? 6.5 : 8, 4);\n\n      // push up and gravity\n      player_position_global.y +=\n        lines / 41 - (hasGround ? 1 : player_gravity) * (grav / 41) * player_gravity * gameTimeDelta;\n    };\n\n    const doHorizontalCollisions = () => {\n      for (let y = 32; y < COLLISION_TEXTURE_SIZE; y += 2) {\n        let front = 0;\n        let back = 0;\n        let left = 0;\n        let right = 0;\n        const yindex = y * (COLLISION_TEXTURE_SIZE * 4);\n        for (let x = (y >> 1) & 1; x < COLLISION_TEXTURE_SIZE; x += 2) {\n          const i1 = yindex + x * 4;\n          const i2 = yindex + (COLLISION_TEXTURE_SIZE - 1 - x) * 4;\n          const dist1 = collision_buffer[i1]! / 255;\n          const dist2 = collision_buffer[i2 + 1]! / 255;\n\n          const t = 1 - abs(2 * (x / (COLLISION_TEXTURE_SIZE - 1)) - 1);\n\n          if (x > 10 && x < COLLISION_TEXTURE_SIZE - 10) {\n            const dist1Opposite = collision_buffer[i2]! / 255;\n            front = max(front, max(dist1 * t, dist1 * dist1Opposite * 2));\n            const dist2Opposite = collision_buffer[i1 + 1]! / 255;\n            back = max(back, max(dist2 * t, dist2 * dist2Opposite));\n          }\n\n          if (x < COLLISION_TEXTURE_SIZE / 2 - 10 || x > COLLISION_TEXTURE_SIZE / 2 + 10) {\n            const xdist = ((1 - t) * max(dist1, dist2)) / 3;\n            if (xdist > 0.001) {\n              if (x < COLLISION_TEXTURE_SIZE / 2 && left < xdist) {\n                left = xdist;\n              } else if (x > COLLISION_TEXTURE_SIZE / 2 && right < xdist) {\n                right = xdist;\n              }\n            }\n          }\n        }\n\n        const dx = right - left;\n        const dz = back - front;\n\n        if (abs(dx) > abs(player_collision_x)) {\n          player_collision_x = dx;\n        }\n        if (abs(dz) > abs(player_collision_z)) {\n          player_collision_z = dz;\n        }\n      }\n    };\n\n    NO_INLINE(doVerticalCollisions)();\n    NO_INLINE(doHorizontalCollisions)();\n\n    let strafe = (keyboard_downKeys[KEY_LEFT] ? 1 : 0) + (keyboard_downKeys[KEY_RIGHT] ? -1 : 0) + touch_movementX;\n    let forward = (keyboard_downKeys[KEY_FRONT] ? 1 : 0) + (keyboard_downKeys[KEY_BACK] ? -1 : 0) + touch_movementY;\n\n    const gamepad = navigator.getGamepads()[0];\n    if (gamepad) {\n      const { buttons, axes } = gamepad;\n      const getGamepadButtonState = (index: number) => buttons[index]?.pressed || (buttons[index]?.value as any) > 0;\n\n      const interactButtonPressed =\n        getGamepadButtonState(GAMEPAD_BUTTON_A) ||\n        getGamepadButtonState(GAMEPAD_BUTTON_X) ||\n        getGamepadButtonState(GAMEPAD_BUTTON_Y) ||\n        getGamepadButtonState(GAMEPAD_BUTTON_B);\n      if (interactButtonPressed !== _gamepadInteractPressed) {\n        _gamepadInteractPressed = interactButtonPressed;\n        if (_gamepadInteractPressed) {\n          keyboard_downKeys[KEY_INTERACT] = 1;\n        }\n      }\n\n      strafe +=\n        (abs(-axes[0]!) > 0.2 ? -axes[0]! : 0) +\n        (getGamepadButtonState(GAMEPAD_BUTTON_LEFT) ? 1 : 0) +\n        (getGamepadButtonState(GAMEPAD_BUTTON_RIGHT) ? -1 : 0);\n      forward +=\n        (abs(-axes[1]!) > 0.2 ? -axes[1]! : 0) +\n        (getGamepadButtonState(GAMEPAD_BUTTON_UP) ? 1 : 0) +\n        (getGamepadButtonState(GAMEPAD_BUTTON_DOWN) ? -1 : 0);\n\n      // const startPressed = getGamepadButtonState(GAMEPAD_BUTTON_START);\n      // if (_gamepadStartPressed !== startPressed && startPressed && game_play_clicked_once) {\n      //   setMainMenuVisible(!mainMenuVisible);\n      // }\n\n      // _gamepadStartPressed = startPressed;\n\n      if (player_first_person) {\n        if (abs(axes[2]!) > 0.3) {\n          camera_rotation.y += axes[2]! * 80 * gameTimeDelta;\n        }\n        if (abs(axes[3]!) > 0.3) {\n          camera_rotation.x += axes[3]! * 80 * gameTimeDelta;\n        }\n      }\n    }\n\n    if (abs(forward) < 0.05) {\n      forward = 0;\n    }\n    if (abs(strafe) < 0.05) {\n      strafe = 0;\n    }\n\n    const angle = Math.atan2(forward, strafe);\n    const amount = clamp01(Math.hypot(forward, strafe));\n\n    strafe = amount * Math.cos(angle);\n    forward = amount * Math.sin(angle);\n\n    const playerSpeedCollision = clamp01(1 - max(abs(player_collision_x), abs(player_collision_z)) * 5);\n\n    if (!currentModelId) {\n      player_collision_x += player_collision_velocity_x * playerSpeedCollision * gameTimeDelta;\n      player_collision_z += player_collision_velocity_z * playerSpeedCollision * gameTimeDelta;\n    }\n    player_collision_velocity_x = lerpDamp(player_collision_velocity_x, 0, player_has_ground ? 8 : 4);\n    player_collision_velocity_z = lerpDamp(player_collision_velocity_z, 0, player_has_ground ? 8 : 4);\n\n    player_speed = lerpDamp(\n      player_speed,\n      player_has_ground ? (strafe || forward ? (player_has_ground ? 7 : 4) : 0) * playerSpeedCollision : 0,\n      player_has_ground ? (playerSpeedCollision > 0.1 ? 10 : strafe || forward ? 5 : 7) : 1,\n    );\n\n    const movementRadians = player_first_person ? camera_rotation.y * DEG_TO_RAD : Math.PI;\n    const s = Math.sin(movementRadians) * player_speed * gameTimeDelta;\n    const c = Math.cos(movementRadians) * player_speed * gameTimeDelta;\n    player_collision_x -= strafe * c - forward * s;\n    player_collision_z -= strafe * s + forward * c;\n\n    const referenceMatrix =\n      (currentModelId && allModels[currentModelId - 1]!.$attachPlayer && allModels[currentModelId - 1]!.$finalMatrix) ||\n      identity;\n    const inverseReferenceRotationMatrix = referenceMatrix.inverse();\n    inverseReferenceRotationMatrix.m41 = 0;\n    inverseReferenceRotationMatrix.m42 = 0;\n    inverseReferenceRotationMatrix.m43 = 0;\n    ({ x: player_collision_x, z: player_collision_z } = inverseReferenceRotationMatrix.transformPoint({\n      x: player_collision_x,\n      z: player_collision_z,\n      w: 0,\n    }));\n\n    player_position_global.x += player_collision_x;\n    player_position_global.z += player_collision_z;\n\n    if (currentModelId !== oldModelId) {\n      if (DEBUG) {\n        console.log(\"modelId: \" + oldModelId + \" -> \" + currentModelId);\n      }\n\n      oldModelId = currentModelId;\n\n      const { x, y, z } = referenceMatrix.inverse().transformPoint(player_position_final);\n      player_position_global.x = x;\n      player_position_global.y = y;\n      player_position_global.z = z;\n    }\n\n    const oldx = player_position_final.x;\n    const oldz = player_position_final.z;\n\n    const { x, y, z } = referenceMatrix.transformPoint(player_position_global);\n    player_position_final.x = x;\n    player_position_final.y = y;\n    player_position_final.z = z;\n\n    const ydiff = abs(player_model_y - y);\n    player_model_y = lerpDamp(player_model_y, y + 0.1, ydiff * 50 + 5);\n\n    if (currentModelId) {\n      player_collision_velocity_x = (player_position_final.x - oldx) / gameTimeDelta;\n      player_collision_velocity_z = (player_position_final.z - oldz) / gameTimeDelta;\n    }\n\n    if (strafe || forward) {\n      player_look_angle_target = 90 - angle / DEG_TO_RAD;\n    }\n    player_look_angle = angle_lerp_degrees(player_look_angle, player_look_angle_target, gameTimeDelta * 8);\n    player_legs_speed = lerp(player_legs_speed, amount, gameTimeDelta * 10);\n  };\n\n  const mainLoop = (globalTime: number) => {\n    let camera_view: DOMMatrixReadOnly = identity;\n\n    requestAnimationFrame(mainLoop);\n\n    gameTimeUpdate(globalTime);\n\n    // *** COLLISIONS ***\n\n    if (gameTimeDelta > 0) {\n      // *** COLLISION from the previos frame ***\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n      gl.readPixels(0, 0, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE, gl.RGBA, gl.UNSIGNED_BYTE, collision_buffer);\n      gl.invalidateFramebuffer(gl.FRAMEBUFFER, [gl.COLOR_ATTACHMENT0]);\n\n      NO_INLINE(updatePlayer)();\n\n      updateModels();\n\n      // if (DEBUG) {\n      //   const debugCanvas = document.getElementById(\"debug-canvas\") as HTMLCanvasElement;\n\n      //   const buf = new Uint8ClampedArray(COLLISION_TEXTURE_SIZE * COLLISION_TEXTURE_SIZE * 4);\n\n      //   if (debugCanvas) {\n      //     for (let y = 0; y < COLLISION_TEXTURE_SIZE; ++y) {\n      //       for (let x = 0; x < COLLISION_TEXTURE_SIZE; ++x) {\n      //         const i = ((COLLISION_TEXTURE_SIZE - y) * COLLISION_TEXTURE_SIZE + x) * 4;\n      //         const r = collision_buffer[i]!;\n      //         const g = collision_buffer[i + 1]!;\n      //         const b = collision_buffer[i + 2]!;\n\n      //         buf[(y * COLLISION_TEXTURE_SIZE + x) * 4] = r;\n      //         buf[(y * COLLISION_TEXTURE_SIZE + x) * 4 + 1] = g;\n      //         buf[(y * COLLISION_TEXTURE_SIZE + x) * 4 + 2] = b ? 200 : 0;\n      //         buf[(y * COLLISION_TEXTURE_SIZE + x) * 4 + 3] = 255;\n      //       }\n      //     }\n\n      //     const imgdata = new ImageData(buf, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE);\n\n      //     if (!debug2dctx) {\n      //       debug2dctx = debugCanvas.getContext(\"2d\")!;\n      //     }\n      //     debug2dctx.putImageData(imgdata, 0, 0, 0, 0, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE);\n      //   }\n      // }\n    }\n\n    if (gameTimeDelta > 0) {\n      if (!DEBUG_CAMERA) {\n        camera_player_dir_x = interpolate_with_hysteresis(\n          camera_player_dir_x,\n          player_position_final.x,\n          0.5,\n          gameTimeDelta,\n        );\n        camera_player_dir_y = interpolate_with_hysteresis(\n          camera_player_dir_y,\n          player_position_final.y,\n          2,\n          gameTimeDelta,\n        );\n        camera_player_dir_z = interpolate_with_hysteresis(\n          camera_player_dir_z,\n          player_position_final.z,\n          0.5,\n          gameTimeDelta,\n        );\n\n        if (player_first_person) {\n          const interpolationSpeed = player_respawned * 200;\n          camera_position.x = lerpDamp(camera_position.x, player_position_final.x, 18 + interpolationSpeed);\n          camera_position.y = lerpDamp(camera_position.y, player_position_final.y + 1.5, 15 + interpolationSpeed);\n          camera_position.z = lerpDamp(camera_position.z, player_position_final.z, 18 + interpolationSpeed);\n          camera_rotation.x = max(min(camera_rotation.x, 87), -87);\n        } else {\n          camera_position.x = interpolate_with_hysteresis(camera_position.x, camera_player_dir_x, 1, gameTimeDelta * 2);\n          camera_position.y = interpolate_with_hysteresis(\n            camera_position.y,\n            camera_player_dir_y + CAMERA_PLAYER_Y_DIST + player_respawned * 15,\n            4,\n            gameTimeDelta * 2,\n          );\n          camera_position.z = interpolate_with_hysteresis(\n            camera_position.z,\n            camera_player_dir_z + CAMERA_PLAYER_Z_DIST,\n            1,\n            gameTimeDelta * 2,\n          );\n\n          const viewDirDiffz = camera_position.z - camera_player_dir_z;\n          if (abs(viewDirDiffz) > 1) {\n            const viewDirDiffx = camera_position.x - camera_player_dir_x;\n            const viewDirDiffy = camera_position.y - camera_player_dir_y;\n            camera_rotation.y = 270 + Math.atan2(viewDirDiffz, viewDirDiffx) / DEG_TO_RAD;\n            camera_rotation.x = 90 - Math.atan2(Math.hypot(viewDirDiffz, viewDirDiffx), viewDirDiffy) / DEG_TO_RAD;\n          }\n        }\n      }\n      camera_rotation.y = angle_wrap_degrees(camera_rotation.y);\n\n      if (gameTimeDelta > 0) {\n        worldStateUpdate();\n        keyboard_downKeys[KEY_INTERACT] = 0;\n\n        if (player_position_final.y < (player_position_final.x < -25 || player_position_final.z < 109 ? -25 : -9)) {\n          // Player fell in lava\n          player_respawn();\n        }\n      }\n    }\n\n    camera_view = mainMenuVisible\n      ? identity\n          .rotate(-20, -90)\n          .invertSelf()\n          .translateSelf(4.5, -2, -3.2 + clamp01(hC.clientWidth / 1000))\n      : identity\n          .rotate(-camera_rotation.x, -camera_rotation.y, -camera_rotation.z)\n          .invertSelf()\n          .translateSelf(-camera_position.x, -camera_position.y, -camera_position.z);\n\n    if (gameTimeDelta > 0) {\n      // *** COLLISION RENDERER ***\n\n      collisionShader();\n\n      // first collision render\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n      gl.viewport(0, 0, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE);\n      gl.colorMask(true, false, true, false);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      gl.uniformMatrix4fv(\n        collisionShader(uniformName_viewMatrix),\n        false,\n        identity\n          .rotate(0, 180)\n          .invertSelf()\n          .translateSelf(-player_position_final.x, -player_position_final.y, 0.3 - player_position_final.z)\n          .toFloat32Array(),\n      );\n      renderModels(collisionShader(uniformName_worldMatrix), 0, collisionShader(uniformName_modelId));\n\n      // second collision render\n\n      gl.colorMask(false, true, false, false);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      gl.colorMask(false, true, true, false);\n      gl.uniformMatrix4fv(\n        collisionShader(uniformName_viewMatrix),\n        false,\n        identity\n          .translate(-player_position_final.x, -player_position_final.y, -player_position_final.z - 0.3)\n          .toFloat32Array(),\n      );\n      renderModels(collisionShader(uniformName_worldMatrix), 0, collisionShader(uniformName_modelId));\n      gl.colorMask(true, true, true, true);\n\n      // Special handling for the second boat (lever 7) - the boat must be on the side of the map the player is\n      if (currentModelId === 1) {\n        levers[9]!.$value = player_position_final.x < -15 && player_position_final.z < 0 ? 1 : 0;\n      }\n    }\n\n    // *** CASCADED SHADOWMAPS ***\n\n    csmShader();\n\n    gl.viewport(0, 0, CSM_TEXTURE_SIZE, CSM_TEXTURE_SIZE);\n\n    csm_render[0]!(csm_buildMatrix(camera_view, zNear, CSM_PLANE_DISTANCE, 10));\n    csm_render[1]!(csm_buildMatrix(camera_view, CSM_PLANE_DISTANCE, zFar, 11));\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    // *** MAIN RENDER ***\n\n    mainShader();\n\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    gl.uniformMatrix4fv(mainShader(uniformName_projectionMatrix), false, mat_perspective(zNear, zFar));\n    gl.uniformMatrix4fv(mainShader(uniformName_viewMatrix), false, camera_view.toFloat32Array());\n    gl.uniform3f(mainShader(uniformName_viewPos), camera_position.x, camera_position.y, camera_position.z);\n\n    csm_render[0]!();\n    csm_render[1]!();\n\n    renderModels(mainShader(uniformName_worldMatrix), !player_first_person);\n\n    // *** SKY RENDER ***\n\n    skyShader();\n\n    gl.uniform3f(skyShader(uniformName_iResolution), gl.drawingBufferWidth, gl.drawingBufferHeight, absoluteTime);\n    if (mainMenuVisible) {\n      gl.uniform3f(skyShader(uniformName_viewPos), 0, 0, 0);\n    } else {\n      gl.uniform3f(skyShader(uniformName_viewPos), camera_position.x, camera_position.y, camera_position.z);\n    }\n    gl.uniformMatrix4fv(skyShader(uniformName_viewMatrix), false, camera_view.inverse().toFloat32Array());\n\n    gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 0);\n  };\n\n  playerModel._update = () =>\n    identity\n      .translate(player_position_final.x, player_model_y, player_position_final.z)\n      .rotateSelf(0, player_look_angle);\n\n  playerLegsModels.map((model, i) => {\n    model._update = () =>\n      identity\n        .translate(\n          0,\n          player_legs_speed * clamp01(Math.sin(gameTime * PLAYER_LEGS_VELOCITY + Math.PI * i - Math.PI / 2) * 0.45),\n        )\n        .rotateSelf(\n          player_legs_speed * Math.sin(gameTime * PLAYER_LEGS_VELOCITY + Math.PI * i) * (0.25 / DEG_TO_RAD),\n          0,\n        );\n  });\n\n  loadGame();\n\n  updateModels();\n\n  NO_INLINE(initPage)();\n\n  player_respawn();\n\n  camera_position.x = camera_player_dir_x = player_position_final.x;\n  camera_position.y = (camera_player_dir_y = player_position_final.y) + CAMERA_PLAYER_Y_DIST;\n  camera_position.z = (camera_player_dir_z = player_position_final.z) + CAMERA_PLAYER_Z_DIST;\n\n  requestAnimationFrame(mainLoop);\n};\n","export const GAMEPAD_BUTTON_UP = 12;\n\nexport const GAMEPAD_BUTTON_DOWN = 13;\n\nexport const GAMEPAD_BUTTON_LEFT = 14;\n\nexport const GAMEPAD_BUTTON_RIGHT = 15;\n\nexport const GAMEPAD_BUTTON_START = 9;\n\nexport const GAMEPAD_BUTTON_A = 1;\n\nexport const GAMEPAD_BUTTON_B = 0;\n\nexport const GAMEPAD_BUTTON_X = 3;\n\nexport const GAMEPAD_BUTTON_Y = 2;\n\nexport const GAMEPAD_BUTTON_LB = 4;\n\nexport const GAMEPAD_BUTTON_RB = 5;\n\nexport const KEY_CODE_EMPTY = \"\";\n\nexport const KEY_CODE_AGAIN = \"Again\";\n\nexport const KEY_CODE_ALT_LEFT = \"AltLeft\";\n\nexport const KEY_CODE_ALT_RIGHT = \"AltRight\";\n\nexport const KEY_CODE_ARROW_DOWN = \"ArrowDown\";\n\nexport const KEY_CODE_ARROW_LEFT = \"ArrowLeft\";\n\nexport const KEY_CODE_ARROW_RIGHT = \"ArrowRight\";\n\nexport const KEY_CODE_ARROW_UP = \"ArrowUp\";\n\nexport const KEY_CODE_AUDIO_VOLUME_DOWN = \"AudioVolumeDown\";\n\nexport const KEY_CODE_AUDIO_VOLUME_MUTE = \"AudioVolumeMute\";\n\nexport const KEY_CODE_AUDIO_VOLUME_UP = \"AudioVolumeUp\";\n\nexport const KEY_CODE_BACKQUOTE = \"Backquote\";\n\nexport const KEY_CODE_BACKSLASH = \"Backslash\";\n\nexport const KEY_CODE_BACKSPACE = \"Backspace\";\n\nexport const KEY_CODE_BRACKET_LEFT = \"BracketLeft\";\n\nexport const KEY_CODE_BRACKET_RIGHT = \"BracketRight\";\n\nexport const KEY_CODE_BROWSER_BACK = \"BrowserBack\";\n\nexport const KEY_CODE_BROWSER_FAVORITES = \"BrowserFavorites\";\n\nexport const KEY_CODE_BROWSER_FORWARD = \"BrowserForward\";\n\nexport const KEY_CODE_BROWSER_HOME = \"BrowserHome\";\n\nexport const KEY_CODE_BROWSER_REFRESH = \"BrowserRefresh\";\n\nexport const KEY_CODE_BROWSER_SEARCH = \"BrowserSearch\";\n\nexport const KEY_CODE_BROWSER_STOP = \"BrowserStop\";\n\nexport const KEY_CODE_CANCEL = \"Cancel\";\n\nexport const KEY_CODE_CAPS_LOCK = \"CapsLock\";\n\nexport const KEY_CODE_COMMA = \"Comma\";\n\nexport const KEY_CODE_CONTEXT_MENU = \"ContextMenu\";\n\nexport const KEY_CODE_CONTROL_LEFT = \"ControlLeft\";\n\nexport const KEY_CODE_CONTROL_RIGHT = \"ControlRight\";\n\nexport const KEY_CODE_CONVERT = \"Convert\";\n\nexport const KEY_CODE_COPY = \"Copy\";\n\nexport const KEY_CODE_CUT = \"Cut\";\n\nexport const KEY_CODE_DELETE = \"Delete\";\n\nexport const KEY_CODE_DIGIT_0 = \"Digit0\";\n\nexport const KEY_CODE_DIGIT_1 = \"Digit1\";\n\nexport const KEY_CODE_DIGIT_2 = \"Digit2\";\n\nexport const KEY_CODE_DIGIT_3 = \"Digit3\";\n\nexport const KEY_CODE_DIGIT_4 = \"Digit4\";\n\nexport const KEY_CODE_DIGIT_5 = \"Digit5\";\n\nexport const KEY_CODE_DIGIT_6 = \"Digit6\";\n\nexport const KEY_CODE_DIGIT_7 = \"Digit7\";\n\nexport const KEY_CODE_DIGIT_8 = \"Digit8\";\n\nexport const KEY_CODE_DIGIT_9 = \"Digit9\";\n\nexport const KEY_CODE_EJECT = \"Eject\";\n\nexport const KEY_CODE_END = \"End\";\n\nexport const KEY_CODE_ENTER = \"Enter\";\n\nexport const KEY_CODE_EQUAL = \"Equal\";\n\nexport const KEY_CODE_ESCAPE = \"Escape\";\n\nexport const KEY_CODE_F1 = \"F1\";\n\nexport const KEY_CODE_F2 = \"F2\";\n\nexport const KEY_CODE_F3 = \"F3\";\n\nexport const KEY_CODE_F4 = \"F4\";\n\nexport const KEY_CODE_F5 = \"F5\";\n\nexport const KEY_CODE_F6 = \"F6\";\n\nexport const KEY_CODE_F7 = \"F7\";\n\nexport const KEY_CODE_F8 = \"F8\";\n\nexport const KEY_CODE_F9 = \"F9\";\n\nexport const KEY_CODE_F10 = \"F10\";\n\nexport const KEY_CODE_F11 = \"F11\";\n\nexport const KEY_CODE_F12 = \"F12\";\n\nexport const KEY_CODE_F13 = \"F13\";\n\nexport const KEY_CODE_F14 = \"F14\";\n\nexport const KEY_CODE_F15 = \"F15\";\n\nexport const KEY_CODE_F16 = \"F16\";\n\nexport const KEY_CODE_F17 = \"F17\";\n\nexport const KEY_CODE_F18 = \"F18\";\n\nexport const KEY_CODE_F19 = \"F19\";\n\nexport const KEY_CODE_F20 = \"F20\";\n\nexport const KEY_CODE_F21 = \"F21\";\n\nexport const KEY_CODE_F22 = \"F22\";\n\nexport const KEY_CODE_F23 = \"F23\";\n\nexport const KEY_CODE_F24 = \"F24\";\n\nexport const KEY_CODE_FIND = \"Find\";\n\nexport const KEY_CODE_FN = \"Fn\";\n\nexport const KEY_CODE_HANGUL_MODE = \"HangulMode\";\n\nexport const KEY_CODE_HANJA = \"Hanja\";\n\nexport const KEY_CODE_HELP = \"Help\";\n\nexport const KEY_CODE_HOME = \"Home\";\n\nexport const KEY_CODE_INSERT = \"Insert\";\n\nexport const KEY_CODE_INTL_BACKSLASH = \"IntlBackslash\";\n\nexport const KEY_CODE_INTL_RO = \"IntlRo\";\n\nexport const KEY_CODE_INTL_YEN = \"IntlYen\";\n\nexport const KEY_CODE_KANA_MODE = \"KanaMode\";\n\nexport const KEY_CODE_KEY_A = \"KeyA\";\n\nexport const KEY_CODE_KEY_B = \"KeyB\";\n\nexport const KEY_CODE_KEY_C = \"KeyC\";\n\nexport const KEY_CODE_KEY_D = \"KeyD\";\n\nexport const KEY_CODE_KEY_E = \"KeyE\";\n\nexport const KEY_CODE_KEY_F = \"KeyF\";\n\nexport const KEY_CODE_KEY_G = \"KeyG\";\n\nexport const KEY_CODE_KEY_H = \"KeyH\";\n\nexport const KEY_CODE_KEY_I = \"KeyI\";\n\nexport const KEY_CODE_KEY_J = \"KeyJ\";\n\nexport const KEY_CODE_KEY_K = \"KeyK\";\n\nexport const KEY_CODE_KEY_L = \"KeyL\";\n\nexport const KEY_CODE_KEY_M = \"KeyM\";\n\nexport const KEY_CODE_KEY_N = \"KeyN\";\n\nexport const KEY_CODE_KEY_O = \"KeyO\";\n\nexport const KEY_CODE_KEY_P = \"KeyP\";\n\nexport const KEY_CODE_KEY_Q = \"KeyQ\";\n\nexport const KEY_CODE_KEY_R = \"KeyR\";\n\nexport const KEY_CODE_KEY_S = \"KeyS\";\n\nexport const KEY_CODE_KEY_T = \"KeyT\";\n\nexport const KEY_CODE_KEY_U = \"KeyU\";\n\nexport const KEY_CODE_KEY_V = \"KeyV\";\n\nexport const KEY_CODE_KEY_W = \"KeyW\";\n\nexport const KEY_CODE_KEY_X = \"KeyX\";\n\nexport const KEY_CODE_KEY_Y = \"KeyY\";\n\nexport const KEY_CODE_KEY_Z = \"KeyZ\";\n\nexport const KEY_CODE_LANG_1 = \"Lang1\";\n\nexport const KEY_CODE_LANG_2 = \"Lang2\";\n\nexport const KEY_CODE_LAUNCH_APP_1 = \"LaunchApp1\";\n\nexport const KEY_CODE_LAUNCH_APP_2 = \"LaunchApp2\";\n\nexport const KEY_CODE_LAUNCH_MAIL = \"LaunchMail\";\n\nexport const KEY_CODE_LAUNCH_MEDIA_PLAYER = \"LaunchMediaPlayer\";\n\nexport const KEY_CODE_MEDIA_PLAY_PAUSE = \"MediaPlayPause\";\n\nexport const KEY_CODE_MEDIA_SELECT = \"MediaSelect\";\n\nexport const KEY_CODE_MEDIA_STOP = \"MediaStop\";\n\nexport const KEY_CODE_MEDIA_TRACK_NEXT = \"MediaTrackNext\";\n\nexport const KEY_CODE_MEDIA_TRACK_PREVIOUS = \"MediaTrackPrevious\";\n\nexport const KEY_CODE_META_LEFT = \"MetaLeft\";\n\nexport const KEY_CODE_META_RIGHT = \"MetaRight\";\n\nexport const KEY_CODE_MINUS = \"Minus\";\n\nexport const KEY_CODE_NON_CONVERT = \"NonConvert\";\n\nexport const KEY_CODE_NUM_LOCK = \"NumLock\";\n\nexport const KEY_CODE_NUMPAD_0 = \"Numpad0\";\n\nexport const KEY_CODE_NUMPAD_1 = \"Numpad1\";\n\nexport const KEY_CODE_NUMPAD_2 = \"Numpad2\";\n\nexport const KEY_CODE_NUMPAD_3 = \"Numpad3\";\n\nexport const KEY_CODE_NUMPAD_4 = \"Numpad4\";\n\nexport const KEY_CODE_NUMPAD_5 = \"Numpad5\";\n\nexport const KEY_CODE_NUMPAD_6 = \"Numpad6\";\n\nexport const KEY_CODE_NUMPAD_7 = \"Numpad7\";\n\nexport const KEY_CODE_NUMPAD_8 = \"Numpad8\";\n\nexport const KEY_CODE_NUMPAD_9 = \"Numpad9\";\n\nexport const KEY_CODE_NUMPAD_ADD = \"NumpadAdd\";\n\nexport const KEY_CODE_NUMPAD_CHANGE_SIGN = \"NumpadChangeSign\";\n\nexport const KEY_CODE_NUMPAD_COMMA = \"NumpadComma\";\n\nexport const KEY_CODE_NUMPAD_DECIMAL = \"NumpadDecimal\";\n\nexport const KEY_CODE_NUMPAD_DIVIDE = \"NumpadDivide\";\n\nexport const KEY_CODE_NUMPAD_ENTER = \"NumpadEnter\";\n\nexport const KEY_CODE_NUMPAD_EQUAL = \"NumpadEqual\";\n\nexport const KEY_CODE_NUMPAD_MULTIPLY = \"NumpadMultiply\";\n\nexport const KEY_CODE_NUMPAD_PAREN_LEFT = \"NumpadParenLeft\";\n\nexport const KEY_CODE_NUMPAD_PAREN_RIGHT = \"NumpadParenRight\";\n\nexport const KEY_CODE_NUMPAD_SUBTRACT = \"NumpadSubtract\";\n\nexport const KEY_CODE_OPEN = \"Open\";\n\nexport const KEY_CODE_OSLEFT = \"OSLeft\";\n\nexport const KEY_CODE_OSRIGHT = \"OSRight\";\n\nexport const KEY_CODE_PAGE_DOWN = \"PageDown\";\n\nexport const KEY_CODE_PAGE_UP = \"PageUp\";\n\nexport const KEY_CODE_PASTE = \"Paste\";\n\nexport const KEY_CODE_PAUSE = \"Pause\";\n\nexport const KEY_CODE_PERIOD = \"Period\";\n\nexport const KEY_CODE_POWER = \"Power\";\n\nexport const KEY_CODE_PRINT_SCREEN = \"PrintScreen\";\n\nexport const KEY_CODE_PROPS = \"Props\";\n\nexport const KEY_CODE_QUOTE = \"Quote\";\n\nexport const KEY_CODE_SCROLL_LOCK = \"ScrollLock\";\n\nexport const KEY_CODE_SELECT = \"Select\";\n\nexport const KEY_CODE_SEMICOLON = \"Semicolon\";\n\nexport const KEY_CODE_SHIFT_LEFT = \"ShiftLeft\";\n\nexport const KEY_CODE_SHIFT_RIGHT = \"ShiftRight\";\n\nexport const KEY_CODE_SLASH = \"Slash\";\n\nexport const KEY_CODE_SLEEP = \"Sleep\";\n\nexport const KEY_CODE_SPACE = \"Space\";\n\nexport const KEY_CODE_TAB = \"Tab\";\n\nexport const KEY_CODE_UNDO = \"Undo\";\n\nexport const KEY_CODE_UNIDENTIFIED = \"Unidentified\";\n\nexport const KEY_CODE_VOLUME_DOWN = \"VolumeDown\";\n\nexport const KEY_CODE_VOLUME_MUTE = \"VolumeMute\";\n\nexport const KEY_CODE_VOLUME_UP = \"VolumeUp\";\n\nexport const KEY_CODE_WAKE_UP = \"WakeUp\";\n\nexport type KEY_CODE =\n  | \"\"\n  | \"Again\"\n  | \"AltLeft\"\n  | \"AltRight\"\n  | \"ArrowDown\"\n  | \"ArrowLeft\"\n  | \"ArrowRight\"\n  | \"ArrowUp\"\n  | \"AudioVolumeDown\"\n  | \"AudioVolumeMute\"\n  | \"AudioVolumeUp\"\n  | \"Backquote\"\n  | \"Backslash\"\n  | \"Backspace\"\n  | \"BracketLeft\"\n  | \"BracketRight\"\n  | \"BrowserBack\"\n  | \"BrowserFavorites\"\n  | \"BrowserForward\"\n  | \"BrowserHome\"\n  | \"BrowserRefresh\"\n  | \"BrowserSearch\"\n  | \"BrowserStop\"\n  | \"Cancel\"\n  | \"CapsLock\"\n  | \"Comma\"\n  | \"ContextMenu\"\n  | \"ControlLeft\"\n  | \"ControlRight\"\n  | \"Convert\"\n  | \"Copy\"\n  | \"Cut\"\n  | \"Delete\"\n  | \"Digit0\"\n  | \"Digit1\"\n  | \"Digit2\"\n  | \"Digit3\"\n  | \"Digit4\"\n  | \"Digit5\"\n  | \"Digit6\"\n  | \"Digit7\"\n  | \"Digit8\"\n  | \"Digit9\"\n  | \"Eject\"\n  | \"End\"\n  | \"Enter\"\n  | \"Equal\"\n  | \"Escape\"\n  | \"F1\"\n  | \"F2\"\n  | \"F3\"\n  | \"F4\"\n  | \"F5\"\n  | \"F6\"\n  | \"F7\"\n  | \"F8\"\n  | \"F9\"\n  | \"F10\"\n  | \"F11\"\n  | \"F12\"\n  | \"F13\"\n  | \"F14\"\n  | \"F15\"\n  | \"F16\"\n  | \"F17\"\n  | \"F18\"\n  | \"F19\"\n  | \"F20\"\n  | \"F21\"\n  | \"F22\"\n  | \"F23\"\n  | \"F24\"\n  | \"Find\"\n  | \"Fn\"\n  | \"HangulMode\"\n  | \"Hanja\"\n  | \"Help\"\n  | \"Home\"\n  | \"Insert\"\n  | \"IntlBackslash\"\n  | \"IntlRo\"\n  | \"IntlYen\"\n  | \"KanaMode\"\n  | \"KeyA\"\n  | \"KeyB\"\n  | \"KeyC\"\n  | \"KeyD\"\n  | \"KeyE\"\n  | \"KeyF\"\n  | \"KeyG\"\n  | \"KeyH\"\n  | \"KeyI\"\n  | \"KeyJ\"\n  | \"KeyK\"\n  | \"KeyL\"\n  | \"KeyM\"\n  | \"KeyN\"\n  | \"KeyO\"\n  | \"KeyP\"\n  | \"KeyQ\"\n  | \"KeyR\"\n  | \"KeyS\"\n  | \"KeyT\"\n  | \"KeyU\"\n  | \"KeyV\"\n  | \"KeyW\"\n  | \"KeyX\"\n  | \"KeyY\"\n  | \"KeyZ\"\n  | \"Lang1\"\n  | \"Lang2\"\n  | \"LaunchApp1\"\n  | \"LaunchApp2\"\n  | \"LaunchMail\"\n  | \"LaunchMediaPlayer\"\n  | \"MediaPlayPause\"\n  | \"MediaSelect\"\n  | \"MediaStop\"\n  | \"MediaTrackNext\"\n  | \"MediaTrackPrevious\"\n  | \"MetaLeft\"\n  | \"MetaRight\"\n  | \"Minus\"\n  | \"NonConvert\"\n  | \"NumLock\"\n  | \"Numpad0\"\n  | \"Numpad1\"\n  | \"Numpad2\"\n  | \"Numpad3\"\n  | \"Numpad4\"\n  | \"Numpad5\"\n  | \"Numpad6\"\n  | \"Numpad7\"\n  | \"Numpad8\"\n  | \"Numpad9\"\n  | \"NumpadAdd\"\n  | \"NumpadChangeSign\"\n  | \"NumpadComma\"\n  | \"NumpadDecimal\"\n  | \"NumpadDivide\"\n  | \"NumpadEnter\"\n  | \"NumpadEqual\"\n  | \"NumpadMultiply\"\n  | \"NumpadParenLeft\"\n  | \"NumpadParenRight\"\n  | \"NumpadSubtract\"\n  | \"Open\"\n  | \"OSLeft\"\n  | \"OSRight\"\n  | \"PageDown\"\n  | \"PageUp\"\n  | \"Paste\"\n  | \"Pause\"\n  | \"Period\"\n  | \"Power\"\n  | \"PrintScreen\"\n  | \"Props\"\n  | \"Quote\"\n  | \"ScrollLock\"\n  | \"Select\"\n  | \"Semicolon\"\n  | \"ShiftLeft\"\n  | \"ShiftRight\"\n  | \"Slash\"\n  | \"Sleep\"\n  | \"Space\"\n  | \"Tab\"\n  | \"Undo\"\n  | \"Unidentified\"\n  | \"VolumeDown\"\n  | \"VolumeMute\"\n  | \"VolumeUp\"\n  | \"WakeUp\";\n","#version 300 es\n\nlayout(location = 0) in vec4 aPosition;\nlayout(location = 1) in vec3 aNormal;\nlayout(location = 2) in vec4 aColor;\n\nout vec4 VNormal;\nout vec4 FragPos;\nout vec4 UntransformedFragPos;\nout lowp vec4 Color;\n\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 worldMatrix;\n\nvoid main() {\n  Color = aColor;\n  UntransformedFragPos = aPosition;\n  FragPos = worldMatrix * aPosition;\n  gl_Position = projectionMatrix * (viewMatrix * FragPos);\n  VNormal = (worldMatrix * vec4(aNormal, 0));\n}\n","#version 300 es\nprecision highp float;\n\nin highp vec4 VNormal;\nin highp vec4 FragPos;\n\nuniform mat4 viewMatrix;\nuniform float modelId;\n\nout vec4 O;\n\nvoid main() {\n  vec4 v = viewMatrix * FragPos;\n  float z = modelId > 0. ? 1. - min(abs(v.z / v.w), 1.) : 0.;\n  O = vec4(vec2(z * (gl_FragCoord.y > 31. ? 1. : abs(VNormal.y))), z > 0. ? modelId : 0., 1);\n}\n","#version 300 es\nprecision highp float;\n\n// as printed by the console.log on csm.ts\nconst vec3 lightDir = vec3(-0.6560590289905073, 0.6663690071652679, -0.3543146860766681);\n\n#define CSM_TEXTURE_SIZE 2048.\n\n#define zNear 0.3\n#define CSM_PLANE_DISTANCE 55.\n#define zFar 177.\n\nin highp vec4 VNormal;\nin highp vec4 FragPos;\nin highp vec4 UntransformedFragPos;\nin lowp vec4 Color;\n\nuniform vec3 viewPos;\nuniform mat4 viewMatrix;\nuniform mat4 csm_matrix0;\nuniform mat4 csm_matrix1;\n\nuniform highp sampler2DShadow csm_texture0;\nuniform highp sampler2DShadow csm_texture1;\nuniform highp sampler2D groundTexture;\n\nout vec4 O;\n\nvoid main() {\n  vec3 normal = normalize(VNormal.xyz);\n\n  vec3 tex = Color.w *\n    (texture(groundTexture, UntransformedFragPos.yz * .035) * normal.x +\n     texture(groundTexture, UntransformedFragPos.xz * .035) * normal.y +\n     texture(groundTexture, UntransformedFragPos.xy * .035) * normal.z)\n      .xyz;\n\n  // Displacement map\n  normal = normalize(normal.xyz + tex * .5);\n\n  float lambert = dot(normal, lightDir);\n  float shadow = 1.;\n  float depthValue = abs((viewMatrix * FragPos).z);\n\n  // Gets the fragment position in light space\n  vec4 csmCoords = (depthValue < CSM_PLANE_DISTANCE ? csm_matrix0 : csm_matrix1) * FragPos;\n\n  // perform perspective divide and transform to [0,1] range\n  csmCoords = (csmCoords / csmCoords.w) * .5 + .5;\n\n  if (csmCoords.z < 1.) { // Only if inside far plane\n    shadow = 0.;\n\n    // TODO: Shadow bias could be computed based on normal and light, something like 0.0003 * (1. -\n    // clamp(dot(normal, lightDir), 0., 1.))\n\n    for (float x = -1.; x <= 1.; ++x) {\n      for (float y = -1.; y <= 1.; ++y) {\n        vec3 c = vec3(\n          csmCoords.xy + vec2(x, y) / CSM_TEXTURE_SIZE,\n          csmCoords.z -\n            // shadow bias\n            (1. / CSM_TEXTURE_SIZE / 2.8)\n        );\n        shadow += depthValue < CSM_PLANE_DISTANCE ? texture(csm_texture0, c) : texture(csm_texture1, c);\n      }\n    }\n    shadow /= 9.;\n  }\n\n  vec3 rgbColor = Color.xyz * (1. - tex.x);\n\n  O = vec4(\n    // ambient\n    vec3(.09, .05, .1) * rgbColor +\n      // diffuse\n      rgbColor * (max(0., lambert) * .5 + (rgbColor * lambert * lambert * vec3(.5, .45, .3))) * (shadow * .7 + .3) +\n      // lava light\n      rgbColor * max(dot(normal, normalize(vec3(.1, -1, -.1))), 0.) * max(0., 2. - FragPos.y) * (vec3(.6, .1, 0) / 14.) +\n      // specular\n      vec3(.6, .6, .5) * pow(max(0., dot(normalize(FragPos.xyz - viewPos), reflect(lightDir, normal))), 35.) * shadow,\n    1\n  );\n}\n","#version 300 es\nprecision highp float;\n\nuniform vec3 iResolution;\nuniform vec3 viewPos;\nuniform mat4 viewMatrix;\n\nuniform highp sampler2D groundTexture;\n\nout vec4 O;\n\n#define gameTime iResolution.z\n\n/* 1 / Math.tan(fieldOfViewRadians / 2) */\nconst float fieldOfViewAmount = 1.73205;\n\nvoid main() {\n  vec2 fragCoord = (gl_FragCoord.xy / iResolution.xy) * 2. - 1.;\n  vec3 ray =\n    normalize(viewMatrix * vec4(fragCoord.x * -(iResolution.x / iResolution.y), -fragCoord.y, fieldOfViewAmount, 0.)).xyz;\n  float rayTracedLavalDistance = (-32. - viewPos.y) / ray.y;\n  float multiplier = (1. - clamp(abs(rayTracedLavalDistance / 9999.), 0., 1.));\n\n  O = vec4(0, 0, 0, 1);\n\n  if (multiplier > 0.01) {\n    if (rayTracedLavalDistance > 0.) {\n      // Render sky\n      float c = cos(gameTime / 30.), s = sin(gameTime / 30.);\n      ray.xz *= mat2(c, s, -s, c);\n      vec3 absRay = abs(ray);\n      O.xyz = vec3(dot(vec2(texture(groundTexture, ray.xy).z, texture(groundTexture, ray.yz * 2.).z), absRay.zx) * absRay.y);\n\n    } else {\n      // Render raytraced lava\n      ray = viewPos + ray * rayTracedLavalDistance;\n      O.x = multiplier *=\n        0.9 - texture(groundTexture, ray.xz / 150. + vec2(sin(ray.z / 35. + gameTime), cos(ray.x / 25. + gameTime)) / 80.).y;\n      O.y = multiplier * multiplier * multiplier;\n    }\n  }\n}\n","#version 300 es\n\nin vec4 aPosition;\n\nuniform mat4 viewMatrix;\nuniform mat4 worldMatrix;\n\nvoid main() { gl_Position = viewMatrix * (worldMatrix * aPosition); }\n","#version 300 es\n// Do nothing.\nvoid main() {}\n","#version 300 es\n\nin vec4 aPosition;\n\nvoid main() { gl_Position = vec4(aPosition.xy, 1, 1); }\n","import { _triangleIndices, _vertexPositions, _vertexNormals, _vertexColors, allModels } from \"./scene\";\nimport { gl } from \"../gl\";\n\nexport const initTriangleBuffers = () => {\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(_triangleIndices), gl.STATIC_DRAW);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(_vertexPositions), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ARRAY_BUFFER, new Int16Array(_vertexNormals), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(1, 3, gl.SHORT, true, 0, 0);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ARRAY_BUFFER, new Uint32Array(_vertexColors), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(2, 4, gl.UNSIGNED_BYTE, true, 0, 0);\n\n  gl.enableVertexAttribArray(0);\n  gl.enableVertexAttribArray(1);\n  gl.enableVertexAttribArray(2);\n\n  if (DEBUG) {\n    console.log(\n      \"models: \" + allModels.length,\n      \"vertices: \" +\n        _vertexPositions.length / 3 +\n        \" indices:\" +\n        _triangleIndices.length +\n        \" triangles:\" +\n        _triangleIndices.length / 3,\n    );\n  }\n};\n","import \"./index.css\";\n\nimport \"./dev-tools/dev-main\";\n\nif (DEBUG) {\n  console.time(\"boot\");\n}\n\nimport groundTextureSvg from \"./groundTexture.svg\";\n\nimport { buildWorld } from \"./game/level\";\nimport { startMainLoop } from \"./main-loop\";\nimport { song_numChannels } from \"./music/song\";\nimport { soundbox_generate } from \"./music/music-player\";\nimport { loadSong } from \"./music/audio-context\";\nimport { initPlayerModel } from \"./game/objects\";\n\nsetTimeout(() => {\n  let songLoad = 0;\n  let thingsToLoad = 1 + song_numChannels;\n  const image = new Image();\n\n  if (DEBUG) {\n    console.time(\"SVG load\");\n    console.time(\"song load\");\n    console.time(\"load\");\n  }\n\n  const onThingLoaded = () => {\n    h4.innerHTML += \".\";\n    if (!--thingsToLoad) {\n      if (DEBUG) {\n        console.timeEnd(\"load\");\n      }\n      startMainLoop(image);\n    }\n  };\n\n  const asyncLoadSongChannels = () => {\n    if (songLoad < song_numChannels) {\n      soundbox_generate(songLoad++);\n      setTimeout(asyncLoadSongChannels);\n    } else {\n      loadSong();\n      if (DEBUG) {\n        console.timeEnd(\"song load\");\n      }\n    }\n    onThingLoaded();\n  };\n\n  image.onload = image.onerror = () => {\n    onThingLoaded();\n    if (DEBUG) {\n      console.timeEnd(\"SVG load\");\n    }\n  };\n  image.src = groundTextureSvg;\n\n  if (DEBUG) {\n    for (let i = 0; i < song_numChannels; ++i) {\n      onThingLoaded();\n    }\n  } else {\n    setTimeout(asyncLoadSongChannels, 50);\n  }\n\n  NO_INLINE(buildWorld)();\n\n  initPlayerModel();\n\n  if (DEBUG) {\n    console.timeEnd(\"boot\");\n  }\n});\n"],"names":["groundTextureSvg","btoa","DEG_TO_RAD","Math","PI","identity","min","a","b","max","abs","n","clamp01","t","lerp","from","to","lerpneg","v","angle_wrap_degrees","degrees","angle_wrap_radians","radians","atan2","sin","cos","angle_lerp_degrees","a0","a1","da","angle_lerp","interpolate_with_hysteresis","previous","desired","hysteresis","sign","integers_map","fn","Array","i","mat_perspectiveXY","mx","my","near","far","vec3_dot","x","y","z","vec3_distance","hypot","plane_fromPolygon","polygon","at","w","material","g","r","polygon_color","color","smooth","$smooth","$color","polygon_transform","m","map","p","transformPoint","vec3_transform","polygons_transform","polygons","segments","elongate","cylinder_sides","btm","top","btmi","length","cylinder","topSize","polygon_regular","points","scale3d","bottom","translate","reverse","sphere","slices","stacks","vertexFunc","j","vertex","push","CSGPolygon_splitSpanning","plane","jd","fpoints","$flipped","iv","$polygon","id","jv","bpoints","$front","$parent","$back","CSGPolygon_split","d","csg_tree_addPolygon","node","$polygons","csg_tree_clipNode","anode","bnode","polygonPlaneFlipped","result","recursion","csg_tree_each","csg_tree","reduce","prev","csg_tree_flip","root","csg_union","inputs","polygonsToAdd","pp","csg_subtract","csg_polygons","tree","Map","add","found","byParent","get","allPolygons","delete","set","flipped","GQuad","GHorn","matrices","HORN_STACKS","rotate","scale","flat","boatPolygons","bigArc","_meshFirstIndex","currentEditModel","_polygon","allModels","withEditMatrix","matrix","editMatrixStack","multiply","pop","_triangleIndices","_vertexPositions","_vertexNormals","_vertexColors","_pendingPolygonsStack","_vertexMap","_vertexInts","getVertex","_vertexFloats","key","_vertexIntsSmooth","index","size","meshAdd","transform","meshEnd","pendingPolygons","$vertexOffset","$vertexCount","newModel","previousModel","model","$initialMatrix","$finalMatrix","$modelId","$attachPlayer","modelMesh","$mesh","updateModels","update","_update","updateResult","Int32Array","buffer","Float32Array","camera_position","camera_rotation","mat_perspective","hC","clientHeight","clientWidth","fieldOfViewAmount","song_instruments","getSegmentNumWords","song_rowLen","song_numWords","getnotefreq","osc_sin","value","osc_square","osc_saw","osc_tri","v2","soundbox_mixbuffer","audioContext","AudioContext","songAudioSource","createBufferSource","music_on","touch_movementX","touch_movementY","mainMenuVisible","player_first_person","keyboard_downKeys","updateMusicOnState","disconnect","connect","destination","b4","innerHTML","setMainMenuVisible","document","exitPointerLock","start","initPage","touchStartCameraRotX","touchStartCameraRotY","touchStartTime","cameraRotTouch","cameraPosTouch","pageClicked","handleResize","width","innerWidth","height","innerHeight","hidden","b1","onclick","b2","b3","confirm","localStorage","LOCAL_STORAGE_SAVED_GAME_KEY","location","reload","b5","requestPointerLock","onvisibilitychange","onresize","onblur","onkeydown","onkeyup","code","target","type","repeat","pressed","body","mapped","onmousemove","movementX","movementY","ontouchstart","e","touch","changedTouches","pageX","absoluteTime","ontouchmove","pageY","identifier","ontouchend","preventDefault","diff","oncontextmenu","gameTime","souls_collected_count","_messageEndTime","player_last_pulled_lever","rotatingPlatform1Rotation","rotatingPlatform2Rotation","rotatingHexCorridorRotation","game_completed","firstBoatLerp","secondBoatLerp","_globalTime","lerpDamp","speed","exp","gameTimeDelta","getItemValue","$value","levers","souls","showMessage","message","duration","h4","clearMessage","updateCollectedSoulsCounter","acc","cur","h3","saveGame","JSON","stringify","player_position_final","playerLegsModels","playerModel","firstBoatModel","newLever","$model","lever","$lerpValue","$lerpValue2","point","$matrix","leverIndex","onPlayerPullLever","leverMeshes","translateSelf","getBoatAnimationMatrix","rotateSelf","newSoul","walkingPath","dirX","dirZ","wasInside","randAngle","lookAngle","velocity","prevX","prevZ","soul","circles","circle","targetX","targetZ","soulZ","animationMatrix","contextualVelocity","isInside","mindist","Infinity","c","distance","circleSDF","x1","z1","w1","ax","az","magnitude","angle","random","soulX","skewXSelf","skewYSelf","soulPos","soulMesh","slice","handleMaterial","bm","theta","phixz","osc","GHOST_STACKS","centralOscillatingPlatformModel","centralSculptureMonumentModel","donutWithHornsModel","firstRotatingPlatformModel","buildWorld","getOscillationAmount","blackPlatform","freq","amplitude","pz","entranceBarsMesh","skewX","level3Oscillation","hexCorridorPolygons","scaleSelf","shouldOscillate","skewY","shouldPushRods","pushingRod","hexPadShouldOscillate","rotPlatformBase","k","csm_buildMatrix","camera_view","nearPlane","farPlane","zMultiplier","tx","ty","tz","roundingRadius","projViewInverse","DOMMatrix","invertSelf","frustumCorners","lightViewTranslated","left","right","multiplySelf","toFloat32Array","loadShader","source","shader","gl","initShaderProgram","vertexShader","sfsSource","program","name","uniforms","s","charCodeAt","renderModels","worldMatrixLoc","renderPlayer","collisionModelIdUniformLocation","drawMesh","legModel","startMainLoop","groundTextureImage","currentModelIdTMinus1","currentModelId","player_respawned","player_look_angle_target","player_look_angle","player_legs_speed","_gamepadInteractPressed","oldModelId","player_has_ground","player_gravity","player_speed","player_collision_velocity_z","player_model_y","camera_player_dir_y","camera_player_dir_z","player_position_global","player_collision_modelIdCounter","player_respawn","player_collision_velocity_x","updatePlayer","player_collision_x","player_collision_z","NO_INLINE","maxModelIdCount","nextModelId","lines","grav","hasGround","fill","y2","up","yindex","x2","COLLISION_TEXTURE_SIZE","collision_buffer","count","front","i1","i2","dist1","dist2","dist1Opposite","dist2Opposite","back","xdist","dx","dz","strafe","forward","gamepad","navigator","getGamepads","getGamepadButtonState","buttons","axes","interactButtonPressed","amount","playerSpeedCollision","movementRadians","referenceMatrix","inverseReferenceRotationMatrix","inverse","m41","m42","m43","z2","oldx","oldz","ydiff","mainLoop","globalTime","requestAnimationFrame","time","dt","gameTimeUpdate","collision_frameBuffer","camera_player_dir_x","interpolationSpeed","viewDirDiffz","viewDirDiffx","viewDirDiffy","shouldRotatePlatforms","collisionShader","csm_render","drawingBufferHeight","mainShader","skyShader","drawingBufferWidth","Uint8Array","mainVertexShader","csmShader","collision_renderBuffer","collision_texture","csmSplit","lightSpaceMatrix","texture","frameBuffer","lightSpaceMatrixLoc","Int16Array","Uint32Array","savedLevers","savedSouls","savedLastPulledLever","savedGameTime","savedSecondBoatLerp","parse","setTimeout","songLoad","onThingLoaded","thingsToLoad","image","asyncLoadSongChannels","channelIndex","mixIndex","OSC1_VOL","OSC1_SEMI","OSC1_XENV","OSC2_VOL","OSC2_SEMI","OSC2_XENV","NOISE_VOL","ENV_ATTACK","ENV_SUSTAIN","ENV_RELEASE","ENV_EXP_DECAY","LFO_FREQ","FX_FREQ","FX_RESONANCE","FX_DRIVE","FX_PAN_AMT","FX_PAN_FREQ","FX_DELAY_AMT","FX_DELAY_TIME","LFO_AMT","COLUMNS","low","band","f","high","filterActive","noteCache","createNote","note","c1","c2","o1t","o2t","OSC1_WAVEFORM","OSC2_WAVEFORM","noteBuf","j1","j2","chnBuf","lfoFreq","panFreq","dly","row","cp","rowStartSample","col","rsample","lsample","soundbox_generate","createBuffer","data","getChannelData","loop","loadSong","Image","onload","onerror","src","eye"],"mappings":"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"}