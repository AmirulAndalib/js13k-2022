{"version":3,"file":"index.js","sources":["../../app/groundTexture.svg","../../app/game/models.ts","../../app/math/math.ts","../../app/math/matrix.ts","../../app/math/matrix-transforms.ts","../../app/math/integers-map.ts","../../app/geometry/polygon.ts","../../app/geometry/geometry.ts","../../app/math/vectors.ts","../../app/geometry/csg.ts","../../app/game/game-time.ts","../../app/game/world-state.ts","../../app/utils/keycodes.ts","../../app/music/audio-context.ts","../../app/shaders/main-fragment.frag","../../app/math/matrix-perspective.ts","../../app/page.ts","../../app/geometry/material.ts","../../app/game/models-matrices.ts","../../app/game/models-factory.ts","../../app/game/level.ts","../../app/shaders/csm-vertex.vert","../../app/shaders/main-vertex.vert","../../app/shaders/collider-fragment.frag","../../app/shaders/void-fragment.frag","../../app/shaders/sky-vertex.vert","../../app/shaders/sky-fragment.frag","../../app/gl.ts","../../app/player.ts","../../app/shaders-utils.ts","../../app/game/models-render.ts","../../app/main-loop.ts","../../app/game/triangle-buffers.ts","../../app/music/song.ts","../../app/load-step.ts","../../app/music/music-player.ts","../../app/index.ts"],"sourcesContent":["export default \"__VITE_ASSET__b9f78ae4__\"","import type { Polygon } from \"../geometry/polygon\";\nimport type { Vec3 } from \"../math/vectors\";\n\nexport interface Model {\n  readonly $matrix: DOMMatrix;\n  $modelId: number;\n  $kind: MODEL_KIND;\n  $polygons: Polygon[] | null;\n  _update?: (matrix: DOMMatrix) => void;\n  $vertexBegin?: number;\n  $vertexEnd?: number;\n}\n\nexport interface Lever {\n  $value: 0 | 1;\n  $lerpValue: number;\n  $lerpValue2: number;\n  $parent: Model;\n  _locMatrix: () => DOMMatrixReadOnly;\n  _update: () => void;\n}\n\nexport interface Soul {\n  $value: 0 | 1;\n  readonly _update: () => void;\n}\n\nexport type Circle = [number, number, number];\n\nexport const allModels: Model[] = [];\n\n/** Fixed number of levers */\n\nexport const levers: Lever[] = [];\n\n/** Fixed number of souls */\nexport const SOULS_COUNT = 13;\n\n/** Fixed number of levers */\nexport const LEVERS_COUNT = 16;\n\nexport const souls: Soul[] = [];\n\nexport const player_position_final: Vec3 = {\n  x: 0,\n  y: 0,\n  z: 0,\n};\n\nexport const MODEL_KIND_MESH = 0;\n\nexport const MODEL_KIND_GAME = 1;\n\nexport const MODEL_KIND_GAME_NO_ATTACH_PLAYER = 2;\n\nexport type MODEL_KIND = typeof MODEL_KIND_MESH | typeof MODEL_KIND_GAME | typeof MODEL_KIND_GAME_NO_ATTACH_PLAYER;\n\nexport const MODEL_ID_STATIC_WORLD = 1;\n\nexport const MODEL_ID_FIRST_BOAT = 2;\n\nexport const MODEL_ID_ROTATING_PLATFORM = 28;\n\nexport const MODEL_ID_PLAYER_BODY = 37;\n\nexport const MODEL_ID_PLAYER_LEG0 = 38;\n\nexport const MODEL_ID_PLAYER_LEG1 = 39;\n\nexport const MODEL_ID_LEVER = 40;\n\nexport const MODEL_ID_SOUL_COLLISION = 41;\n\nexport const MODEL_ID_SOUL = 42;\n","if (DEBUG) {\n  window.NO_INLINE = (fn) => fn;\n}\n\n/** Amount to be multiplied to an angle in degrees to obtain an angle in radians, approximately 0.017453292519943295 */\nexport const DEG_TO_RAD = /* @__PURE__ */ Math.PI / 180;\n\nexport const abs = /* @__PURE__ */ NO_INLINE((a: number) => (a < 0 ? -a : a));\n\nexport const min = /* @__PURE__ */ NO_INLINE((a: number, b: number) => (a < b ? a : b));\n\nexport const max = /* @__PURE__ */ NO_INLINE((a: number, b: number) => (a > b ? a : b));\n\nexport const threshold = /* @__PURE__ */ (value: number | undefined, amount: number) =>\n  abs(value!) > amount ? value! : 0;\n\nexport const clamp = /* @__PURE__ */ (value: number, minValue: number = 0, maxValue: number = 1) =>\n  value < minValue ? minValue : value > maxValue ? maxValue : value;\n\nexport const angle_wrap_degrees = /* @__PURE__ */ (degrees: number): number =>\n  Math.atan2(Math.sin(degrees * DEG_TO_RAD), Math.cos(degrees * DEG_TO_RAD)) / DEG_TO_RAD;\n\nexport const angle_lerp_degrees = /* @__PURE__ */ (a0: number, a1: number, t: number) => {\n  const da = (a1 - a0) % 360;\n  return a0 + (((2 * da) % 360) - da) * clamp(t) || 0;\n};\n\n/** Linear interpolation */\nexport const lerp =\n  /* @__PURE__ */\n  (a: number, b: number, t: number) => (t <= 0 ? a : t >= 1 ? b : a + (b - a) * t) || 0;\n\nexport const lerpneg = (v: number, t: number) => /* @__PURE__ */ {\n  v = clamp(v);\n  return lerp(v, 1 - v, t);\n};\n","export const float32Array16Temp = new Float32Array(16);\n\nexport const identity: DOMMatrixReadOnly = new DOMMatrix();\n\nexport const tempMatrix = new DOMMatrix();\n\nexport const matrixToArray = (\n  $matrix: DOMMatrixReadOnly,\n  output: Float32Array | number[] = float32Array16Temp,\n  index: number = 0,\n) => {\n  index *= 16;\n  output[index++] = $matrix.m11;\n  output[index++] = $matrix.m12;\n  output[index++] = $matrix.m13;\n  output[index++] = $matrix.m14;\n  output[index++] = $matrix.m21;\n  output[index++] = $matrix.m22;\n  output[index++] = $matrix.m23;\n  output[index++] = $matrix.m24;\n  output[index++] = $matrix.m31;\n  output[index++] = $matrix.m32;\n  output[index++] = $matrix.m33;\n  output[index++] = $matrix.m34;\n  output[index++] = $matrix.m41;\n  output[index++] = $matrix.m42;\n  output[index++] = $matrix.m43;\n  output[index] = $matrix.m44;\n  return output;\n};\n\nexport const matrixCopy = (source: DOMMatrixReadOnly = identity, target: DOMMatrix = tempMatrix) => {\n  target.m11 = source.m11;\n  target.m12 = source.m12;\n  target.m13 = source.m13;\n  target.m14 = source.m14;\n  target.m21 = source.m21;\n  target.m22 = source.m22;\n  target.m23 = source.m23;\n  target.m24 = source.m24;\n  target.m31 = source.m31;\n  target.m32 = source.m32;\n  target.m33 = source.m33;\n  target.m34 = source.m34;\n  target.m41 = source.m41;\n  target.m42 = source.m42;\n  target.m43 = source.m43;\n  target.m44 = source.m44;\n  return target;\n};\n","import { identity } from \"./matrix\";\n\nexport const translation = NO_INLINE((x: number, y?: number, z?: number) => identity.translate(x, y, z));\n\nexport const rotation = NO_INLINE((x: number, y?: number, z?: number) => identity.rotate(x, y, z));\n\nexport const scaling = NO_INLINE((x: number, y?: number, z?: number) => identity.scale(x, y, z));\n","export const integers_map = <T>(n: number, fn: (i: number) => T) => Array.from(Array(n), (_, i) => fn(i));\n","import type { Vec3, Vec3Optional } from \"../math/vectors\";\n\nexport interface Polygon<TVec3 = Vec3> extends Array<TVec3> {\n  /** Polygon material */\n  $color?: number | undefined;\n\n  /** Smooth normals? */\n  $smooth?: 0 | 1 | undefined;\n}\n\nexport const vec3_transform = /* @__PURE__ */ ({ x, y, z }: Readonly<Vec3Optional>, m: DOMMatrixReadOnly): Vec3 => {\n  ({ x, y, z } = m.transformPoint({ x, y, z }));\n  return { x, y, z };\n};\n\nexport const polygon_color = (polygon: Polygon, color: number | undefined, smooth?: 0 | 1 | undefined): Polygon => {\n  polygon.$smooth = smooth;\n  polygon.$color = color;\n  return polygon;\n};\n\nexport const polygon_transform = /* @__PURE__ */ (\n  polygon: Polygon<Readonly<Vec3Optional>>,\n  m: DOMMatrixReadOnly,\n  color: number | undefined = polygon.$color,\n): Polygon =>\n  polygon_color(\n    polygon.map((p) => vec3_transform(p, m)),\n    color,\n    polygon.$smooth,\n  );\n\nexport const polygons_transform = /* @__PURE__ */ (\n  polygons: Polygon<Readonly<Vec3Optional>>[],\n  m: DOMMatrixReadOnly,\n  color?: number | undefined,\n) => polygons.map((polygon) => polygon_transform(polygon, m, color));\n","import { abs } from \"../math/math\";\nimport { translation } from \"../math/matrix-transforms\";\nimport { integers_map } from \"../math/integers-map\";\nimport { polygon_color, polygon_transform, type Polygon } from \"./polygon\";\nimport type { Vec3 } from \"../math/vectors\";\n\nexport const GQuad = /* @__PURE__ */ [\n  { x: -1, z: 1 },\n  { x: 1, z: 1 },\n  { x: 1, z: -1 },\n  { x: -1, z: -1 },\n];\n\n/**\n * Creates a regular polygon\n * The polygon will face up (normal 0, -1, 0).\n */\nexport const polygon_regular = /* @__PURE__ */ (segments: number, elongate: number = 0): Polygon =>\n  integers_map(segments, (i) => {\n    const z = Math.cos(Math.PI * 2 * (i / segments));\n    return {\n      x: Math.sin(Math.PI * 2 * (i / segments)),\n      y: 0,\n      z: abs(z) < 0.01 ? z : z < 0 ? z - elongate : z + elongate,\n    };\n  });\n\n/**\n * Connects a top and a bottom polygon with side polygons.\n * Top and bottom polygons must have the same length.\n * Top polygon is supposed to be flipped.\n */\nexport const cylinder_sides = /* @__PURE__ */ (btm: Polygon, top: Polygon, smooth?: 0 | 1 | undefined): Polygon[] =>\n  btm.map((btmi, i, { length }) =>\n    polygon_color(\n      [btmi, top[length - i - 1]!, top[length - ((i + 1) % length) - 1]!, btm[(i + 1) % length]!],\n      btm.$color,\n      smooth,\n    ),\n  );\n\n/** Simplest composition of polygon functions. */\nexport const cylinder = /* @__PURE__ */ (\n  segments?: number,\n  smooth?: 0 | 1,\n  topSize: number = 0,\n  elongate?: number,\n): Polygon[] => {\n  const points = segments ? polygon_regular(segments, elongate) : GQuad;\n  const top = polygon_transform(points, translation(0, 1).scale3d(topSize > 0 ? topSize : 1));\n  const bottom = polygon_transform(points, translation(0, -1).scale3d(topSize < 0 ? -topSize : 1)).reverse();\n  return [...cylinder_sides(bottom as Polygon, top, smooth), top, bottom];\n};\n\nexport const sphere = /* @__PURE__ */ (\n  slices: number,\n  stacks = slices,\n  vertexFunc: (slice: number, stack: number, polygon: Polygon) => Vec3 = (x: number, y: number) => {\n    y *= Math.PI / stacks;\n    x *= (Math.PI * 2) / slices;\n    return { x: Math.cos(x) * Math.sin(y), y: Math.cos(y), z: Math.sin(x) * Math.sin(y) };\n  },\n): Polygon[] => {\n  const polygons: Polygon[] = [];\n  for (let i = 0; i < slices; i++) {\n    for (let j = 0; j < stacks; j++) {\n      const polygon = polygon_color([], 0, 1);\n      const vertex = (x: number, y: number) => polygon.push(vertexFunc(x, y, polygon));\n      polygons.push(polygon);\n      vertex(i, j);\n      if (j) {\n        vertex((i + 1) % slices, j);\n      }\n      if (j < stacks - 1) {\n        vertex((i + 1) % slices, j + (1 % stacks));\n      }\n      vertex(i, j + (1 % stacks));\n    }\n  }\n  return polygons;\n};\n","export interface Vec2 {\n  x: number;\n  y: number;\n}\n\nexport interface Vec3 {\n  x: number;\n  y: number;\n  z: number;\n}\n\nexport interface Vec4 {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n}\n\nexport interface Vec3Optional {\n  x?: number | undefined;\n  y?: number | undefined;\n  z?: number | undefined;\n}\n\nexport interface Plane {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n}\n\nexport type Vec2In = Readonly<Vec2>;\n\nexport type Vec3In = Readonly<Vec3>;\n\nexport type Vec4In = Readonly<Vec4>;\n\nexport const vec3_distance = /* @__PURE__ */ ({ x, y, z }: Vec3In, b: Vec3In): number =>\n  Math.hypot(x - b.x, y - b.y, z - b.z);\n\nexport const vec3_dot = /* @__PURE__ */ ({ x, y, z }: Vec3In, b: Vec3In): number => x * b.x + y * b.y + z * b.z;\n\n/**\n * Computes a polygon plane using the Newell's method.\n * We are not using plane from 3 points algorithm,\n * because this can handle coplanar points and has precision problems.\n */\nexport const plane_fromPolygon = /* @__PURE__ */ (polygon: readonly Vec3In[]): Plane => {\n  // Newell's method\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = polygon.at(-1)!;\n  let b: Vec3In | number;\n  for (b of polygon) {\n    x += (a.y - b.y) * (a.z + b.z);\n    y += (a.z - b.z) * (a.x + b.x);\n    z += (a.x - b.x) * (a.y + b.y);\n    a = b;\n  }\n  b = Math.hypot(x, y, z);\n  x /= b;\n  y /= b;\n  z /= b;\n  return { x, y, z, w: x * a.x + y * a.y + z * a.z };\n};\n","import type { Plane, Vec3, Vec3In } from \"../math/vectors\";\nimport { vec3_dot, plane_fromPolygon } from \"../math/vectors\";\nimport { polygon_color, type Polygon } from \"./polygon\";\n\nexport const PLANE_EPSILON = 0.00008;\n\nexport interface CSGPolygon {\n  $polygon: Polygon;\n\n  $flipped: 0 | boolean;\n\n  /**\n   * When a polygon is splitted, this will contain the polygon from which this polygon was splitted.\n   * This is then used by csg_polygons to merge back splitted polygons if they are both present,\n   * to reduce the number of vertices and triangles.\n   */\n  $parent: CSGPolygon | 0;\n}\n\nexport interface CSGNode extends Plane {\n  /** Coplanar polygons */\n  $polygons: CSGPolygon[];\n  /** Front child */\n  $front: CSGNode | 0;\n  /** Back child */\n  $back: CSGNode | 0;\n}\n\nexport type CSGInput = CSGNode | readonly Polygon[];\n\ninterface SplitPolygonResult {\n  $front: CSGPolygon | undefined | false;\n  $back: CSGPolygon | undefined | false;\n}\n\nconst CSGPolygon_splitSpanning = /* @__PURE__ */ (plane: Plane, polygon: CSGPolygon): SplitPolygonResult => {\n  const fpoints: Vec3[] = [];\n  const bpoints: Vec3[] = [];\n  const { $polygon, $flipped } = polygon;\n  let jd: number;\n  let iv: Vec3In = $polygon.at(-1)!;\n  let id: number = vec3_dot(plane, iv) - plane.w;\n  for (const jv of $polygon) {\n    jd = vec3_dot(plane, jv) - plane.w;\n    if (id < PLANE_EPSILON) {\n      bpoints.push(iv);\n    }\n    if (id > -PLANE_EPSILON) {\n      fpoints.push(iv);\n    }\n    if ((id > PLANE_EPSILON && jd < -PLANE_EPSILON) || (id < -PLANE_EPSILON && jd > PLANE_EPSILON)) {\n      id /= jd - id;\n      iv = {\n        x: iv.x + (iv.x - jv.x) * id,\n        y: iv.y + (iv.y - jv.y) * id,\n        z: iv.z + (iv.z - jv.z) * id,\n      };\n      fpoints.push(iv);\n      bpoints.push(iv);\n    }\n    iv = jv;\n    id = jd;\n  }\n  return {\n    $front: fpoints.length > 2 && {\n      $polygon: polygon_color(fpoints, $polygon.$color, $polygon.$smooth),\n      $flipped,\n      $parent: polygon,\n    },\n    $back: bpoints.length > 2 && {\n      $polygon: polygon_color(bpoints, $polygon.$color, $polygon.$smooth),\n      $flipped,\n      $parent: polygon,\n    },\n  };\n};\n\nconst CSGPolygon_split = /* @__PURE__ */ (plane: Plane, polygon: CSGPolygon): SplitPolygonResult => {\n  const { $polygon } = polygon;\n  let $front: CSGPolygon | undefined;\n  let $back: CSGPolygon | undefined;\n  let d: number;\n  for (let i = 0; i < $polygon.length; ++i) {\n    d = vec3_dot(plane, $polygon[i]!) - plane.w;\n    if (d < -PLANE_EPSILON) {\n      $back = polygon;\n    } else if (d > PLANE_EPSILON) {\n      $front = polygon;\n    }\n    if ($back && $front) {\n      return CSGPolygon_splitSpanning(plane, polygon);\n    }\n  }\n  return { $front, $back };\n};\n\nconst csg_tree_addPolygon = /* @__PURE__ */ (\n  node: CSGNode | 0 | undefined,\n  polygon: CSGPolygon,\n  plane: Plane = plane_fromPolygon(polygon.$polygon),\n): CSGNode => {\n  if (node) {\n    const { $front, $back } = CSGPolygon_split(node, polygon);\n    if (!$front && !$back) {\n      node.$polygons.push(polygon); // Coplanar\n    }\n    if ($front) {\n      node.$front = csg_tree_addPolygon(node.$front, $front, plane);\n    }\n    if ($back) {\n      node.$back = csg_tree_addPolygon(node.$back, $back, plane);\n    }\n  } else {\n    const { x, y, z, w } = plane;\n    node = { x, y, z, w, $polygons: [polygon], $front: 0, $back: 0 };\n  }\n  return node;\n};\n\nconst csg_tree_clipNode = /* @__PURE__ */ (\n  anode: CSGNode,\n  bnode: CSGNode,\n  polygonPlaneFlipped: -1 | 1,\n): CSGPolygon[] => {\n  const result: CSGPolygon[] = [];\n  const recursion = (node: CSGNode, polygon: CSGPolygon) => {\n    let { $front, $back } = CSGPolygon_split(node, polygon);\n    if (!$front && !$back) {\n      if (polygonPlaneFlipped * vec3_dot(node, bnode) > 0) {\n        $front = polygon; // Coplanar front\n      } else {\n        $back = polygon; // Coplanar back\n      }\n    }\n    if ($front) {\n      if (node.$front) {\n        recursion(node.$front, $front);\n      } else {\n        result.push($front);\n      }\n    }\n    if ($back && node.$back) {\n      recursion(node.$back, $back);\n    }\n  };\n\n  for (const polygon of bnode.$polygons) {\n    recursion(anode, polygon);\n  }\n  return result;\n};\n\n/** Loop through all nodes in a tree */\nconst csg_tree_each = (node: CSGNode | 0 | undefined, fn: (node: CSGNode) => void): unknown =>\n  node && (fn(node), csg_tree_each(node.$front, fn), csg_tree_each(node.$back, fn));\n\n/** Convert solid space to empty space and empty space to solid space. */\nexport const csg_tree_flip = <T extends CSGNode | 0 | undefined>(root: T): T => {\n  csg_tree_each(root, (node) => {\n    const back = node.$back;\n    node.$back = node.$front;\n    node.$front = back;\n    node.x *= -1;\n    node.y *= -1;\n    node.z *= -1;\n    node.w *= -1;\n    for (const polygon of node.$polygons) {\n      polygon.$flipped = !polygon.$flipped;\n    }\n  });\n  return root;\n};\n\n/**\n * Extracts all the polygons from a BSP tree.\n * Some polygons will be merged, to reduce the number of triangles.\n */\nexport const csg_polygons = /* @__PURE__ */ (tree: CSGNode): Polygon[] => {\n  const byParent = new Map<CSGPolygon, CSGPolygon>();\n  const allPolygons = new Map<CSGPolygon, 0 | boolean>();\n\n  /** Adds a polygon, and replaces two splitted polygons that have the same parent with the parent */\n  const add = (polygon: CSGPolygon): CSGPolygon => {\n    if (polygon.$parent) {\n      const found = byParent.get(polygon.$parent);\n      if (found) {\n        allPolygons.delete(found);\n        polygon = add(polygon.$parent);\n      } else {\n        byParent.set(polygon.$parent, polygon);\n      }\n    }\n    return polygon;\n  };\n\n  csg_tree_each(tree, (node) => {\n    for (const polygon of node.$polygons) {\n      allPolygons.set(add(polygon), polygon.$flipped);\n    }\n  });\n\n  return Array.from(allPolygons, ([{ $polygon }, flipped]) => {\n    const polygon = $polygon.map(({ x, y, z }) => ({ x, y, z }));\n    return polygon_color(flipped ? polygon.reverse() : polygon, $polygon.$color, $polygon.$smooth);\n  });\n};\n\n/**\n * If the given argument is a list of polygons, a new BSP tree built from the list of polygons is returned.\n * If the given argument is already a BSP tree, return it as is.\n * Note that array cannot be empty.\n */\nexport const csg_tree = /* @__PURE__ */ (n: CSGInput): CSGNode =>\n  (n as Polygon[]).length\n    ? // Build a BSP tree from a list of polygons\n      ((n as Polygon[]).reduce<CSGNode | 0>(\n        (prev, $polygon) => csg_tree_addPolygon(prev, { $polygon, $flipped: 0, $parent: 0 }),\n        0,\n      ) as CSGNode)\n    : // An object? We assume is a BSP tree.\n      (n as CSGNode);\n\n/**\n * Union a[0] = a[0] U a[1] U a[2] U ...\n */\nexport const csg_union = /* @__PURE__ */ (...inputs: CSGInput[]): CSGNode =>\n  inputs.reduce((a: CSGInput, b: CSGInput | undefined): CSGNode => {\n    const polygonsToAdd: [Plane, CSGPolygon[]][] = [];\n    a = csg_tree(a);\n    if (b) {\n      b = csg_tree(b);\n\n      // clip to a, b\n      csg_tree_each(a, (node) => (node.$polygons = csg_tree_clipNode(b as CSGNode, node, 1)));\n\n      // get the list of polygons to be added from b clipped to a\n      csg_tree_each(b, (node) => polygonsToAdd.push([node, csg_tree_clipNode(a as CSGNode, node, -1)]));\n\n      // add the polygons to a\n      for (const [plane, polygons] of polygonsToAdd) {\n        for (const pp of polygons) {\n          csg_tree_addPolygon(a, pp, plane);\n        }\n      }\n    }\n    return a;\n  }) as CSGNode;\n\n/**\n * Subtraction a = a - (b[0] U b[1] U ...)\n * Note that a will be modified if is a tree.\n */\nexport const csg_subtract = /* @__PURE__ */ (a: CSGInput, ...b: CSGInput[]): CSGNode =>\n  csg_tree_flip(csg_union(csg_tree_flip(csg_tree(a)), ...b));\n\n/**\n * Subtraction a - (b[0] U b[1] U ...)\n * Note that a will be modified if is a tree.\n */\nexport const csg_polygons_subtract = (a: CSGInput, ...b: CSGInput[]) =>\n  csg_polygons(csg_tree_flip(csg_union(csg_tree_flip(csg_tree(a)), ...b)));\n","import { lerp, min } from \"../math/math\";\n\nlet _globalTime: number | undefined;\n\nexport let mainMenuVisible: boolean | undefined;\n\n/** Minimum 15.3 frames per second */\nexport const GAME_TIME_MAX_DELTA_TIME = 0.066;\n\nexport let gameTime = 0;\n\nexport let absoluteTime = 0;\n\nexport let gameTimeDelta: number = GAME_TIME_MAX_DELTA_TIME;\n\nexport const gameTimeUpdate = (time: number) => {\n  const dt = (time - (_globalTime || time)) / 1000;\n  absoluteTime += dt;\n  gameTime += gameTimeDelta = mainMenuVisible ? 0 : min(GAME_TIME_MAX_DELTA_TIME, dt);\n  _globalTime = time;\n};\n\nexport const resetGameTime = (value: number) => {\n  gameTime = value;\n  gameTimeDelta = 0;\n};\n\nexport const damp = /* @__PURE__ */ (speed: number) => 1 - Math.exp(-speed * gameTimeDelta);\n\nexport const lerpDamp = NO_INLINE((from: number, to: number, speed: number) => lerp(from, to, damp(speed)));\n\nexport const setMainMenuVisible = (visible: boolean) => {\n  mainMenuVisible = visible;\n};\n// export const gameTimeUpdate = (time: number) => {\n//   if (mainMenuVisible) {\n//     keyboard_downKeys[KEY_INTERACT] = 0;\n//   }\n//   const delta = (time - (_globalTime || time)) / 1000;\n//   if (delta >= 0.06) {\n//     gameTimeDelta = mainMenuVisible ? 0 : Math.min(GAME_TIME_MAX_DELTA_TIME, (time - (_globalTime || time)) / 1000);\n//     gameTime += gameTimeDelta;\n//     _globalTime = time;\n//   } else {\n//     gameTimeDelta = 0;\n//   }\n//   absoluteTime += delta;\n//   if (!_globalTime) {\n//     _globalTime = time;\n//   }\n// };\n","import { lerp, angle_wrap_degrees, lerpneg, clamp, abs } from \"../math/math\";\nimport { gameTime, lerpDamp, gameTimeDelta, resetGameTime } from \"./game-time\";\nimport { levers, souls, SOULS_COUNT } from \"./models\";\nimport type { Vec2 } from \"../math/vectors\";\n\nexport const camera_rotation: Vec2 = { x: 0, y: 180 } as Vec2;\n\nexport let souls_collected_count = 0;\n\nlet _messageEndTime = 1;\n\nexport const LOCAL_STORAGE_SAVED_GAME_KEY = \"DanteSP22\";\n\nexport let player_last_pulled_lever = 0;\n\nexport let rotatingPlatform1Rotation = 0;\n\nexport let rotatingPlatform2Rotation = 0;\n\nexport let rotatingHexCorridorRotation = 0;\n\nexport let game_completed: 0 | 1 = 0;\n\nexport let firstBoatLerp = 0;\n\nexport let secondBoatLerp = 0;\n\nexport let shouldRotatePlatforms = 0;\n\nconst showMessage = (message: string, duration: number) => {\n  if (_messageEndTime < Infinity) {\n    _messageEndTime = gameTime + duration;\n    h4.innerHTML = message;\n  }\n};\n\nexport const worldStateUpdate = () => {\n  shouldRotatePlatforms = lerpneg(levers[12]!.$lerpValue, levers[13]!.$lerpValue);\n\n  rotatingHexCorridorRotation = lerp(\n    lerpDamp(rotatingHexCorridorRotation, 0, 1),\n    angle_wrap_degrees(rotatingHexCorridorRotation + gameTimeDelta * 60),\n    levers[5]!.$lerpValue - levers[6]!.$lerpValue2,\n  );\n\n  rotatingPlatform1Rotation = lerp(\n    lerpDamp(rotatingPlatform1Rotation, 0, 5),\n    angle_wrap_degrees(rotatingPlatform1Rotation + gameTimeDelta * 56),\n    shouldRotatePlatforms,\n  );\n\n  rotatingPlatform2Rotation = lerp(\n    lerpDamp(rotatingPlatform2Rotation, 0, 4),\n    angle_wrap_degrees(rotatingPlatform2Rotation + gameTimeDelta * 48),\n    shouldRotatePlatforms,\n  );\n\n  secondBoatLerp = lerpDamp(secondBoatLerp, levers[9]!.$lerpValue2, 0.2 + 0.3 * abs(levers[9]!.$lerpValue2 * 2 - 1));\n\n  firstBoatLerp = lerpDamp(firstBoatLerp, game_completed ? lerpDamp(firstBoatLerp, -9, 1.5) : clamp(gameTime / 3), 1);\n\n  if (_messageEndTime && gameTime > _messageEndTime) {\n    _messageEndTime = 0;\n    h4.innerHTML = \"\";\n  }\n\n  if (levers[0]!.$value && levers[0]!.$lerpValue > 0.8) {\n    if (souls_collected_count < SOULS_COUNT) {\n      showMessage(\"Not leaving now, there are souls to catch!\", 3);\n      levers[0]!.$value = 0;\n    } else if (!game_completed) {\n      showMessage(\"Well done. They will be punished.<br>Thanks for playing\", Infinity);\n      game_completed = 1;\n    }\n  }\n};\n\nexport const updateCollectedSoulsCounter = () => {\n  h3.innerHTML =\n    \"Souls: \" +\n    [0, \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"XIII\"][\n      (souls_collected_count = souls.reduce((acc, { $value }) => acc + $value, 0))\n    ]! +\n    \" / XIII\";\n};\n\nexport const loadGame = () => {\n  try {\n    const [savedLevers, savedSouls, savedLastPulledLever, savedGameTime, savedSecondBoatLerp] = JSON.parse(\n      localStorage[LOCAL_STORAGE_SAVED_GAME_KEY]!,\n    );\n    levers.map(\n      (lever, index) =>\n        (lever.$lerpValue = lever.$lerpValue2 = lever.$value = index ? ((savedLevers[index] | 0) as 0 | 1) : 0),\n    );\n    souls.map((soul, index) => (soul.$value = (savedSouls[index] | 0) as 0 | 1));\n    player_last_pulled_lever = savedLastPulledLever;\n    secondBoatLerp = savedSecondBoatLerp;\n    resetGameTime(savedGameTime);\n  } catch (e) {\n    if (DEBUG) {\n      console.log(e);\n    }\n  }\n  firstBoatLerp = clamp(player_last_pulled_lever);\n};\n\nexport const saveGame = () => {\n  localStorage[LOCAL_STORAGE_SAVED_GAME_KEY] = JSON.stringify([\n    levers.map(({ $value }) => $value),\n    souls.map(({ $value }) => $value),\n    player_last_pulled_lever,\n    gameTime,\n    secondBoatLerp,\n  ]);\n};\n\nexport const onSoulCollected = () => {\n  showMessage(\n    [\n      ,\n      \"Mark Zuckemberg<br>made the world worse\",\n      \"Giorgia Meloni<br>fascist\",\n      \"Andrzej Mazur<br>for the js13k competition\",\n      \"Donald Trump<br>lies\",\n      \"Kim Jong-un<br>Dictator, liked pineapple on pizza\",\n      \"Maxime Euziere<br>forced me to finish this game\",\n      \"She traded NFTs apes\",\n      ,\n      \"Vladimir Putin<br>evil war\",\n      \"He was not a good person\",\n      ,\n      \"Salvatore Previti<br>made this evil game<br><br>Done. Go back to the boat\",\n    ][souls_collected_count] || 'Catched a \"crypto bro\".<br>\"Web3\" is all scam, lies and grift',\n    souls_collected_count && souls_collected_count < 12 ? 5 : 7,\n  );\n\n  updateCollectedSoulsCounter();\n  saveGame();\n};\n\nexport const onPlayerPullLever = (leverIndex: number) => {\n  if (DEBUG) {\n    console.log(\"switch lever \" + leverIndex + \" = \" + levers[leverIndex]?.$value);\n  }\n\n  if (leverIndex) {\n    showMessage(\"* click *\", 1);\n  }\n  player_last_pulled_lever = leverIndex;\n  saveGame();\n};\n","export const GAMEPAD_BUTTON_UP = 12;\n\nexport const GAMEPAD_BUTTON_DOWN = 13;\n\nexport const GAMEPAD_BUTTON_LEFT = 14;\n\nexport const GAMEPAD_BUTTON_RIGHT = 15;\n\nexport const GAMEPAD_BUTTON_START = 9;\n\nexport const GAMEPAD_BUTTON_B = 0;\n\nexport const GAMEPAD_BUTTON_A = 1;\n\nexport const GAMEPAD_BUTTON_Y = 2;\n\nexport const GAMEPAD_BUTTON_X = 3;\n\nexport const GAMEPAD_BUTTON_LB = 4;\n\nexport const GAMEPAD_BUTTON_RB = 5;\n\nexport const KEY_CODE_EMPTY = \"\";\n\nexport const KEY_CODE_AGAIN = \"Again\";\n\nexport const KEY_CODE_ALT_LEFT = \"AltLeft\";\n\nexport const KEY_CODE_ALT_RIGHT = \"AltRight\";\n\nexport const KEY_CODE_ARROW_DOWN = \"ArrowDown\";\n\nexport const KEY_CODE_ARROW_LEFT = \"ArrowLeft\";\n\nexport const KEY_CODE_ARROW_RIGHT = \"ArrowRight\";\n\nexport const KEY_CODE_ARROW_UP = \"ArrowUp\";\n\nexport const KEY_CODE_AUDIO_VOLUME_DOWN = \"AudioVolumeDown\";\n\nexport const KEY_CODE_AUDIO_VOLUME_MUTE = \"AudioVolumeMute\";\n\nexport const KEY_CODE_AUDIO_VOLUME_UP = \"AudioVolumeUp\";\n\nexport const KEY_CODE_BACKQUOTE = \"Backquote\";\n\nexport const KEY_CODE_BACKSLASH = \"Backslash\";\n\nexport const KEY_CODE_BACKSPACE = \"Backspace\";\n\nexport const KEY_CODE_BRACKET_LEFT = \"BracketLeft\";\n\nexport const KEY_CODE_BRACKET_RIGHT = \"BracketRight\";\n\nexport const KEY_CODE_BROWSER_BACK = \"BrowserBack\";\n\nexport const KEY_CODE_BROWSER_FAVORITES = \"BrowserFavorites\";\n\nexport const KEY_CODE_BROWSER_FORWARD = \"BrowserForward\";\n\nexport const KEY_CODE_BROWSER_HOME = \"BrowserHome\";\n\nexport const KEY_CODE_BROWSER_REFRESH = \"BrowserRefresh\";\n\nexport const KEY_CODE_BROWSER_SEARCH = \"BrowserSearch\";\n\nexport const KEY_CODE_BROWSER_STOP = \"BrowserStop\";\n\nexport const KEY_CODE_CANCEL = \"Cancel\";\n\nexport const KEY_CODE_CAPS_LOCK = \"CapsLock\";\n\nexport const KEY_CODE_COMMA = \"Comma\";\n\nexport const KEY_CODE_CONTEXT_MENU = \"ContextMenu\";\n\nexport const KEY_CODE_CONTROL_LEFT = \"ControlLeft\";\n\nexport const KEY_CODE_CONTROL_RIGHT = \"ControlRight\";\n\nexport const KEY_CODE_CONVERT = \"Convert\";\n\nexport const KEY_CODE_COPY = \"Copy\";\n\nexport const KEY_CODE_CUT = \"Cut\";\n\nexport const KEY_CODE_DELETE = \"Delete\";\n\nexport const KEY_CODE_DIGIT_0 = \"Digit0\";\n\nexport const KEY_CODE_DIGIT_1 = \"Digit1\";\n\nexport const KEY_CODE_DIGIT_2 = \"Digit2\";\n\nexport const KEY_CODE_DIGIT_3 = \"Digit3\";\n\nexport const KEY_CODE_DIGIT_4 = \"Digit4\";\n\nexport const KEY_CODE_DIGIT_5 = \"Digit5\";\n\nexport const KEY_CODE_DIGIT_6 = \"Digit6\";\n\nexport const KEY_CODE_DIGIT_7 = \"Digit7\";\n\nexport const KEY_CODE_DIGIT_8 = \"Digit8\";\n\nexport const KEY_CODE_DIGIT_9 = \"Digit9\";\n\nexport const KEY_CODE_EJECT = \"Eject\";\n\nexport const KEY_CODE_END = \"End\";\n\nexport const KEY_CODE_ENTER = \"Enter\";\n\nexport const KEY_CODE_EQUAL = \"Equal\";\n\nexport const KEY_CODE_ESCAPE = \"Escape\";\n\nexport const KEY_CODE_F1 = \"F1\";\n\nexport const KEY_CODE_F2 = \"F2\";\n\nexport const KEY_CODE_F3 = \"F3\";\n\nexport const KEY_CODE_F4 = \"F4\";\n\nexport const KEY_CODE_F5 = \"F5\";\n\nexport const KEY_CODE_F6 = \"F6\";\n\nexport const KEY_CODE_F7 = \"F7\";\n\nexport const KEY_CODE_F8 = \"F8\";\n\nexport const KEY_CODE_F9 = \"F9\";\n\nexport const KEY_CODE_F10 = \"F10\";\n\nexport const KEY_CODE_F11 = \"F11\";\n\nexport const KEY_CODE_F12 = \"F12\";\n\nexport const KEY_CODE_F13 = \"F13\";\n\nexport const KEY_CODE_F14 = \"F14\";\n\nexport const KEY_CODE_F15 = \"F15\";\n\nexport const KEY_CODE_F16 = \"F16\";\n\nexport const KEY_CODE_F17 = \"F17\";\n\nexport const KEY_CODE_F18 = \"F18\";\n\nexport const KEY_CODE_F19 = \"F19\";\n\nexport const KEY_CODE_F20 = \"F20\";\n\nexport const KEY_CODE_F21 = \"F21\";\n\nexport const KEY_CODE_F22 = \"F22\";\n\nexport const KEY_CODE_F23 = \"F23\";\n\nexport const KEY_CODE_F24 = \"F24\";\n\nexport const KEY_CODE_FIND = \"Find\";\n\nexport const KEY_CODE_FN = \"Fn\";\n\nexport const KEY_CODE_HANGUL_MODE = \"HangulMode\";\n\nexport const KEY_CODE_HANJA = \"Hanja\";\n\nexport const KEY_CODE_HELP = \"Help\";\n\nexport const KEY_CODE_HOME = \"Home\";\n\nexport const KEY_CODE_INSERT = \"Insert\";\n\nexport const KEY_CODE_INTL_BACKSLASH = \"IntlBackslash\";\n\nexport const KEY_CODE_INTL_RO = \"IntlRo\";\n\nexport const KEY_CODE_INTL_YEN = \"IntlYen\";\n\nexport const KEY_CODE_KANA_MODE = \"KanaMode\";\n\nexport const KEY_CODE_KEY_A = \"KeyA\";\n\nexport const KEY_CODE_KEY_B = \"KeyB\";\n\nexport const KEY_CODE_KEY_C = \"KeyC\";\n\nexport const KEY_CODE_KEY_D = \"KeyD\";\n\nexport const KEY_CODE_KEY_E = \"KeyE\";\n\nexport const KEY_CODE_KEY_F = \"KeyF\";\n\nexport const KEY_CODE_KEY_G = \"KeyG\";\n\nexport const KEY_CODE_KEY_H = \"KeyH\";\n\nexport const KEY_CODE_KEY_I = \"KeyI\";\n\nexport const KEY_CODE_KEY_J = \"KeyJ\";\n\nexport const KEY_CODE_KEY_K = \"KeyK\";\n\nexport const KEY_CODE_KEY_L = \"KeyL\";\n\nexport const KEY_CODE_KEY_M = \"KeyM\";\n\nexport const KEY_CODE_KEY_N = \"KeyN\";\n\nexport const KEY_CODE_KEY_O = \"KeyO\";\n\nexport const KEY_CODE_KEY_P = \"KeyP\";\n\nexport const KEY_CODE_KEY_Q = \"KeyQ\";\n\nexport const KEY_CODE_KEY_R = \"KeyR\";\n\nexport const KEY_CODE_KEY_S = \"KeyS\";\n\nexport const KEY_CODE_KEY_T = \"KeyT\";\n\nexport const KEY_CODE_KEY_U = \"KeyU\";\n\nexport const KEY_CODE_KEY_V = \"KeyV\";\n\nexport const KEY_CODE_KEY_W = \"KeyW\";\n\nexport const KEY_CODE_KEY_X = \"KeyX\";\n\nexport const KEY_CODE_KEY_Y = \"KeyY\";\n\nexport const KEY_CODE_KEY_Z = \"KeyZ\";\n\nexport const KEY_CODE_LANG_1 = \"Lang1\";\n\nexport const KEY_CODE_LANG_2 = \"Lang2\";\n\nexport const KEY_CODE_LAUNCH_APP_1 = \"LaunchApp1\";\n\nexport const KEY_CODE_LAUNCH_APP_2 = \"LaunchApp2\";\n\nexport const KEY_CODE_LAUNCH_MAIL = \"LaunchMail\";\n\nexport const KEY_CODE_LAUNCH_MEDIA_PLAYER = \"LaunchMediaPlayer\";\n\nexport const KEY_CODE_MEDIA_PLAY_PAUSE = \"MediaPlayPause\";\n\nexport const KEY_CODE_MEDIA_SELECT = \"MediaSelect\";\n\nexport const KEY_CODE_MEDIA_STOP = \"MediaStop\";\n\nexport const KEY_CODE_MEDIA_TRACK_NEXT = \"MediaTrackNext\";\n\nexport const KEY_CODE_MEDIA_TRACK_PREVIOUS = \"MediaTrackPrevious\";\n\nexport const KEY_CODE_META_LEFT = \"MetaLeft\";\n\nexport const KEY_CODE_META_RIGHT = \"MetaRight\";\n\nexport const KEY_CODE_MINUS = \"Minus\";\n\nexport const KEY_CODE_NON_CONVERT = \"NonConvert\";\n\nexport const KEY_CODE_NUM_LOCK = \"NumLock\";\n\nexport const KEY_CODE_NUMPAD_0 = \"Numpad0\";\n\nexport const KEY_CODE_NUMPAD_1 = \"Numpad1\";\n\nexport const KEY_CODE_NUMPAD_2 = \"Numpad2\";\n\nexport const KEY_CODE_NUMPAD_3 = \"Numpad3\";\n\nexport const KEY_CODE_NUMPAD_4 = \"Numpad4\";\n\nexport const KEY_CODE_NUMPAD_5 = \"Numpad5\";\n\nexport const KEY_CODE_NUMPAD_6 = \"Numpad6\";\n\nexport const KEY_CODE_NUMPAD_7 = \"Numpad7\";\n\nexport const KEY_CODE_NUMPAD_8 = \"Numpad8\";\n\nexport const KEY_CODE_NUMPAD_9 = \"Numpad9\";\n\nexport const KEY_CODE_NUMPAD_ADD = \"NumpadAdd\";\n\nexport const KEY_CODE_NUMPAD_CHANGE_SIGN = \"NumpadChangeSign\";\n\nexport const KEY_CODE_NUMPAD_COMMA = \"NumpadComma\";\n\nexport const KEY_CODE_NUMPAD_DECIMAL = \"NumpadDecimal\";\n\nexport const KEY_CODE_NUMPAD_DIVIDE = \"NumpadDivide\";\n\nexport const KEY_CODE_NUMPAD_ENTER = \"NumpadEnter\";\n\nexport const KEY_CODE_NUMPAD_EQUAL = \"NumpadEqual\";\n\nexport const KEY_CODE_NUMPAD_MULTIPLY = \"NumpadMultiply\";\n\nexport const KEY_CODE_NUMPAD_PAREN_LEFT = \"NumpadParenLeft\";\n\nexport const KEY_CODE_NUMPAD_PAREN_RIGHT = \"NumpadParenRight\";\n\nexport const KEY_CODE_NUMPAD_SUBTRACT = \"NumpadSubtract\";\n\nexport const KEY_CODE_OPEN = \"Open\";\n\nexport const KEY_CODE_OSLEFT = \"OSLeft\";\n\nexport const KEY_CODE_OSRIGHT = \"OSRight\";\n\nexport const KEY_CODE_PAGE_DOWN = \"PageDown\";\n\nexport const KEY_CODE_PAGE_UP = \"PageUp\";\n\nexport const KEY_CODE_PASTE = \"Paste\";\n\nexport const KEY_CODE_PAUSE = \"Pause\";\n\nexport const KEY_CODE_PERIOD = \"Period\";\n\nexport const KEY_CODE_POWER = \"Power\";\n\nexport const KEY_CODE_PRINT_SCREEN = \"PrintScreen\";\n\nexport const KEY_CODE_PROPS = \"Props\";\n\nexport const KEY_CODE_QUOTE = \"Quote\";\n\nexport const KEY_CODE_SCROLL_LOCK = \"ScrollLock\";\n\nexport const KEY_CODE_SELECT = \"Select\";\n\nexport const KEY_CODE_SEMICOLON = \"Semicolon\";\n\nexport const KEY_CODE_SHIFT_LEFT = \"ShiftLeft\";\n\nexport const KEY_CODE_SHIFT_RIGHT = \"ShiftRight\";\n\nexport const KEY_CODE_SLASH = \"Slash\";\n\nexport const KEY_CODE_SLEEP = \"Sleep\";\n\nexport const KEY_CODE_SPACE = \"Space\";\n\nexport const KEY_CODE_TAB = \"Tab\";\n\nexport const KEY_CODE_UNDO = \"Undo\";\n\nexport const KEY_CODE_UNIDENTIFIED = \"Unidentified\";\n\nexport const KEY_CODE_VOLUME_DOWN = \"VolumeDown\";\n\nexport const KEY_CODE_VOLUME_MUTE = \"VolumeMute\";\n\nexport const KEY_CODE_VOLUME_UP = \"VolumeUp\";\n\nexport const KEY_CODE_WAKE_UP = \"WakeUp\";\n\nexport type KEY_CODE =\n  | \"\"\n  | \"Again\"\n  | \"AltLeft\"\n  | \"AltRight\"\n  | \"ArrowDown\"\n  | \"ArrowLeft\"\n  | \"ArrowRight\"\n  | \"ArrowUp\"\n  | \"AudioVolumeDown\"\n  | \"AudioVolumeMute\"\n  | \"AudioVolumeUp\"\n  | \"Backquote\"\n  | \"Backslash\"\n  | \"Backspace\"\n  | \"BracketLeft\"\n  | \"BracketRight\"\n  | \"BrowserBack\"\n  | \"BrowserFavorites\"\n  | \"BrowserForward\"\n  | \"BrowserHome\"\n  | \"BrowserRefresh\"\n  | \"BrowserSearch\"\n  | \"BrowserStop\"\n  | \"Cancel\"\n  | \"CapsLock\"\n  | \"Comma\"\n  | \"ContextMenu\"\n  | \"ControlLeft\"\n  | \"ControlRight\"\n  | \"Convert\"\n  | \"Copy\"\n  | \"Cut\"\n  | \"Delete\"\n  | \"Digit0\"\n  | \"Digit1\"\n  | \"Digit2\"\n  | \"Digit3\"\n  | \"Digit4\"\n  | \"Digit5\"\n  | \"Digit6\"\n  | \"Digit7\"\n  | \"Digit8\"\n  | \"Digit9\"\n  | \"Eject\"\n  | \"End\"\n  | \"Enter\"\n  | \"Equal\"\n  | \"Escape\"\n  | \"F1\"\n  | \"F2\"\n  | \"F3\"\n  | \"F4\"\n  | \"F5\"\n  | \"F6\"\n  | \"F7\"\n  | \"F8\"\n  | \"F9\"\n  | \"F10\"\n  | \"F11\"\n  | \"F12\"\n  | \"F13\"\n  | \"F14\"\n  | \"F15\"\n  | \"F16\"\n  | \"F17\"\n  | \"F18\"\n  | \"F19\"\n  | \"F20\"\n  | \"F21\"\n  | \"F22\"\n  | \"F23\"\n  | \"F24\"\n  | \"Find\"\n  | \"Fn\"\n  | \"HangulMode\"\n  | \"Hanja\"\n  | \"Help\"\n  | \"Home\"\n  | \"Insert\"\n  | \"IntlBackslash\"\n  | \"IntlRo\"\n  | \"IntlYen\"\n  | \"KanaMode\"\n  | \"KeyA\"\n  | \"KeyB\"\n  | \"KeyC\"\n  | \"KeyD\"\n  | \"KeyE\"\n  | \"KeyF\"\n  | \"KeyG\"\n  | \"KeyH\"\n  | \"KeyI\"\n  | \"KeyJ\"\n  | \"KeyK\"\n  | \"KeyL\"\n  | \"KeyM\"\n  | \"KeyN\"\n  | \"KeyO\"\n  | \"KeyP\"\n  | \"KeyQ\"\n  | \"KeyR\"\n  | \"KeyS\"\n  | \"KeyT\"\n  | \"KeyU\"\n  | \"KeyV\"\n  | \"KeyW\"\n  | \"KeyX\"\n  | \"KeyY\"\n  | \"KeyZ\"\n  | \"Lang1\"\n  | \"Lang2\"\n  | \"LaunchApp1\"\n  | \"LaunchApp2\"\n  | \"LaunchMail\"\n  | \"LaunchMediaPlayer\"\n  | \"MediaPlayPause\"\n  | \"MediaSelect\"\n  | \"MediaStop\"\n  | \"MediaTrackNext\"\n  | \"MediaTrackPrevious\"\n  | \"MetaLeft\"\n  | \"MetaRight\"\n  | \"Minus\"\n  | \"NonConvert\"\n  | \"NumLock\"\n  | \"Numpad0\"\n  | \"Numpad1\"\n  | \"Numpad2\"\n  | \"Numpad3\"\n  | \"Numpad4\"\n  | \"Numpad5\"\n  | \"Numpad6\"\n  | \"Numpad7\"\n  | \"Numpad8\"\n  | \"Numpad9\"\n  | \"NumpadAdd\"\n  | \"NumpadChangeSign\"\n  | \"NumpadComma\"\n  | \"NumpadDecimal\"\n  | \"NumpadDivide\"\n  | \"NumpadEnter\"\n  | \"NumpadEqual\"\n  | \"NumpadMultiply\"\n  | \"NumpadParenLeft\"\n  | \"NumpadParenRight\"\n  | \"NumpadSubtract\"\n  | \"Open\"\n  | \"OSLeft\"\n  | \"OSRight\"\n  | \"PageDown\"\n  | \"PageUp\"\n  | \"Paste\"\n  | \"Pause\"\n  | \"Period\"\n  | \"Power\"\n  | \"PrintScreen\"\n  | \"Props\"\n  | \"Quote\"\n  | \"ScrollLock\"\n  | \"Select\"\n  | \"Semicolon\"\n  | \"ShiftLeft\"\n  | \"ShiftRight\"\n  | \"Slash\"\n  | \"Sleep\"\n  | \"Space\"\n  | \"Tab\"\n  | \"Undo\"\n  | \"Unidentified\"\n  | \"VolumeDown\"\n  | \"VolumeMute\"\n  | \"VolumeUp\"\n  | \"WakeUp\";\n","export const audioContext = new AudioContext();\n\nexport const songAudioSource = audioContext.createBufferSource();\n","#version 300 es\nprecision highp float;\n\n// as printed by the console.log on csm.ts\nconst vec3 lightDir = vec3(-0.6560590289905073, 0.6663690071652679, -0.3543146860766681);\n\n#define CSM_TEXTURE_SIZE 2048.\n\n#define zNear 0.3\n#define CSM_PLANE_DISTANCE 55.\n#define zFar 181.\n\nin highp vec4 VNormal;\nin highp vec4 FragPos;\nin highp vec4 UntransformedFragPos;\nin lowp vec4 Color;\n\nuniform vec3 viewPos;\nuniform mat4 viewMatrix;\nuniform mat4 csm_matrix0;\nuniform mat4 csm_matrix1;\n\nuniform highp sampler2DShadow csm_texture0;\nuniform highp sampler2DShadow csm_texture1;\nuniform highp sampler2D groundTexture;\n\nout vec4 O;\n\nvoid main() {\n  vec4 fragPosVec4 = vec4(FragPos.xyz, 1);\n  vec3 normal = normalize(VNormal.xyz);\n\n  vec3 tex = Color.w *\n    (texture(groundTexture, UntransformedFragPos.yz * .035) * normal.x +\n     texture(groundTexture, UntransformedFragPos.xz * .035) * normal.y +\n     texture(groundTexture, UntransformedFragPos.xy * .035) * normal.z)\n      .xyz;\n\n  // Displacement map\n  normal = normalize(normal.xyz + tex * .5);\n\n  float lambert = dot(normal, lightDir);\n  float shadow = 1.;\n  float depthValue = abs((viewMatrix * fragPosVec4).z);\n\n  // Gets the fragment position in light space\n  vec4 csmCoords = (depthValue < CSM_PLANE_DISTANCE ? csm_matrix0 : csm_matrix1) * fragPosVec4;\n\n  // perform perspective divide and transform to [0,1] range\n  csmCoords = (csmCoords / csmCoords.w) * .5 + .5;\n\n  if (csmCoords.z < 1.) { // Only if inside far plane\n    shadow = 0.;\n\n    // Shadow bias could be computed based on normal and light, something like\n    // 0.0003 * (1. - clamp(dot(normal, lightDir), 0., 1.))\n\n    for (float x = -1.; x <= 1.; ++x) {\n      for (float y = -1.; y <= 1.; ++y) {\n        vec3 c = vec3(\n          csmCoords.xy + vec2(x, y) / CSM_TEXTURE_SIZE,\n          csmCoords.z -\n            // shadow bias\n            (1. / CSM_TEXTURE_SIZE / 2.8)\n        );\n        shadow += depthValue < CSM_PLANE_DISTANCE ? texture(csm_texture0, c) : texture(csm_texture1, c);\n      }\n    }\n    shadow /= 9.;\n  }\n\n  vec3 rgbColor = Color.xyz * (1. - tex.x);\n\n  float lavaLight = max(max(abs(normal.x), abs(normal.z)) * .3 - normal.y, 0.) * pow(max(0., (8. - FragPos.y) / 48.), 1.6);\n\n  O = vec4(\n    // lava light\n    vec3(lavaLight, lavaLight * lavaLight * .5, 0) +\n      // ambient\n      vec3(.09, .05, .11) * rgbColor +\n      // diffuse\n      (rgbColor * (max(0., lambert) * .5 + (rgbColor * lambert * lambert * vec3(.5, .45, .3))) * (shadow * .75 + .25)) +\n      // specular\n      vec3(.6, .6, .5) * pow(max(0., dot(normalize(FragPos.xyz - viewPos), reflect(lightDir, normal))), 35.) * shadow,\n    1\n  );\n}\n","import { DEG_TO_RAD } from \"./math\";\nimport {\n  constDef_zNear,\n  constDef_CSM_PLANE_DISTANCE as CSM_PLANE_DISTANCE,\n  constDef_zFar,\n} from \"../shaders/main-fragment.frag\";\n\nexport const zNear = constDef_zNear;\n\nexport { CSM_PLANE_DISTANCE };\n\nexport const zFar = constDef_zFar;\n\nexport const fieldOfViewDegrees = 60;\n\nexport const fieldOfViewRadians = fieldOfViewDegrees * DEG_TO_RAD; // in radians\n\nexport const fieldOfViewAmount = 1 / Math.tan(fieldOfViewRadians / 2);\n\nexport const mat_perspective = (near: number, far: number, mx: number, my: number) =>\n  new DOMMatrix([\n    mx,\n    0,\n    0,\n    0,\n    0,\n    my,\n    0,\n    0,\n    0,\n    0,\n    (far + near) / (near - far),\n    -1,\n    0,\n    0,\n    (2 * far * near) / (near - far),\n    0,\n  ]);\n","import {\n  GAMEPAD_BUTTON_A,\n  GAMEPAD_BUTTON_B,\n  GAMEPAD_BUTTON_DOWN,\n  GAMEPAD_BUTTON_LEFT,\n  GAMEPAD_BUTTON_RIGHT,\n  GAMEPAD_BUTTON_UP,\n  GAMEPAD_BUTTON_X,\n  GAMEPAD_BUTTON_Y,\n  GAMEPAD_BUTTON_START,\n  type KEY_CODE,\n} from \"./utils/keycodes\";\nimport { abs, clamp, max, threshold } from \"./math/math\";\nimport { camera_rotation, LOCAL_STORAGE_SAVED_GAME_KEY, updateCollectedSoulsCounter } from \"./game/world-state\";\nimport { songAudioSource, audioContext } from \"./music/audio-context\";\nimport { CSM_PLANE_DISTANCE, fieldOfViewAmount, mat_perspective, zFar, zNear } from \"./math/matrix-perspective\";\nimport { mainMenuVisible, setMainMenuVisible, absoluteTime, gameTimeDelta } from \"./game/game-time\";\n\nexport let interact_pressed: 0 | 1;\n\nexport const resetInteractPressed = () => {\n  interact_pressed = 0;\n};\n\nexport let player_first_person: 0 | 1 | undefined;\n\nexport let input_forward = 0;\n\nexport let input_strafe = 0;\n\nexport let updateInput: () => void;\n\nexport let projection: DOMMatrix;\n\nexport let csm_projections: DOMMatrix[];\n\nexport const initPage = () => {\n  let touchStartTime: number | undefined;\n\n  let touchPosStartX: number | undefined;\n  let touchPosStartY: number | undefined;\n  let touchPosIdentifier: number | undefined;\n  let touchPosMoved: number | undefined;\n\n  let touchRotX: number | undefined;\n  let touchRotY: number | undefined;\n  let touchRotIdentifier: number | undefined;\n  let touchRotMoved: number | undefined;\n  let touchStartCameraRotX: number | undefined;\n  let touchStartCameraRotY: number | undefined;\n  let touch_movementX: number;\n  let touch_movementY: number;\n\n  let gamepadInteractPressed: 0 | 1 | undefined;\n\n  let music_on = !DEBUG || !DEBUG_FLAG1;\n\n  const keyboard_downKeys: (boolean | 0 | 1 | undefined)[] = [];\n\n  const KEY_INTERACT = 0;\n  const KEY_MENU = 1;\n  const KEY_LEFT = 2;\n  const KEY_RIGHT = 3;\n  const KEY_FRONT = 4;\n  const KEY_BACK = 5;\n\n  const updateMusicOnState = () => {\n    b4.innerHTML = \"Music: \" + music_on;\n    if (mainMenuVisible || !music_on) {\n      songAudioSource.disconnect();\n    } else {\n      // connect the AudioBufferSourceNode to the  destination so we can hear the sound\n      songAudioSource.connect(audioContext.destination);\n    }\n  };\n\n  const handleResize = () => {\n    const mx = ((hC.height = innerHeight) / (hC.width = innerWidth)) * fieldOfViewAmount;\n    projection = mat_perspective(zNear, zFar, mx, fieldOfViewAmount);\n    csm_projections = [\n      mat_perspective(zNear, CSM_PLANE_DISTANCE, mx, fieldOfViewAmount),\n      mat_perspective(CSM_PLANE_DISTANCE, zFar, mx, fieldOfViewAmount),\n    ];\n\n    touchPosIdentifier = touchRotIdentifier = undefined;\n    keyboard_downKeys.length =\n      interact_pressed =\n      gamepadInteractPressed =\n      touch_movementX =\n      touch_movementY =\n      input_forward =\n      input_strafe =\n        0;\n\n    if (document.hidden) {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      // mainMenu(true);\n    }\n  };\n\n  const mainMenu = (value: boolean, firstPerson: 0 | 1 = 0) => {\n    if (mainMenuVisible !== value) {\n      setMainMenuVisible(value);\n      player_first_person = firstPerson;\n      handleResize();\n      updateCollectedSoulsCounter();\n      document.body.className = value ? \"l m\" : \"l\";\n      try {\n        if (value) {\n          document.exitFullscreen().catch(() => 0);\n          document.exitPointerLock();\n        } else {\n          document.body.requestFullscreen().catch(() => 0);\n          songAudioSource.start();\n        }\n      } catch {}\n      updateMusicOnState();\n    }\n  };\n\n  if (!DEBUG) {\n    oncontextmenu = () => false;\n  }\n\n  // \"Play\" button\n  b1.onclick = () => mainMenu(false);\n\n  // \"Play first person\" button\n  b2.onclick = () => mainMenu(false, 1);\n\n  // Menu hamburger button\n  b5.onclick = () => mainMenu(true);\n\n  // \"Music\" button\n  b4.onclick = () => {\n    music_on = !music_on;\n    updateMusicOnState();\n  };\n\n  // \"Restart\" button\n  b3.onclick = () => {\n    // eslint-disable-next-line no-alert\n    if (confirm(\"Restart game?\")) {\n      localStorage[LOCAL_STORAGE_SAVED_GAME_KEY] = \"\";\n      location.reload();\n    }\n  };\n\n  onclick = (e) => {\n    if (!mainMenuVisible) {\n      if (e.target === hC) {\n        interact_pressed = 1;\n      }\n      if (player_first_person) {\n        try {\n          hC.requestPointerLock();\n        } catch {}\n      }\n    }\n  };\n\n  onkeyup = onkeydown = (e) => {\n    if (!e.repeat) {\n      const pressed = !!e.type[5] && (!DEBUG || e.target === document.body);\n\n      const mapped = (\n        {\n          [\"KeyE\"]: KEY_INTERACT,\n          [\"Space\"]: KEY_INTERACT,\n          [\"Enter\"]: KEY_INTERACT,\n\n          [\"Escape\"]: KEY_MENU,\n\n          [\"KeyA\"]: KEY_LEFT,\n          [\"ArrowLeft\"]: KEY_LEFT,\n\n          [\"KeyD\"]: KEY_RIGHT,\n          [\"ArrowRight\"]: KEY_RIGHT,\n\n          [\"KeyW\"]: KEY_FRONT,\n          [\"ArrowUp\"]: KEY_FRONT,\n\n          [\"KeyS\"]: KEY_BACK,\n          [\"ArrowDown\"]: KEY_BACK,\n        } as Partial<Record<KEY_CODE, number>>\n      )[e.code as KEY_CODE]!;\n\n      keyboard_downKeys[mapped] = pressed;\n\n      if (pressed) {\n        if (mapped === KEY_INTERACT) {\n          interact_pressed = 1;\n        }\n        if (mapped === KEY_MENU) {\n          mainMenu(true);\n        }\n      }\n    }\n  };\n\n  onmousemove = ({ movementX, movementY }) => {\n    if (player_first_person && (movementX || movementY)) {\n      camera_rotation.y += movementX * 0.1;\n      camera_rotation.x += movementY * 0.1;\n    }\n  };\n\n  hC.ontouchstart = (e) => {\n    if (!mainMenuVisible) {\n      for (const { pageX, pageY, identifier } of e.changedTouches) {\n        if (player_first_person && pageX > hC.clientWidth / 2) {\n          if (touchRotIdentifier === undefined) {\n            touchRotMoved = 0;\n            touchRotX = pageX;\n            touchRotY = pageY;\n            touchRotIdentifier = identifier;\n            touchStartCameraRotX = camera_rotation.y;\n            touchStartCameraRotY = camera_rotation.x;\n          }\n        } else if (touchPosIdentifier === undefined) {\n          touchPosMoved = 0;\n          touchPosStartX = pageX;\n          touchPosStartY = pageY;\n          touchPosIdentifier = identifier;\n        }\n      }\n      touchStartTime = absoluteTime;\n    }\n  };\n\n  const TOUCH_SIZE = 20;\n  const TOUCH_MOVE_THRESHOLD = 0.5;\n  const TOUCH_MOVE_SNAP = 0.2;\n\n  hC.ontouchmove = (e) => {\n    if (!mainMenuVisible) {\n      for (const { pageX, pageY, identifier } of e.changedTouches) {\n        if (touchRotIdentifier === identifier) {\n          camera_rotation.y = touchStartCameraRotX! + (pageX - touchRotX!) / 2.3;\n          camera_rotation.x = touchStartCameraRotY! + (pageY - touchRotY!) / 2.3;\n          touchRotMoved = 1;\n        }\n        if (touchPosIdentifier === identifier) {\n          const deltaX = (touchPosStartX! - pageX) / TOUCH_SIZE;\n          const absDeltaX = abs(deltaX);\n          const deltaY = (touchPosStartY! - pageY) / TOUCH_SIZE;\n          const absDeltaY = abs(deltaY);\n\n          const m = max(absDeltaX, absDeltaY) > TOUCH_MOVE_THRESHOLD;\n          if (m) {\n            // Moved, disable the click\n            touchPosMoved = 1;\n          }\n\n          touch_movementX = +(m && absDeltaX > TOUCH_MOVE_SNAP) * clamp(deltaX, -1);\n          touch_movementY = +(m && absDeltaY > TOUCH_MOVE_SNAP) * clamp(deltaY, -1);\n\n          // Move the invisible joysticks\n          if (absDeltaX > 2) {\n            touchPosStartX = pageX + (deltaX < 0 ? -1 : 1) * TOUCH_SIZE;\n          }\n          if (absDeltaY > 2) {\n            touchPosStartY = pageY + (deltaY < 0 ? -1 : 1) * TOUCH_SIZE;\n          }\n        }\n      }\n    }\n  };\n\n  hC.ontouchend = (e) => {\n    if (document.activeElement === document.body) {\n      e.preventDefault();\n    }\n\n    let click: 1 | undefined;\n    for (const touch of e.changedTouches) {\n      if (touch.identifier === touchRotIdentifier) {\n        touchRotIdentifier = undefined;\n        if (!touchRotMoved) {\n          click = 1;\n        }\n        touchRotMoved = 0;\n      } else if (touch.identifier === touchPosIdentifier) {\n        touchPosIdentifier = undefined;\n        touch_movementY = touch_movementX = 0;\n        if (!touchPosMoved) {\n          click = 1;\n        }\n        touchPosMoved = 0;\n      } else {\n        click = 1;\n      }\n    }\n\n    if (e.target === hC && click && touchStartTime) {\n      const diff = absoluteTime - touchStartTime;\n      if (diff > 0.02 && diff < 0.7) {\n        interact_pressed = 1;\n      }\n    }\n  };\n\n  updateInput = () => {\n    input_forward = touch_movementY + (keyboard_downKeys[KEY_FRONT] ? 1 : 0) - (keyboard_downKeys[KEY_BACK] ? 1 : 0);\n    input_strafe = touch_movementX + (keyboard_downKeys[KEY_LEFT] ? 1 : 0) - (keyboard_downKeys[KEY_RIGHT] ? 1 : 0);\n\n    const gamepad = navigator.getGamepads()[0];\n    if (gamepad) {\n      const { buttons, axes } = gamepad;\n      const getGamepadButtonState = (index: number) =>\n        buttons[index]?.pressed || (buttons[index]?.value as any) > 0 ? 1 : 0;\n\n      if (player_first_person) {\n        camera_rotation.x += gameTimeDelta * threshold(axes[3], 0.3) * 80;\n        camera_rotation.y += gameTimeDelta * threshold(axes[2], 0.3) * 80;\n      }\n\n      input_forward +=\n        getGamepadButtonState(GAMEPAD_BUTTON_UP) - getGamepadButtonState(GAMEPAD_BUTTON_DOWN) - threshold(axes[1], 0.2);\n\n      input_strafe +=\n        getGamepadButtonState(GAMEPAD_BUTTON_LEFT) -\n        getGamepadButtonState(GAMEPAD_BUTTON_RIGHT) -\n        threshold(axes[0], 0.2);\n\n      if (getGamepadButtonState(GAMEPAD_BUTTON_START)) {\n        mainMenu(true);\n      }\n\n      const interactButtonPressed =\n        getGamepadButtonState(GAMEPAD_BUTTON_X) ||\n        getGamepadButtonState(GAMEPAD_BUTTON_Y) ||\n        getGamepadButtonState(GAMEPAD_BUTTON_A) ||\n        getGamepadButtonState(GAMEPAD_BUTTON_B);\n\n      if (interactButtonPressed && !gamepadInteractPressed) {\n        interact_pressed = 1;\n      }\n      gamepadInteractPressed = interactButtonPressed;\n    }\n  };\n\n  document.onvisibilitychange = onblur = onresize = handleResize;\n\n  mainMenu(!DEBUG || !!DEBUG_FLAG2);\n\n  if (DEBUG) {\n    console.log(\"fieldOfViewAmount:\", fieldOfViewAmount);\n  }\n};\n","export const material = NO_INLINE(\n  (r: number, g: number, b: number, a: number = 0): number =>\n    ((a * 255) << 24) | ((b * 255) << 16) | ((g * 255) << 8) | (r * 255),\n);\n","export const worldMatricesBuffer = new Float32Array(39 * 16);\n\nexport const objectsMatricesBuffer = new Float32Array(39 * 16);\n","import {\n  levers,\n  souls,\n  allModels,\n  MODEL_ID_FIRST_BOAT,\n  player_position_final,\n  MODEL_KIND_GAME,\n  type MODEL_KIND,\n  type Model,\n  type Circle,\n  type Lever,\n  type Soul,\n  SOULS_COUNT,\n} from \"./models\";\nimport { onPlayerPullLever, onSoulCollected } from \"./world-state\";\nimport { interact_pressed } from \"../page\";\nimport type { Vec3Optional } from \"../math/vectors\";\nimport { min, angle_lerp_degrees, DEG_TO_RAD, clamp, abs } from \"../math/math\";\nimport { matrixCopy, matrixToArray } from \"../math/matrix\";\nimport { lerpDamp, damp, gameTime } from \"./game-time\";\nimport { polygons_transform, type Polygon } from \"../geometry/polygon\";\nimport { cylinder } from \"../geometry/geometry\";\nimport { material } from \"../geometry/material\";\nimport { objectsMatricesBuffer } from \"./models-matrices\";\n\nexport let currentEditModel: Model;\n\nexport const meshAdd = (\n  polygons: Polygon<Readonly<Vec3Optional>>[],\n  transform: DOMMatrixReadOnly = new DOMMatrix(),\n  color?: number | undefined,\n) => currentEditModel.$polygons!.push(...polygons_transform(polygons, transform, color));\n\nexport const newModel = (fn: (model: Model) => void, $kind: MODEL_KIND = MODEL_KIND_GAME) => {\n  const previousModel = currentEditModel;\n  const model: Model = {\n    $matrix: new DOMMatrix(),\n    $modelId: allModels.length,\n    $kind,\n    $polygons: [],\n  };\n  allModels.push(model);\n  currentEditModel = model;\n  fn(model);\n  currentEditModel = previousModel;\n  return model;\n};\n\nconst LEVER_SENSITIVITY_RADIUS = 3;\nconst SOUL_SENSITIVITY_RADIUS = 1.6;\n\nconst distanceToPlayer = (transform: DOMMatrixReadOnly): number => {\n  const p = transform.transformPoint();\n  return Math.hypot(player_position_final.x - p.x, player_position_final.y - p.y, player_position_final.z - p.z);\n};\n\nexport const newLever = (transform: DOMMatrixReadOnly): void => {\n  const $locMatrix = new DOMMatrix();\n  const $matrix = new DOMMatrix();\n  const $parent = currentEditModel;\n  const index = levers.length;\n\n  const _locMatrix = () => matrixCopy($parent.$matrix, $locMatrix).multiplySelf(transform);\n\n  const lever: Lever = {\n    $value: 0,\n    $lerpValue: 0,\n    $lerpValue2: 0,\n    $parent,\n    _locMatrix,\n    _update: () => {\n      matrixCopy(_locMatrix(), $matrix)\n        .rotateSelf(lever.$lerpValue * 60 - 30, 0)\n        .translateSelf(0, 1);\n\n      lever.$lerpValue = lerpDamp(lever.$lerpValue, lever.$value, 4);\n      lever.$lerpValue2 = lerpDamp(lever.$lerpValue2, lever.$value, 1);\n\n      if (interact_pressed && distanceToPlayer($locMatrix) < LEVER_SENSITIVITY_RADIUS) {\n        if (lever.$lerpValue < 0.3 || lever.$lerpValue > 0.7) {\n          lever.$value = lever.$value ? 0 : 1;\n          onPlayerPullLever(index);\n        }\n      }\n\n      matrixToArray($matrix, objectsMatricesBuffer, index + SOULS_COUNT);\n      // Encode lerp value in matrix m44 so fragmemt shader can change the lever handle color\n      objectsMatricesBuffer[index * 16 + (15 + SOULS_COUNT * 16)] = 1 - lever.$lerpValue;\n    },\n  };\n  levers.push(lever);\n\n  meshAdd(cylinder(5), transform.translate(-0.2).rotate(90, 90).scale(0.4, 0.1, 0.5), material(0.4, 0.5, 0.5));\n  meshAdd(cylinder(5), transform.translate(0.2).rotate(90, 90).scale(0.4, 0.1, 0.5), material(0.4, 0.5, 0.5));\n  meshAdd(cylinder(), transform.translate(0, -0.4).scale(0.5, 0.1, 0.5), material(0.5, 0.5, 0.4));\n};\n\nexport const newSoul = (transform: DOMMatrixReadOnly, ...walkingPath: number[][]) => {\n  const $matrix = new DOMMatrix();\n  const parentModel = currentEditModel;\n  const index = souls.length;\n  const circles = (walkingPath as Circle[]).map(([x, z, w]) => ({ x, z, w }));\n  let circle = circles[0]!;\n  let { x: targetX, z: targetZ } = circle;\n  let soulX = targetX;\n  let soulZ = targetZ;\n  let dirX = -1;\n  let dirZ = 0;\n  let randAngle = 0;\n  let lookAngle = 0;\n  let prevX = 0;\n  let prevZ = 0;\n  let velocity = 3;\n  let wasInside: boolean | undefined | 1 = 1;\n\n  const soul: Soul = {\n    $value: 0,\n    _update: () => {\n      if (!soul.$value) {\n        let isInside: boolean | undefined;\n        let contextualVelocity = 1;\n        let mindist = Infinity;\n\n        for (const c of circles) {\n          const { x, z, w } = c;\n          const distance = Math.hypot(targetX - x, targetZ - z);\n          const circleSDF = distance - w;\n          isInside ||= distance < w;\n          if (circleSDF > 0 && circleSDF < mindist) {\n            mindist = circleSDF;\n            circle = c;\n          }\n          contextualVelocity = min(contextualVelocity, distance / w);\n        }\n\n        if (!isInside) {\n          const { x, z, w } = circle;\n          const ax = targetX - x;\n          const az = targetZ - z;\n          let magnitude = Math.hypot(ax, az);\n          let angle = Math.atan2(-az, ax);\n          if (wasInside) {\n            randAngle = ((Math.random() - 0.5) * Math.PI) / 2;\n            velocity = clamp(velocity / (1 + Math.random()));\n          }\n          angle += randAngle;\n          dirX = -Math.cos(angle);\n          dirZ = Math.sin(angle);\n          if (magnitude > 0.1) {\n            // limit the vector length to the circle radius, as a security measure\n            magnitude = min(magnitude, w) / (magnitude || 1);\n            targetX = ax * magnitude + x;\n            targetZ = az * magnitude + z;\n          }\n        }\n\n        wasInside = isInside;\n\n        velocity = lerpDamp(velocity, (1 - contextualVelocity) * 6 + 3, contextualVelocity + 3);\n        soulX = lerpDamp(soulX, (targetX = lerpDamp(targetX, targetX + dirX, velocity)), velocity);\n        soulZ = lerpDamp(soulZ, (targetZ = lerpDamp(targetZ, targetZ + dirZ, velocity)), velocity);\n\n        lookAngle = angle_lerp_degrees(lookAngle, Math.atan2(soulX - prevX, soulZ - prevZ) / DEG_TO_RAD - 180, damp(3));\n\n        if (\n          distanceToPlayer(\n            matrixCopy(parentModel.$matrix, $matrix)\n              .multiplySelf(transform)\n              .translateSelf((prevX = soulX), 0, (prevZ = soulZ))\n              .rotateSelf(0, lookAngle, Math.sin(gameTime * 1.7) * 7),\n          ) < SOUL_SENSITIVITY_RADIUS\n        ) {\n          soul.$value = 1;\n          onSoulCollected();\n        }\n      }\n\n      if (soul.$value) {\n        matrixCopy(allModels[MODEL_ID_FIRST_BOAT]!.$matrix, $matrix).translateSelf(\n          (index % 4) * 1.2 - 1.7 + Math.sin(gameTime + index) / 7,\n          -2,\n          -5.5 + ((index / 4) | 0) * 1.7 + abs((index % 4) - 2) + Math.cos(gameTime / 1.5 + index) / 6,\n        );\n      }\n\n      matrixToArray($matrix, objectsMatricesBuffer, index);\n    },\n  };\n\n  if (DEBUG_FLAG0) {\n    for (const c of circles) {\n      meshAdd(cylinder(12), transform.translate(c.x, -1.7, c.z).scale(c.w, 0.01, c.w), material(0.3, 0.3, 0.38));\n    }\n  }\n\n  souls.push(soul);\n};\n\nexport const checkModelId = DEBUG\n  ? (name: string, expectedId: number) => {\n      console.log(`model ${name} id: ${currentEditModel.$modelId}`);\n      if (currentEditModel.$modelId !== expectedId) {\n        throw new Error(`Model ${name} id should be ${expectedId} but is ${currentEditModel.$modelId}`);\n      }\n    }\n  : () => {};\n","import {\n  levers,\n  souls,\n  MODEL_KIND_MESH,\n  MODEL_KIND_GAME_NO_ATTACH_PLAYER,\n  MODEL_ID_FIRST_BOAT,\n  MODEL_ID_PLAYER_BODY,\n  MODEL_ID_PLAYER_LEG0,\n  MODEL_ID_PLAYER_LEG1,\n  MODEL_ID_LEVER,\n  MODEL_ID_SOUL_COLLISION,\n  MODEL_ID_SOUL,\n  MODEL_ID_ROTATING_PLATFORM,\n} from \"./models\";\nimport { clamp, lerpneg, abs, max, min } from \"../math/math\";\nimport { GQuad, cylinder, polygon_regular, sphere, cylinder_sides } from \"../geometry/geometry\";\nimport { csg_union, csg_polygons_subtract } from \"../geometry/csg\";\nimport {\n  firstBoatLerp,\n  secondBoatLerp,\n  rotatingHexCorridorRotation,\n  rotatingPlatform1Rotation,\n  rotatingPlatform2Rotation,\n} from \"./world-state\";\nimport { translation, rotation, scaling } from \"../math/matrix-transforms\";\nimport { integers_map } from \"../math/integers-map\";\nimport { gameTime } from \"./game-time\";\nimport { checkModelId, meshAdd, newLever, newModel, newSoul } from \"./models-factory\";\nimport { polygon_transform, polygons_transform, type Polygon } from \"../geometry/polygon\";\nimport { material } from \"../geometry/material\";\n\nexport const build_life_the_universe_and_everything = (): 42 | void => {\n  if (DEBUG) {\n    console.time(\"build_life_the_universe_and_everything\");\n  }\n  const HORN_STACKS = 10;\n\n  const hornsMatrices = integers_map(HORN_STACKS + 1, (i: number) =>\n    translation(Math.sin((i / HORN_STACKS) * Math.PI), i / HORN_STACKS)\n      .rotate(10 * (i / HORN_STACKS))\n      .scale(1.0001 - i / HORN_STACKS, 0, 1 - i / HORN_STACKS),\n  );\n\n  const hornPolygons = integers_map(HORN_STACKS, (i) =>\n    cylinder_sides(\n      polygon_transform(polygon_regular(18), hornsMatrices[i]!).reverse(),\n      polygon_transform(polygon_regular(18), hornsMatrices[i + 1]!),\n      1,\n    ),\n  ).flat();\n\n  // Initialize the full screen triangle for the sky. Must be the first model.\n\n  newModel(() => meshAdd([GQuad.slice(1)], translation(-2).scale3d(3).rotate(90, 0)), MODEL_KIND_MESH);\n\n  newModel(() => {\n    const boatAnimationMatrix = (matrix: DOMMatrix, x: number, y: number, z: number) =>\n      matrix\n        .translateSelf(x + Math.sin(gameTime + 2) / 5, y + Math.sin(gameTime * 0.8) / 3, z)\n        .rotateSelf(Math.sin(gameTime) * 2, Math.sin(gameTime * 0.7), Math.sin(gameTime * 0.9));\n\n    const makeBigArcPolygons = (height: number) =>\n      csg_polygons_subtract(\n        polygons_transform(cylinder(), translation(0, -height / 2).scale(6, height - 1, 2.2)),\n        polygons_transform(cylinder(), translation(0, -height / 2 - 6).scale(4, height - 3, 4)),\n        polygons_transform(\n          cylinder(32, 1),\n          translation(0, height / 2 - 9)\n            .rotate(90, 0, 90)\n            .scale3d(4),\n        ),\n      );\n\n    const boatPolygons = csg_polygons_subtract(\n      polygons_transform(\n        cylinder(30, 1, 1.15, 1),\n        translation(0, -3).scale(3.5, 1, 3.5),\n        material(0.7, 0.4, 0.25, 0.7),\n      ),\n      polygons_transform(cylinder(30, 1, 1.3, 1), translation(0, -2.5).scale(2.6, 1, 3), material(0.7, 0.4, 0.25, 0.2)),\n      polygons_transform(cylinder(), translation(4, -1.2).scale3d(2), material(0.7, 0.4, 0.25, 0.3)),\n    );\n\n    const gateBarsPolygons = integers_map(7, (i) =>\n      polygons_transform(\n        cylinder(6, 1),\n        translation(4 * (i / 6 - 0.5), 3).scale(0.2, 3, 0.2),\n        material(0.3, 0.3, 0.38),\n      ),\n    ).flat();\n\n    // ========= FIRST BOAT (modelId:2) ========= //\n\n    newModel((model) => {\n      checkModelId(\"FIRST_BOAT\", MODEL_ID_FIRST_BOAT);\n      model._update = (matrix) => boatAnimationMatrix(matrix, -12, 4.2, -66 + firstBoatLerp * 40);\n      meshAdd(boatPolygons);\n\n      // LEVER 0 - lever over the first boat\n      newLever(translation(0, -3, 4));\n    });\n\n    // LEVER 1 - lever for the first gate, after the first boat\n    newLever(translation(-5.4, 1.5, -19).rotate(0, -90));\n\n    // ========= WORLD! ========= //\n\n    // SOUL 0 - soul after first boat\n    newSoul(translation(-0.5, 2.8, -20), [0, 0, 2.5], [0, -3, 2.5]);\n\n    // SOUL 1 - soul after first gate\n    newSoul(\n      translation(0, 2.8),\n      [5, 10, 3],\n      [-5, 10, 3],\n      ...polygon_regular(18).map(({ x, z }) => [x * 7, z * 10, 4.5 - abs(x) * 2]),\n    );\n\n    // first boat attachment\n\n    meshAdd(cylinder(), translation(-5, -0.2, -26).scale(3.2, 1, 2.5).skewX(3), material(0.8, 0.8, 0.8, 0.2));\n\n    // gate columns\n    GQuad.map(({ x, z }) =>\n      meshAdd(cylinder(6), translation(x * 3, 3, z * 15).scale(0.7, 4, 0.7), material(0.6, 0.3, 0.3, 0.4)),\n    );\n\n    // in and out\n    meshAdd(cylinder(), translation(0, 0, -23).scale(3, 1, 8), material(0.9, 0.9, 0.9, 0.2));\n    meshAdd(cylinder(), translation(0, 0, 22).scale(3, 1, 8), material(0.9, 0.9, 0.9, 0.2));\n\n    [-15, 15].map((z, i) => {\n      //  gate top\n      meshAdd(cylinder(), translation(0, 6.3, z).scale(4, 0.3, 1), material(0.3, 0.3, 0.3, 0.4));\n      //  gate bottom\n      meshAdd(cylinder(), translation(0, 1, z).scale(3, 0.2, 0.35), material(0.5, 0.5, 0.5, 0.3));\n      // in and out gate bars\n      newModel((model) => {\n        model._update = (matrix) =>\n          matrix.translateSelf(0, 0, z).scaleSelf(1, clamp(1.22 - levers[i + 1]!.$lerpValue), 1);\n        meshAdd(gateBarsPolygons);\n      });\n    });\n\n    // horns\n\n    integers_map(5, (i) =>\n      integers_map(2, (j) =>\n        meshAdd(\n          hornPolygons,\n          translation((j - 0.5) * 18.5, 0, i * 4.8 - 9.5)\n            .rotate(0, 180 - j * 180)\n            .scale(1.2, 10, 1.2),\n          material(1, 1, 0.8, 0.2),\n        ),\n      ),\n    );\n\n    meshAdd(cylinder(), translation(3, 1.5, -20).scale(0.5, 2, 5), material(0.7, 0.7, 0.7, 0.2));\n\n    // first lever pad\n    meshAdd(cylinder(), translation(-3.4, -0.2, -19).scale(2, 1, 1.5).rotate(0, -90), material(0.75, 0.75, 0.75, 0.2));\n    meshAdd(cylinder(5), translation(-5.4, 0, -19).scale(2, 1, 2).rotate(0, -90), material(0.6, 0.3, 0.3, 0.4));\n\n    // descent\n\n    meshAdd(\n      cylinder(),\n      rotation(0, 60).translate(14.8, -1.46, -1).rotate(-30).scale(4, 0.6, 4.5),\n      material(0.8, 0.2, 0.2, 0.5),\n    );\n\n    // base\n\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          // lower base\n          polygons_transform(\n            cylinder(6, 0, 0, 0.3),\n            translation(8, -3, -4).scale(13, 1, 13),\n            material(0.7, 0.7, 0.7, 0.2),\n          ),\n\n          // hole extension\n          polygons_transform(cylinder(6), translation(0, -8).scale(9, 8, 8), material(0.4, 0.2, 0.5, 0.5)),\n\n          // middle base\n          polygons_transform(\n            cylinder(6, 0, 0, 0.3),\n            translation(0, -0.92).scale(13, 2, 13),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n        ),\n        // hole\n        polygons_transform(cylinder(5), scaling(5, 30, 5), material(0.4, 0.2, 0.6, 0.5)),\n\n        // smooth hole\n        polygons_transform(cylinder(5, 0, 1.5), translation(0, 1).scale(4.5, 0.3, 4.5), material(0.7, 0.5, 0.9, 0.2)),\n\n        // descent cut\n        polygons_transform(\n          cylinder(),\n          rotation(0, 60).translate(14, 0.7, -1).rotate(-35).scale(2, 2, 2),\n          material(0.5, 0.5, 0.5, 0.5),\n        ),\n\n        // lower lever pad\n        polygons_transform(cylinder(6), translation(15, -1.5, 4).scale(3.5, 1, 3.5), material(0.5, 0.5, 0.5, 0.5)),\n      ),\n    );\n\n    // moving central platform in the first level\n\n    newModel((model) => {\n      model._update = (matrix) =>\n        matrix.translateSelf(\n          0,\n          levers[3]!.$lerpValue > 0.01\n            ? (Math.cos(gameTime * 1.5) * 5 + 2) * levers[3]!.$lerpValue2 * (1 - levers[2]!.$lerpValue) +\n                (1 - levers[3]!.$lerpValue) * -15\n            : // invisible\n              -500,\n          0,\n        );\n      meshAdd(cylinder(5), translation(0, -0.2).scale(5, 1, 5), material(0.6, 0.65, 0.7, 0.3));\n\n      // LEVER 2 - lever over the central moving platform\n      newLever(translation(0, 1.2));\n    });\n\n    // LEVER 3, lever in the descent of the first level\n    newLever(translation(15, -2, 4));\n\n    // ******** LEVEL 2 ********\n\n    const level2Oscillation = () => min(levers[2]!.$lerpValue2, 1 - levers[4]!.$lerpValue2);\n\n    const blackPlatform = (freq: number, amplitude: number, pz: number) =>\n      newModel((model) => {\n        model._update = (matrix) =>\n          matrix.translateSelf(level2Oscillation() * Math.sin(freq * 3 + gameTime * freq) * amplitude);\n        GQuad.map(({ x, z }) => {\n          // column body\n          meshAdd(cylinder(11, 1), translation(x * 4, 4, pz + z * 4).scale(0.8, 3, 0.8), material(0.5, 0.3, 0.7, 0.6));\n          // column top\n          meshAdd(cylinder(), translation(x * 4, 7, pz + z * 4).scale(1, 0.3), material(0.5, 0.5, 0.5, 0.3));\n        });\n\n        meshAdd(\n          csg_polygons_subtract(\n            polygons_transform(cylinder(), translation(0, 0, pz).scale(5, 1, 5), material(0.8, 0.8, 0.8, 0.3)),\n            ...[-1, 1].map((i) =>\n              polygons_transform(\n                cylinder(),\n                translation(5 * i, 0.2, pz)\n                  .rotate(i * -30)\n                  .scale(4, 1, 2),\n                material(0.8, 0.8, 0.8, 0.3),\n              ),\n            ),\n          ),\n        );\n        // bottom\n        meshAdd(cylinder(), translation(0, -3, pz).scale(8, 2, 8), material(0.4, 0.4, 0.4, 0.3));\n      });\n\n    blackPlatform(0.7, 12, 35);\n    blackPlatform(1, 8.2, 55);\n\n    // central oscillating platform\n    newModel((model) => {\n      model._update = (matrix) => matrix.translateSelf(level2Oscillation() * Math.sin(gameTime / 1.5 + 2) * 12);\n      meshAdd(\n        csg_polygons_subtract(\n          csg_union(\n            polygons_transform(cylinder(), scaling(1.5, 1, 5), material(0.9, 0.9, 0.9, 0.2)),\n            polygons_transform(cylinder(6), scaling(4, 1, 5), material(0.9, 0.9, 0.9, 0.2)),\n            polygons_transform(cylinder(), translation(0, -2).scale(2, 3.2, 1.9), material(0.3, 0.8, 0.5, 0.5)),\n            polygons_transform(cylinder(16, 1, 0, 4), scaling(1, 1, 1.5).rotate(0, 90), material(0.9, 0.9, 0.9, 0.2)),\n          ),\n          polygons_transform(cylinder(), scaling(1.3, 10, 1.3), material(0.2, 0.7, 0.4, 0.6)),\n        ),\n        translation(0, 0, 45),\n      );\n\n      // SOUL 2 - soul over the central oscillating platform in the second level\n      newSoul(translation(0, 2.8, 45), [0, 0, 4.5]);\n    });\n\n    const level3Oscillation = () =>\n      clamp(1 - level2Oscillation() * 5) * lerpneg(levers[4]!.$lerpValue, levers[5]!.$lerpValue);\n\n    // ******** LEVEL 3 ********\n\n    meshAdd(cylinder(), translation(-21.1 + 2.45, -3, 55).scale(2.45, 1.4, 2.7), material(0.9, 0.9, 0.9, 0.2));\n\n    // triangle platform\n\n    newModel((model) => {\n      model._update = (matrix) => matrix.translateSelf((1 - level2Oscillation()) * 9.8);\n\n      meshAdd(cylinder(3), translation(-23, -1.7, 55.8).scale(5, 0.7, 8.3), material(0.3, 0.6, 0.6, 0.2));\n      meshAdd(cylinder(8), translation(-23, -2.2, 66.5).scale(1.5, 1.2, 1.5), material(0.8, 0.8, 0.8, 0.2));\n      meshAdd(cylinder(), translation(-23, -3, 55).scale(5.2, 1.7, 3), material(0.5, 0.5, 0.5, 0.3));\n      meshAdd(cylinder(), translation(-23, -2.2, 62).scale(3, 1, 4), material(0.5, 0.5, 0.5, 0.3));\n\n      newLever(translation(-23, -0.5, 66.5));\n    });\n\n    // vertically oscillating mini platforms\n\n    newModel((model) => {\n      model._update = (matrix) => matrix.translateSelf(0, level3Oscillation() * Math.sin(gameTime * (1.5 * 0.9)) * 4);\n\n      meshAdd(cylinder(), translation(-21.1 - 1.45, -3, 55).scale(1.45, 1.4, 2.7), material(0.7, 0.7, 0.7, 0.2));\n\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(cylinder(), scaling(3, 1.4, 2.7)),\n          polygons_transform(cylinder(), scaling(1.2, 8, 1.2)),\n        ),\n        translation(-33, -3, 55),\n        material(0.7, 0.7, 0.7, 0.2),\n      );\n    });\n\n    // horizontaly oscillating mini platforms\n\n    newModel((model) => {\n      model._update = (matrix) => matrix.translateSelf(0, 0, level3Oscillation() * Math.sin(gameTime * 0.9) * 8);\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(cylinder(), translation(-27, -3, 55).scale(3, 1.4, 2.7), material(0.9, 0.9, 0.9, 0.2)),\n          polygons_transform(cylinder(), translation(-27, -3, 55).scale(1, 3), material(0.9, 0.9, 0.9, 0.2)),\n        ),\n      );\n\n      meshAdd(cylinder(), translation(-39, -3, 55).scale(3, 1.4, 2.7), material(0.9, 0.9, 0.9, 0.2));\n    });\n\n    // hex corridor door\n\n    newModel((model) => {\n      model._update = (matrix) => matrix.translateSelf(0, levers[4]!.$lerpValue2 * -6.5);\n      meshAdd(\n        cylinder(6),\n        translation(-44.5, 0, 55).rotate(90, 90).rotate(0, 90).scale(5.9, 0.5, 5.9),\n        material(0.7, 0.7, 0.7, 0.4),\n      );\n    });\n\n    newLever(translation(-55, -1.1, 46).rotate(0, 90));\n\n    meshAdd(cylinder(6), translation(-61.3, -2.4, 49).scale(3, 1, 5), material(0.4, 0.6, 0.6, 0.3));\n    meshAdd(cylinder(7), translation(-57, -2.6, 46).scale(4, 1, 4), material(0.8, 0.8, 0.8, 0.3));\n\n    // hex corridor\n\n    const hexCorridorPolygons = [\n      ...polygons_transform(cylinder(), translation(0, -3).scale(11, 1.4, 3), material(0.9, 0.9, 0.9, 0.2)),\n      ...csg_polygons_subtract(\n        polygons_transform(cylinder(6), rotation(90).scale(6, 8, 6), material(0.3, 0.6, 0.6, 0.3)),\n        polygons_transform(\n          cylinder(4, 0, 0.01),\n          translation(0, 6).scale(12, 2, 0.75).rotate(0, 45),\n          material(0.3, 0.6, 0.6, 0.3),\n        ),\n        polygons_transform(cylinder(6), rotation(90).scale(5, 12, 5), material(0.3, 0.6, 0.6, 0.3)),\n        ...[5, 0, -5].map((x) =>\n          polygons_transform(\n            cylinder(5),\n            translation(x, 2.5).rotate(90, 0, 36).scale(1.8, 10, 1.8),\n            material(0.3, 0.6, 0.6, 0.3),\n          ),\n        ),\n      ),\n    ];\n\n    meshAdd(hexCorridorPolygons, translation(-53, 0, 55));\n\n    // rotating hex corridor\n\n    newModel((model) => {\n      model._update = (matrix) =>\n        matrix\n          .translateSelf(-75, (1 - levers[5]!.$lerpValue2) * (1 - levers[6]!.$lerpValue) * 3, 55)\n          .rotate(180 * (1 - levers[5]!.$lerpValue2) + rotatingHexCorridorRotation, 0);\n      meshAdd(hexCorridorPolygons);\n    }, MODEL_KIND_GAME_NO_ATTACH_PLAYER);\n\n    // connection from rotating hex corridor to platforms\n\n    meshAdd(cylinder(), translation(-88.3, -5.1, 55).rotate(-30).scale(5, 1.25, 4.5), material(0.7, 0.7, 0.7, 0.2));\n\n    meshAdd(\n      cylinder(3, 0, -0.5),\n      translation(-88.4, -3.9, 55).rotate(0, -90, 17).scale(3, 1.45, 5.9),\n      material(0.8, 0.8, 0.8, 0.2),\n    );\n\n    // platform after the rotating hex corridor\n\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          // base\n          polygons_transform(cylinder(), translation(-100, -2.5, 55).scale(8, 1, 8), material(0.8, 0.8, 0.8, 0.2)),\n          // right path to the boat\n          polygons_transform(\n            cylinder(),\n            translation(-113, -2.6, 55).scale(6.2, 1.1, 3).skewX(3),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n          // straiht line\n          polygons_transform(cylinder(), translation(-100, -2.6, 70).scale(3, 1.1, 7), material(0.8, 0.8, 0.8, 0.2)),\n          // 45 degrees detour\n          polygons_transform(\n            cylinder(),\n            translation(-96, -2.6, 73).rotate(0, 45).scale(3, 1.1, 5),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n          // 45 degrees detour hexagon\n          polygons_transform(\n            cylinder(6),\n            translation(-88.79, -2.6, 80.21).scale(6, 1.1, 6).rotate(0, 15),\n            material(0.6, 0.6, 0.6, 0.3),\n          ),\n\n          // ascension\n          polygons_transform(\n            cylinder(),\n            translation(-100, -1.1, 82.39).rotate(-15, 0).scale(3, 1.1, 6),\n            material(0.8, 0.8, 0.8, 0.2),\n          ),\n          // ascension continuation\n          polygons_transform(cylinder(), translation(-100, 0.42, 92).scale(3, 1.1, 4.1), material(0.8, 0.8, 0.8, 0.2)),\n        ),\n\n        // decorative octagon\n        polygons_transform(cylinder(8), translation(-100, -1, 55).scale(7, 0.9, 7), material(0.3, 0.3, 0.3, 0.4)),\n        polygons_transform(cylinder(8), translation(-100, -2, 55).scale(4, 0.3, 4), material(0.4, 0.4, 0.4, 0.5)),\n        polygons_transform(cylinder(8), translation(-100, -3, 55).scale(0.6, 1, 0.6), material(0.4, 0.4, 0.4, 0.5)),\n      ),\n    );\n\n    // SOUL 3 - soul in the central area, after the rotating hex corridor\n    newSoul(translation(-100, 0.2, 55), [0, 0, 7.5], [-8, 0, 3.5], [-12, 0, 3.5], [-15, 0, 3.5]);\n\n    // SOUL 4 - soul after the central gate\n    newSoul(translation(-89, 0.2, 80), [0, 0, 6]);\n\n    // first arc door\n\n    meshAdd(\n      csg_polygons_subtract(\n        polygons_transform(cylinder(), translation(-100, 1, 63).scale(7.5, 4), material(0.5, 0.5, 0.5, 0.4)),\n        polygons_transform(cylinder(), translation(-100, 0, 70).scale(2, 2, 10), material(0.5, 0.5, 0.5, 0.4)),\n        polygons_transform(\n          cylinder(20, 1),\n          translation(-100, 2, 70).scale(2, 2, 10).rotate(90, 0),\n          material(0.5, 0.5, 0.5, 0.4),\n        ),\n      ),\n    );\n\n    // gate bars\n    newModel((model) => {\n      model._update = (matrix) =>\n        matrix.translateSelf(-99.7, -1.9, 63.5).scale(1, clamp(1.1 - levers[6]!.$lerpValue), 1);\n      meshAdd(gateBarsPolygons);\n    });\n\n    // hex columns\n\n    GQuad.map(({ x, z }) => {\n      meshAdd(cylinder(6), translation(-100 + x * 7, -3, z * 7 + 55).scale(1, 8.1), material(0.6, 0.15, 0.15, 0.8));\n      [4, -0.4].map((i) =>\n        meshAdd(\n          cylinder(6),\n          translation(-100 + x * 7, i, z * 7 + 55).scale(1.3, 0.5, 1.3),\n          material(0.4, 0.2, 0.2, 0.8),\n        ),\n      );\n    });\n\n    // crystals\n\n    integers_map(7, (i) => {\n      meshAdd(\n        cylinder(((i * 23 + 1) % 5) + 5, 0, 0.55),\n        translation(-101 + Math.sin(i) * 5 + i, -2.3 - i, 44.9 - i * 2.8).scaleSelf(5 + i / 2, 1 + i / 6, 5 + i / 3),\n        material(0.5 - i / 17, 0.5 - (i & 1) / 9, 0.6, 0.3),\n      );\n    });\n\n    // crystals continuation pad\n\n    meshAdd(cylinder(), translation(-87, -9.5, 24).scale(7, 1, 3), material(0.4, 0.5, 0.6, 0.4));\n\n    // lever pad\n\n    meshAdd(cylinder(4), translation(-86, -9.2, 27).scale(5, 1, 5), material(0.5, 0.6, 0.7, 0.3));\n\n    meshAdd(cylinder(12, 1), translation(-86, -9, 31).scale(1.5, 1, 1.5), material(0.3, 0.3, 0.4, 0.1));\n\n    newLever(translation(-86, -7.5, 31));\n\n    // elevators\n\n    const shouldOscillate = () => lerpneg(levers[7]!.$lerpValue2, levers[6]!.$lerpValue2);\n\n    newModel((model) => {\n      model._update = (matrix) =>\n        matrix.translateSelf(\n          0,\n          (1 - max(levers[6]!.$lerpValue, levers[7]!.$lerpValue)) * 3.5 + shouldOscillate() * Math.sin(gameTime) * 5,\n        );\n      [0, 12, 24].map((x) =>\n        meshAdd(cylinder(), translation(x - 76.9, x / -13 - 10, 24).scale(2.8, 1.5, 3), material(0.2, 0.5, 0.6, 0.2)),\n      );\n    });\n\n    newModel((model) => {\n      model._update = (matrix) =>\n        matrix.translateSelf(\n          0,\n          shouldOscillate() * Math.sin(gameTime + 3) * 6,\n          Math.sin(gameTime * 0.6 + 1) * 6 * shouldOscillate(),\n        );\n      [6, 18].map((x) =>\n        meshAdd(cylinder(), translation(x - 76.9, x / -13 - 10, 24).scale(2.8, 1.5, 3), material(0.1, 0.4, 0.5, 0.2)),\n      );\n    });\n\n    // pad after elevators\n\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          // lever pad\n          polygons_transform(cylinder(5), translation(0, 0, -7).scale(2, 1.2, 2), material(0.2, 0.4, 0.7, 0.3)),\n          // blue pentagon\n          polygons_transform(cylinder(5), scaling(9, 1.2, 9), material(0, 0.2, 0.3, 0.5)),\n          // base\n          polygons_transform(cylinder(), scaling(11, 1, 13), material(0.3, 0.4, 0.6, 0.3)),\n        ),\n        polygons_transform(cylinder(5), scaling(5.4, 5, 5.4), material(0, 0.2, 0.3, 0.5)),\n      ),\n      translation(-38.9, -11.3, 17),\n    );\n\n    newLever(translation(-38.9, -9.6, 10));\n\n    // central sculpture/monument\n\n    newModel((model) => {\n      model._update = (matrix) => matrix.translateSelf(0, levers[7]!.$lerpValue2 * -7.3);\n\n      meshAdd(\n        csg_polygons_subtract(\n          csg_union(\n            polygons_transform(cylinder(5), translation(0, 2).scale(5, 7, 5).skewY(8), material(0.2, 0.4, 0.5, 0.5)),\n            polygons_transform(\n              cylinder(5),\n              translation(0, 6).scale(1.1, 7, 1.1).skewY(-8),\n              material(0.25, 0.35, 0.5, 0.5),\n            ),\n            polygons_transform(\n              cylinder(5),\n              translation(0, 9).scale(0.6, 7, 0.6).skewY(8),\n              material(0.35, 0.3, 0.5, 0.5),\n            ),\n          ),\n          polygons_transform(cylinder(5), scaling(4, 8, 4), material(0.2, 0.4, 0.5, 0.5)),\n          polygons_transform(\n            cylinder(5),\n            translation(0, 5).scale(1.5, 1.5, 8).rotate(90, 0, 35),\n            material(0.2, 0.4, 0.5, 0.5),\n          ),\n        ),\n        translation(-38.9, -11.3, 17),\n      );\n\n      // SOUL 5 - soul over the central sculpture/monument\n      newSoul(translation(-39.1, -0.6, 17).rotate(11), ...polygon_regular(15).map(({ x, z }) => [x * 3, z * 3, 1.2]));\n    });\n\n    // columns\n\n    GQuad.map(({ x, z }) => {\n      meshAdd(cylinder(14, 1), translation(x * 9 - 38.9, -7.3, z * 11 + 17).scale(1, 4), material(0.25, 0.25, 0.25, 1));\n      [1.5, 8].map((y) =>\n        meshAdd(\n          cylinder(17, 1),\n          translation(x * 9 - 38.9, y - 11.3, z * 11 + 17).scale(1.5, 0.5, 1.5),\n          material(0.6, 0.6, 0.6, 0.3),\n        ),\n      );\n    });\n\n    // Grid with holes\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          // holed base\n          polygons_transform(cylinder(6), translation(0, 0, -36).scale(15, 1.2, 15), material(0.7, 0.7, 0.7, 0.3)),\n          // after monument continuation\n          polygons_transform(cylinder(), translation(0, 0, -18).scale(4, 1.2, 6), material(0.45, 0.4, 0.6, 0.3)),\n        ),\n        ...integers_map(6, (z) =>\n          integers_map(6, (x) =>\n            polygons_transform(\n              cylinder(6),\n              translation(x * 4.6 - 12 + 2 * (z & 1), 0, z * 4.6 - 50 + Math.sin(x * 4) * 2).scale(2, 5, 2),\n              material(0.7, 0.7, 0.7, 0.3),\n            ),\n          ),\n        ).flat(),\n      ),\n      translation(-38.9, -11.3, 17),\n    );\n\n    // SOUL 6 - soul over the grid with hex holes\n    newSoul(translation(-38.9, -8.4, -21), [-7, -2.5, 6], [6, -3, 6], [0, -5, 7]);\n\n    // Detour lever pad\n    meshAdd(cylinder(5), translation(-84, -2, 85).scale(4, 0.8, 4).rotate(0, 10), material(0.8, 0.1, 0.25, 0.4));\n\n    // Detour lever\n    newLever(translation(-84, -0.5, 85).rotate(0, 45));\n\n    // ******** SECOND BOAT ********\n\n    newModel((model) => {\n      model._update = (matrix) => boatAnimationMatrix(matrix, -123, 1.4, 55 + secondBoatLerp * -65);\n      meshAdd(boatPolygons);\n      newLever(translation(0, -3, -4).rotate(0, 180));\n    });\n\n    // ******** LEVEL AFTER SECOND BOAT ********\n\n    // pushing rods\n\n    const shouldPushRods = () => lerpneg(levers[10]!.$lerpValue, levers[11]!.$lerpValue);\n    const shouldBlockRods = () => (1 - levers[10]!.$lerpValue) * (1 - shouldPushRods());\n\n    const pushingRod = csg_polygons_subtract(\n      polygons_transform(cylinder(), translation(0, -0.5, 1).scale(1.15, 1.2, 6.5), material(0.25, 0.25, 0.35, 0.3)),\n      polygons_transform(cylinder(3), translation(0, 0, -5.5).scale(3, 2), material(0.6, 0.3, 0.4, 0.3)),\n      ...[-1.2, 1.2].map((i) =>\n        polygons_transform(cylinder(), translation(i, -0.5, 1).scale(0.14, 0.3, 6.5), material(0.7, 0.2, 0, 0.3)),\n      ),\n    );\n\n    newModel((model) => {\n      model._update = (matrix) =>\n        matrix.translateSelf(0, -2, shouldPushRods() * abs(Math.sin(gameTime * 1.1)) * -8.5 + 10);\n      integers_map(2, (x) => meshAdd(pushingRod, translation(-110 + x * 9 + (x & 1), 1.7, -12)));\n    });\n\n    newModel((model) => {\n      model._update = (matrix) =>\n        matrix.translateSelf(0, -2, shouldPushRods() * abs(Math.sin(gameTime * 2.1)) * -8.5 + 10);\n      integers_map(2, (x) => meshAdd(pushingRod, translation(-110 + (x + 2) * 9 + (x & 1), 1.7, -12)));\n    });\n\n    newModel((model) => {\n      model._update = (matrix) =>\n        matrix.translateSelf(\n          0,\n          -2,\n          max(shouldBlockRods(), shouldPushRods() * abs(Math.sin(gameTime * 1.5))) * -8.5 + 10,\n        );\n      integers_map(3, (x) => meshAdd(pushingRod, translation(-106 + x * 9, 1.7, -12)));\n    });\n\n    // pushing rods container\n\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          polygons_transform(cylinder(), translation(26.5, -1.6, 10).scale(20, 2.08, 3)),\n          polygons_transform(cylinder(), translation(26.5, -0.6, 10).scale(19, 2, 0.5)),\n        ),\n        ...integers_map(4, (x) =>\n          polygons_transform(cylinder(), translation(13 + x * 9 + (x & 1), -0.8, 9).scale(1.35, 1.35, 9)),\n        ),\n        ...integers_map(3, (x) =>\n          polygons_transform(cylinder(), translation(17 + x * 9, -0.8, 9).scale(1.35, 1.35, 9)),\n        ),\n      ),\n      translation(-123, 0, -12),\n      material(0.5, 0.5, 0.6, 0.2),\n    );\n\n    // boat attachment\n\n    newLever(translation(-116, -1.4, -18).rotate(0, 180));\n\n    meshAdd(cylinder(), translation(-116, -2.6, -12).scale(3.2, 1.1, 4).skewX(3), material(0.8, 0.8, 0.8, 0.2));\n    meshAdd(cylinder(6), translation(-116, -2.6, -16.5).scale(3.2, 0.8, 3), material(0.6, 0.5, 0.7, 0.2));\n\n    meshAdd(cylinder(), translation(-115.5, -17, -12).scale(0.5, 15, 2.2), material(0.6, 0.6, 0.6, 0.3));\n\n    meshAdd(cylinder(8), translation(-114, -17, -2).scale(2, 15, 2), material(0.6, 0.6, 0.6, 0.3));\n    meshAdd(cylinder(8), translation(-79, -17, -2).scale(2, 15, 2), material(1, 1, 1, 0.3));\n\n    meshAdd(cylinder(), translation(-77, -17, -50.5).scale(2.2, 15, 0.5), material(0.6, 0.6, 0.6, 0.3));\n\n    // arcs\n\n    integers_map(3, (i) => {\n      meshAdd(makeBigArcPolygons(16), translation(i * 12 - 109, -9, -12), material(0.6, 0.6, 0.6, 0.3));\n\n      meshAdd(\n        makeBigArcPolygons(16),\n        translation(-77, -9, i * -12 - 8 - 12).rotate(0, 90),\n        material(0.6, 0.6, 0.6, 0.3),\n      );\n    });\n\n    // tower\n\n    meshAdd(\n      csg_polygons_subtract(\n        polygons_transform(cylinder(12), translation(-77, -14.5, -12).scale(4, 17.5, 4), material(0.7, 0.7, 0.7, 0.2)),\n        polygons_transform(cylinder(), translation(-79, 0.1, -12).scale(3.5, 2, 1.3), material(0.4, 0.5, 0.6, 0.2)),\n        polygons_transform(cylinder(), translation(-77, 0.1, -14).scale(1.5, 2, 2), material(0.4, 0.5, 0.6, 0.2)),\n        polygons_transform(cylinder(12), translation(-77, 3.1, -12).scale(3, 5, 3), material(0.4, 0.5, 0.6, 0.2)),\n      ),\n    );\n\n    // internal pad\n\n    meshAdd(cylinder(), translation(-84.9, -4.3, -40).rotate(12).scale(6, 1, 3), material(0.6, 0.6, 0.6, 0.3));\n    meshAdd(cylinder(9), translation(-98, -18.4, -40).scale(2.5, 13.5, 2.5), material(0.5, 0.5, 0.5, 0.3));\n\n    meshAdd(\n      csg_polygons_subtract(\n        polygons_transform(cylinder(), translation(-93, -5.8, -40).scale(9, 1, 5), material(0.8, 0.8, 0.8, 0.1)),\n        polygons_transform(cylinder(9), translation(-98, -5.8, -40).scale(3, 8, 3), material(0.7, 0.7, 0.7, 0.2)),\n      ),\n    );\n\n    newLever(translation(-98, -4.4, -40).rotate(0, 90));\n\n    // SOUL 7 - soul after the second boat\n    newSoul(translation(-115, 0.2, -12), [0, 0, 3.5]);\n\n    // SOUL 8 - soul in the internal pad after the pushing rods\n    newSoul(translation(-93, -3, -28 - 12).rotate(4), [0, -2, 3.5], [0, 2, 3.5]);\n\n    // ******** LEVEL AFTER CENTRAL GATE ********\n\n    // base\n\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          polygons_transform(\n            cylinder(6, 0, 0, 0.6),\n            translation(-100, 0.7, 105.5).scale(8, 1, 11),\n            material(0.7, 0.7, 0.7, 0.2),\n          ),\n          polygons_transform(\n            cylinder(),\n            translation(-101.5, 0.7, 93.5).scale(10.5, 1, 2),\n            material(0.7, 0.7, 0.7, 0.2),\n          ),\n        ),\n        polygons_transform(cylinder(5), translation(-100, 0.7, 113).scale(4, 3, 4), material(0.7, 0.7, 0.7, 0.2)),\n      ),\n    );\n\n    // oscillating hex pads\n\n    const hexPadShouldOscillate = () => lerpneg(levers[8]!.$lerpValue2, levers[12]!.$lerpValue2);\n\n    integers_map(4, (i) =>\n      newModel((model) => {\n        model._update = (matrix) => {\n          const osc = hexPadShouldOscillate();\n          matrix.translateSelf(\n            (i > 2 ? (1 - osc) * 2 + osc : 0) - 100,\n            osc * Math.sin(gameTime * 1.3 + i * 1.7) * (3 + i / 3) + 0.7,\n            (i & 1 ? -1 : 1) * (1 - levers[8]!.$lerpValue2) * (1 - levers[12]!.$lerpValue2) * -7 +\n              max(osc, 0.05) * Math.cos(gameTime * 1.3 + i * 7) * (4 - 2 * (1 - i / 3)) +\n              115,\n          );\n        };\n        meshAdd(\n          cylinder(6),\n          translation(-14.6 - i * 4.8 - (i > 2 ? 2 : 0), -i / 2.3, -21.5).scale(2.6, 1, 2.5),\n          material(0.5 - i / 8, i / 12 + 0.5, 0.7, 0.3),\n        );\n      }),\n    );\n\n    // after the hex pads\n\n    // donut pad\n    newModel((model) => {\n      model._update = (matrix) => {\n        const osc = hexPadShouldOscillate();\n        matrix\n          .translateSelf(\n            (1 - osc) * 2.5 - 139.7,\n            (1 - levers[8]!.$lerpValue) * -3 + osc * Math.sin(gameTime * 0.8) * -1 - 1.8,\n            93.5,\n          )\n          .rotateSelf(Math.cos(gameTime * 1.3) * (osc * 3 + 3), 0);\n      };\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(cylinder(10), scaling(6, 2, 6), material(0.1, 0.6, 0.5, 0.3)),\n          polygons_transform(cylinder(10), scaling(3.3, 6, 3.3), material(0.1, 0.6, 0.5, 0.5)),\n        ),\n      );\n\n      // second pad\n      meshAdd(cylinder(15, 1), translation(-7.5).rotate(0, 90).scale(3, 2.3, 3), material(0.4, 0.4, 0.4, 0.3));\n      meshAdd(cylinder(10), translation(-7.5).rotate(0, 90).scale(2, 2.5, 2), material(0.3, 0.8, 0.7, 0.3));\n      meshAdd(cylinder(5), translation(-7.5).rotate(0, 90).scale(1, 3), material(0.5, 0.5, 0.5, 0.5));\n      newLever(translation(-7.5).rotate(0, 90).translate(0, 3.4).rotate(0, 180));\n\n      // lateral horns\n      [-1, 1].map((i) =>\n        meshAdd(\n          hornPolygons,\n          rotation(i * 90, 180, 90)\n            .translate(0, 5)\n            .rotate(40)\n            .scale(1.3, 10, 1.3),\n          material(1, 1, 0.8, 0.2),\n        ),\n      );\n\n      // SOUL 9 - soul after the hex pads, in the hex donut with horns\n      newSoul(translation(-5, 4), [0, -1.2, 1.7], [0, 1.2, 1.7]);\n    });\n\n    // far arc gate door\n\n    newModel((model) => {\n      model._update = (matrix) => matrix.translateSelf(-100, 0.6, 96.5).scaleSelf(0.88, 1.2 - levers[12]!.$lerpValue);\n      meshAdd(gateBarsPolygons);\n    });\n\n    // far arc gate\n    [-1, 1].map((x) => {\n      [7.2, 1.5].map((y) =>\n        meshAdd(\n          cylinder(15, 1),\n          translation(-7.5 * x - 100, y + 0.7, 96).scale(1.1, 0.5, 1.1),\n          material(0.5, 0.24, 0.2, 0.4),\n        ),\n      );\n\n      meshAdd(\n        hornPolygons,\n        translation(x * -5 - 100, 1.7, 114.5)\n          .scale(1.2, 10, 1.2)\n          .rotate(0, 90 * x - 90),\n        material(1, 1, 0.8),\n      );\n\n      meshAdd(cylinder(12, 1), translation(-7.5 * x - 100, 3.7, 96).scale(0.8, 4, 0.8), material(0.6, 0.24, 0.2, 0.5));\n\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(cylinder(), translation(x * -4, 3.5, -0.5).scale(4, 4, 0.7), material(0.5, 0.5, 0.5, 0.4)),\n          polygons_transform(cylinder(), scaling(3, 3, 10), material(0.6, 0.24, 0.2, 0.5)),\n          polygons_transform(\n            cylinder(28, 1),\n            translation(0, 3, -5).scale(3, 4, 10).rotate(90, 0),\n            material(0.6, 0.24, 0.2, 0.5),\n          ),\n          polygons_transform(\n            cylinder(5),\n            translation(x * -5.3, 7)\n              .rotate(90, 0)\n              .scale(1.7, 5, 1.7),\n            material(0.6, 0.24, 0.2, 0.5),\n          ),\n          polygons_transform(\n            cylinder(5),\n            translation(x * -5.3, 3.8)\n              .rotate(90, 0, 35)\n              .scale(0.75, 5, 0.75),\n            material(0.6, 0.24, 0.2, 0.5),\n          ),\n        ),\n        translation(x - 100, 0.7, 97),\n      );\n    });\n\n    // left continuation with hole for rotating corridor\n    meshAdd(\n      csg_polygons_subtract(\n        polygons_transform(cylinder(), translation(-82.07, 0.8, 106).scale(11, 0.9, 2.2), material(0.7, 0.7, 0.7, 0.1)),\n        polygons_transform(cylinder(45, 1), translation(-81, 0.7, 106).scale3d(7.7), material(0.7, 0.7, 0.7, 0.1)),\n      ),\n    );\n\n    // rotating platforms\n\n    // First rotating platform (with hole)\n    newModel((model) => {\n      checkModelId(\"ROTATING_PLATFORM\", MODEL_ID_ROTATING_PLATFORM);\n      model._update = (matrix) => matrix.translateSelf(-81, 0.6, 106).rotateSelf(0, 40 + rotatingPlatform1Rotation);\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(cylinder(45, 1), scaling(7.5, 1, 7.5), material(0.45, 0.45, 0.45, 0.2)),\n          polygons_transform(cylinder(), translation(0, 0, -5.5).scale(1.5, 3, 2.7), material(0.45, 0.45, 0.45, 0.2)),\n        ),\n      );\n      meshAdd(cylinder(8), translation(0, 2).scale(3, 1.5, 3).rotate(0, 22), material(0.7, 0.7, 0.7, 0.1));\n      meshAdd(cylinder(5), translation(0, 2).scale(1, 2), material(0.3, 0.3, 0.3, 0.2));\n\n      // SOUL 10 - soul over the first rotating platform\n      newSoul(translation(0, 3), ...polygon_regular(14).map(({ x, z }) => [x * 5.6, z * 5.6, 2]));\n    });\n\n    // Second rotating platform\n    newModel((model) => {\n      model._update = (matrix) => matrix.translateSelf(-65.8, 0.8, 106).rotateSelf(0, rotatingPlatform2Rotation);\n\n      // rotating platform horns\n      [-1, 1].map((x) =>\n        meshAdd(\n          hornPolygons,\n          rotation(0, 90)\n            .translate(x * -5, 1, -0.5)\n            .scale(1.2, 10, 1.2)\n            .rotate(0, 90 * x + 90),\n          material(1, 1, 0.8),\n        ),\n      );\n\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(cylinder(28, 1), translation(0, 2).scale(7.5, 1, 7.5), material(0.35, 0, 0, 0.3)),\n          polygons_transform(cylinder(), scaling(9, 5, 2), material(0.3, 0, 0, 0.3)),\n        ),\n      );\n\n      meshAdd(polygons_transform(cylinder(28, 1), scaling(7.5, 1, 7.5), material(0.45, 0.45, 0.45, 0.2)));\n      meshAdd(polygons_transform(cylinder(5), translation(0, 1).scale(1, 0.2), material(0.3, 0.3, 0.3, 0.2)));\n    });\n\n    // Third rotating platform\n    newModel((model) => {\n      model._update = (matrix) => matrix.translateSelf(-50.7, 0.8, 106).rotateSelf(0, 180 - rotatingPlatform2Rotation);\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(cylinder(28, 1), translation(0, 2).scale(7.5, 1, 7.5), material(0.35, 0, 0, 0.3)),\n          polygons_transform(cylinder(), translation(7).scale(9, 5, 2), material(0.3, 0, 0, 0.3)),\n          polygons_transform(cylinder(), translation(0, 0, 7).scale(2, 5, 9), material(0.3, 0, 0, 0.3)),\n        ),\n      );\n      meshAdd(polygons_transform(cylinder(28, 1), scaling(7.5, 1, 7.5), material(0.45, 0.45, 0.45, 0.2)));\n      meshAdd(polygons_transform(cylinder(5), translation(0, 1).scale(1, 0.2), material(0.3, 0.3, 0.3, 0.2)));\n    });\n\n    // Fourth rotating platform\n    newModel((model) => {\n      model._update = (matrix) => matrix.translateSelf(-50.7, 0.8, 91).rotateSelf(0, 270 + rotatingPlatform2Rotation);\n      meshAdd(\n        csg_polygons_subtract(\n          polygons_transform(cylinder(28, 1), translation(0, 2).scale(7.5, 1, 7.5), material(0.35, 0, 0, 0.3)),\n          polygons_transform(cylinder(), translation(7).scale(9, 5, 2), material(0.3, 0, 0, 0.3)),\n          polygons_transform(cylinder(), translation(0, 0, -7).scale(2, 5, 9), material(0.3, 0, 0, 0.3)),\n        ),\n      );\n      meshAdd(polygons_transform(cylinder(28, 1), scaling(7.5, 1, 7.5), material(0.45, 0.45, 0.45, 0.2)));\n      meshAdd(polygons_transform(cylinder(5), translation(0, 1).scale(1, 0.2), material(0.3, 0.3, 0.3, 0.2)));\n    });\n\n    // rotating platforms connecting pads\n    meshAdd(cylinder(), translation(-58, 1, 106).scale(2, 0.65, 2), material(0.7, 0.7, 0.7, 0.2));\n    meshAdd(cylinder(), translation(-50.7, 1, 99).scale(2, 0.65, 1), material(0.7, 0.7, 0.7, 0.2));\n\n    // exit from the rotating platforms\n    meshAdd(cylinder(), translation(-42, 0.4, 91).scale(5, 1, 2.5), material(0.7, 0.7, 0.7, 0.3));\n    meshAdd(cylinder(), translation(-34.2, 0.4, 91).scale(3, 1, 3), material(0.7, 0.7, 0.7, 0.3));\n\n    newLever(translation(-34, 2.7, 96).rotate(-12, 0));\n\n    // lever pad\n    meshAdd(cylinder(5), translation(-34, 0.2, 96).scale(3, 2, 4).rotate(-20, 0), material(0.2, 0.5, 0.5, 0.6));\n\n    // ******** LEVEL AFTER THE ROTATING PLATFORMS ********\n\n    // jumping pads\n\n    [material(0.1, 0.55, 0.45, 0.2), material(0.2, 0.5, 0.5, 0.3), material(0.3, 0.45, 0.55, 0.4)].map((m, i) =>\n      newModel((model) => {\n        model._update = (matrix) => {\n          const v = lerpneg(levers[13]!.$lerpValue2, levers[14]!.$lerpValue2);\n          matrix.translateSelf(\n            0,\n            (1 - levers[13]!.$lerpValue2) * (1 - levers[14]!.$lerpValue2) * (i ? 0 : 3) +\n              v * Math.sin(gameTime * 1.5 + i * 1.5) * 4,\n          );\n        };\n        meshAdd(cylinder(), translation(-23.5, 0.5, 91 + 6.8 * i).scale(i === 1 ? 2 : 3.3, 1, 3.3), m);\n        if (i === 2) {\n          // in connection\n          meshAdd(cylinder(), translation(-29.1, 0.4, 91).scale(2.1, 1, 3), material(0.7, 0.7, 0.7, 0.3));\n        }\n        if (i === 1) {\n          // out connections\n          meshAdd(\n            cylinder(),\n            translation(-16.1, 0.5, 103.5).rotate(-3.5).scale(3.9, 0.8, 2).skewX(-1),\n            material(0.6, 0.6, 0.7, 0.3),\n          );\n        }\n      }),\n    );\n\n    // horns\n    [-1, 1].map((x) =>\n      meshAdd(\n        hornPolygons,\n        translation(x * -8, 1, 85)\n          .scale(1.2, 10, 1.2)\n          .rotate(0, 90 * x + 90),\n        material(1, 1, 0.8),\n      ),\n    );\n\n    integers_map(3, (i) =>\n      meshAdd(\n        makeBigArcPolygons(16 + 8.7 - (i & 1) * 0.7),\n        translation(i * 6 - 6, 4 - (i & 1), 111 - 0.2 * (i & 1)),\n        i & 1 ? material(0.5, 0.5, 0.5, 0.3) : material(0.35, 0.35, 0.35, 0.5),\n      ),\n    );\n\n    // middle base\n    meshAdd(\n      csg_polygons_subtract(\n        polygons_transform(\n          cylinder(6, 0, 0, 0.3),\n          translation(0, -0.92, 95).scale(14, 2, 14),\n          material(0.8, 0.8, 0.8, 0.2),\n        ),\n        polygons_transform(cylinder(5), translation(0, 0, 95).scale3d(6), material(0.3, 0.3, 0.3, 0.5)),\n      ),\n    );\n\n    newLever(translation(0, 1.7, 82).rotate(0, 180));\n\n    // lever pad\n\n    meshAdd(cylinder(5), translation(0, -15.7, 82).scale(2.5, 17, 2.5).rotate(0, 35), material(0.5, 0.3, 0.3, 0.4));\n\n    meshAdd(cylinder(6), translation(0, 16, 121).scale(2.5, 1, 2.1).rotate(0, 90), material(0.5, 0.6, 0.7, 0.3));\n    meshAdd(cylinder(), translation(0, 16, 129).scale(1.5, 1, 2), material(0.5, 0.6, 0.7, 0.3));\n    meshAdd(cylinder(7), translation(0, 16.2, 133).scale(5, 1, 5), material(0.4, 0.5, 0.6, 0.4));\n\n    meshAdd(\n      csg_polygons_subtract(\n        csg_union(\n          polygons_transform(cylinder(), translation(0, 16, 110.5).scale(12, 1, 3), material(0.5, 0.3, 0.3, 0.4)),\n          polygons_transform(cylinder(), translation(0, 16, 111).scale(3, 1, 3.8), material(0.5, 0.3, 0.3, 0.4)),\n        ),\n\n        polygons_transform(cylinder(5), translation(0, 16, 103.5).scale(5.5, 5, 5.5), material(0.5, 0.3, 0.3, 0.4)),\n      ),\n    );\n\n    newModel((model) => {\n      model._update = (matrix) => matrix.translateSelf(Math.sin(gameTime) * -2).rotate(Math.sin(gameTime) * 25);\n      meshAdd(\n        cylinder(3),\n        translation(0, -3, 118.8).scale(0.8, 0.8, 18).rotate(90, 0, 60),\n        material(0.5, 0.3, 0.3, 0.4),\n      );\n      [22, 30].map((z) => {\n        meshAdd(\n          cylinder(6),\n          translation(0, 16, z + 95)\n            .scale(3, 1, 2.3)\n            .rotate(0, 90),\n          material(0.7, 0.7, 0.7, 0.4),\n        );\n        meshAdd(cylinder(), translation(0, 6.2, z + 95).scale(0.5, 11, 0.5), material(0.5, 0.3, 0.3, 0.4));\n      });\n    });\n\n    // floating elevator pad\n    newModel((model) => {\n      model._update = (matrix) => {\n        const v = lerpneg(\n          lerpneg((levers[14]!.$lerpValue + levers[14]!.$lerpValue2) / 2, levers[13]!.$lerpValue2),\n          (levers[15]!.$lerpValue + levers[15]!.$lerpValue2) / 2,\n        );\n        matrix.translateSelf(0, v * 16, clamp(v * 2 - 1) * 8.5 + 95);\n      };\n      meshAdd(cylinder(5), scaling(5, 1.1, 5), material(0.5, 0.3, 0.3, 0.4));\n      meshAdd(cylinder(5), scaling(5.5, 0.9, 5.5), material(0.25, 0.25, 0.25, 0.4));\n\n      newLever(translation(0, 1.5, -1).rotate(0, 180));\n    });\n\n    // SOUL 11 - soul in the last platform\n    newSoul(translation(0, 3, 95), ...polygon_regular(9).map(({ x, z }) => [x * 9, z * 9, 4]));\n\n    // SOUL 12 - soul after the pendulums\n    newSoul(translation(0, 19, 134), [0, 0, 3.5]);\n  });\n\n  // ------ End of game models ------\n\n  // ------ player model and legs, must be declared just after level model ------\n\n  newModel(() => {\n    checkModelId(\"PLAYER_BODY\", MODEL_ID_PLAYER_BODY);\n\n    // head\n    meshAdd(sphere(20), translation(0, 1).scale(0.5, 0.5, 0.5), material(1, 0.3, 0.4));\n\n    // body\n    meshAdd(sphere(30), scaling(0.7, 0.8, 0.55), material(1, 0.3, 0.4));\n\n    // mouth\n    meshAdd(cylinder(), translation(0, 0.9, 0.45).scale(0.15, 0.02, 0.06), material(0.3, 0.3, 0.3));\n\n    [-1, 1].map((i) => {\n      // horns\n      meshAdd(\n        hornPolygons,\n        rotation(0, i > 0 ? 180 : 0)\n          .translate(0.2, 1.32)\n          .rotate(-30)\n          .scale(0.2, 0.6, 0.2),\n        material(1, 1, 0.8),\n      );\n\n      // eyes\n      meshAdd(\n        polygons_transform(\n          csg_polygons_subtract(cylinder(15, 1), polygons_transform(cylinder(), translation(0, 0, 1).scale(2, 2, 0.5))),\n          rotation(-90, 0).scale(0.1, 0.05, 0.1),\n          material(0.3, 0.3, 0.3),\n        ),\n        translation(i * 0.2, 1.2, 0.4).rotate(0, i * 20, i * 20),\n      );\n\n      // legs\n      newModel(() => {\n        checkModelId(\"PLAYER_LEG\" + (i < 0 ? 0 : 1), i < 0 ? MODEL_ID_PLAYER_LEG0 : MODEL_ID_PLAYER_LEG1);\n        meshAdd(cylinder(20, 1), translation(i * 0.3, -0.8).scale(0.2, 0.7, 0.24), material(1, 0.3, 0.4));\n      });\n    });\n  });\n\n  newModel(() => {\n    checkModelId(\"LEVER\", MODEL_ID_LEVER);\n    meshAdd(cylinder(6, 1), scaling(0.13, 1.4, 0.13), material(0.3, 0.3, 0.5, 0.1));\n    meshAdd(cylinder(10), translation(0, 1).scale(0.21, 0.3, 0.21), material(1, 0.5, 0.2));\n    meshAdd(cylinder(3), translation(0, -1).rotate(90, 90).scale(0.3, 0.4, 0.3), material(0.2, 0.2, 0.2, 0.1));\n  }, MODEL_KIND_MESH);\n\n  newModel(() => {\n    checkModelId(\"SOUL_COLLISION\", MODEL_ID_SOUL_COLLISION);\n    meshAdd(cylinder(6).slice(0, -1), scaling(0.77, 1, 0.77), material(1, 0.3, 0.5));\n  }, MODEL_KIND_MESH);\n\n  newModel(() => {\n    checkModelId(\"SOUL\", MODEL_ID_SOUL);\n    const GHOST_SLICES = 30;\n    const GHOST_STACKS = 24;\n\n    // body\n    meshAdd(\n      sphere(GHOST_SLICES, GHOST_STACKS, (a: number, b: number, polygon: Polygon) => {\n        const bm = b / GHOST_STACKS;\n        const theta = a * (Math.PI * (2 / GHOST_SLICES));\n        const phixz = Math.sin((bm ** 0.6 * Math.PI) / 2);\n        const osc = (bm * bm * Math.sin(a * Math.PI * (14 / GHOST_SLICES))) / 4;\n        return b > GHOST_STACKS - 1\n          ? { x: (polygon.$smooth = 0), y: -0.5, z: 0 }\n          : {\n              x: Math.cos(theta) * phixz,\n              y: Math.cos(bm * Math.PI) - bm - osc,\n              z: Math.sin(theta) * phixz + Math.sin(osc * Math.PI * 2) / 4,\n            };\n      }),\n      scaling(0.7, 0.7, 0.7),\n      material(1, 1, 1),\n    );\n\n    // eyes\n    [-1, 1].map((x) => meshAdd(sphere(12), translation(x * 0.16, 0.4, -0.36).scale3d(0.09)));\n  }, MODEL_KIND_MESH);\n\n  if (DEBUG) {\n    console.timeEnd(\"build_life_the_universe_and_everything\");\n    console.log(souls.length + \" souls, \" + levers.length + \" levers\");\n  }\n};\n","#version 300 es\n\nin vec4 aPosition;\n\nuniform mat4 viewMatrix;\nuniform mat4 worldMatrices[39];\n\n#define modelId aPosition.w\n\nvoid main() {\n  mat4 worldMatrix = worldMatrices[max(0, abs(int(modelId)) - 1) + gl_InstanceID];\n  worldMatrix[3][3] = 1.;\n  gl_Position = viewMatrix * (worldMatrix * vec4(aPosition.xyz, 1));\n}\n","#version 300 es\n\nlayout(location = 0) in vec4 aPosition;\nlayout(location = 1) in vec3 aNormal;\nlayout(location = 2) in vec4 aColor;\n\nout vec4 VNormal;\nout vec4 FragPos;\nout vec4 UntransformedFragPos;\nout lowp vec4 Color;\n\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 worldMatrices[39];\n\n#define modelId aPosition.w\n\nvoid main() {\n  mat4 worldMatrix = worldMatrices[max(0, abs(int(modelId)) - 1) + gl_InstanceID];\n  // trick - use worldMatrix[3][3] that normally is 1 as a way to color the handle of pulled levers\n  Color = mix(aColor, vec4(0.7, 1, 0.2, 0), aColor.w > 0. ? 0. : 1. - worldMatrix[3][3]);\n  worldMatrix[3][3] = 1.;\n  UntransformedFragPos = aPosition;\n  FragPos = worldMatrix * vec4(aPosition.xyz, 1);\n  gl_Position = projectionMatrix * (viewMatrix * FragPos);\n  FragPos.w = modelId;\n  VNormal = (worldMatrix * vec4(aNormal, 0));\n}\n","#version 300 es\nprecision highp float;\n\nin highp vec4 VNormal;\nin highp vec4 FragPos;\n\nuniform mat4 viewMatrix;\n\nout vec4 O;\n\n#define modelId FragPos.w\n\nvoid main() {\n  vec4 v = viewMatrix * vec4(FragPos.xyz, 1);\n  float z = 1. - min(abs(v.z / v.w), 1.);\n  O = vec4(vec2(z * (gl_FragCoord.y > 31. ? 1. : abs(VNormal.y))), z > 0. ? modelId / 255. : 0., 1);\n}\n","#version 300 es\n// Do nothing.\nvoid main() {}\n","#version 300 es\n\nin vec4 aPosition;\n\nvoid main() { gl_Position = vec4(aPosition.xy, 1, 1); }\n","#version 300 es\nprecision highp float;\n\nuniform vec3 iResolution;\nuniform vec3 viewPos;\nuniform mat4 viewMatrix;\n\nuniform highp sampler2D groundTexture;\n\nout vec4 O;\n\n#define gameTime iResolution.z\n\n/* 1 / Math.tan(fieldOfViewRadians / 2) */\nconst float fieldOfViewAmount = 1.73205;\n\nvoid main() {\n  vec2 fragCoord = (gl_FragCoord.xy / iResolution.xy) * 2. - 1.;\n  vec3 ray =\n    normalize(viewMatrix * vec4(fragCoord.x * -(iResolution.x / iResolution.y), -fragCoord.y, fieldOfViewAmount, 0.)).xyz;\n  float rayTracedLavalDistance = (-32. - viewPos.y) / ray.y;\n  float multiplier = (1. - clamp(abs(rayTracedLavalDistance / 9999.), 0., 1.));\n\n  O = vec4(0, 0, 0, 1);\n\n  if (multiplier > 0.01) {\n    if (rayTracedLavalDistance > 0.) {\n      // Render sky\n      float c = cos(gameTime / 30.), s = sin(gameTime / 30.);\n      ray.xz *= mat2(c, s, -s, c);\n      vec3 absRay = abs(ray);\n      O.xyz = vec3(dot(vec2(texture(groundTexture, ray.xy).z, texture(groundTexture, ray.yz * 2.).z), absRay.zx) * absRay.y);\n\n    } else {\n      // Render raytraced lava\n      ray = viewPos + ray * rayTracedLavalDistance;\n      O.x = multiplier *=\n        0.9 - texture(groundTexture, ray.xz / 150. + vec2(sin(ray.z / 35. + gameTime), cos(ray.x / 25. + gameTime)) / 80.).y;\n      O.y = multiplier * multiplier * multiplier;\n    }\n  }\n}\n","export const gl: WebGL2RenderingContext = hC.getContext(\"webgl2\", { powerPreference: \"high-performance\" })!;\n\nfor (const s in gl) {\n  (gl as any)[s[0] + [...s].reduce((p, c, i) => (p * i + c.charCodeAt(0)) % 434, 0).toString(36)] = (gl as any)[s];\n}\n","import { max, clamp, DEG_TO_RAD, angle_lerp_degrees, lerp, angle_wrap_degrees, min, abs, threshold } from \"./math/math\";\nimport {\n  levers,\n  player_position_final,\n  allModels,\n  MODEL_KIND_GAME,\n  MODEL_ID_PLAYER_BODY,\n  MODEL_ID_PLAYER_LEG0,\n  MODEL_ID_ROTATING_PLATFORM,\n  MODEL_ID_PLAYER_LEG1,\n} from \"./game/models\";\nimport { player_last_pulled_lever, firstBoatLerp, shouldRotatePlatforms, camera_rotation } from \"./game/world-state\";\nimport { input_forward, input_strafe, player_first_person } from \"./page\";\nimport { matrixCopy, tempMatrix } from \"./math/matrix\";\nimport { gl } from \"./gl\";\nimport { lerpDamp, gameTimeDelta, damp, gameTime } from \"./game/game-time\";\n\nexport const CAMERA_PLAYER_Y_DIST = 13;\n\nexport const CAMERA_PLAYER_Z_DIST = -18;\n\nexport const PLAYER_LEGS_VELOCITY = 7 * 1.3;\n\nexport const PLAYER_RESPAWN_Z = -2.4;\n\nexport const COLLISION_TEXTURE_SIZE = 128;\n\nexport const player_position_global = { x: 0, y: 0, z: 0 };\n\nexport let camera_position_x: number = 0;\n\nexport let camera_position_y: number = 0;\n\nexport let camera_position_z: number = 0;\n\n// export let player_update: () => void;\n\nexport const set_camera_position = (x: number, y: number, z: number) => {\n  camera_position_x = x;\n  camera_position_y = y;\n  camera_position_z = z;\n};\n\nexport const player_init = () => {\n  let currentModelId: number;\n  let currentModelIdTMinus1: number;\n  let oldModelId: number | undefined;\n\n  let boot: 0 | 1 = 1;\n  let player_respawned: 0 | 1 | 2 = 2;\n  let player_gravity = 2;\n  let player_has_ground: 0 | 1;\n  let player_look_angle_target: number;\n  let player_look_angle: number;\n  let player_legs_speed: number;\n  let player_on_rotating_platforms: number;\n  let player_mov_x: number;\n  let player_mov_z: number;\n  let player_collision_velocity_x: number;\n  let player_collision_velocity_z: number;\n  let player_speed: number;\n  let player_model_y: number;\n\n  let camera_pos_lookat_x: number;\n  let camera_pos_lookat_y: number;\n  let camera_pos_lookat_z: number;\n\n  const player_collision_modelIdCounter = new Uint8Array(256);\n  const collision_buffer = new Uint8Array(COLLISION_TEXTURE_SIZE * COLLISION_TEXTURE_SIZE * 4);\n\n  const doHorizontalCollisions = () => {\n    player_mov_x = 0;\n    player_mov_z = 0;\n    for (let y = 32; y < COLLISION_TEXTURE_SIZE; y += 2) {\n      let front = 0;\n      let back = 0;\n      let left = 0;\n      let right = 0;\n      const yindex = y * (COLLISION_TEXTURE_SIZE * 4);\n      for (let x = y & 1; x < COLLISION_TEXTURE_SIZE; x += 2) {\n        const i1 = yindex + x * 4;\n        const i2 = yindex + (COLLISION_TEXTURE_SIZE - 1 - x) * 4;\n        const dist1 = collision_buffer[i1]! / 255;\n        const dist2 = collision_buffer[i2 + 1]! / 255;\n        const t = 1 - abs(2 * (x / (COLLISION_TEXTURE_SIZE - 1)) - 1);\n\n        if (x > 10 && x < COLLISION_TEXTURE_SIZE - 10) {\n          front = max(front, max(dist1 * t, (dist1 * collision_buffer[i2]!) / 255));\n          back = max(back, max(dist2 * t, (dist2 * collision_buffer[i1 + 1]!) / 255));\n        }\n\n        if (x < COLLISION_TEXTURE_SIZE / 2 - 10 || x > COLLISION_TEXTURE_SIZE / 2 + 10) {\n          const xdist = ((1 - t) * max(dist1, dist2)) / 3;\n          if (xdist > 0.001) {\n            if (x < COLLISION_TEXTURE_SIZE / 2 && left < xdist) {\n              left = xdist;\n            } else if (x > COLLISION_TEXTURE_SIZE / 2 && right < xdist) {\n              right = xdist;\n            }\n          }\n        }\n      }\n\n      if (abs(right - left) > abs(player_mov_x)) {\n        player_mov_x = right - left;\n      }\n      if (abs(back - front) > abs(player_mov_z)) {\n        player_mov_z = back - front;\n      }\n    }\n  };\n\n  const doVerticalCollisions = () => {\n    let maxModelIdCount = 0;\n    let nextModelId = 0;\n    let grav = 0;\n    let lines = 0;\n    player_has_ground = 0;\n    player_collision_modelIdCounter.fill(0);\n    for (let y = 0; y < 31; ++y) {\n      let up = 0;\n      const yindex = y * (COLLISION_TEXTURE_SIZE * 4);\n      for (let x = 0; x < COLLISION_TEXTURE_SIZE - 0; x++) {\n        let i = yindex + x * 4;\n        const a = (collision_buffer[i]! + collision_buffer[i + 1]!) / 255;\n        i = collision_buffer[i + 2]!;\n        if (x > 14 && x < COLLISION_TEXTURE_SIZE - 14) {\n          up += a;\n        }\n        if (i && a) {\n          const count = player_collision_modelIdCounter[i]! + 1;\n          player_collision_modelIdCounter[i] = count;\n          if (count >= maxModelIdCount) {\n            maxModelIdCount = count;\n            nextModelId = i;\n            player_has_ground = 1;\n          }\n        }\n      }\n      if (up < 3 && y > 5) {\n        grav += y / 32;\n      }\n      if (up > 3) {\n        if (y > 7) {\n          lines += y / 15;\n        }\n        player_has_ground = 1;\n      }\n    }\n\n    currentModelId = nextModelId || currentModelIdTMinus1;\n    currentModelIdTMinus1 = nextModelId;\n\n    player_gravity = lerpDamp(player_gravity, player_has_ground ? 6.5 : player_position_global.y < -20 ? 11 : 8, 4);\n\n    // push up and gravity\n    player_position_global.y +=\n      lines / 41 - (player_has_ground || player_gravity) * (grav / 41) * player_gravity * gameTimeDelta;\n  };\n\n  const getReferenceMatrix = () =>\n    player_respawned\n      ? levers[player_last_pulled_lever]!.$parent.$matrix\n      : allModels[(oldModelId && allModels[oldModelId]!.$kind === MODEL_KIND_GAME && oldModelId) || 0]!.$matrix;\n\n  const interpolate_with_hysteresis = /* @__PURE__ */ (\n    previous: number,\n    desired: number,\n    hysteresis: number,\n    speed: number,\n  ) =>\n    lerp(previous, desired, boot || (clamp(abs(desired - previous) ** 0.5 - hysteresis) + 1 / 7) * damp(speed * 1.5));\n\n  const playerMovedGlobalPos = (referenceMatrix: DOMMatrixReadOnly) => {\n    matrixCopy(referenceMatrix).invertSelf();\n    tempMatrix.m41 = tempMatrix.m42 = tempMatrix.m43 = 0;\n    const v = tempMatrix.transformPoint({ x: player_mov_x, z: player_mov_z, w: 0 });\n    player_position_global.x += v.x;\n    player_position_global.z += v.z;\n    return referenceMatrix.transformPoint(player_position_global);\n  };\n\n  allModels[MODEL_ID_PLAYER_BODY]!._update = (matrix: DOMMatrix) => {\n    let forward = clamp(input_forward, -1);\n    let strafe = clamp(input_strafe, -1);\n\n    const movAmount = threshold(Math.hypot(forward, strafe) ** 0.5, 0.1);\n    const movAngle = Math.atan2(forward, strafe);\n\n    if (movAmount) {\n      player_look_angle_target = 90 - movAngle / DEG_TO_RAD;\n    }\n\n    player_look_angle = angle_lerp_degrees(player_look_angle, player_look_angle_target, damp(8));\n    player_legs_speed = lerpDamp(player_legs_speed, movAmount, 10);\n\n    forward = movAmount * abs(forward) * Math.sin(movAngle);\n    strafe = movAmount * abs(strafe) * Math.cos(movAngle);\n\n    // ------- read collision renderBuffer -------\n\n    // gl.finish();\n    gl.readPixels(0, 0, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE, gl.RGBA, gl.UNSIGNED_BYTE, collision_buffer);\n    // gl.invalidateFramebuffer(gl.READ_FRAMEBUFFER, [gl.COLOR_ATTACHMENT0, gl.DEPTH_ATTACHMENT]);\n    // gl.invalidateFramebuffer(gl.DRAW_FRAMEBUFFER, [gl.COLOR_ATTACHMENT0, gl.DEPTH_ATTACHMENT]);\n\n    // ------- process collision renderBuffer -------\n\n    NO_INLINE(doVerticalCollisions)();\n    NO_INLINE(doHorizontalCollisions)();\n\n    let playerSpeedCollision = clamp(1 - max(abs(player_mov_x), abs(player_mov_z)) * 5);\n\n    player_speed = lerpDamp(\n      player_speed,\n      player_has_ground * playerSpeedCollision * clamp(2 * movAmount) * 7,\n      player_has_ground ? (playerSpeedCollision > 0.1 ? 10 : 5 + 2 * movAmount) : 1,\n    );\n\n    player_collision_velocity_x = lerpDamp(player_collision_velocity_x, 0, player_has_ground ? 8 : 4);\n    player_collision_velocity_z = lerpDamp(player_collision_velocity_z, 0, player_has_ground ? 8 : 4);\n\n    if (currentModelId) {\n      playerSpeedCollision = 0;\n    }\n\n    const dirAngle = player_first_person ? (180 - camera_rotation.y) * DEG_TO_RAD : 0;\n\n    player_mov_x +=\n      gameTimeDelta *\n      (playerSpeedCollision * player_collision_velocity_x +\n        player_speed * (strafe * Math.cos(dirAngle) - forward * Math.sin(dirAngle)));\n\n    player_mov_z +=\n      gameTimeDelta *\n      (playerSpeedCollision * player_collision_velocity_z +\n        player_speed * (strafe * Math.sin(dirAngle) + forward * Math.cos(dirAngle))); //* player_speed * abs(input_forward)\n\n    let referenceMatrix = getReferenceMatrix();\n\n    const { x, y, z } =\n      player_respawned > 1\n        ? levers[player_last_pulled_lever]!._locMatrix().transformPoint({\n            x: 0,\n            y: player_last_pulled_lever || firstBoatLerp > 0.9 ? 15 : 1,\n            z: PLAYER_RESPAWN_Z,\n          })\n        : playerMovedGlobalPos(referenceMatrix);\n\n    if (currentModelId) {\n      player_collision_velocity_x = (x - player_position_final.x) / gameTimeDelta;\n      player_collision_velocity_z = (z - player_position_final.z) / gameTimeDelta;\n    }\n\n    player_position_final.x = x;\n    player_position_final.y = y;\n    player_position_final.z = z;\n\n    if (player_respawned) {\n      player_respawned = player_has_ground && currentModelId ? 0 : 1;\n    }\n\n    if (player_respawned || currentModelId !== oldModelId) {\n      if (DEBUG && currentModelId !== oldModelId) {\n        console.log(\"modelId: \" + oldModelId + \" -> \" + currentModelId);\n      }\n\n      oldModelId = currentModelId;\n      referenceMatrix = getReferenceMatrix();\n\n      const v = referenceMatrix.inverse().transformPoint(player_position_final);\n      player_position_global.x = v.x;\n      player_position_global.y = v.y;\n      player_position_global.z = v.z;\n    }\n\n    // Special handling for the rotating platforms, better camera for mobile that allows to see more\n    player_on_rotating_platforms = lerpDamp(\n      player_on_rotating_platforms,\n      shouldRotatePlatforms *\n        ((currentModelId > MODEL_ID_ROTATING_PLATFORM - 1 && currentModelId < MODEL_ID_ROTATING_PLATFORM + 4) as any),\n      2,\n    );\n\n    if (y < (x < -20 || z < 109 ? -25 : -9)) {\n      // Player fell in lava\n      player_collision_velocity_x = player_collision_velocity_z = player_speed = 0;\n      player_respawned = 2;\n    }\n\n    // Special handling for the second boat (lever 7) - the boat must be on the side of the map the player is\n    if (currentModelId === 1) {\n      levers[9]!.$value = x < -15 && z < 0 ? 1 : 0;\n    }\n\n    player_model_y = lerp(lerpDamp(player_model_y, y, 2), y, player_respawned || abs(player_model_y - y) * 8);\n    camera_pos_lookat_y = interpolate_with_hysteresis(camera_pos_lookat_y, player_model_y, 2, 1);\n    camera_pos_lookat_x = interpolate_with_hysteresis(camera_pos_lookat_x, x, 0.5, 1);\n    camera_pos_lookat_z = interpolate_with_hysteresis(camera_pos_lookat_z, z, 0.5, 1);\n\n    if (!DEBUG_CAMERA) {\n      if (player_first_person) {\n        const d = player_respawned + damp(18);\n        camera_position_x = lerp(camera_position_x, x, d);\n        camera_position_y = lerp(camera_position_y, player_model_y + 1.5, d);\n        camera_position_z = lerp(camera_position_z, z, d);\n        camera_rotation.y = angle_wrap_degrees(camera_rotation.y);\n      } else {\n        camera_position_y = interpolate_with_hysteresis(\n          camera_position_y,\n          max(\n            camera_pos_lookat_y + clamp((-60 - z) / 8, 0, 20) + CAMERA_PLAYER_Y_DIST + player_on_rotating_platforms * 9,\n            6,\n          ),\n          4,\n          2,\n        );\n\n        camera_position_z = interpolate_with_hysteresis(\n          camera_position_z,\n          camera_pos_lookat_z + CAMERA_PLAYER_Z_DIST + player_on_rotating_platforms * 5,\n          1,\n          2 + player_on_rotating_platforms,\n        );\n\n        camera_position_x = interpolate_with_hysteresis(\n          camera_position_x,\n          camera_pos_lookat_x,\n          1,\n          2 + player_on_rotating_platforms,\n        );\n\n        const viewDirDiffz = min(CAMERA_PLAYER_Z_DIST / 3, -abs(camera_pos_lookat_z - camera_position_z));\n        const viewDirDiffx = camera_pos_lookat_x - camera_position_x;\n\n        // camera_rotation.y = 90 - angle_wrap_degrees(Math.atan2(viewDirDiffz, viewDirDiffx) / DEG_TO_RAD);\n        // camera_rotation.x =\n        //   90 - Math.atan2(Math.hypot(viewDirDiffz, viewDirDiffx), camera_position_y - camera_pos_lookat_y) / DEG_TO_RAD;\n\n        camera_rotation.y = angle_lerp_degrees(\n          camera_rotation.y,\n          90 - angle_wrap_degrees(Math.atan2(viewDirDiffz, viewDirDiffx) / DEG_TO_RAD),\n          boot + damp(10),\n        );\n\n        camera_rotation.x = angle_lerp_degrees(\n          camera_rotation.x,\n          90 - Math.atan2(Math.hypot(viewDirDiffz, viewDirDiffx), camera_position_y - camera_pos_lookat_y) / DEG_TO_RAD,\n          boot + damp(10),\n        );\n      }\n\n      camera_rotation.x = clamp(camera_rotation.x, -87, 87);\n    }\n\n    boot = 0;\n\n    matrix.translateSelf(x, player_model_y + 0.124, z).rotateSelf(0, player_look_angle);\n  };\n\n  [MODEL_ID_PLAYER_LEG1, MODEL_ID_PLAYER_LEG0].map(\n    (modelId, i) =>\n      (allModels[modelId]!._update = (matrix: DOMMatrix) =>\n        matrixCopy(allModels[MODEL_ID_PLAYER_BODY]!.$matrix, matrix)\n          .translateSelf(\n            0,\n            player_legs_speed * clamp(Math.sin(gameTime * PLAYER_LEGS_VELOCITY - Math.PI * i - Math.PI / 2) * 0.45),\n          )\n          .rotateSelf(\n            player_legs_speed * Math.sin(gameTime * PLAYER_LEGS_VELOCITY - Math.PI * i) * (0.25 / DEG_TO_RAD),\n            0,\n          )),\n  );\n};\n","import { gl } from \"./gl\";\n\nexport interface WebglProgramAbstraction {\n  (name: string): WebGLUniformLocation;\n  (): void;\n}\n\nexport const loadShader = (source: string, type: number = gl.VERTEX_SHADER): WebGLShader => {\n  const shader = gl.createShader(type)!;\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (DEBUG && !gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    throw new Error(\"An error occurred compiling the shaders: \" + gl.getShaderInfoLog(shader));\n  }\n\n  return shader;\n};\n\nexport const initShaderProgram = (vertexShader: WebGLShader, sfsSource: string): WebglProgramAbstraction => {\n  const uniforms: Record<string, WebGLUniformLocation> = {};\n  const program = gl.createProgram()!;\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, loadShader(sfsSource, gl.FRAGMENT_SHADER));\n  gl.linkProgram(program);\n\n  if (DEBUG && !gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    throw new Error(\"Unable to initialize the shader program: \" + gl.getProgramInfoLog(program));\n  }\n\n  return (name?: string): any =>\n    name ? uniforms[name] || (uniforms[name] = gl.getUniformLocation(program, name)!) : gl.useProgram(program);\n};\n","import {\n  allModels,\n  levers,\n  souls,\n  MODEL_ID_LEVER,\n  MODEL_ID_PLAYER_BODY,\n  MODEL_ID_PLAYER_LEG0,\n  MODEL_ID_PLAYER_LEG1,\n  type MODEL_ID_SOUL,\n  type MODEL_ID_SOUL_COLLISION,\n} from \"./models\";\nimport { absoluteTime, mainMenuVisible } from \"./game-time\";\nimport { rotation } from \"../math/matrix-transforms\";\nimport { matrixToArray } from \"../math/matrix\";\nimport { gl } from \"../gl\";\nimport { worldMatricesBuffer, objectsMatricesBuffer } from \"./models-matrices\";\n\nexport const renderModels = (\n  worldMatrixLoc: WebGLUniformLocation,\n  renderPlayer: 0 | 1 | boolean,\n  soulModelId: typeof MODEL_ID_SOUL | typeof MODEL_ID_SOUL_COLLISION,\n) => {\n  if (mainMenuVisible) {\n    const matrix = rotation(0, Math.sin(absoluteTime) * 40 - 70);\n\n    matrixToArray(matrix, worldMatricesBuffer, MODEL_ID_PLAYER_BODY);\n    matrixToArray(matrix, worldMatricesBuffer, MODEL_ID_PLAYER_LEG0);\n    matrixToArray(matrix, worldMatricesBuffer, MODEL_ID_PLAYER_LEG1);\n\n    gl.uniformMatrix4fv(worldMatrixLoc, false, worldMatricesBuffer);\n    gl.drawElements(\n      gl.TRIANGLES,\n      allModels[MODEL_ID_PLAYER_LEG1]!.$vertexEnd! - allModels[MODEL_ID_PLAYER_BODY]!.$vertexBegin!,\n      gl.UNSIGNED_SHORT,\n      allModels[MODEL_ID_PLAYER_BODY]!.$vertexBegin! * 2,\n    );\n\n    return;\n  }\n\n  // Render world\n\n  gl.uniformMatrix4fv(worldMatrixLoc, false, worldMatricesBuffer);\n\n  gl.drawElements(\n    gl.TRIANGLES,\n    (renderPlayer ? allModels[MODEL_ID_PLAYER_LEG1]!.$vertexEnd! : allModels[MODEL_ID_PLAYER_BODY]!.$vertexBegin!) - 3,\n    gl.UNSIGNED_SHORT,\n    3 * 2,\n  );\n\n  gl.uniformMatrix4fv(worldMatrixLoc, false, objectsMatricesBuffer);\n\n  // Render souls\n\n  gl.drawElementsInstanced(\n    gl.TRIANGLES,\n    allModels[soulModelId]!.$vertexEnd! - allModels[soulModelId]!.$vertexBegin!,\n    gl.UNSIGNED_SHORT,\n    allModels[soulModelId]!.$vertexBegin! * 2,\n    souls.length,\n  );\n\n  // Render levers\n\n  gl.drawElementsInstanced(\n    gl.TRIANGLES,\n    allModels[MODEL_ID_LEVER]!.$vertexEnd! - allModels[MODEL_ID_LEVER]!.$vertexBegin!,\n    gl.UNSIGNED_SHORT,\n    allModels[MODEL_ID_LEVER]!.$vertexBegin! * 2,\n    levers.length,\n  );\n};\n","// shaders\nimport csm_vsSource from \"./shaders/csm-vertex.vert\";\nimport main_vsSource, {\n  uniformName_projectionMatrix,\n  uniformName_viewMatrix,\n  uniformName_worldMatrices,\n} from \"./shaders/main-vertex.vert\";\nimport main_fsSource, {\n  uniformName_viewPos,\n  uniformName_csm_matrix0,\n  uniformName_csm_matrix1,\n  uniformName_csm_texture0,\n  uniformName_csm_texture1,\n  uniformName_groundTexture,\n  constDef_CSM_TEXTURE_SIZE as CSM_TEXTURE_SIZE,\n  constDef_CSM_PLANE_DISTANCE as CSM_PLANE_DISTANCE,\n} from \"./shaders/main-fragment.frag\";\nimport collider_fsSource from \"./shaders/collider-fragment.frag\";\nimport void_fsSource from \"./shaders/void-fragment.frag\";\nimport sky_vsSource from \"./shaders/sky-vertex.vert\";\nimport sky_fsSource, { uniformName_iResolution } from \"./shaders/sky-fragment.frag\";\n\nimport { max, min } from \"./math/math\";\nimport { allModels, levers, MODEL_ID_SOUL, MODEL_ID_SOUL_COLLISION, player_position_final, souls } from \"./game/models\";\nimport { camera_rotation, worldStateUpdate } from \"./game/world-state\";\n// import { csm_buildMatrix } from \"./csm\";\nimport { initPage, csm_projections, player_first_person, projection, resetInteractPressed, updateInput } from \"./page\";\nimport { COLLISION_TEXTURE_SIZE, player_init, camera_position_x, camera_position_y, camera_position_z } from \"./player\";\nimport { gl } from \"./gl\";\nimport { loadShader, initShaderProgram } from \"./shaders-utils\";\nimport type { Vec3 } from \"./math/vectors\";\nimport { integers_map } from \"./math/integers-map\";\nimport { identity, matrixCopy, matrixToArray, tempMatrix } from \"./math/matrix\";\nimport { mat_perspective, zFar, zNear } from \"./math/matrix-perspective\";\nimport { renderModels } from \"./game/models-render\";\nimport { gameTimeUpdate, gameTimeDelta, mainMenuVisible, absoluteTime } from \"./game/game-time\";\nimport { worldMatricesBuffer } from \"./game/models-matrices\";\n\nconst LIGHT_ROT_X = 298;\nconst LIGHT_ROT_Y = 139;\n\nexport const startMainLoop = (groundTextureImage: HTMLImageElement) => {\n  const camera_view = new DOMMatrix();\n  const mainVertexShader = loadShader(main_vsSource);\n  const csmShader = initShaderProgram(loadShader(csm_vsSource), void_fsSource);\n  const skyShader = initShaderProgram(loadShader(sky_vsSource), sky_fsSource);\n  const collisionShader = initShaderProgram(mainVertexShader, collider_fsSource);\n  const mainShader = initShaderProgram(mainVertexShader, main_fsSource);\n\n  const csm_lightSpaceMatrices = [new Float32Array(16), new Float32Array(16)];\n\n  const csm_tempMatrix = new DOMMatrix();\n  const csm_tempFrustumCorners: Vec3[] = integers_map(8, () => ({} as Vec3));\n\n  const csm_render = integers_map(2, (split: number) => {\n    const texture = gl.createTexture()!;\n    gl.activeTexture(gl.TEXTURE0 + split);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.DEPTH_COMPONENT24,\n      CSM_TEXTURE_SIZE,\n      CSM_TEXTURE_SIZE,\n      0,\n      gl.DEPTH_COMPONENT,\n      gl.UNSIGNED_INT,\n      null,\n    );\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, gl.LEQUAL); // Can be LESS or LEQUAL\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\n    return (roundingRadius: number) => {\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, texture, 0);\n      gl.clear(gl.DEPTH_BUFFER_BIT);\n\n      matrixCopy()\n        .scale3dSelf(roundingRadius)\n        .multiplySelf(matrixCopy(csm_projections[split], csm_tempMatrix).multiplySelf(camera_view).invertSelf());\n\n      let tx = 0;\n      let ty = 0;\n      let tz = 0;\n\n      for (let i = 0; i < 8; ++i) {\n        const p = csm_tempFrustumCorners[i]!;\n        p.x = 4 & i ? 1 : -1;\n        p.y = 2 & i ? 1 : -1;\n        p.z = 1 & i ? 1 : -1;\n        const v = tempMatrix.transformPoint(p);\n        // Round to reduce shimmering\n        tx -= p.x = (v.x | 0) / (roundingRadius * v.w);\n        ty -= p.y = (v.y | 0) / (roundingRadius * v.w);\n        tz -= p.z = (v.z | 0) / (roundingRadius * v.w);\n      }\n\n      matrixCopy()\n        .rotateSelf(LIGHT_ROT_X, LIGHT_ROT_Y)\n        .translateSelf(tx / 8, ty / 8, tz / 8);\n\n      let left = Infinity;\n      let right = -Infinity;\n      let bottom = Infinity;\n      let top = -Infinity;\n      let near = Infinity;\n      let far = -Infinity;\n\n      // Compute the frustum bouding box\n      for (let i = 0; i < 8; ++i) {\n        const { x, y, z } = tempMatrix.transformPoint(csm_tempFrustumCorners[i]);\n        left = min(left, x);\n        right = max(right, x);\n        bottom = min(bottom, y);\n        top = max(top, y);\n        near = min(near, z);\n        far = max(far, z);\n      }\n\n      const zMultiplier = 10 + split;\n      near *= near < 0 ? zMultiplier : 1 / zMultiplier;\n      far *= far > 0 ? zMultiplier : 1 / zMultiplier;\n\n      // Build the ortographic matrix, multiply it with the light space view matrix.\n\n      gl.uniformMatrix4fv(\n        csmShader(uniformName_viewMatrix),\n        false,\n        matrixToArray(\n          matrixCopy(identity, csm_tempMatrix)\n            .scaleSelf(2 / (right - left), 2 / (top - bottom), 2 / (near - far))\n            .translateSelf((right + left) / -2, (top + bottom) / -2, (near + far) / 2)\n            .multiplySelf(tempMatrix),\n          csm_lightSpaceMatrices[split],\n        ),\n      );\n\n      renderModels(csmShader(uniformName_worldMatrices), !player_first_person, MODEL_ID_SOUL);\n    };\n  });\n\n  const csm_framebuffer = gl.createFramebuffer();\n\n  const collision_texture = gl.createTexture()!;\n  const collision_renderBuffer = gl.createRenderbuffer();\n  const collision_frameBuffer = gl.createFramebuffer()!;\n\n  const mainLoop = (globalTime: number) => {\n    gl.flush();\n\n    requestAnimationFrame(mainLoop);\n\n    gameTimeUpdate(globalTime);\n\n    if (gameTimeDelta > 0) {\n      worldStateUpdate();\n\n      updateInput();\n\n      for (const model of allModels) {\n        if (model.$kind) {\n          if (model._update) {\n            model._update(matrixCopy(identity, model.$matrix));\n          }\n          matrixToArray(model.$matrix, worldMatricesBuffer, model.$modelId - 1);\n        }\n      }\n\n      for (const lever of levers) {\n        lever._update();\n      }\n\n      for (const soul of souls) {\n        soul._update();\n      }\n\n      // *** COLLISION RENDERER ***\n\n      collisionShader();\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n      gl.viewport(0, 0, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE);\n\n      // first collision render\n\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      gl.colorMask(true, false, true, false);\n\n      const { x, y, z } = player_position_final;\n\n      gl.uniformMatrix4fv(\n        collisionShader(uniformName_viewMatrix),\n        false,\n        matrixToArray(\n          matrixCopy()\n            .rotateSelf(0, 180)\n            .invertSelf()\n            .translateSelf(-x, -y, 0.3 - z),\n        ),\n      );\n      renderModels(collisionShader(uniformName_worldMatrices), 0, MODEL_ID_SOUL_COLLISION);\n\n      // second collision render\n\n      gl.clear(gl.DEPTH_BUFFER_BIT);\n      gl.colorMask(false, true, true, false);\n      gl.uniformMatrix4fv(\n        collisionShader(uniformName_viewMatrix),\n        false,\n        matrixToArray(matrixCopy().translateSelf(-x, -y, -z - 0.3)),\n      );\n      renderModels(collisionShader(uniformName_worldMatrices), 0, MODEL_ID_SOUL_COLLISION);\n\n      // Flushing collision render\n      gl.flush();\n    }\n\n    // Reset interact button\n    resetInteractPressed();\n\n    // view camera\n\n    matrixCopy(identity, camera_view);\n\n    if (mainMenuVisible) {\n      camera_view.rotateSelf(-20, -90).invertSelf().translateSelf(5, -2, -3.4);\n    } else {\n      camera_view\n        .rotateSelf(-camera_rotation.x, -camera_rotation.y)\n        .invertSelf()\n        .translateSelf(-camera_position_x, -camera_position_y, -camera_position_z);\n    }\n\n    // *** CASCADED SHADOWMAPS ***\n\n    csmShader();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, csm_framebuffer);\n    gl.viewport(0, 0, CSM_TEXTURE_SIZE, CSM_TEXTURE_SIZE);\n\n    csm_render[0]!((CSM_PLANE_DISTANCE - zNear) * 1.1);\n    csm_render[1]!((zFar - CSM_PLANE_DISTANCE) * 1.1);\n\n    // *** MAIN RENDER ***\n\n    mainShader();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n    gl.colorMask(true, true, true, true);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    gl.uniformMatrix4fv(mainShader(uniformName_projectionMatrix), false, matrixToArray(projection));\n    gl.uniformMatrix4fv(mainShader(uniformName_viewMatrix), false, matrixToArray(camera_view));\n    gl.uniformMatrix4fv(mainShader(uniformName_csm_matrix0), false, csm_lightSpaceMatrices[0]!);\n    gl.uniformMatrix4fv(mainShader(uniformName_csm_matrix1), false, csm_lightSpaceMatrices[1]!);\n    gl.uniform3f(mainShader(uniformName_viewPos), camera_position_x, camera_position_y, camera_position_z);\n\n    renderModels(mainShader(uniformName_worldMatrices), !player_first_person, MODEL_ID_SOUL);\n\n    // *** SKY RENDER ***\n\n    skyShader();\n\n    gl.uniform3f(skyShader(uniformName_iResolution), gl.drawingBufferWidth, gl.drawingBufferHeight, absoluteTime);\n    gl.uniform3f(skyShader(uniformName_viewPos), camera_position_x, camera_position_y, camera_position_z);\n    gl.uniformMatrix4fv(skyShader(uniformName_viewMatrix), false, matrixToArray(matrixCopy(camera_view).invertSelf()));\n\n    gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 0);\n\n    // Prepare for collision reading on next frame.\n    // Flushing here increase the chance of the GPU finishing the rendering before we read the texture.\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n    gl.flush();\n  };\n\n  collisionShader();\n  gl.uniformMatrix4fv(\n    collisionShader(uniformName_projectionMatrix),\n    false,\n    matrixToArray(mat_perspective(0.0001, 1, 1.4, 0.59)),\n  );\n\n  mainShader();\n  gl.uniform1i(mainShader(uniformName_groundTexture), 2);\n  gl.uniform1i(mainShader(uniformName_csm_texture1), 1);\n  gl.uniform1i(mainShader(uniformName_csm_texture0), 0);\n\n  skyShader();\n  gl.uniform1i(skyShader(uniformName_groundTexture), 2);\n\n  // Shadows framebuffer\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, csm_framebuffer);\n  // Disable rendering to the csm color buffer, we just need the depth buffer\n  gl.drawBuffers([gl.NONE]);\n  gl.readBuffer(gl.NONE);\n\n  // Collision framebuffer\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, collision_frameBuffer);\n  gl.bindRenderbuffer(gl.RENDERBUFFER, collision_renderBuffer);\n\n  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, COLLISION_TEXTURE_SIZE, COLLISION_TEXTURE_SIZE);\n  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, collision_renderBuffer);\n\n  gl.activeTexture(gl.TEXTURE2);\n\n  gl.bindTexture(gl.TEXTURE_2D, collision_texture);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    gl.RGB,\n    COLLISION_TEXTURE_SIZE,\n    COLLISION_TEXTURE_SIZE,\n    0,\n    gl.RGB,\n    gl.UNSIGNED_BYTE,\n    null,\n  );\n\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, collision_texture, 0);\n\n  // Ground texture\n\n  gl.bindTexture(gl.TEXTURE_2D, gl.createTexture());\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1024, 1024, 0, gl.RGBA, gl.UNSIGNED_BYTE, groundTextureImage);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n  gl.generateMipmap(gl.TEXTURE_2D);\n\n  // GL Setup\n\n  gl.enable(gl.DEPTH_TEST); // Enable depth testing\n  gl.enable(gl.CULL_FACE); // Don't render triangle backs\n\n  gl.clearDepth(1); // Clear everything. Default value is 1\n  gl.cullFace(gl.BACK); // Default value is already BACK\n  gl.depthFunc(gl.LEQUAL); // LEQUAL to make sky works\n  gl.clearColor(0, 0, 0, 1);\n\n  NO_INLINE(initPage)();\n\n  NO_INLINE(player_init)();\n\n  requestAnimationFrame(mainLoop);\n};\n","import { plane_fromPolygon } from \"../math/vectors\";\nimport { allModels, MODEL_ID_LEVER, souls, SOULS_COUNT } from \"./models\";\nimport { gl } from \"../gl\";\nimport type { Polygon } from \"../geometry/polygon\";\n\nexport const initTriangleBuffers = () => {\n  if (DEBUG) {\n    console.time(\"initTriangleBuffers\");\n  }\n\n  let polygon: Polygon | undefined;\n\n  const _triangleIndices: number[] = [];\n  const _vertexPositions: number[] = [];\n  const _vertexColors: number[] = [];\n  const _vertexNormals: number[] = [];\n\n  const _vertexInts = new Int32Array(8);\n  const _vertexIntsSmooth = new Int32Array(_vertexInts.buffer, 0, 5);\n  const _vertexFloats = new Float32Array(_vertexInts.buffer);\n  const _vertexMap = new Map<string, number>();\n\n  const getVertex = (i: number): number => {\n    let { x, y, z } = polygon![i]!;\n    _vertexFloats[0] = x;\n    _vertexFloats[1] = y;\n    _vertexFloats[2] = z;\n    const key = \"\" + (polygon!.$smooth ? _vertexIntsSmooth : _vertexInts);\n    let index = _vertexMap.get(key);\n    if (index !== undefined) {\n      x = index * 3;\n      _vertexNormals[x] = (_vertexNormals[x++]! + _vertexInts[5]!) / 2;\n      _vertexNormals[x] = (_vertexNormals[x++]! + _vertexInts[6]!) / 2;\n      _vertexNormals[x] = (_vertexNormals[x]! + _vertexInts[7]!) / 2;\n    } else {\n      _vertexMap.set(key, (index = _vertexMap.size));\n      _vertexPositions.push(x, y, z, _vertexFloats[3]!);\n      _vertexColors.push(_vertexInts[4]!);\n      _vertexNormals.push(_vertexInts[5]!, _vertexInts[6]!, _vertexInts[7]!);\n    }\n    return index;\n  };\n\n  let meshFirstIndex: number = 0;\n\n  for (const model of allModels) {\n    _vertexFloats[3] = model.$modelId === MODEL_ID_LEVER ? -SOULS_COUNT - 1 : model.$kind && model.$modelId;\n    for (polygon of model.$polygons!) {\n      const { x, y, z } = plane_fromPolygon(polygon);\n      _vertexInts[4] = polygon.$color! | 0;\n      _vertexInts[5] = x * 32767;\n      _vertexInts[6] = y * 32767;\n      _vertexInts[7] = z * 32767;\n      for (let i = 2, a = getVertex(0), b = getVertex(1); i < polygon.length; ++i) {\n        _triangleIndices.push(a, b, (b = getVertex(i)));\n      }\n    }\n\n    // free memory\n    model.$polygons = null;\n\n    // write the indices offset and count\n    model.$vertexBegin = meshFirstIndex;\n    model.$vertexEnd = meshFirstIndex = _triangleIndices.length;\n  }\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(_vertexPositions), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ARRAY_BUFFER, new Int16Array(_vertexNormals), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(1, 3, gl.SHORT, true, 0, 0);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ARRAY_BUFFER, new Uint32Array(_vertexColors), gl.STATIC_DRAW);\n  gl.vertexAttribPointer(2, 4, gl.UNSIGNED_BYTE, true, 0, 0);\n\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(_triangleIndices), gl.STATIC_DRAW);\n\n  gl.enableVertexAttribArray(0);\n  gl.enableVertexAttribArray(1);\n  gl.enableVertexAttribArray(2);\n\n  if (DEBUG) {\n    console.timeEnd(\"initTriangleBuffers\");\n    console.table({\n      \"game models\": allModels.filter((m) => !!m.$kind).length,\n      \"all models\": allModels.length,\n      \"vertices\": _vertexMap.size,\n      \"triangles\": _triangleIndices.length / 3,\n      \"indices\": _triangleIndices.length,\n    });\n\n    if (souls.length !== SOULS_COUNT) {\n      throw new Error(\"Souls must be \" + SOULS_COUNT + \" but is \" + souls.length);\n    }\n  }\n};\n","// This music has been exported by SoundBox and modified manually to minify better.\n\n// Beethoven's Piano Sonata No. 14, 3rd movement, readapted by Ryan Malm for this game\n\nexport const song_patterns = '000001234556112341234556011111111112011111111112000001111112'\n\nexport const song_columns = [\n  [ // Columns 0\n    \"(.15:15:=5:=A:=AF=AFIFIMRMRUY(Y(((((((((((((((((((((((((((((M(M(((((((((((((((((((((((((((((R(R(((((((((((((((((((((((((((((U(U\",\n    \"(059<59<A9<AE<AEHAEHMEHMQMQTY(Y\",\n    \"(5:>A:>AF>AFJAFJMFJMRJMRVMRVY(Y\",\n    \"(:?BFFKNRRWZ^(^((:=@FFILRRUX^(^\",\n    \"Q(M(M(O(Q(R(T(Q(T(R(W(U(T(R(Q(N(W((Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(Y(X]\",\n    \"QN(M(N(M(N(M(N(M((((((((((((((((W(Y(Y(Y(Y(Y(Y(Y(Y(((((((((((((((]\",\n  ],\n  [ // Columns 1\n    \".(5(.(5(.(5(.(5(.(5(.(5(.(5(.(5\",\n    \"-(5(-(5(-(5(-(5(-(5(-(5(-(5(-(5\",\n    \",(5(,(5(,(5(,(5(,(5(,(5(,(5(,(5\",\n    \"*(6(*(6(*(6(*(6(*(6(*(6(*(6(*(6\",\n    \"5(E(E(F(H(I(K(H(K(I(N(M(K(I(H(F(A(((((((((((((((((((((((((((((((5(((5(((5(((5(((5(((5(((5(((5\",\n    \"5(6(5(6(5(6(5(6(5((()(((((((((((A(B(A(B(A(B(A(B(A(((5\",\n  ],[ // Columns 2\n    \"9(((9(((9(((9(((9(((9(((9(((9\",\n    \"9(((Q(((Q(((Q\",\n  ],[ // Columns 3\n    \"9(9(9(9(9(9(9(999(9(9(9(999(9(9\",\n    \"9(9(9(9(9(999(9(((((Q\",\n  ],[ // Columns 4\n    \"((((Q(((((((Q(((((((Q(((((((Q\",\n    \"Q((Q((Q((Q((Q((Q((((Q\",\n  ]\n] as const;\n\nexport const song_instruments = [\n  [ // instrument 0\n    69, // OSC1_VOL\n    128, // OSC1_SEMI\n    0, // OSC1_XENV\n    143, // OSC2_VOL\n    128, // OSC2_SEMI\n    0, // OSC2_XENV\n    0, // NOISE_VOL\n    196, // ENV_ATTACK ** 2 * 4\n    100, // ENV_SUSTAIN ** 2 * 4\n    36, // ENV_RELEASE\n    0, // ENV_EXP_DECAY\n    0, // LFO_FREQ\n    149, // FX_FREQ\n    110, // FX_RESONANCE\n    31, // FX_DRIVE\n    47, // FX_PAN_AMT\n    3, // FX_PAN_FREQ\n    56, // FX_DELAY_AMT\n    2, // FX_DELAY_TIME\n    0, // LFO_AMT\n  ],\n  [ // Instrument 1\n    100, // OSC1_VOL\n    128, // OSC1_SEMI\n    0, // OSC1_XENV\n    201, // OSC2_VOL\n    128, // OSC2_SEMI\n    0, // OSC2_XENV\n    0, // NOISE_VOL\n    100, // ENV_ATTACK ** 2 * 4\n    144, // ENV_SUSTAIN ** 2 * 4\n    35, // ENV_RELEASE\n    0, // ENV_EXP_DECAY\n    6, // LFO_FREQ\n    135, // FX_FREQ\n    0, // FX_RESONANCE\n    32, // FX_DRIVE\n    147, // FX_PAN_AMT\n    6, // FX_PAN_FREQ\n    0, // FX_DELAY_AMT\n    6, // FX_DELAY_TIME\n    195, // LFO_AMT\n  ],\n  [ // Instrument 2\n    255, // OSC1_VOL\n    116, // OSC1_SEMI\n    85, // OSC1_XENV\n    255, // OSC2_VOL\n    116, // OSC2_SEMI\n    37, // OSC2_XENV\n    14, // NOISE_VOL\n    64, // ENV_ATTACK ** 2 * 4\n    144, // ENV_SUSTAIN ** 2 * 4\n    73, // ENV_RELEASE\n    99, // ENV_EXP_DECAY\n    0, // LFO_FREQ\n    136, // FX_FREQ\n    15, // FX_RESONANCE\n    32, // FX_DRIVE\n    0, // FX_PAN_AMT\n    0, // FX_PAN_FREQ\n    66, // FX_DELAY_AMT\n    6, // FX_DELAY_TIME\n    0, // LFO_AMT\n  ],\n  [ // Instrument 3\n    0, // OSC1_VOL\n    140, // OSC1_SEMI\n    0, // OSC1_XENV\n    0, // OSC2_VOL\n    140, // OSC2_SEMI\n    0, // OSC2_XENV\n    81, // NOISE_VOL\n    64, // ENV_ATTACK ** 2 * 4\n    400, // ENV_SUSTAIN ** 2 * 4\n    47, // ENV_RELEASE\n    55, // ENV_EXP_DECAY\n    5, // LFO_FREQ\n    239, // FX_FREQ\n    135, // FX_RESONANCE\n    13, // FX_DRIVE\n    176, // FX_PAN_AMT\n    5, // FX_PAN_FREQ\n    16, // FX_DELAY_AMT\n    4, // FX_DELAY_TIME\n    187, // LFO_AMT\n  ],\n  [ // Instrument 4\n    221, // OSC1_VOL\n    128, // OSC1_SEMI\n    64, // OSC1_XENV\n    210, // OSC2_VOL\n    128, // OSC2_SEMI\n    64, // OSC2_XENV\n    255, // NOISE_VOL\n    64, // ENV_ATTACK ** 2 * 4\n    144, // ENV_SUSTAIN ** 2 * 4\n    73, // ENV_RELEASE\n    79, // ENV_EXP_DECAY\n    7, // LFO_FREQ\n    195, // FX_FREQ\n    15, // FX_RESONANCE\n    21, // FX_DRIVE\n    20, // FX_PAN_AMT\n    0, // FX_PAN_FREQ\n    9, // FX_DELAY_AMT\n    3, // FX_DELAY_TIME\n    64, // LFO_AMT\n  ],\n] as const\n\nexport const song_rowLen0 = 5513\n\nexport const song_rowLen1 = 4562\n\nexport const song_rowLen2 = 3891\n\n// Rows per pattern\nexport const song_patternLen = 32\n\n// End pattern\nexport const song_endPattern = 11\n\n// Number of channels\nexport const song_numChannels = 5\n\n","export const loadStep = (fn: () => void) => {\n  // loading dots ...\n  h4.innerHTML += \".\";\n  setTimeout(fn);\n};\n","/* -*- mode: javascript; tab-width: 4; indent-tabs-mode: nil; -*-\n *\n * Copyright (c) 2011-2013 Marcus Geelnard\n *\n * This software is provided 'as-is', without any express or implied\n * warranty. In no event will the authors be held liable for any damages\n * arising from the use of this software.\n *\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n *\n * 1. The origin of this software must not be misrepresented; you must not\n *    claim that you wrote the original software. If you use this software\n *    in a product, an acknowledgment in the product documentation would be\n *    appreciated but is not required.\n *\n * 2. Altered source versions must be plainly marked as such, and must not be\n *    misrepresented as being the original software.\n *\n * 3. This notice may not be removed or altered from any source\n *    distribution.\n *\n */\n\n// WARNING: Source code of the original player was heavily manually modified to reduce bundle size.\n// This player plays only the game song and is modified.\n// This makes this version not compatible with default soundbox songs.\n\nimport { audioContext, songAudioSource } from \"./audio-context\";\nimport {\n  song_endPattern,\n  song_patternLen,\n  song_patterns,\n  song_instruments,\n  song_rowLen0,\n  song_rowLen1,\n  song_rowLen2,\n  song_numChannels,\n  song_columns,\n} from \"./song\";\nimport { loadStep } from \"../load-step\";\n\nconst getnotefreq = (n: number) => 0.003959503758 * 2 ** ((n - 256) / 12);\n\n/** oscillator 0 */\nconst osc_sin = (value: number) => Math.sin(value * Math.PI * 2);\n\n/** oscillator 1 */\nconst osc_square = (value: number) => (value % 1 < 0.5 ? 1 : -1);\n\n/** oscillator 2 */\nconst osc_saw = (value: number) => 2 * (value % 1) - 1;\n\n/** oscillator 3 */\nconst osc_tri = (value: number) => {\n  const v2 = (value % 1) * 4;\n  return v2 < 2 ? v2 - 1 : 3 - v2;\n};\n\nconst SONG_WORDS = song_patternLen * (song_endPattern + 1) * 2;\nconst SONG_TOTAL_WORDS = (song_rowLen0 + song_rowLen1 + song_rowLen2) * SONG_WORDS;\n\nexport const loadSong = (done: () => void) => {\n  let channelIndex = 0;\n\n  const audioBuffer = audioContext.createBuffer(2, SONG_TOTAL_WORDS / 2, 44100);\n  const mixBufferA = audioBuffer.getChannelData(0);\n  const mixBufferB = audioBuffer.getChannelData(1);\n\n  // Load the buffer into the audio source\n  songAudioSource.buffer = audioBuffer;\n\n  // Loop forever\n  songAudioSource.loop = true;\n\n  const next = () => {\n    // Generate audio data for a single track/channel.\n    let mixIndex = 0;\n\n    const COLUMNS = song_columns[channelIndex]!;\n    const [\n      OSC1_VOL,\n      OSC1_SEMI,\n      OSC1_XENV,\n      OSC2_VOL,\n      OSC2_SEMI,\n      OSC2_XENV,\n      NOISE_VOL,\n      ENV_ATTACK,\n      ENV_SUSTAIN,\n      _ENV_RELEASE,\n      ENV_EXP_DECAY,\n      LFO_FREQ,\n      FX_FREQ,\n      FX_RESONANCE,\n      FX_DRIVE,\n      FX_PAN_AMT,\n      FX_PAN_FREQ,\n      FX_DELAY_AMT,\n      FX_DELAY_TIME,\n      LFO_AMT,\n    ] = song_instruments[channelIndex]!;\n\n    const ENV_RELEASE = _ENV_RELEASE ** 2 * 4;\n\n    const make = (song_rowLen: number) => {\n      const createNote = (note: number) => {\n        const OSC1_WAVEFORM = channelIndex < 2 ? osc_saw : osc_sin;\n        const OSC2_WAVEFORM = channelIndex < 2 ? (channelIndex < 1 ? osc_square : osc_tri) : osc_sin;\n\n        // Re-trig oscillators\n        let c1 = 0;\n        let c2 = 0;\n\n        // Local variables.\n        let o1t: number;\n        let o2t: number;\n\n        const noteBuf = new Int32Array(ENV_ATTACK + ENV_SUSTAIN + ENV_RELEASE);\n\n        // Generate one note (attack + sustain + release)\n        for (let j1 = 0, j2 = 0; j1 < ENV_ATTACK + ENV_SUSTAIN + ENV_RELEASE; ++j1, ++j2) {\n          let e = 1;\n          // Envelope\n          if (j1 < ENV_ATTACK) {\n            e = j1 / ENV_ATTACK;\n          } else if (j1 >= ENV_ATTACK + ENV_SUSTAIN) {\n            e = (j1 - ENV_ATTACK - ENV_SUSTAIN) / ENV_RELEASE;\n            e = (1 - e) * 3 ** ((-ENV_EXP_DECAY / 16) * e);\n          }\n\n          if (j2 >= 0) {\n            // Switch arpeggio note.\n            j2 -= song_rowLen * 4;\n\n            // Calculate note frequencies for the oscillators\n            o1t = getnotefreq(note + OSC1_SEMI);\n            o2t = getnotefreq(note + OSC2_SEMI) * (1 + (channelIndex ? 0 : 0.0008 * 9));\n          }\n\n          // Add to (mono) channel buffer\n          noteBuf[j1] =\n            (80 * // Oscillator 1\n              (OSC1_WAVEFORM((c1 += o1t! * e ** (OSC1_XENV / 32))) * OSC1_VOL +\n                // Oscillator 2\n                OSC2_WAVEFORM((c2 += o2t! * e ** (OSC2_XENV / 32))) * OSC2_VOL +\n                // Noise oscillator\n                (NOISE_VOL ? (Math.random() * 2 - 1) * NOISE_VOL : 0)) *\n              e) |\n            0;\n        }\n        return noteBuf;\n      };\n\n      // Local variables\n      let n;\n      let t;\n      let f;\n\n      // Clear effect state\n      let low = 0;\n      let band = 0;\n      let high;\n      let filterActive: boolean | undefined;\n\n      const noteCache = [];\n      const chnBuf = new Int32Array(song_rowLen * SONG_WORDS);\n\n      const lfoFreq = 2 ** (LFO_FREQ - 9) / song_rowLen;\n      const panFreq = (Math.PI * 2 ** (FX_PAN_FREQ - 8)) / song_rowLen;\n      const dly = (FX_DELAY_TIME * song_rowLen) & ~1; // Must be an even number\n\n      // Patterns\n      for (let p = 0; p <= song_endPattern; ++p) {\n        // Pattern rows\n        for (let row = 0, cp = +song_patterns[channelIndex * 12 + p]!; row < song_patternLen; ++row) {\n          // Calculate start sample number for this row in the pattern\n          const rowStartSample = (p * song_patternLen + row) * song_rowLen;\n\n          // Generate notes for this pattern row\n          for (let col = 0; col < 4; ++col) {\n            n = 0;\n            if (cp) {\n              n = COLUMNS[cp - 1]!.charCodeAt(row + col * song_patternLen) - 40;\n              n += n > 0 ? 106 : 0;\n            }\n            if (n) {\n              const noteBuf = noteCache[n] || (noteCache[n] = createNote(n));\n              for (let j = 0, i = rowStartSample * 2; j < noteBuf.length; ++j, i += 2) {\n                chnBuf[i] += noteBuf[j]!;\n              }\n            }\n          }\n\n          // Perform effects for this pattern row\n          for (let j = 0, rsample; j < song_rowLen; ++j) {\n            // Dry mono-sample\n            let k = (rowStartSample + j) * 2;\n            let lsample = 0;\n            rsample = chnBuf[k]!;\n\n            // We only do effects if we have some sound input\n            if (rsample || filterActive) {\n              // State variable filter\n              f = FX_FREQ * ((43.23529 * 3.141592) / 44100);\n              if (channelIndex === 1 || channelIndex === 4) {\n                f *= (osc_sin(lfoFreq * k) * LFO_AMT) / 512 + 0.5;\n              }\n              f = 1.5 * Math.sin(f);\n              low += f * band;\n              high = (1 - FX_RESONANCE / 255) * (rsample - band) - low;\n              band += f * high;\n              rsample = channelIndex === 4 ? band : channelIndex === 3 ? high : low;\n\n              // Distortion\n              if (!channelIndex) {\n                rsample *= 22 * 1e-5;\n                rsample = rsample < 1 ? (rsample > -1 ? osc_sin(rsample / 4) : -1) : 1;\n                rsample /= 22 * 1e-5;\n              }\n\n              // Drive\n              rsample *= FX_DRIVE / 32;\n\n              // Is the filter active (i.e. still audiable)?\n              filterActive = rsample * rsample > 1e-5;\n\n              // Panning\n              t = (Math.sin(panFreq * k) * FX_PAN_AMT) / 512 + 0.5;\n              lsample = rsample * (1 - t);\n              rsample *= t;\n            }\n\n            // Delay is always done, since it does not need sound input\n            if (k >= dly) {\n              // Left channel = left + right[-p] * t\n              lsample += (chnBuf[k - dly + 1]! * FX_DELAY_AMT) / 255;\n\n              // Right channel = right + left[-p] * t\n              rsample += (chnBuf[k - dly]! * FX_DELAY_AMT) / 255;\n            }\n\n            const mixBufferIndex = (mixIndex + k) >> 1;\n\n            mixBufferA[mixBufferIndex] += (chnBuf[k] = lsample) / 65536;\n            mixBufferB[mixBufferIndex] += (chnBuf[++k] = rsample) / 65536;\n          }\n        }\n      }\n\n      mixIndex += song_rowLen * SONG_WORDS;\n    };\n\n    make(song_rowLen0);\n    make(song_rowLen1);\n    make(song_rowLen2);\n\n    loadStep(++channelIndex < song_numChannels ? next : done);\n  };\n\n  loadStep(next);\n};\n","import \"./index.css\";\n\nimport \"./dev-tools/dev-main\";\n\nif (DEBUG) {\n  console.time(\"boot\");\n}\n\nimport groundTextureSvg from \"./groundTexture.svg\";\n\nimport { build_life_the_universe_and_everything } from \"./game/level\";\nimport { startMainLoop } from \"./main-loop\";\nimport { loadGame } from \"./game/world-state\";\nimport { initTriangleBuffers } from \"./game/triangle-buffers\";\nimport { loadSong } from \"./music/music-player\";\nimport { loadStep } from \"./load-step\";\n\nloadStep(() => {\n  let loadStatus = 0;\n  const image = new Image();\n\n  if (DEBUG) {\n    console.time(\"load\");\n  }\n\n  const end = () => {\n    if (++loadStatus === 2) {\n      if (DEBUG) {\n        console.timeEnd(\"load\");\n      }\n\n      if (DEBUG) {\n        console.time(\"startMainLoop\");\n      }\n\n      startMainLoop(image);\n\n      if (DEBUG) {\n        console.timeEnd(\"startMainLoop\");\n      }\n    }\n  };\n\n  image.onload = image.onerror = end;\n  image.src = groundTextureSvg;\n\n  const songLoaded = () => {\n    loadStep(() => {\n      initTriangleBuffers();\n      loadStep(end);\n      loadGame();\n    });\n    build_life_the_universe_and_everything();\n  };\n\n  if (DEBUG_FLAG1) {\n    songLoaded();\n  } else {\n    NO_INLINE(loadSong)(songLoaded);\n  }\n\n  if (DEBUG) {\n    console.timeEnd(\"boot\");\n  }\n});\n"],"names":["code","CSM_PLANE_DISTANCE","CSM_TEXTURE_SIZE","main_vsSource","csm_vsSource","void_fsSource","sky_vsSource","sky_fsSource","main_fsSource"],"mappings":"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"}